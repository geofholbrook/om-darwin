; OM File Header - Saved 2015/06/21 23:23:34
; (6.1 :patc (om-make-point 10 10) (om-make-point 154 52) (om-make-point 729 900) "" 183 0 "2015/06/21 22:14:36" "2015/06/21 23:23:34")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "0d. generative and descriptive patches (altered)" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 504 190) (quote "1. add ga-engine$$2. replace om-random with om-gene$$3. add define-species function, put in lambda mode$$4. give measuring patch a goal of zero, put in lambda mode$$") "" (om-make-point 75 49) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 120 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 73 621) (om-make-point 509 179) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 217 124 120 147 133 183 167 169 11 15 245 108 124 114 172 244 20 251 85 0 124 70 131 243 234 194 120 44 255 124 34 148 93 232 108 89 248 114 177 60 125 255 55 187 249 176 87 108 85 5 168 197 65 138 111 219 96 255 222 175 27 92 73 142) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 217 124 120 147 133 183 167 169 11 15 245 108 124 114 172 244 20 251 85 0 124 70 131 243 234 194 120 44 255 124 34 148 93 232 108 89 248 114 177 60 125 255 55 187 249 176 87 108 85 5 168 197 65 138 111 219 96 255 222 175 27 92 73 142)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.26320004 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 183 198 126 47 32 210 241 58 80 211 167 196 107 44 178 24 6 116 105 114 179 72 92 39 69 51 190 167 21 207 137 90 41 221 202 73 116 176 200 25 6 88 216 144 52 36 228 28 114 178 34 70 2 42 39 74 132 193 252 216 121 144 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 183 198 126 47 32 210 241 58 80 211 167 196 107 44 178 24 6 116 105 114 179 72 92 39 69 51 190 167 21 207 137 90 41 221 202 73 116 176 200 25 6 88 216 144 52 36 228 28 114 178 34 70 2 42 39 74 132 193 252 216 121 144 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.26390004 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 174 213 180 41 32 204 208 241 44 55 80 193 137 53 52 219 248 105 3 75 200 132 254 252 87 255 247 134 129 174 146 156 83 218 28 73 116 176 200 25 6 217 213 147 52 189 75 28 114 178 205 70 2 42 39 74 132 193 111 216 79 144 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 213 180 41 32 204 208 241 44 55 80 193 137 53 52 219 248 105 3 75 200 132 254 252 87 255 247 134 129 174 146 156 83 218 28 73 116 176 200 25 6 217 213 147 52 189 75 28 114 178 205 70 2 42 39 74 132 193 111 216 79 144 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.26470006 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 174 213 213 179 32 150 166 124 244 107 41 193 80 140 58 147 3 116 90 255 251 111 143 156 189 51 190 125 69 174 137 153 35 191 28 199 218 20 179 25 84 109 54 81 73 81 114 25 78 40 208 10 191 42 42 2 222 187 51 144 4 72 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 213 213 179 32 150 166 124 244 107 41 193 80 140 58 147 3 116 90 255 251 111 143 156 189 51 190 125 69 174 137 153 35 191 28 199 218 20 179 25 84 109 54 81 73 81 114 25 78 40 208 10 191 42 42 2 222 187 51 144 4 72 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.26540005 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 174 213 213 179 32 150 166 124 244 107 41 193 80 251 178 24 113 111 3 105 182 75 89 210 75 90 25 137 69 174 251 105 104 203 22 73 218 20 179 25 87 109 54 81 28 87 111 73 75 40 61 208 188 42 42 2 222 187 51 51 169 72 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 213 213 179 32 150 166 124 244 107 41 193 80 251 178 24 113 111 3 105 182 75 89 210 75 90 25 137 69 174 251 105 104 203 22 73 218 20 179 25 87 109 54 81 28 87 111 73 75 40 61 208 188 42 42 2 222 187 51 51 169 72 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.26720005 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 129 210 225 77 122 77 194 87 162 115 101 148 254 74 55 114 117 233 69 105 182 75 89 90 75 210 25 137 255 114 170 153 56 203 22 73 152 86 179 25 87 109 54 81 73 84 114 28 75 40 61 208 188 42 42 2 222 187 72 216 4 51 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 129 210 225 77 122 77 194 87 162 115 101 148 254 74 55 114 117 233 69 105 182 75 89 90 75 210 25 137 255 114 170 153 56 203 22 73 152 86 179 25 87 109 54 81 73 84 114 28 75 40 61 208 188 42 42 2 222 187 72 216 4 51 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.26790005 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 129 210 225 77 149 122 122 129 162 115 101 148 254 143 55 114 74 207 114 87 200 132 254 252 87 255 247 134 129 174 146 156 176 218 28 73 116 83 200 25 6 217 216 144 52 189 75 28 114 178 205 70 2 42 39 74 132 193 111 216 79 144 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 129 210 225 77 149 122 122 129 162 115 101 148 254 143 55 114 74 207 114 87 200 132 254 252 87 255 247 134 129 174 146 156 176 218 28 73 116 83 200 25 6 217 216 144 52 189 75 28 114 178 205 70 2 42 39 74 132 193 111 216 79 144 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.27063337 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 204 129 164 32 129 232 58 245 82 55 149 134 140 193 147 3 116 90 255 251 111 143 156 78 51 190 125 69 174 137 153 35 191 28 199 218 20 179 25 84 109 54 81 73 84 114 28 75 40 208 61 191 42 24 2 222 187 252 216 121 144 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 204 129 164 32 129 232 58 245 82 55 149 134 140 193 147 3 116 90 255 251 111 143 156 78 51 190 125 69 174 137 153 35 191 28 199 218 20 179 25 84 109 54 81 73 84 114 28 75 40 208 61 191 42 24 2 222 187 252 216 121 144 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.27133337 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 129 210 213 179 32 180 43 247 251 76 193 149 137 143 52 249 248 48 3 75 254 219 38 252 78 90 190 137 117 90 56 153 38 221 22 73 89 83 218 109 84 10 81 6 130 165 33 28 75 40 61 208 188 42 42 2 222 187 51 216 4 72 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 129 210 213 179 32 180 43 247 251 76 193 149 137 143 52 249 248 48 3 75 254 219 38 252 78 90 190 137 117 90 56 153 38 221 22 73 89 83 218 109 84 10 81 6 130 165 33 28 75 40 61 208 188 42 42 2 222 187 51 216 4 72 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.27213338 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 174 213 213 179 32 150 163 127 250 77 193 137 149 107 55 90 255 116 147 255 251 111 143 174 9 51 190 125 69 174 137 153 191 35 28 199 218 176 200 25 6 88 216 144 52 36 228 34 114 178 28 70 2 42 39 74 132 193 252 216 121 144 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 213 213 179 32 150 163 127 250 77 193 137 149 107 55 90 255 116 147 255 251 111 143 174 9 51 190 125 69 174 137 153 191 35 28 199 218 176 200 25 6 88 216 144 52 36 228 34 114 178 28 70 2 42 39 74 132 193 252 216 121 144 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.27283338 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 174 213 213 179 77 150 166 124 244 107 175 59 80 251 175 27 113 111 3 105 182 75 89 210 75 69 25 137 90 255 170 153 56 203 22 73 218 20 179 25 87 109 54 81 73 84 114 28 75 40 61 208 188 42 42 2 51 187 222 216 4 72 182 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 213 213 179 77 150 166 124 244 107 175 59 80 251 175 27 113 111 3 105 182 75 89 210 75 69 25 137 90 255 170 153 56 203 22 73 218 20 179 25 87 109 54 81 73 84 114 28 75 40 61 208 188 42 42 2 51 187 222 216 4 72 182 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 2076) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700 6200 6900 7200) (5800 6500 7200 7400) (5900 6600 7400 7600) (6200 6700 7600 7800) (6500 7000 7900 5700) (6600 7100 5800 5800) (6800 7400 6100 5900) (7000 7500 6300 6200) (7300 7600 6400 6300) (7500 7700 6600 6500) (7800 7900 6700 6600) (5600 5800 6800 6700) (5900 5900 7000 6900) (6200 6000 7100 7000) (6400 6300 7200 7300) (6500 6400 7400 7500))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 493 277) (om-make-point 38 30) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "measure dissonance (altered)" (om-load-patch-abs1 "measure dissonance (altered)" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "sum differences" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 179 497) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 157 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 151 317) (om-make-point 100 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "goal dissonance" 1 (om-make-point 260 113) "" "goal dissonance" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 0 (om-make-point 99 47) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 127 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 208 470) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ACOUSTIC-DISSONANCE" (quote acoustic-dissonance) (quote ((om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 93 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 562) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 149 568) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 1 1 nil 0) (3 0 4 0 nil 0) (0 0 5 0 nil 0) (4 0 6 0 nil 0) (5 1 7 0 nil 0) (5 0 8 0 nil 0))) 1 "sum differences" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "goal-dissonance" 1 (om-make-point 275 306) "" "goal-dissonance" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 221 226) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 51 164) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 100))) (om-make-point 117 331) (om-make-point 118 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-CHORDS" (quote get-chords) (quote ((om-load-inputfun (quote input-funbox) "a music sequence (voice, chord-seq, poly, multi-seq)" "SELF" nil))) (om-make-point 162 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 101 23) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 214 630) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (7 0 6 0 nil 0) (0 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 483 785)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 356 398) nil (list nil) "l" "measure dissonance (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 215 304) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 98 303) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "generate chord sequence (altered)" (om-load-patch-abs1 "generate chord sequence (altered)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 111 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 151 41) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 92 48) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 1104) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 527 871) (om-make-point 41 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 439 868) (om-make-point 62 43) (list 0 400) "(0 400)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 996) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6400 6700 7200) (6100 6700 6800 7500) (6300 7000 6900 7700) (6600 7200 7200 7800) (6900 7400 7300 7900) (7200 7500 7500 5800) (7300 7600 7600 6000) (7600 7800 7700 6200) (7900 7900 7800 6400) (5700 5600 5700 6700) (6000 5800 5800 6900) (6100 5900 6100 7200) (6300 6100 6200 7400) (6600 6200 6500 7700) (6900 6500 6800 5600) (7100 6800 7000 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1276 325) (om-make-point 198 481) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 343 905) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 430 759) (om-make-point 48 30) 5600 "5600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 5600) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 5600))) (om-make-point 393 837) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 424 659) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 296 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 215 546) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 378 360) (om-make-point 84 30) (list 0 5 10 15) "(0 5 10 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 304 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 407 569) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1))) (om-make-point 337 666) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 123 318) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-voices" 1 (om-make-point 486 68) "" "num-voices" 4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 211 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length" 0 (om-make-point 256 58) "" "length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 219) (om-make-point 140 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (17 1 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 12 1 nil 0) (20 0 15 0 nil 0) (14 0 15 1 nil 0) (12 0 17 0 nil 0) (16 0 17 1 nil 0) (22 0 18 1 nil 0) (18 0 20 0 nil 0) (19 0 20 1 nil 0) (0 0 22 0 nil 0) (21 0 22 1 nil 0))) 6.1 nil "" (om-make-point 989 145) (om-make-point 685 1188)) (quote ((om-load-inputfun (quote input-funbox) "" "length" 16) (om-load-inputfun (quote input-funbox) "" "num-voices" 4))) (om-make-point 69 370) nil (list nil) "l" "generate chord sequence (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (1 0 2 1 nil 0) (3 0 4 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0))) nil 6.1))
