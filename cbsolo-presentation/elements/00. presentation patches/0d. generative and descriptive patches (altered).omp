; OM File Header - Saved 2015/06/22 9:37:10
; (6.1 :patc (om-make-point 10 10) (om-make-point 113 34) (om-make-point 637 840) "" 183 0 "2015/06/21 22:14:36" "2015/06/22 9:37:10")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "0d. generative and descriptive patches (altered)" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 504 190) (quote "1. add ga-engine$$2. replace om-random with om-gene$$3. add define-species function, put in lambda mode$$4. give measuring patch a goal of zero, put in lambda mode$$") "" (om-make-point 75 49) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 120 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 72 621) (om-make-point 509 179) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 117 238 90 177 31 82 14 14 154 156 237 130 207 148 155 121 114 30 50 92 117 57 39 198 108 46 120 71 63 142 100 164 160 145 254 145 152 155 140 49 61 180 255 204 198 2 124 251 208 214 180 201 110 182 27 142 235 175 176 234 169 154 203 217) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 117 238 90 177 31 82 14 14 154 156 237 130 207 148 155 121 114 30 50 92 117 57 39 198 108 46 120 71 63 142 100 164 160 145 254 145 152 155 140 49 61 180 255 204 198 2 124 251 208 214 180 201 110 182 27 142 235 175 176 234 169 154 203 217)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.59639997 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 191 186 89 216 181 242 155 63 199 132 46 178 126 145 94 76 17 55 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 191 186 89 216 181 242 155 63 199 132 46 178 126 145 94 76 17 55 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.6045 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 107 250 168 177 164 19 173 180 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 145 95 75 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 107 250 168 177 164 19 173 180 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 145 95 75 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.6109 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 107 250 168 177 180 19 173 164 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 75 95 145 22 50 1 18 182 146 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 107 250 168 177 180 19 173 164 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 75 95 145 22 50 1 18 182 146 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.6123 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 107 250 168 177 180 19 173 164 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 75 95 145 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 107 250 168 177 180 19 173 164 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 75 95 145 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.6269 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 107 250 164 177 180 19 173 168 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 145 95 75 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 107 250 164 177 180 19 173 168 17 71 61 29 51 127 210 214 77 86 41 157 91 214 63 242 156 107 199 132 51 173 126 145 95 75 22 50 1 146 182 18 66 121 185 199 128 235 84 55 147 184 135 122 83 91 254 232 245 199 89 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.6298999 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 89 157 220 216 181 242 155 63 199 132 46 178 126 145 94 76 22 50 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 89 157 220 216 181 242 155 63 199 132 46 178 126 145 94 76 22 50 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.66099996 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 214 210 77 163 220 157 89 216 181 242 155 63 199 132 46 178 126 145 94 76 22 50 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 214 210 77 163 220 157 89 216 181 242 155 63 199 132 46 178 126 145 94 76 22 50 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.66679997 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 220 157 89 216 181 242 155 63 199 132 46 178 126 145 94 76 17 55 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 220 157 89 216 181 242 155 63 199 132 46 178 126 145 94 76 17 55 1 146 182 18 68 119 185 199 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.6686 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 107 250 168 177 180 19 173 165 17 71 61 29 51 127 214 210 77 86 41 157 91 214 63 242 156 107 199 132 46 178 126 145 95 75 22 50 1 146 182 18 66 125 115 9 128 235 184 147 55 84 135 122 83 91 115 88 245 199 232 254) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 107 250 168 177 180 19 173 165 17 71 61 29 51 127 214 210 77 86 41 157 91 214 63 242 156 107 199 132 46 178 126 145 95 75 22 50 1 146 182 18 66 125 115 9 128 235 184 147 55 84 135 122 83 91 115 88 245 199 232 254)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.6736999 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 220 157 89 216 181 242 156 63 199 132 72 152 126 145 94 76 22 50 1 146 182 18 68 119 81 47 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 74 159 219 46 250 168 177 180 19 173 165 17 71 61 29 51 127 210 214 77 163 220 157 89 216 181 242 156 63 199 132 72 152 126 145 94 76 22 50 1 146 182 18 68 119 81 47 128 235 184 147 84 55 135 122 83 91 254 89 245 204 232 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 11) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800 6200 6800 7400) (6100 6400 7000 7600) (6200 6500 7100 7800) (6300 6700 7300 7900) (6500 7000 7500 5600) (6700 7200 7700 5800) (6800 7500 5600 5900) (6900 7600 5800 6200) (7000 7900 6000 6500) (7200 5600 6300 6700) (7500 5800 6600 7000) (7600 6100 6700 7300) (7900 6400 7000 7600) (5800 6500 7300 7700) (6000 6700 7600 7900) (6300 6800 7800 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 493 277) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "measure dissonance (altered)" (om-load-patch-abs1 "measure dissonance (altered)" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "sum differences" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 179 497) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 157 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 151 317) (om-make-point 100 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "goal dissonance" 1 (om-make-point 260 113) "" "goal dissonance" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 0 (om-make-point 99 47) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 127 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 208 470) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ACOUSTIC-DISSONANCE" (quote acoustic-dissonance) (quote ((om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 93 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 562) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 149 568) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 1 1 nil 0) (3 0 4 0 nil 0) (0 0 5 0 nil 0) (4 0 6 0 nil 0) (5 1 7 0 nil 0) (5 0 8 0 nil 0))) 1 "sum differences" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "goal-dissonance" 1 (om-make-point 275 306) "" "goal-dissonance" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 221 226) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 51 164) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 100))) (om-make-point 117 331) (om-make-point 118 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-CHORDS" (quote get-chords) (quote ((om-load-inputfun (quote input-funbox) "a music sequence (voice, chord-seq, poly, multi-seq)" "SELF" nil))) (om-make-point 162 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 101 23) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 214 630) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (7 0 6 0 nil 0) (0 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 483 785)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 356 398) nil (list nil) "l" "measure dissonance (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 215 304) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 98 303) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "generate chord sequence (altered)" (om-load-patch-abs1 "generate chord sequence (altered)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 111 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 151 41) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 92 48) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 1104) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 527 871) (om-make-point 41 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 439 868) (om-make-point 62 43) (list 0 400) "(0 400)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 996) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6400 6700 7200) (6100 6700 6800 7500) (6300 7000 6900 7700) (6600 7200 7200 7800) (6900 7400 7300 7900) (7200 7500 7500 5800) (7300 7600 7600 6000) (7600 7800 7700 6200) (7900 7900 7800 6400) (5700 5600 5700 6700) (6000 5800 5800 6900) (6100 5900 6100 7200) (6300 6100 6200 7400) (6600 6200 6500 7700) (6900 6500 6800 5600) (7100 6800 7000 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1276 325) (om-make-point 198 481) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 343 905) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 430 759) (om-make-point 48 30) 5600 "5600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 5600) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 5600))) (om-make-point 393 837) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 424 659) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 296 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 215 546) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 378 360) (om-make-point 84 30) (list 0 5 10 15) "(0 5 10 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 304 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 407 569) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1))) (om-make-point 337 666) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 123 318) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-voices" 1 (om-make-point 486 68) "" "num-voices" 4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 211 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length" 0 (om-make-point 256 58) "" "length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 219) (om-make-point 140 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (17 1 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 12 1 nil 0) (20 0 15 0 nil 0) (14 0 15 1 nil 0) (12 0 17 0 nil 0) (16 0 17 1 nil 0) (22 0 18 1 nil 0) (18 0 20 0 nil 0) (19 0 20 1 nil 0) (0 0 22 0 nil 0) (21 0 22 1 nil 0))) 6.1 nil "" (om-make-point 989 145) (om-make-point 685 1188)) (quote ((om-load-inputfun (quote input-funbox) "" "length" 16) (om-load-inputfun (quote input-funbox) "" "num-voices" 4))) (om-make-point 69 370) nil (list nil) "l" "generate chord sequence (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (1 0 2 1 nil 0) (4 0 2 2 nil 0) (3 0 4 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0))) nil 6.1))
