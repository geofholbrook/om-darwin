; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 334 60) (om-make-point 415 133) (om-make-point 1131 850) "" 183 0 "2015/06/21 22:48:29" "2015/06/22 11:24:33")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "1. look inside specimen and ga-engine" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 547 106) (quote "inside the OM-Darwin classes:") "" (om-make-point 94 12) nil (om-make-color 0 0 0) (om-make-font "Futura" 48.0 :family "Futura" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "one iteration" (let ((copy (make-instance (quote omlistinstance) :name "one iteration" :icon 129))) (setf (instance copy) (list (list 10703.619 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 12188.074 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 12839.52 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 13033.845 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 14811.501 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 22773.34 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 23462.176 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 26429.319 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 26919.63 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 30143.797 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/22 10:42:27" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 966 729) "one iteration" (om-make-point 88 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "initial" (let ((copy (make-instance (quote omlistinstance) :name "initial" :icon 129))) (setf (instance copy) (list (list 22773.34 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 123365.414 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 81535.06 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 94850.97 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 136054.33 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 134696.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 85941.91 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 46155.68 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 51212.03 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 77458.81 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype nil :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) nil) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/22 10:42:24" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 988 653) "initial" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHENOTYPE" (quote phenotype) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 224 501) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITERATE" (quote om-darwin::iterate) (quote ((om-load-inputfun (quote input-funbox) "POPULATION" "POPULATION" nil) (om-load-inputfun (quote input-funbox) "CRITERION" "CRITERION" nil))) (om-make-point 645 725) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 648 170) (om-make-point 76 30) (list 500 700) "(500 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 625 246) (om-make-point 138 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 514 666) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 394 428) (om-make-point 543 184) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 42 238 70 104 24 8 216 254 75 102 203 63 52 173 66 248 85 106 187 251 170 168 186 188 48 119 82 186 176 166 254 185 15 203 230 191 140 240 245 211 176 128 168 88 146 61 237 29 72 241 147 47 184 2 227 255 19 80 217 148 200 243 30 22) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 42 238 70 104 24 8 216 254 75 102 203 63 52 173 66 248 85 106 187 251 170 168 186 188 48 119 82 186 176 166 254 185 15 203 230 191 140 240 245 211 176 128 168 88 146 61 237 29 72 241 147 47 184 2 227 255 19 80 217 148 200 243 30 22)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 24) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 248 66 191 138 47 161 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 248 66 191 138 47 161 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 175 174 142 219 95 191 161 124 138 162 149 75 107 243 217 37 22 202 82 202 113 220 71 96 48 56 51 242 253 142 78 212 40 149 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 175 174 142 219 95 191 161 124 138 162 149 75 107 243 217 37 22 202 82 202 113 220 71 96 48 56 51 242 253 142 78 212 40 149 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 218 96 191 161 124 138 162 149 74 108 243 217 37 22 207 203 77 48 220 71 96 113 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 218 96 191 161 124 138 162 149 74 108 243 217 37 22 207 203 77 48 220 71 96 113 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 116 231 178 174 142 219 95 191 161 124 138 162 149 75 107 243 217 37 22 202 82 202 113 220 71 96 48 56 51 242 253 142 78 212 40 149 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 116 231 178 174 142 219 95 191 161 124 138 162 149 75 107 243 217 37 22 202 82 202 113 220 71 96 48 56 51 242 253 142 78 212 40 149 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 183 230 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 149 74 108 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 183 230 245 190 36 43 33 122 97 59 213 47 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 218 96 191 161 124 138 162 149 74 108 243 217 37 22 207 203 77 155 220 71 96 113 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 218 96 191 161 124 138 162 149 74 108 243 217 37 22 207 203 77 155 220 71 96 113 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 2336.1072 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 108 74 149 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 248 66 191 161 47 138 162 108 74 149 243 217 37 22 207 77 203 113 220 76 91 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 40 101 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 2563.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 233 140 63 129 231 116 178 174 142 215 95 191 161 124 138 162 149 74 108 243 217 37 22 207 77 113 203 220 71 96 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 44 97 33 193 121 126 65 169 44 1 151) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 233 140 63 129 231 116 178 174 142 215 95 191 161 124 138 162 149 74 108 243 217 37 22 207 77 113 203 220 71 96 48 56 51 242 253 142 78 212 149 40 117 40 245 190 36 43 33 122 97 59 209 51 44 97 33 193 121 126 65 169 44 1 151)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9))) (setf (om-darwin::generation om-darwin::ga) 50) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700 6200 6900 7400) (6000 6500 7000 7600) (6300 6800 7300 7900) (6400 6900 7500 5800) (6500 7000 7700 5900) (6600 7200 7800 6100) (6900 7400 5700 6400) (7100 7600 6000 6500) (7200 7700 6200 6700) (7400 5600 6300 6900) (7700 5900 6500 7000) (7800 6200 6800 7300) (5700 6400 7000 7500) (6000 6600 7100 7800) (6300 6800 7300 5600) (6400 6900 7400 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "decode raw genotype" (om-load-patch-abs1 "decode raw genotype" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 139 280) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 107 91) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD-TO-RANGE" (quote om-darwin::mod-to-range) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "RANGE" "RANGE" nil))) (om-make-point 50 153) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (3 0 4 1 nil 0))) 6.1 nil "" (om-make-point 197 650) (om-make-point 297 384)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 71 562) nil (list (list 2 2 3 1 3 3 1 3 2 3 2 2 2 2 2 3 1 3 2 1 3 2 2 1 2 3 3 1 2 1 3 3 1 2 3 3 1 3 3 2 1 3 3 1 3 2 3 2 2 1 2 2 2 2 3 2 1 3 2 1 3 1 3 1)) nil "decode raw genotype"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RAW-GENOTYPE" (quote om-darwin::raw-genotype) (quote ((om-load-inputfun (quote input-funbox) "SPECIMEN" "SPECIMEN" nil))) (om-make-point 70 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "generate chord sequence (altered)" (om-load-patch-abs1 "generate chord sequence (altered)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 111 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 151 41) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 92 48) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 1104) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 527 871) (om-make-point 41 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 439 868) (om-make-point 62 43) (list 0 400) "(0 400)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 996) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6400 6700 7200) (6100 6700 6800 7500) (6300 7000 6900 7700) (6600 7200 7200 7800) (6900 7400 7300 7900) (7200 7500 7500 5800) (7300 7600 7600 6000) (7600 7800 7700 6200) (7900 7900 7800 6400) (5700 5600 5700 6700) (6000 5800 5800 6900) (6100 5900 6100 7200) (6300 6100 6200 7400) (6600 6200 6500 7700) (6900 6500 6800 5600) (7100 6800 7000 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 198 481) (om-make-point 1276 325) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 343 905) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 430 759) (om-make-point 48 30) 5600 "5600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 5600) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 5600))) (om-make-point 393 837) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 424 659) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 296 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 215 546) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 378 360) (om-make-point 84 30) (list 0 5 10 15) "(0 5 10 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 304 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 407 569) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1))) (om-make-point 337 666) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 123 318) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-voices" 1 (om-make-point 486 68) "" "num-voices" 4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 211 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length" 0 (om-make-point 256 58) "" "length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 219) (om-make-point 140 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (17 1 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 12 1 nil 0) (20 0 15 0 nil 0) (14 0 15 1 nil 0) (12 0 17 0 nil 0) (16 0 17 1 nil 0) (22 0 18 1 nil 0) (18 0 20 0 nil 0) (19 0 20 1 nil 0) (0 0 22 0 nil 0) (21 0 22 1 nil 0))) 6.1 nil "" (om-make-point 445 89) (om-make-point 684 1188)) (quote ((om-load-inputfun (quote input-funbox) "" "length" 16) (om-load-inputfun (quote input-funbox) "" "num-voices" 4))) (om-make-point 73 218) nil (list nil) "l" "generate chord sequence (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 102 151) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 219 152) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 146 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 3 0 nil 0) (7 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (14 0 8 1 nil 0) (6 0 8 2 nil 0) (10 0 9 0 nil 0) (14 0 10 0 nil 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (11 0 14 0 nil 0))) nil 6.1))
