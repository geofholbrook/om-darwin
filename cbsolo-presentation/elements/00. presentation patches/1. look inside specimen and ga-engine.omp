; OM File Header - Saved 2015/06/21 23:23:34
; (6.1 :patc (om-make-point 334 60) (om-make-point 412 298) (om-make-point 1080 792) "" 183 0 "2015/06/21 22:48:29" "2015/06/21 23:23:34")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "1. look inside specimen and ga-engine" (quote ((let ((box (om-load-boxcall (quote genfun) "PHENOTYPE" (quote phenotype) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 263 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITERATE" (quote om-darwin::iterate) (quote ((om-load-inputfun (quote input-funbox) "POPULATION" "POPULATION" nil) (om-load-inputfun (quote input-funbox) "CRITERION" "CRITERION" nil))) (om-make-point 693 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 647 55) (om-make-point 76 30) (list 500 700) "(500 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 612 122) (om-make-point 138 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 492 532) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 376 314) (om-make-point 543 184) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 202 74 61 105 51 106 224 53 126 168 88 102 88 216 224 216 14 63 215 163 107 251 30 22 163 77 180 25 230 249 6 130 16 20 21 60 71 166 102 254 162 169 97 97 204 24 182 92 128 75 12 199 132 137 78 92 83 126 113 179 134 155 126 74) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 202 74 61 105 51 106 224 53 126 168 88 102 88 216 224 216 14 63 215 163 107 251 30 22 163 77 180 25 230 249 6 130 16 20 21 60 71 166 102 254 162 169 97 97 204 24 182 92 128 75 12 199 132 137 78 92 83 126 113 179 134 155 126 74)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 43527.918 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 3 201 185 164 248 142 106 193 34 175 50 127 167 102 255 162 52 138 153 129 163 2 92 23 222 247 237 158 244 106 99 203 18 147 75 191 28 91 34 127 152 96 5 46 82 184 106 94 104 160 38 145 232 175 208 219 78 241 183 172 199 227 161 71) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 3 201 185 164 248 142 106 193 34 175 50 127 167 102 255 162 52 138 153 129 163 2 92 23 222 247 237 158 244 106 99 203 18 147 75 191 28 91 34 127 152 96 5 46 82 184 106 94 104 160 38 145 232 175 208 219 78 241 183 172 199 227 161 71)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 52499.88 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 148 134 213 184 183 14 146 244 57 167 54 236 11 231 185 71 222 87 162 51 72 110 89 41 209 150 212 20 48 17 142 155 174 100 62 197 83 25 177 126 125 51 29 249 62 52 119 194 77 128 221 21 180 213 47 52 59 246 126 97 173 167 185 38) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 134 213 184 183 14 146 244 57 167 54 236 11 231 185 71 222 87 162 51 72 110 89 41 209 150 212 20 48 17 142 155 174 100 62 197 83 25 177 126 125 51 29 249 62 52 119 194 77 128 221 21 180 213 47 52 59 246 126 97 173 167 185 38)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 69351.12 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 107 9 6 37 239 190 162 166 34 16 95 34 48 88 7 209 202 148 147 190 53 86 212 207 71 203 122 10 111 32 35 87 47 88 96 102 209 201 32 76 113 168 116 10 133 10 12 63 75 221 183 22 219 73 194 56 94 135 87 145 109 198 112 131) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 107 9 6 37 239 190 162 166 34 16 95 34 48 88 7 209 202 148 147 190 53 86 212 207 71 203 122 10 111 32 35 87 47 88 96 102 209 201 32 76 113 168 116 10 133 10 12 63 75 221 183 22 219 73 194 56 94 135 87 145 109 198 112 131)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 56913.16 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 9 150 60 223 17 221 11 223 112 119 77 49 31 147 129 43 1 97 2 141 235 199 178 97 246 162 178 220 255 87 80 26 235 87 184 41 159 192 118 222 24 26 106 54 137 236 193 125 249 67 73 199 199 213 35 129 149 153 60 126 203 85 80 145) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 150 60 223 17 221 11 223 112 119 77 49 31 147 129 43 1 97 2 141 235 199 178 97 246 162 178 220 255 87 80 26 235 87 184 41 159 192 118 222 24 26 106 54 137 236 193 125 249 67 73 199 199 213 35 129 149 153 60 126 203 85 80 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 98967.766 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 103 155 85 30 109 236 128 92 69 216 180 142 137 132 121 55 75 24 127 36 167 106 124 192 83 128 189 47 100 94 118 97 66 234 25 117 71 246 50 144 99 70 235 126 143 255 85 238 188 61 252 187 176 7 200 221 65 55 228 53 118 142 215 59) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 103 155 85 30 109 236 128 92 69 216 180 142 137 132 121 55 75 24 127 36 167 106 124 192 83 128 189 47 100 94 118 97 66 234 25 117 71 246 50 144 99 70 235 126 143 255 85 238 188 61 252 187 176 7 200 221 65 55 228 53 118 142 215 59)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 45721.504 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 250 123 7 21 120 140 57 214 188 32 100 28 133 136 50 193 246 19 153 214 6 56 127 230 150 124 92 110 192 203 57 4 13 226 171 132 221 34 127 53 15 86 134 13 0 92 39 207 96 145 230 78 162 118 0 138 233 192 254 107 91 85 243 47) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 250 123 7 21 120 140 57 214 188 32 100 28 133 136 50 193 246 19 153 214 6 56 127 230 150 124 92 110 192 203 57 4 13 226 171 132 221 34 127 53 15 86 134 13 0 92 39 207 96 145 230 78 162 118 0 138 233 192 254 107 91 85 243 47)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 31051.436 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 186 164 146 138 144 232 197 115 44 188 84 218 245 232 32 103 28 108 43 40 142 249 62 156 79 24 103 180 105 250 132 130 68 99 220 83 15 239 199 175 84 123 202 4 249 200 135 15 22 210 17 190 239 181 62 234 247 102 227 249 182 60 219 18) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 186 164 146 138 144 232 197 115 44 188 84 218 245 232 32 103 28 108 43 40 142 249 62 156 79 24 103 180 105 250 132 130 68 99 220 83 15 239 199 175 84 123 202 4 249 200 135 15 22 210 17 190 239 181 62 234 247 102 227 249 182 60 219 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 30923.516 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 207 164 249 227 232 238 45 132 253 57 78 232 243 218 57 15 205 153 98 178 192 95 88 52 128 76 242 217 181 220 216 120 3 82 227 187 97 74 39 161 170 32 161 119 157 66 43 232 49 235 143 243 185 236 73 169 77 198 163 79 119 173 158 227) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 207 164 249 227 232 238 45 132 253 57 78 232 243 218 57 15 205 153 98 178 192 95 88 52 128 76 242 217 181 220 216 120 3 82 227 187 97 74 39 161 170 32 161 119 157 66 43 232 49 235 143 243 185 236 73 169 77 198 163 79 119 173 158 227)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 72220.55 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 112 137 106 121 123 60 181 202 79 65 181 24 68 127 43 155 184 126 6 85 133 24 230 194 108 37 218 199 101 86 116 113 228 44 183 134 170 19 206 165 13 251 16 115 99 143 17 50 202 43 62 18 246 89 225 109 150 48 3 232 202 154 244 80) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 137 106 121 123 60 181 202 79 65 181 24 68 127 43 155 184 126 6 85 133 24 230 194 108 37 218 199 101 86 116 113 228 44 183 134 170 19 206 165 13 251 16 115 99 143 17 50 202 43 62 18 246 89 225 109 150 48 3 232 202 154 244 80)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 112896.39 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 176 42 183 226 186 174 236 72 51 149 151 16 63 165 219 187 12 202 77 34 16 101 52 220 225 61 142 207 124 145 85 46 165 10 115 208 182 13 135 57 10 95 24 105 72 161 116 19 66 120 153 22 135 167 222 207 195 87 140 102 249 207 108 159) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 176 42 183 226 186 174 236 72 51 149 151 16 63 165 219 187 12 202 77 34 16 101 52 220 225 61 142 207 124 145 85 46 165 10 115 208 182 13 135 57 10 95 24 105 72 161 116 19 66 120 153 22 135 167 222 207 195 87 140 102 249 207 108 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700 6300 6700 7400) (5800 6400 6800 7600) (6100 6500 6900 7900) (6400 6600 7200 5700) (6700 6800 7400 5900) (6900 7100 7600 6100) (7100 7400 7800 6300) (7300 7700 5600 6400) (7500 7800 5900 6500) (7700 5600 6000 6700) (5600 5700 6300 6800) (5800 6000 6500 7000) (6100 6200 6700 7200) (6200 6400 6900 7500) (6300 6500 7100 7800) (6400 6800 7300 5700))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "decode raw genotype" (om-load-patch-abs1 "decode raw genotype" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 139 280) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 142 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 107 112) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD-TO-RANGE" (quote om-darwin::mod-to-range) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "RANGE" "RANGE" nil))) (om-make-point 50 153) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (3 0 4 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 297 384)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 26 493) nil (list (list 1 2 3 3 1 1 2 3 1 3 2 2 1 1 3 2 1 1 1 2 1 1 2 2 2 3 3 1 3 3 1 2 3 3 3 2 1 2 2 2 1 3 1 3 1 2 1 3 2 2 2 1 1 3 1 1 2 2 3 3 2 3 2 1)) nil "decode raw genotype"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RAW-GENOTYPE" (quote om-darwin::raw-genotype) (quote ((om-load-inputfun (quote input-funbox) "SPECIMEN" "SPECIMEN" nil))) (om-make-point 114 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "generate chord sequence (altered)" (om-load-patch-abs1 "generate chord sequence (altered)" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 111 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 151 41) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 92 48) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 1104) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 527 871) (om-make-point 41 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 439 868) (om-make-point 62 43) (list 0 400) "(0 400)$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 996) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6400 6700 7200) (6100 6700 6800 7500) (6300 7000 6900 7700) (6600 7200 7200 7800) (6900 7400 7300 7900) (7200 7500 7500 5800) (7300 7600 7600 6000) (7600 7800 7700 6200) (7900 7900 7800 6400) (5700 5600 5700 6700) (6000 5800 5800 6900) (6100 5900 6100 7200) (6300 6100 6200 7400) (6600 6200 6500 7700) (6900 6500 6800 5600) (7100 6800 7000 5800))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400)) :ldur (quote ((400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1276 325) (om-make-point 198 481) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 343 905) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 430 759) (om-make-point 48 30) 5600 "5600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 5600) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 5600))) (om-make-point 393 837) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 424 659) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 296 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 215 546) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 378 360) (om-make-point 84 30) (list 0 5 10 15) "(0 5 10 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 304 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 407 569) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1))) (om-make-point 337 666) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 123 318) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-voices" 1 (om-make-point 486 68) "" "num-voices" 4 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 211 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length" 0 (om-make-point 256 58) "" "length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 219) (om-make-point 140 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (17 1 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (15 0 12 1 nil 0) (20 0 15 0 nil 0) (14 0 15 1 nil 0) (12 0 17 0 nil 0) (16 0 17 1 nil 0) (22 0 18 1 nil 0) (18 0 20 0 nil 0) (19 0 20 1 nil 0) (0 0 22 0 nil 0) (21 0 22 1 nil 0))) 6.1 nil "" (om-make-point 445 89) (om-make-point 684 1188)) (quote ((om-load-inputfun (quote input-funbox) "" "length" 16) (om-load-inputfun (quote input-funbox) "" "num-voices" 4))) (om-make-point 55 104) nil (list nil) "l" "generate chord sequence (altered)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 84 37) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 201 38) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 138 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (11 0 5 1 nil 0) (3 0 5 2 nil 0) (7 0 6 0 nil 0) (11 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (8 0 11 0 nil 0))) nil 6.1))
