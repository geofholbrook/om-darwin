; OM File Header - Saved 2015/06/21 23:43:11
; (6.1 :patc (om-make-point 10 60) (om-make-point 56 50) (om-make-point 1391 913) "" 183 0 "2015/06/21 23:16:11" "2015/06/21 23:43:07")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "2. built-in species" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 998 424) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1217 320) (om-make-point 85 31) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1142 236) (om-make-point 127 30) (list (quote :set) 0 1200 2400) "(:set 0 1200 2400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1053 320) (om-make-point 96 30) (quote :all-harmonic) ":all-harmonic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1125 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 926 527) (om-make-point 111 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 905 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 920 222) (om-make-point 76 30) (list 500 700) "(500 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 798 243) (om-make-point 76 30) (list 100 300) "(100 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 832 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 93 107) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 127)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 784 101) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 114 24) "untitled" :direction :horizontal :range (quote (0 2400)) :increment 1 :value 1600))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 675 746) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 106 486) (om-make-point 487 178) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 9 150 75 157 183 141 56 177 101 164 68 8 130 166 30 229 5 54 148 55 177 163 147 73 177 25 254 199 212 61 189 208 63 206 89 218) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 150 75 157 183 141 56 177 101 164 68 8 130 166 30 229 5 54 148 55 177 163 147 73 177 25 254 199 212 61 189 208 63 206 89 218)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 57 38 208 93 90 96 210 64 33 119 112 255 43 169 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5500) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 6000) (list 1 1/4 1 5300) (list 1 1/4 1 6600) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 5700) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 6300) (list 7/4 1/4 1 6400) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 2 1/4 1 6800) (list 2 1/4 1 5700) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 57 38 208 93 90 96 210 64 33 119 112 255 43 169 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 130) (list 221.6566 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 208 38 57 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 163 231 195 84 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5600) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 5300) (list 1 1/4 1 6000) (list 1 1/4 1 6600) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6400) (list 2 1/4 1 5700) (list 2 1/4 1 6800) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5700) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 208 38 57 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 163 231 195 84 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 33 38 208 93 90 96 210 64 33 119 112 255 43 169 238 83 172 15 34 141 248 85 84 245 215 114 82 71 163 231 195 83 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5600) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 6000) (list 1 1/4 1 5300) (list 1 1/4 1 6600) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 6400) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 2 1/4 1 5700) (list 2 1/4 1 6800) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 33 38 208 93 90 96 210 64 33 119 112 255 43 169 238 83 172 15 34 141 248 85 84 245 215 114 82 71 163 231 195 83 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 553.4015 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 208 38 57 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 245 84 215 114 82 71 162 231 243 83 13 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5600) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 5300) (list 1 1/4 1 6000) (list 1 1/4 1 6600) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6400) (list 2 1/4 1 6800) (list 2 1/4 1 5700) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6000) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6600) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6100) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 208 38 57 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 245 84 215 114 82 71 162 231 243 83 13 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 658.1726 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 33 38 208 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 163 231 195 84 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5600) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 5300) (list 1 1/4 1 6000) (list 1 1/4 1 6600) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6400) (list 2 1/4 1 5700) (list 2 1/4 1 6800) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5700) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 33 38 208 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 163 231 195 84 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 873.03205 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 57 38 208 93 90 96 210 64 33 119 112 255 43 169 238 34 83 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5500) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 6000) (list 1 1/4 1 5300) (list 1 1/4 1 6600) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5700) (list 3/2 1/4 1 5600) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 6300) (list 7/4 1/4 1 6400) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 2 1/4 1 6800) (list 2 1/4 1 5700) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 57 38 208 93 90 96 210 64 33 119 112 255 43 169 238 34 83 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 21 214 208 57 38 93 90 96 210 64 33 119 112 255 169 43 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6900) (list 0 1/4 1 6200) (list 0 1/4 1 5600) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 6000) (list 1 1/4 1 5300) (list 1 1/4 1 6700) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 5700) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 6300) (list 7/4 1/4 1 6400) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 2 1/4 1 6800) (list 2 1/4 1 5700) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 214 208 57 38 93 90 96 210 64 33 119 112 255 169 43 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 945.1065 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 21 214 208 38 57 93 90 96 210 64 33 169 255 42 112 120 238 83 15 172 34 248 85 141 215 84 245 114 82 71 243 231 162 83 13 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6900) (list 0 1/4 1 6200) (list 0 1/4 1 5600) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 5300) (list 1 1/4 1 6500) (list 1 1/4 1 6000) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6400) (list 2 1/4 1 6300) (list 2 1/4 1 5700) (list 2 1/4 1 6800) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6600) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6000) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6100) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 214 208 38 57 93 90 96 210 64 33 169 255 42 112 120 238 83 15 172 34 248 85 141 215 84 245 114 82 71 243 231 162 83 13 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 989.9175 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 85 38 208 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 162 231 243 83 13 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5800) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5800) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 5300) (list 1 1/4 1 6000) (list 1 1/4 1 6600) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6400) (list 2 1/4 1 5700) (list 2 1/4 1 6800) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6000) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6600) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6100) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 85 38 208 93 90 96 210 64 33 169 255 112 43 120 238 83 15 172 34 248 85 141 84 245 215 114 82 71 162 231 243 83 13 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 21 57 38 208 93 90 96 206 64 33 119 112 255 43 169 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194) :decoder (list (list (list 4800 7200 100) (list 4800 7200 100) (list 4800 7200 100))) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6900) (list 0 1/4 1 5500) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5400) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 6700) (list 1 1/4 1 6000) (list 1 1/4 1 5300) (list 1 1/4 1 6600) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 5600) (list 3/2 1/4 1 5700) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 6300) (list 7/4 1/4 1 6400) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5800) (list 2 1/4 1 6800) (list 2 1/4 1 5700) (list 2 1/4 1 6300) (list 9/4 1/4 1 6200) (list 9/4 1/4 1 5500) (list 9/4 1/4 1 6900) (list 5/2 1/4 1 6100) (list 5/2 1/4 1 5400) (list 5/2 1/4 1 6800) (list 11/4 1/4 1 5600) (list 11/4 1/4 1 6200) (list 11/4 1/4 1 6700)) :num-notes 8 :num-chords 12 :cardinality 3 :range (list 4800 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 21 57 38 208 93 90 96 206 64 33 119 112 255 43 169 238 83 34 172 15 141 248 85 245 84 215 114 82 71 163 231 195 83 189 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10))) (setf (om-darwin::generation om-darwin::ga) 197) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6900 5500)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5600 6600)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6900 5800)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5600 6700)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300 6600)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6100 5600)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 7000 6300)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 7100 5800)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 5700 6300)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500 6900)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5400 6800)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 6200 6700)) :ldur (quote (667 667 667)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "outer voice interval" (om-load-lisp-abspatch "outer voice interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (chord)$  (abs (- (last-elem chord) (first chord))))$  )") (quote ((om-load-inputfun (quote input-funbox) "" "CHORD" nil))) (om-make-point 439 164) nil (list nil) "l" "outer voice interval"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 578 101) (om-make-point 63 30) (quote :chords) ":chords" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :chord) (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 529 313) (om-make-point 169 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 155 53) (om-make-point 90 30) (list 4800 7200) "(4800 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 282 61) (om-make-point 39 30) 1/4 "1/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD-SEQ" (quote make-ga-chord-seq) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-CHORDS" 8) (om-load-inputfun (quote input-funbox) "" "CARDINALITY" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/8))) (om-make-point 123 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 1 nil 0) (2 0 4 2 nil 0) (1 0 4 3 nil 0) (9 0 5 0 nil 0) (6 0 5 1 nil 0) (4 0 5 2 nil 0) (0 0 5 3 nil 0) (7 0 6 0 nil 0) (8 0 9 0 nil 0) (13 0 12 0 nil 0) (16 0 12 1 nil 0) (19 0 13 1 nil 0) (5 0 13 2 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (11 3 16 2 nil 0) (10 0 19 0 nil 0) (17 0 19 2 nil 0) (18 0 19 3 nil 0))) nil 6.1))
