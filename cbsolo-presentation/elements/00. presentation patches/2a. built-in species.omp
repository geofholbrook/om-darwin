; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 280 110) (om-make-point 77 23) (om-make-point 1193 955) "" 183 0 "2015/06/22 10:46:10" "2015/06/22 11:24:33")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "2a. built-in species" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 267 89) (quote "built-in species") "" (om-make-point 812 31) nil (om-make-color 0 0 0) (om-make-font "Futura" 48.0 :family "Futura" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1003 233) (om-make-point 146 30) (list 1/12 1/16 1/20 1/24) "(1/12 1/16 1/20 1/24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 982 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 207) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 243 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 152 69) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 154 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 2 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 368 332)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 926 191) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 467 323) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 266 341) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 357 322) (om-make-point 46 30) 1/20 "1/20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 507 23) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 380 27) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 437 29) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 416 157) (om-make-point 281 99) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((4 ((1.0 (1.0 2)) (1 (1.0 4)) (1 (3 1)) (1 (1.0 1 2)) (1 (1.0))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (640)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 151 75) (om-make-point 90 30) (list 4800 7200) "(4800 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 65 189) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 833 265) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 4) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 718 315) (om-make-point 139 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 121 558) (om-make-point 624 340) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 57 212 187 55 174 166 95 170 164 40 216 215 194 111 3 181 191 157 69 75 179 209 59 51 210 208 186 162 127 253 83 95) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 57 212 187 55 174 166 95 170) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 57 212 187 55 174 166 95 170)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 164 40 216 215 194 111 3 181) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 164 40 216 215 194 111 3 181)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 191 157 69 75 179 209 59 51) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 191 157 69 75 179 209 59 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 210 208 186 162 127 253 83 95) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 210 208 186 162 127 253 83 95)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 57 212 187 55 174 166 95 170 164 40 216 215 194 111 3 181 191 157 69 75 179 209 59 51 210 208 186 162 127 253 83 95)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 193 92 212 64 233 69 35 87 133 30 71 6 215 249 161 181 126 198 134 189 135 99 152 149 25 13 240 145 164 205 251 173) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 193 92 212 64 233 69 35 87) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 7100) (list 1/12 1/12 1 6100) (list 1/6 1/12 1 6400) (list 1/4 1/12 1 7200) (list 1/3 1/12 1 7200) (list 5/12 1/12 1 6400) (list 1/2 1/12 1 6900) (list 7/12 1/12 1 6900)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 92 212 64 233 69 35 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 133 30 71 6 215 249 161 181) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6300) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6600) (list 3/16 1/16 1 6600) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7200)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 133 30 71 6 215 249 161 181)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 126 198 134 189 135 99 152 149) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6900) (list 1/20 1/20 1 6300) (list 1/10 1/20 1 6400) (list 3/20 1/20 1 6700) (list 1/5 1/20 1 6500) (list 1/4 1/20 1 6800) (list 3/10 1/20 1 6900) (list 7/20 1/20 1 6600)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 126 198 134 189 135 99 152 149)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 25 13 240 145 164 205 251 173) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 7200) (list 1/24 1/24 1 6000) (list 1/12 1/24 1 6600) (list 1/8 1/24 1 6200) (list 1/6 1/24 1 6800) (list 5/24 1/24 1 7000) (list 1/4 1/24 1 6400) (list 7/24 1/24 1 6400)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 25 13 240 145 164 205 251 173)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 92 212 64 233 69 35 87 133 30 71 6 215 249 161 181 126 198 134 189 135 99 152 149 25 13 240 145 164 205 251 173)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 26 120 49 153 112 30 103 143 24 209 42 133 244 5 109 1 250 194 233 74 198 79 33 56 66 119 151 202 146 132 154 235) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 26 120 49 153 112 30 103 143) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6000) (list 1/12 1/12 1 6300) (list 1/6 1/12 1 7000) (list 1/4 1/12 1 7000) (list 1/3 1/12 1 6800) (list 5/12 1/12 1 6400) (list 1/2 1/12 1 7200) (list 7/12 1/12 1 6000)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 26 120 49 153 112 30 103 143)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 24 209 42 133 244 5 109 1) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7100) (list 1/16 1/16 1 6100) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 7000) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 6100)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 24 209 42 133 244 5 109 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 250 194 233 74 198 79 33 56) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6300) (list 1/20 1/20 1 7200) (list 1/10 1/20 1 7200) (list 3/20 1/20 1 6900) (list 1/5 1/20 1 6300) (list 1/4 1/20 1 6100) (list 3/10 1/20 1 6700) (list 7/20 1/20 1 6400)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 250 194 233 74 198 79 33 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 66 119 151 202 146 132 154 235) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6100) (list 1/24 1/24 1 6200) (list 1/12 1/24 1 6800) (list 1/8 1/24 1 6700) (list 1/6 1/24 1 6300) (list 5/24 1/24 1 6200) (list 1/4 1/24 1 7100) (list 7/24 1/24 1 6100)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 66 119 151 202 146 132 154 235)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 26 120 49 153 112 30 103 143 24 209 42 133 244 5 109 1 250 194 233 74 198 79 33 56 66 119 151 202 146 132 154 235)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 184 241 22 198 226 45 74 106 197 145 37 117 230 63 1 48 87 253 34 67 245 147 234 62 24 217 54 58 247 216 64 83) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 184 241 22 198 226 45 74 106) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6200) (list 1/12 1/12 1 6700) (list 1/6 1/12 1 6900) (list 1/4 1/12 1 6300) (list 1/3 1/12 1 6500) (list 5/12 1/12 1 6600) (list 1/2 1/12 1 6900) (list 7/12 1/12 1 6200)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 184 241 22 198 226 45 74 106)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 197 145 37 117 230 63 1 48) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 7100) (list 3/16 1/16 1 6000) (list 1/4 1/16 1 6900) (list 5/16 1/16 1 7100) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6900)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 145 37 117 230 63 1 48)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 87 253 34 67 245 147 234 62) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6900) (list 1/20 1/20 1 6600) (list 1/10 1/20 1 6800) (list 3/20 1/20 1 6200) (list 1/5 1/20 1 7100) (list 1/4 1/20 1 6400) (list 3/10 1/20 1 6000) (list 7/20 1/20 1 7000)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 253 34 67 245 147 234 62)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 24 217 54 58 247 216 64 83) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 7100) (list 1/24 1/24 1 6900) (list 1/12 1/24 1 6200) (list 1/8 1/24 1 6600) (list 1/6 1/24 1 6000) (list 5/24 1/24 1 6800) (list 1/4 1/24 1 7200) (list 7/24 1/24 1 6500)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 24 217 54 58 247 216 64 83)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 184 241 22 198 226 45 74 106 197 145 37 117 230 63 1 48 87 253 34 67 245 147 234 62 24 217 54 58 247 216 64 83)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 168 224 162 221 170 41 47 13 232 64 73 21 211 75 8 58 48 121 147 115 134 77 214 241 20 255 74 249 1 100 83 105) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 168 224 162 221 170 41 47 13) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 7200) (list 1/12 1/12 1 6300) (list 1/6 1/12 1 6600) (list 1/4 1/12 1 6000) (list 1/3 1/12 1 6100) (list 5/12 1/12 1 6200) (list 1/2 1/12 1 6800) (list 7/12 1/12 1 6000)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 168 224 162 221 170 41 47 13)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 232 64 73 21 211 75 8 58) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7100) (list 1/16 1/16 1 7200) (list 1/8 1/16 1 6800) (list 3/16 1/16 1 6800) (list 1/4 1/16 1 6300) (list 5/16 1/16 1 7000) (list 3/8 1/16 1 6800) (list 7/16 1/16 1 6600)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 232 64 73 21 211 75 8 58)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 48 121 147 115 134 77 214 241) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6900) (list 1/20 1/20 1 6400) (list 1/10 1/20 1 6400) (list 3/20 1/20 1 7100) (list 1/5 1/20 1 6400) (list 1/4 1/20 1 7200) (list 3/10 1/20 1 6600) (list 7/20 1/20 1 6700)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 48 121 147 115 134 77 214 241)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 20 255 74 249 1 100 83 105) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6700) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 6900) (list 1/8 1/24 1 6200) (list 1/6 1/24 1 6100) (list 5/24 1/24 1 6900) (list 1/4 1/24 1 6500) (list 7/24 1/24 1 6100)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 20 255 74 249 1 100 83 105)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 168 224 162 221 170 41 47 13 232 64 73 21 211 75 8 58 48 121 147 115 134 77 214 241 20 255 74 249 1 100 83 105)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 48 8 66 165 210 140 66 185 121 7 207 171 2 6 161 170 218 33 112 117 170 73 95 55 187 190 233 180 214 56 47 96) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 48 8 66 165 210 140 66 185) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6900) (list 1/12 1/12 1 6800) (list 1/6 1/12 1 6100) (list 1/4 1/12 1 6900) (list 1/3 1/12 1 6200) (list 5/12 1/12 1 7000) (list 1/2 1/12 1 6100) (list 7/12 1/12 1 6300)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 48 8 66 165 210 140 66 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 121 7 207 171 2 6 161 170) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6400) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 6100)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 7 207 171 2 6 161 170)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 218 33 112 117 170 73 95 55) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 7000) (list 1/20 1/20 1 6700) (list 1/10 1/20 1 6800) (list 3/20 1/20 1 6000) (list 1/5 1/20 1 6100) (list 1/4 1/20 1 6800) (list 3/10 1/20 1 6400) (list 7/20 1/20 1 6300)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 33 112 117 170 73 95 55)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 187 190 233 180 214 56 47 96) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6500) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 7200) (list 1/8 1/24 1 7100) (list 1/6 1/24 1 6600) (list 5/24 1/24 1 6400) (list 1/4 1/24 1 6800) (list 7/24 1/24 1 6500)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 190 233 180 214 56 47 96)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 48 8 66 165 210 140 66 185 121 7 207 171 2 6 161 170 218 33 112 117 170 73 95 55 187 190 233 180 214 56 47 96)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 136 126 216 100 141 140 37 7 198 60 215 99 68 201 193 64 147 80 190 47 210 153 186 198 131 164 192 64 120 229 190 127) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 136 126 216 100 141 140 37 7) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6600) (list 1/12 1/12 1 6900) (list 1/6 1/12 1 6800) (list 1/4 1/12 1 6900) (list 1/3 1/12 1 7100) (list 5/12 1/12 1 7000) (list 1/2 1/12 1 7100) (list 7/12 1/12 1 6700)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 136 126 216 100 141 140 37 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 60 215 99 68 201 193 64) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6300) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6800) (list 1/4 1/16 1 6300) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 7100) (list 7/16 1/16 1 7200)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 60 215 99 68 201 193 64)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 147 80 190 47 210 153 186 198) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6400) (list 1/20 1/20 1 6200) (list 1/10 1/20 1 6800) (list 3/20 1/20 1 6800) (list 1/5 1/20 1 6200) (list 1/4 1/20 1 7000) (list 3/10 1/20 1 6400) (list 7/20 1/20 1 6300)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 80 190 47 210 153 186 198)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 131 164 192 64 120 229 190 127) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6100) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 7000) (list 1/8 1/24 1 7200) (list 1/6 1/24 1 6300) (list 5/24 1/24 1 6800) (list 1/4 1/24 1 6800) (list 7/24 1/24 1 7000)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 131 164 192 64 120 229 190 127)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 136 126 216 100 141 140 37 7 198 60 215 99 68 201 193 64 147 80 190 47 210 153 186 198 131 164 192 64 120 229 190 127)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 194 170 253 244 127 136 192 148 102 102 241 183 54 207 20 43 231 1 177 22 237 48 102 113 109 47 159 139 176 171 171 83) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 194 170 253 244 127 136 192 148) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 7200) (list 1/12 1/12 1 6100) (list 1/6 1/12 1 6600) (list 1/4 1/12 1 7000) (list 1/3 1/12 1 7000) (list 5/12 1/12 1 6600) (list 1/2 1/12 1 7000) (list 7/12 1/12 1 6500)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 194 170 253 244 127 136 192 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 102 102 241 183 54 207 20 43) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7100) (list 1/16 1/16 1 7100) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6400)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 102 241 183 54 207 20 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 231 1 177 22 237 48 102 113) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 7000) (list 1/20 1/20 1 6100) (list 1/10 1/20 1 6800) (list 3/20 1/20 1 6900) (list 1/5 1/20 1 6300) (list 1/4 1/20 1 6900) (list 3/10 1/20 1 7100) (list 7/20 1/20 1 6900)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 1 177 22 237 48 102 113)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 109 47 159 139 176 171 171 83) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6500) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 6300) (list 1/8 1/24 1 6900) (list 1/6 1/24 1 6700) (list 5/24 1/24 1 6200) (list 1/4 1/24 1 6200) (list 7/24 1/24 1 6500)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 109 47 159 139 176 171 171 83)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 194 170 253 244 127 136 192 148 102 102 241 183 54 207 20 43 231 1 177 22 237 48 102 113 109 47 159 139 176 171 171 83)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 191 237 161 8 11 35 125 241 139 212 206 144 104 136 200 216 121 2 81 176 174 74 79 105 209 151 31 78 146 14 43 89) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 191 237 161 8 11 35 125 241) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6900) (list 1/12 1/12 1 6300) (list 1/6 1/12 1 6500) (list 1/4 1/12 1 6800) (list 1/3 1/12 1 7100) (list 5/12 1/12 1 6900) (list 1/2 1/12 1 6800) (list 7/12 1/12 1 6700)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 191 237 161 8 11 35 125 241)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 139 212 206 144 104 136 200 216) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6900) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 7100) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 6000) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 6800)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 139 212 206 144 104 136 200 216)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 121 2 81 176 174 74 79 105) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6400) (list 1/20 1/20 1 6200) (list 1/10 1/20 1 6300) (list 3/20 1/20 1 6700) (list 1/5 1/20 1 6500) (list 1/4 1/20 1 6900) (list 3/10 1/20 1 6100) (list 7/20 1/20 1 6100)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 2 81 176 174 74 79 105)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 209 151 31 78 146 14 43 89) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6100) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 6500) (list 1/8 1/24 1 6000) (list 1/6 1/24 1 6300) (list 5/24 1/24 1 6100) (list 1/4 1/24 1 6400) (list 7/24 1/24 1 7100)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 209 151 31 78 146 14 43 89)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 191 237 161 8 11 35 125 241 139 212 206 144 104 136 200 216 121 2 81 176 174 74 79 105 209 151 31 78 146 14 43 89)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 2 160 26 233 118 232 36 18 19 3 67 79 28 131 200 115 242 186 57 233 230 55 158 61 105 121 107 212 178 121 210 71) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 2 160 26 233 118 232 36 18) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6200) (list 1/12 1/12 1 6400) (list 1/6 1/12 1 6000) (list 1/4 1/12 1 7200) (list 1/3 1/12 1 6100) (list 5/12 1/12 1 7100) (list 1/2 1/12 1 7000) (list 7/12 1/12 1 6500)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 2 160 26 233 118 232 36 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 19 3 67 79 28 131 200 115) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6300) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6100) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 7100)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 19 3 67 79 28 131 200 115)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 242 186 57 233 230 55 158 61) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6800) (list 1/20 1/20 1 6400) (list 1/10 1/20 1 6500) (list 3/20 1/20 1 7200) (list 1/5 1/20 1 6900) (list 1/4 1/20 1 6300) (list 3/10 1/20 1 6200) (list 7/20 1/20 1 6900)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 242 186 57 233 230 55 158 61)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 105 121 107 212 178 121 210 71) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6100) (list 1/24 1/24 1 6400) (list 1/12 1/24 1 6300) (list 1/8 1/24 1 6400) (list 1/6 1/24 1 6900) (list 5/24 1/24 1 6400) (list 1/4 1/24 1 6200) (list 7/24 1/24 1 6600)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 105 121 107 212 178 121 210 71)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 2 160 26 233 118 232 36 18 19 3 67 79 28 131 200 115 242 186 57 233 230 55 158 61 105 121 107 212 178 121 210 71)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 19 65 207 212 95 142 46 159 73 156 83 144 8 136 30 138 6 20 49 20 103 16 39 8 243 151 105 212 17 228 172 23) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 19 65 207 212 95 142 46 159) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 6600) (list 1/12 1/12 1 6000) (list 1/6 1/12 1 7200) (list 1/4 1/12 1 6400) (list 1/3 1/12 1 6400) (list 5/12 1/12 1 7200) (list 1/2 1/12 1 6700) (list 7/12 1/12 1 6300)) :range (list 6000 7200) :num-notes 8 :note-value 1/12 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 19 65 207 212 95 142 46 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 73 156 83 144 8 136 30 138) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6500) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 6800) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6400) (list 7/16 1/16 1 6800)) :range (list 6000 7200) :num-notes 8 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 73 156 83 144 8 136 30 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 6 20 49 20 103 16 39 8) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6600) (list 1/20 1/20 1 6700) (list 1/10 1/20 1 7000) (list 3/20 1/20 1 6700) (list 1/5 1/20 1 7200) (list 1/4 1/20 1 6300) (list 3/10 1/20 1 6000) (list 7/20 1/20 1 6800)) :range (list 6000 7200) :num-notes 8 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 20 49 20 103 16 39 8)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 243 151 105 212 17 228 172 23) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6900) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 6100) (list 1/8 1/24 1 6400) (list 1/6 1/24 1 6400) (list 5/24 1/24 1 6700) (list 1/4 1/24 1 6300) (list 7/24 1/24 1 7000)) :range (list 6000 7200) :num-notes 8 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 243 151 105 212 17 228 172 23)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 19 65 207 212 95 142 46 159 73 156 83 144 8 136 30 138 6 20 49 20 103 16 39 8 243 151 105 212 17 228 172 23)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 -4)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (-1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1)) (1 (1 1 1 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (0))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 714 51) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1/4 1)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 100 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 996 411) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 744 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "ALLOW-RESTS" (quote ni)) (om-load-inputfun (quote input-funbox) "" "ALLOW-TIES" (quote t)))) (om-make-point 418 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 475 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 268 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD-SEQ" (quote make-ga-chord-seq) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-CHORDS" 8) (om-load-inputfun (quote input-funbox) "" "CARDINALITY" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/8))) (om-make-point 230 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD" (quote make-ga-chord) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 66 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (1 0 2 1 nil 0) (19 0 10 0 nil 0) (20 0 14 0 nil 0) (13 0 14 1 nil 0) (17 0 15 1 nil 0) (2 0 17 0 nil 0) (14 0 18 0 nil 0) (8 0 19 0 nil 0) (9 0 19 1 nil 0) (7 0 19 3 nil 0) (4 0 20 0 nil 0) (5 0 21 0 nil 0) (6 0 21 2 nil 0) (11 0 22 2 nil 0) (12 0 23 0 nil 0) (11 0 23 1 nil 0))) nil 6.1))
