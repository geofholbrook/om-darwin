; OM File Header - Saved 2015/06/22 9:37:10
; (6.1 :patc (om-make-point 10 110) (om-make-point 137 64) (om-make-point 1120 1350) "" 183 0 "2015/06/22 8:37:27" "2015/06/22 9:37:10")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "3. same problem different means" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 900 96) (quote "exchange of roles between mapping and fitness functions") nil (om-make-point 68 28) nil (om-make-color 0 0 0) (om-make-font "Futura" 48.0 :family "Futura" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 700 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 46 350) (om-make-point 829 113) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 162 189 112 128 16 164 126 97 116 0 23 13 78 226 249 173 85 74 92 240 120 51 238 4 182 238 169 255 59 181 23 21 191 193 255 154 190 59 59 153 166 241 218 213 200 12 205 204 36 138 36 45 41 128 183 124 51 127 172 98 187 156 15 166) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 162 189 112 128 16 164 126 97 116 0 23 13 78 226 249 173 85 74 92 240 120 51 238 4 182 238 169 255 59 181 23 21 191 193 255 154 190 59 59 153 166 241 218 213 200 12 205 204 36 138 36 45 41 128 183 124 51 127 172 98 187 156 15 166)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 4299.314 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 178 206 177 8 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6600) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6700) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6900) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6800) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 178 206 177 8 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 4894.0337 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 240 212 251 201 164 202 33 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 101 176 177 206 22 101 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6700) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6700) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 7000) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6800) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6900) (list 31/8 1/16 1 7000) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 240 212 251 201 164 202 33 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 101 176 177 206 22 101 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 5495.411 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 240 212 251 201 164 202 33 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 101 176 22 206 177 8 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6700) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6700) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 7000) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6800) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 240 212 251 201 164 202 33 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 101 176 22 206 177 8 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 5675.451 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 119 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 101 206 177 8 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6600) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6700) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6900) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 7000) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6800) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 119 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 101 206 177 8 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 5856.011 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 214 227 56 237 134 169 182 81 160 174 185 4 73 59 135 137 45 176 22 206 101 180 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6400) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 6300) (list 13/4 1/16 1 6400) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6600) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 7000) (list 31/8 1/16 1 7100) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 214 227 56 237 134 169 182 81 160 174 185 4 73 59 135 137 45 176 22 206 101 180 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 6102.8423 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 52 171 183 3 149 57 250 240 212 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 101 206 177 8 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6000) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6400) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6700) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6900) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 7000) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6800) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 52 171 183 3 149 57 250 240 212 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 167 38 37 217 154 35 245 191 177 149 29 70 215 162 227 56 237 132 169 182 81 160 176 138 49 73 59 135 137 22 176 101 206 177 8 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 6123.955 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 134 81 182 169 160 174 140 49 73 59 135 137 45 176 22 206 101 180 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6600) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6400) (list 23/8 1/16 1 6300) (list 47/16 1/16 1 6000) (list 3 1/16 1 6000) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 7000) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6600) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 7000) (list 31/8 1/16 1 7100) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 134 81 182 169 160 174 140 49 73 59 135 137 45 176 22 206 101 180 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 6123.9556 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 134 169 182 81 160 174 140 49 73 59 135 137 45 176 22 206 101 180 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6600) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6400) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 7000) (list 13/4 1/16 1 7000) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6600) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 7000) (list 31/8 1/16 1 7100) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 32 70 215 162 227 56 237 134 169 182 81 160 174 140 49 73 59 135 137 45 176 22 206 101 180 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 6466.801 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 215 227 56 237 134 169 182 81 160 174 185 4 73 59 135 137 45 176 22 206 177 101 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6700) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6400) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6300) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 6300) (list 13/4 1/16 1 6400) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6600) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 7000) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 215 227 56 237 134 169 182 81 160 174 185 4 73 59 135 137 45 176 22 206 177 101 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 6466.8013 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 215 227 56 237 81 169 182 134 160 174 185 4 73 59 135 137 45 176 22 206 177 101 154) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6200) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6300) (list 7/16 1/16 1 6600) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6700) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6800) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6500) (list 1 1/16 1 6800) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 7100) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 7200) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 7100) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 7000) (list 13/8 1/16 1 7100) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 7100) (list 31/16 1/16 1 6900) (list 2 1/16 1 7100) (list 33/16 1/16 1 6900) (list 17/8 1/16 1 7100) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6300) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6700) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6400) (list 11/4 1/16 1 6300) (list 45/16 1/16 1 6300) (list 23/8 1/16 1 6000) (list 47/16 1/16 1 6000) (list 3 1/16 1 6400) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 6300) (list 13/4 1/16 1 6400) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6600) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 7100) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 7000) (list 63/16 1/16 1 7100)) :num-notes 64 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 52 183 3 149 57 250 6 190 33 201 164 202 251 161 83 112 36 167 204 101 155 62 76 10 101 76 38 154 38 37 217 167 35 245 191 177 149 29 70 162 215 227 56 237 81 169 182 134 160 174 185 4 73 59 135 137 45 176 22 206 177 101 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2))) (setf (om-darwin::generation om-darwin::ga) 29) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 81 150) (om-make-point 34 30) 64 "64" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 160 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 875 146) (om-make-point 90 30) (list 6000 7200) "(6000 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 890 530) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 48 689) (om-make-point 850 115) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 233 185 70 132 119 146 112 219 126 15 248 133 165 31 191 75 71 72 40 250 146 169 112 83 206 2 90 105 97 215 158 252 251 166 180 224 36 129 64 253 93 14 180 155 201 206 120 37 110 118 243 72 255 121 229 180 238 56 89 182 241 27 125 110) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 185 70 132 119 146 112 219 126 15 248 133 165 31 191 75 71 72 40 250 146 169 112 83 206 2 90 105 97 215 158 252 251 166 180 224 36 129 64 253 93 14 180 155 201 206 120 37 110 118 243 72 255 121 229 180 238 56 89 182 241 27 125 110)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 243 231 20 93 188 161 114 66 139 195 240 238 203 60 78 78 240 199 246 66 152 17 195 11 51 244 84 8 97 158 112 176 22 41 109 67 38 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 209) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6600) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 6700) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6800) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6600) (list 7/8 1/16 1 6400) (list 15/16 1/16 1 6500) (list 1 1/16 1 6600) (list 17/16 1/16 1 6400) (list 9/8 1/16 1 6600) (list 19/16 1/16 1 6500) (list 5/4 1/16 1 6400) (list 21/16 1/16 1 6400) (list 11/8 1/16 1 6400) (list 23/16 1/16 1 6200) (list 3/2 1/16 1 6100) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 6600) (list 31/16 1/16 1 6600) (list 2 1/16 1 6500) (list 33/16 1/16 1 6500) (list 17/8 1/16 1 6400) (list 35/16 1/16 1 6600) (list 9/4 1/16 1 6600) (list 37/16 1/16 1 6700) (list 19/8 1/16 1 6900) (list 39/16 1/16 1 6700) (list 5/2 1/16 1 6800) (list 41/16 1/16 1 6600) (list 21/8 1/16 1 6700) (list 43/16 1/16 1 6900) (list 11/4 1/16 1 6800) (list 45/16 1/16 1 6600) (list 23/8 1/16 1 6700) (list 47/16 1/16 1 6600) (list 3 1/16 1 6600) (list 49/16 1/16 1 6600) (list 25/8 1/16 1 6600) (list 51/16 1/16 1 6400) (list 13/4 1/16 1 6500) (list 53/16 1/16 1 6600) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6800) (list 7/2 1/16 1 6600) (list 57/16 1/16 1 6700) (list 29/8 1/16 1 6500) (list 59/16 1/16 1 6400) (list 15/4 1/16 1 6200) (list 61/16 1/16 1 6200) (list 31/8 1/16 1 6400) (list 63/16 1/16 1 6500) (list 4 1/16 1 6700)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 243 231 20 93 188 161 114 66 139 195 240 238 203 60 78 78 240 199 246 66 152 17 195 11 51 244 84 8 97 158 112 176 22 41 109 67 38 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 209)) (om-darwin::update om-darwin::spec) om-darwin::spec) 54) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 8 57 110 234 143 195 64 182 160 239 220 168 235 58 132 240 146 196 25 18 34 202 105 176 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 190 199 88 22 18 174 210 166 91 200 25 186 81 225 238 208 48 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6500) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6800) (list 3/8 1/16 1 6600) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6600) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6500) (list 7/8 1/16 1 6600) (list 15/16 1/16 1 6600) (list 1 1/16 1 6400) (list 17/16 1/16 1 6300) (list 9/8 1/16 1 6200) (list 19/16 1/16 1 6000) (list 5/4 1/16 1 6100) (list 21/16 1/16 1 6300) (list 11/8 1/16 1 6300) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6000) (list 25/16 1/16 1 6200) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6600) (list 15/8 1/16 1 6800) (list 31/16 1/16 1 6700) (list 2 1/16 1 6600) (list 33/16 1/16 1 6700) (list 17/8 1/16 1 6900) (list 35/16 1/16 1 6700) (list 9/4 1/16 1 6500) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6800) (list 39/16 1/16 1 6900) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6900) (list 21/8 1/16 1 6700) (list 43/16 1/16 1 6500) (list 11/4 1/16 1 6700) (list 45/16 1/16 1 6800) (list 23/8 1/16 1 6800) (list 47/16 1/16 1 6900) (list 3 1/16 1 7100) (list 49/16 1/16 1 6900) (list 25/8 1/16 1 6800) (list 51/16 1/16 1 6700) (list 13/4 1/16 1 6500) (list 53/16 1/16 1 6300) (list 27/8 1/16 1 6200) (list 55/16 1/16 1 6100) (list 7/2 1/16 1 5900) (list 57/16 1/16 1 6000) (list 29/8 1/16 1 6100) (list 59/16 1/16 1 6200) (list 15/4 1/16 1 6200) (list 61/16 1/16 1 6400) (list 31/8 1/16 1 6500) (list 63/16 1/16 1 6600) (list 4 1/16 1 6800)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 8 57 110 234 143 195 64 182 160 239 220 168 235 58 132 240 146 196 25 18 34 202 105 176 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 190 199 88 22 18 174 210 166 91 200 25 186 81 225 238 208 48 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 250 92 205 212 112 92 124 134 45 92 75 182 230 218 78 78 240 199 246 66 152 220 248 11 8 244 84 51 97 3 112 176 22 41 109 67 208 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 209) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6400) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6100) (list 15/16 1/16 1 6200) (list 1 1/16 1 6300) (list 17/16 1/16 1 6100) (list 9/8 1/16 1 6300) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6100) (list 21/16 1/16 1 6100) (list 11/8 1/16 1 5900) (list 23/16 1/16 1 6000) (list 3/2 1/16 1 5900) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6300) (list 29/16 1/16 1 6300) (list 15/8 1/16 1 6400) (list 31/16 1/16 1 6400) (list 2 1/16 1 6300) (list 33/16 1/16 1 6300) (list 17/8 1/16 1 6200) (list 35/16 1/16 1 6400) (list 9/4 1/16 1 6400) (list 37/16 1/16 1 6500) (list 19/8 1/16 1 6700) (list 39/16 1/16 1 6500) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6400) (list 21/8 1/16 1 6500) (list 43/16 1/16 1 6700) (list 11/4 1/16 1 6600) (list 45/16 1/16 1 6400) (list 23/8 1/16 1 6500) (list 47/16 1/16 1 6400) (list 3 1/16 1 6400) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6400) (list 51/16 1/16 1 6200) (list 13/4 1/16 1 6300) (list 53/16 1/16 1 6400) (list 27/8 1/16 1 6500) (list 55/16 1/16 1 6600) (list 7/2 1/16 1 6400) (list 57/16 1/16 1 6500) (list 29/8 1/16 1 6300) (list 59/16 1/16 1 6200) (list 15/4 1/16 1 6000) (list 61/16 1/16 1 6000) (list 31/8 1/16 1 6200) (list 63/16 1/16 1 6300) (list 4 1/16 1 6500)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 250 92 205 212 112 92 124 134 45 92 75 182 230 218 78 78 240 199 246 66 152 220 248 11 8 244 84 51 97 3 112 176 22 41 109 67 208 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 209)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 8 57 64 234 143 195 110 182 160 239 220 168 235 58 132 240 146 196 25 202 34 18 105 176 238 38 9 18 3 115 21 176 185 119 109 163 178 14 238 230 184 158 129 11 50 93 176 152 177 147 20 48 123 82 158 130 248 70 48 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6900) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 7000) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6600) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6500) (list 7/8 1/16 1 6600) (list 15/16 1/16 1 6600) (list 1 1/16 1 6400) (list 17/16 1/16 1 6300) (list 9/8 1/16 1 6200) (list 19/16 1/16 1 6000) (list 5/4 1/16 1 6000) (list 21/16 1/16 1 6200) (list 11/8 1/16 1 6300) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6000) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6600) (list 15/8 1/16 1 6400) (list 31/16 1/16 1 6300) (list 2 1/16 1 6200) (list 33/16 1/16 1 6000) (list 17/8 1/16 1 6200) (list 35/16 1/16 1 6400) (list 9/4 1/16 1 6500) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6800) (list 39/16 1/16 1 6900) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6900) (list 21/8 1/16 1 7000) (list 43/16 1/16 1 7200) (list 11/4 1/16 1 7100) (list 45/16 1/16 1 6900) (list 23/8 1/16 1 7000) (list 47/16 1/16 1 6900) (list 3 1/16 1 6900) (list 49/16 1/16 1 6900) (list 25/8 1/16 1 6900) (list 51/16 1/16 1 6700) (list 13/4 1/16 1 6800) (list 53/16 1/16 1 6900) (list 27/8 1/16 1 6900) (list 55/16 1/16 1 7000) (list 7/2 1/16 1 6800) (list 57/16 1/16 1 6900) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6800) (list 15/4 1/16 1 6800) (list 61/16 1/16 1 7000) (list 31/8 1/16 1 7100) (list 63/16 1/16 1 7200) (list 4 1/16 1 7400)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 8 57 64 234 143 195 110 182 160 239 220 168 235 58 132 240 146 196 25 202 34 18 105 176 238 38 9 18 3 115 21 176 185 119 109 163 178 14 238 230 184 158 129 11 50 93 176 152 177 147 20 48 123 82 158 130 248 70 48 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 78 146 196 25 202 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 25 163 91 174 213 186 81 48 238 208 225 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6500) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6400) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6100) (list 15/16 1/16 1 6200) (list 1 1/16 1 6300) (list 17/16 1/16 1 6200) (list 9/8 1/16 1 6100) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5900) (list 21/16 1/16 1 6100) (list 11/8 1/16 1 6200) (list 23/16 1/16 1 6000) (list 3/2 1/16 1 5900) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6400) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 6700) (list 31/16 1/16 1 6600) (list 2 1/16 1 6500) (list 33/16 1/16 1 6600) (list 17/8 1/16 1 6800) (list 35/16 1/16 1 6600) (list 9/4 1/16 1 6400) (list 37/16 1/16 1 6500) (list 19/8 1/16 1 6700) (list 39/16 1/16 1 6800) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6800) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6700) (list 11/4 1/16 1 6900) (list 45/16 1/16 1 6700) (list 23/8 1/16 1 6700) (list 47/16 1/16 1 6800) (list 3 1/16 1 6600) (list 49/16 1/16 1 6400) (list 25/8 1/16 1 6500) (list 51/16 1/16 1 6400) (list 13/4 1/16 1 6600) (list 53/16 1/16 1 6700) (list 27/8 1/16 1 6600) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6600) (list 57/16 1/16 1 6700) (list 29/8 1/16 1 6800) (list 59/16 1/16 1 6600) (list 15/4 1/16 1 6600) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6900) (list 63/16 1/16 1 7000) (list 4 1/16 1 7200)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 78 146 196 25 202 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 25 163 91 174 213 186 81 48 238 208 225 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 236 106 200 217 107 92 124 134 45 92 75 182 230 218 240 78 78 199 246 66 152 17 197 9 8 244 84 51 97 158 112 67 22 41 109 176 38 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 248 198 90 70 48 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6500) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6400) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6100) (list 15/16 1/16 1 5900) (list 1 1/16 1 6000) (list 17/16 1/16 1 6100) (list 9/8 1/16 1 6300) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6100) (list 21/16 1/16 1 6100) (list 11/8 1/16 1 6100) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6300) (list 25/16 1/16 1 6400) (list 13/8 1/16 1 6600) (list 27/16 1/16 1 6800) (list 7/4 1/16 1 6700) (list 29/16 1/16 1 6700) (list 15/8 1/16 1 6800) (list 31/16 1/16 1 6800) (list 2 1/16 1 6800) (list 33/16 1/16 1 6800) (list 17/8 1/16 1 6700) (list 35/16 1/16 1 6900) (list 9/4 1/16 1 6800) (list 37/16 1/16 1 6900) (list 19/8 1/16 1 7100) (list 39/16 1/16 1 6900) (list 5/2 1/16 1 7000) (list 41/16 1/16 1 6800) (list 21/8 1/16 1 6900) (list 43/16 1/16 1 7100) (list 11/4 1/16 1 7000) (list 45/16 1/16 1 6800) (list 23/8 1/16 1 6900) (list 47/16 1/16 1 6800) (list 3 1/16 1 6800) (list 49/16 1/16 1 6800) (list 25/8 1/16 1 6800) (list 51/16 1/16 1 6600) (list 13/4 1/16 1 6700) (list 53/16 1/16 1 6800) (list 27/8 1/16 1 6900) (list 55/16 1/16 1 7000) (list 7/2 1/16 1 7100) (list 57/16 1/16 1 6900) (list 29/8 1/16 1 6700) (list 59/16 1/16 1 6800) (list 15/4 1/16 1 6800) (list 61/16 1/16 1 7000) (list 31/8 1/16 1 7100) (list 63/16 1/16 1 7200) (list 4 1/16 1 7400)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 106 200 217 107 92 124 134 45 92 75 182 230 218 240 78 78 199 246 66 152 17 197 9 8 244 84 51 97 158 112 67 22 41 109 176 38 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 248 198 90 70 48 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 78 146 196 25 202 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 213 163 91 174 25 182 81 48 238 208 225 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6500) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6400) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6100) (list 15/16 1/16 1 6200) (list 1 1/16 1 6300) (list 17/16 1/16 1 6200) (list 9/8 1/16 1 6100) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5900) (list 21/16 1/16 1 6100) (list 11/8 1/16 1 6200) (list 23/16 1/16 1 6000) (list 3/2 1/16 1 5900) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6400) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 6700) (list 31/16 1/16 1 6600) (list 2 1/16 1 6500) (list 33/16 1/16 1 6600) (list 17/8 1/16 1 6800) (list 35/16 1/16 1 6600) (list 9/4 1/16 1 6400) (list 37/16 1/16 1 6500) (list 19/8 1/16 1 6700) (list 39/16 1/16 1 6800) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6800) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6700) (list 11/4 1/16 1 6900) (list 45/16 1/16 1 6700) (list 23/8 1/16 1 6700) (list 47/16 1/16 1 6800) (list 3 1/16 1 6600) (list 49/16 1/16 1 6700) (list 25/8 1/16 1 6800) (list 51/16 1/16 1 6700) (list 13/4 1/16 1 6900) (list 53/16 1/16 1 6700) (list 27/8 1/16 1 6700) (list 55/16 1/16 1 6600) (list 7/2 1/16 1 6700) (list 57/16 1/16 1 6800) (list 29/8 1/16 1 6900) (list 59/16 1/16 1 6700) (list 15/4 1/16 1 6700) (list 61/16 1/16 1 6900) (list 31/8 1/16 1 7000) (list 63/16 1/16 1 7100) (list 4 1/16 1 7300)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 78 146 196 25 202 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 213 163 91 174 25 182 81 48 238 208 225 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 202 146 196 25 78 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 213 163 91 174 25 186 81 48 238 208 225 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6500) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 6400) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6100) (list 15/16 1/16 1 6200) (list 1 1/16 1 6200) (list 17/16 1/16 1 6100) (list 9/8 1/16 1 6000) (list 19/16 1/16 1 5800) (list 5/4 1/16 1 5900) (list 21/16 1/16 1 6100) (list 11/8 1/16 1 6200) (list 23/16 1/16 1 6000) (list 3/2 1/16 1 5900) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6300) (list 7/4 1/16 1 6400) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 6700) (list 31/16 1/16 1 6600) (list 2 1/16 1 6500) (list 33/16 1/16 1 6600) (list 17/8 1/16 1 6800) (list 35/16 1/16 1 6600) (list 9/4 1/16 1 6400) (list 37/16 1/16 1 6500) (list 19/8 1/16 1 6700) (list 39/16 1/16 1 6800) (list 5/2 1/16 1 6600) (list 41/16 1/16 1 6800) (list 21/8 1/16 1 6600) (list 43/16 1/16 1 6700) (list 11/4 1/16 1 6900) (list 45/16 1/16 1 6700) (list 23/8 1/16 1 6700) (list 47/16 1/16 1 6800) (list 3 1/16 1 6600) (list 49/16 1/16 1 6700) (list 25/8 1/16 1 6800) (list 51/16 1/16 1 6700) (list 13/4 1/16 1 6900) (list 53/16 1/16 1 6700) (list 27/8 1/16 1 6600) (list 55/16 1/16 1 6500) (list 7/2 1/16 1 6600) (list 57/16 1/16 1 6700) (list 29/8 1/16 1 6800) (list 59/16 1/16 1 6600) (list 15/4 1/16 1 6600) (list 61/16 1/16 1 6800) (list 31/8 1/16 1 6900) (list 63/16 1/16 1 7000) (list 4 1/16 1 7200)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 106 205 217 107 92 124 134 45 92 75 182 230 218 78 202 146 196 25 78 34 23 95 181 239 32 14 18 3 109 21 176 163 119 115 185 178 14 238 230 184 185 88 199 190 22 18 200 213 163 91 174 25 186 81 48 238 208 225 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 2336.1072 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 243 231 20 93 188 161 114 66 139 240 195 238 203 60 78 78 240 199 246 66 152 17 244 11 51 195 84 8 97 158 112 176 22 41 109 225 136 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 9) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6600) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6500) (list 7/16 1/16 1 6700) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6800) (list 5/8 1/16 1 6600) (list 11/16 1/16 1 6400) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6600) (list 7/8 1/16 1 6400) (list 15/16 1/16 1 6500) (list 1 1/16 1 6600) (list 17/16 1/16 1 6400) (list 9/8 1/16 1 6600) (list 19/16 1/16 1 6500) (list 5/4 1/16 1 6400) (list 21/16 1/16 1 6400) (list 11/8 1/16 1 6400) (list 23/16 1/16 1 6600) (list 3/2 1/16 1 6500) (list 25/16 1/16 1 6400) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 6600) (list 31/16 1/16 1 6600) (list 2 1/16 1 6500) (list 33/16 1/16 1 6500) (list 17/8 1/16 1 6400) (list 35/16 1/16 1 6600) (list 9/4 1/16 1 6400) (list 37/16 1/16 1 6300) (list 19/8 1/16 1 6500) (list 39/16 1/16 1 6300) (list 5/2 1/16 1 6400) (list 41/16 1/16 1 6200) (list 21/8 1/16 1 6300) (list 43/16 1/16 1 6500) (list 11/4 1/16 1 6400) (list 45/16 1/16 1 6200) (list 23/8 1/16 1 6300) (list 47/16 1/16 1 6200) (list 3 1/16 1 6200) (list 49/16 1/16 1 6200) (list 25/8 1/16 1 6200) (list 51/16 1/16 1 6000) (list 13/4 1/16 1 6100) (list 53/16 1/16 1 6200) (list 27/8 1/16 1 6300) (list 55/16 1/16 1 6400) (list 7/2 1/16 1 6200) (list 57/16 1/16 1 6300) (list 29/8 1/16 1 6100) (list 59/16 1/16 1 6000) (list 15/4 1/16 1 5800) (list 61/16 1/16 1 5800) (list 31/8 1/16 1 6000) (list 63/16 1/16 1 6100) (list 4 1/16 1 6300)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 243 231 20 93 188 161 114 66 139 240 195 238 203 60 78 78 240 199 246 66 152 17 244 11 51 195 84 8 97 158 112 176 22 41 109 225 136 199 105 8 115 158 129 11 50 93 176 152 177 147 20 48 123 213 158 130 248 70 176 130 67 239 53 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2415.869 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :raw-genotype (list 8 57 64 234 143 195 110 182 160 239 220 168 235 58 132 240 146 196 25 202 34 18 105 176 238 33 14 18 3 115 21 176 185 119 109 163 178 14 238 230 184 158 129 11 50 93 92 152 177 147 20 48 123 82 158 130 248 70 48 247 254 138 203 159) :decoder (list (list -200 200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6600) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6900) (list 1/4 1/16 1 7100) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 7000) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6800) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6800) (list 11/16 1/16 1 6600) (list 3/4 1/16 1 6700) (list 13/16 1/16 1 6500) (list 7/8 1/16 1 6600) (list 15/16 1/16 1 6600) (list 1 1/16 1 6400) (list 17/16 1/16 1 6300) (list 9/8 1/16 1 6200) (list 19/16 1/16 1 6000) (list 5/4 1/16 1 6000) (list 21/16 1/16 1 6200) (list 11/8 1/16 1 6300) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6000) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6200) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6600) (list 15/8 1/16 1 6400) (list 31/16 1/16 1 6300) (list 2 1/16 1 6200) (list 33/16 1/16 1 6000) (list 17/8 1/16 1 6200) (list 35/16 1/16 1 6400) (list 9/4 1/16 1 6500) (list 37/16 1/16 1 6600) (list 19/8 1/16 1 6800) (list 39/16 1/16 1 6900) (list 5/2 1/16 1 6700) (list 41/16 1/16 1 6900) (list 21/8 1/16 1 7000) (list 43/16 1/16 1 7200) (list 11/4 1/16 1 7100) (list 45/16 1/16 1 6900) (list 23/8 1/16 1 7000) (list 47/16 1/16 1 7000) (list 3 1/16 1 7000) (list 49/16 1/16 1 7000) (list 25/8 1/16 1 7000) (list 51/16 1/16 1 6800) (list 13/4 1/16 1 6900) (list 53/16 1/16 1 7000) (list 27/8 1/16 1 7000) (list 55/16 1/16 1 7100) (list 7/2 1/16 1 6900) (list 57/16 1/16 1 7000) (list 29/8 1/16 1 6800) (list 59/16 1/16 1 6900) (list 15/4 1/16 1 6900) (list 61/16 1/16 1 7100) (list 31/8 1/16 1 7200) (list 63/16 1/16 1 7300) (list 4 1/16 1 7500)) :num-notes 64 :start 6600 :melodic-range (list -200 200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 8 57 64 234 143 195 110 182 160 239 220 168 235 58 132 240 146 196 25 202 34 18 105 176 238 33 14 18 3 115 21 176 185 119 109 163 178 14 238 230 184 158 129 11 50 93 92 152 177 147 20 48 123 82 158 130 248 70 48 247 254 138 203 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 54) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 -3)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 207 498) (om-make-point 48 30) 6600 "6600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 277 492) (om-make-point 81 30) (list -200 200) "(-200 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-DX-MELODY" (quote make-dx-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "START" 48) (om-load-inputfun (quote input-funbox) "" "MELODIC-RANGE" (list -3 3)))) (om-make-point 102 569) (om-make-point 255 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 2) (4 0 2 1 nil 1) (1 0 2 2 nil 2) (3 0 4 0 nil 0) (5 0 4 1 nil 1) (5 0 6 0 nil 1) (10 0 7 1 nil 0) (6 0 7 2 nil 1) (3 0 10 0 nil 0) (8 0 10 1 nil 0) (9 0 10 2 nil 2))) nil 6.1))
