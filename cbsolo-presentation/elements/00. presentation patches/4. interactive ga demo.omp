; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 195 476) (om-make-point 153 23) (om-make-point 1317 1117) "" 183 0 nil "2015/06/22 11:24:33")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "4. interactive ga demo" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 443 323) (om-make-point 76 30) (quote :melodic2) ":melodic2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 3" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :signed-melodic2) (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 397 414) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 33) (quote "FITNESS FUNCTION") "" (om-make-point 580 648) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 48) (quote "RANGE OF MELODIC INTERVALS IN SEMTIONES") "" (om-make-point 284 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PC RATE OF OCCURENCE") "" (om-make-point 214 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "RATE OF SIMULTANEOUS ATTACKS") "" (om-make-point 556 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 767 134) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0.01))) (om-make-point 692 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 646 219) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "1.0" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 100)) (om-load-inputfun (quote input-funbox) "step" "increment" 5) (om-load-inputfun (quote input-funbox) "slider value" "value" 0) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 523 64) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 24) "untitled" :direction :horizontal :range (quote (0 100)) :increment 1 :value 100))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1066 232) (om-make-point 39 30) 1/4 "1/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1/4))) (om-make-point 991 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1000 120) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "4" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 4 16)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 875 49) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 24) "untitled" :direction :horizontal :range (quote (4 16)) :increment 1 :value 4))) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "LENGTH IN QUARTER NOTES") "" (om-make-point 917 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 449 207) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 394 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PITCH CLASSES$(precede with set)") "" (om-make-point 78 231) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "DEFINITION OF MODEL" (om-load-patch-abs1 "DEFINITION OF MODEL" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 170 305) (om-make-point 116 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 51 135) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 206 108) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 130 119) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 49 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 41 60) (om-make-point 90 30) (list 3600 5000) "(3600 5000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 290 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 371 112) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 447 101) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 292 128) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 166 521) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 168 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 294 40) (om-make-point 90 30) (list 7000 8600) "(7000 8600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 0 1 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (9 0 6 0 nil 0) (12 0 6 1 nil 0) (7 0 6 2 nil 0) (8 0 6 3 nil 0) (11 0 10 0 nil 0) (0 0 11 0 nil 0))) 6.1 nil "" (om-make-point 241 183) (om-make-point 697 790)) (quote nil) (om-make-point 184 609) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "DEFINITION OF MODEL"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 903 273) (om-make-point 51 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 966 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote abstraction) "rate of simultaneities" (om-load-patch-abs1 "rate of simultaneities" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 541) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 460 150) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 381 189) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 135) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 373 50) (om-make-point 66 30) (quote :attacks) ":attacks" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" 2) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 276 275) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 585 666)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 673 366) nil (list nil) nil "rate of simultaneities"))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote abstraction) "favour sextuplets, quarter notes" (om-load-patch-abs1 "favour sextuplets, quarter notes" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 63 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 73 306) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 406 103) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 335 50) (om-make-point 86 30) (list 1/12 1/6) "(2/24 4/24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 268 94) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 281 169) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 175 115) (om-make-point 38 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 111 56) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 50 114) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 63 189) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (9 0 1 0 nil 0) (5 0 1 1 nil 0) (4 0 5 0 nil 0) (3 0 5 2 nil 0) (2 0 5 3 nil 0) (8 0 9 0 nil 0) (7 0 9 2 nil 0) (6 0 9 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 531 628)) (quote nil) (om-make-point 479 425) nil (list nil) nil "favour sextuplets, quarter notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1051 468) (om-make-point 46 30) 1/8 "3/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "max difference in length of voices" (om-load-patch-abs1 "max difference in length of voices" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 448 456) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 493 553) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OFFBY" (quote om-darwin::offby) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "VALUE" "VALUE" nil))) (om-make-point 310 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max length diff" 1 (om-make-point 519 395) "" "max length diff" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 282 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 358 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 195 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 240 330) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-CHAN" (quote om-darwin::region-chan) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 117 174) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DEMIX" (quote demix) (quote ((om-load-inputfun (quote input-funbox) "LIS" "LIS" nil) (om-load-inputfun (quote input-funbox) "TEST" "TEST" nil))) (om-make-point 252 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pheno" 0 (om-make-point 208 18) "" "pheno" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 304 721) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (7 1 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (2 0 11 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 730 960)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 924 520) nil (list nil) "l" "max difference in length of voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 226 288) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 189 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 348 173) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 459 580) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 469 1035) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 91 277) (om-make-point 114 30) (list (quote :set) 0 4 6 7 10) "(:set 0 4 6 7 10)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 30 748) (om-make-point 1217 209) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 118 218 63 152 222 131 228 232 12 194 211 123 123 230 234 244 222 2 161 30 231 77 159 144 195 31 60 98 37 62 1 234 147 221 105 23 81 160 137 210 182 96 118 99 163 183 219 58 193 41 50 144 67 169 98 109 30 1 245 214 134 113 222 122 53 243 222 137 163 209 24 195 204 80 119 144 72 242 50 63 61 89 251 198 114 202 13 20 92 247 220 69 90 236 123 46)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 450719.03 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 200 218 53 1 207 108 0 104 139 139 9 27 44 122 52 93 238 178 203 205 202 245 99 187 186 190 164 160 134 197 54 221 2 153 101 30 174 115 156 71 173 147 63 148 4 119 23 177 156 233 252 116 64 100 165 220 208 102 237 28 117 4 212 58 156 92 192 128 173 118 159 80 182 201 62 55 199 96 150 144 12 143 162 58 58 177 60 55 193 224 46 32 18 232 255 73) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 200 218 53 1 207 108 0 104 139 139 9 27 44 122 52 93 238 178 203 205 202 245 99 187 186 190 164 160 134 197 54 221 2 153 101 30 174 115 156 71 173 147 63 148 4 119 23 177) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 4100) (list 1/8 1/12 1 4400) (list 5/24 1/24 1 4800) (list 1/4 1/8 1 3600) (list 3/8 1/12 1 4000) (list 11/24 1/6 1 4500) (list 5/8 1/8 1 5000) (list 3/4 1/6 1 4300) (list 11/12 5/24 1 4900) (list 9/8 1/12 1 4400) (list 29/24 1/4 1 4300) (list 35/24 1/12 1 4500) (list 37/24 5/24 1 4200) (list 7/4 5/24 1 5000) (list 47/24 1/4 1 5000) (list 53/24 1/4 1 4500) (list 59/24 1/6 1 3800) (list 21/8 1/24 1 4700) (list 8/3 1/12 1 4500) (list 11/4 1/4 1 4200) (list 3 1/6 1 4400) (list 19/6 5/24 1 3900) (list 27/8 1/4 1 4000) (list 29/8 1/6 1 4400)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 218 53 1 207 108 0 104 139 139 9 27 44 122 52 93 238 178 203 205 202 245 99 187 186 190 164 160 134 197 54 221 2 153 101 30 174 115 156 71 173 147 63 148 4 119 23 177)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 156 233 252 116 64 100 165 220 208 102 237 28 117 4 212 58 156 92 192 128 173 118 159 80 182 201 62 55 199 96 150 144 12 143 162 58 58 177 60 55 193 224 46 32 18 232 255 73) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 7300) (list 1/4 1/8 1 8400) (list 3/8 5/24 1 8300) (list 7/12 5/24 1 8200) (list 19/24 1/24 1 7400) (list 5/6 5/24 1 8600) (list 25/24 5/24 1 8500) (list 5/4 5/24 1 7800) (list 35/24 1/8 1 7300) (list 19/12 1/8 1 7500) (list 41/24 5/24 1 7300) (list 23/12 1/8 1 7600) (list 49/24 1/6 1 8200) (list 53/24 1/12 1 8100) (list 55/24 1/24 1 8200) (list 7/3 1/24 1 8400) (list 19/8 1/4 1 8200) (list 21/8 5/24 1 7900) (list 17/6 1/6 1 7700) (list 3 1/12 1 7900) (list 37/12 1/8 1 7600) (list 77/24 1/8 1 8200) (list 10/3 5/24 1 7100) (list 85/24 1/12 1 7000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 156 233 252 116 64 100 165 220 208 102 237 28 117 4 212 58 156 92 192 128 173 118 159 80 182 201 62 55 199 96 150 144 12 143 162 58 58 177 60 55 193 224 46 32 18 232 255 73)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 218 53 1 207 108 0 104 139 139 9 27 44 122 52 93 238 178 203 205 202 245 99 187 186 190 164 160 134 197 54 221 2 153 101 30 174 115 156 71 173 147 63 148 4 119 23 177 156 233 252 116 64 100 165 220 208 102 237 28 117 4 212 58 156 92 192 128 173 118 159 80 182 201 62 55 199 96 150 144 12 143 162 58 58 177 60 55 193 224 46 32 18 232 255 73)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 308416.22 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 111 253 45 1 237 58 154 165 33 181 192 211 165 136 244 6 170 58 133 173 150 41 198 99 194 190 40 61 131 207 75 60 69 120 180 109 76 165 156 202 29 200 136 219 133 202 192 61 253 232 192 42 244 196 171 68 167 181 92 134 63 67 235 212 138 91 128 15 192 198 233 57 109 111 192 31 138 16 6 101 223 153 11 16 144 41 25 4 17 239 91 101 100 179 86 55) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 111 253 45 1 237 58 154 165 33 181 192 211 165 136 244 6 170 58 133 173 150 41 198 99 194 190 40 61 131 207 75 60 69 120 180 109 76 165 156 202 29 200 136 219 133 202 192 61) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 4200) (list 1/12 1/12 1 3600) (list 1/6 5/24 1 4800) (list 3/8 1/6 1 4000) (list 13/24 1/12 1 3900) (list 5/8 1/12 1 4800) (list 17/24 5/24 1 3600) (list 11/12 1/24 1 4000) (list 23/24 5/24 1 4100) (list 7/6 1/4 1 4900) (list 17/12 1/4 1 3600) (list 5/3 1/6 1 3900) (list 11/6 5/24 1 5000) (list 49/24 1/12 1 4600) (list 17/8 1/6 1 4700) (list 55/24 1/24 1 3600) (list 7/3 1/24 1 4500) (list 19/8 1/12 1 3600) (list 59/24 1/6 1 3700) (list 21/8 5/24 1 4200) (list 17/6 1/8 1 5000) (list 71/24 1/6 1 3700) (list 25/8 5/24 1 4900) (list 10/3 1/12 1 4800)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 111 253 45 1 237 58 154 165 33 181 192 211 165 136 244 6 170 58 133 173 150 41 198 99 194 190 40 61 131 207 75 60 69 120 180 109 76 165 156 202 29 200 136 219 133 202 192 61)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 253 232 192 42 244 196 171 68 167 181 92 134 63 67 235 212 138 91 128 15 192 198 233 57 109 111 192 31 138 16 6 101 223 153 11 16 144 41 25 4 17 239 91 101 100 179 86 55) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8500) (list 5/24 1/24 1 7500) (list 1/4 5/24 1 7600) (list 11/24 1/8 1 7100) (list 7/12 1/12 1 8400) (list 2/3 1/8 1 7700) (list 19/24 1/12 1 8200) (list 7/8 1/8 1 8400) (list 1 1/12 1 7200) (list 13/12 1/6 1 7900) (list 5/4 1/24 1 7500) (list 31/24 1/6 1 8200) (list 35/24 1/6 1 7700) (list 13/8 1/12 1 7500) (list 41/24 5/24 1 7200) (list 23/12 1/4 1 7600) (list 13/6 1/6 1 7200) (list 7/3 5/24 1 8100) (list 61/24 1/4 1 7800) (list 67/24 5/24 1 7800) (list 3 1/4 1 7000) (list 13/4 1/4 1 7600) (list 7/2 1/4 1 8500) (list 15/4 1/12 1 7100)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 232 192 42 244 196 171 68 167 181 92 134 63 67 235 212 138 91 128 15 192 198 233 57 109 111 192 31 138 16 6 101 223 153 11 16 144 41 25 4 17 239 91 101 100 179 86 55)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 111 253 45 1 237 58 154 165 33 181 192 211 165 136 244 6 170 58 133 173 150 41 198 99 194 190 40 61 131 207 75 60 69 120 180 109 76 165 156 202 29 200 136 219 133 202 192 61 253 232 192 42 244 196 171 68 167 181 92 134 63 67 235 212 138 91 128 15 192 198 233 57 109 111 192 31 138 16 6 101 223 153 11 16 144 41 25 4 17 239 91 101 100 179 86 55)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 449950.28 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 222 78 102 247 122 195 148 197 80 187 6 17 204 180 172 161 65 183 250 68 130 12 145 107 239 12 107 167 30 139 228 247 62 39 65 225 103 46 237 149 143 13 232 141 42 114 216 120 23 239 125 95 112 185 213 142 141 58 91 42 194 178 231 74 21 251 89 224 32 121 185 206 233 193 225 126 76 64 125 153 165 4 74 77 150 222 138 60 62 58 73 78 104 80 95 248) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 222 78 102 247 122 195 148 197 80 187 6 17 204 180 172 161 65 183 250 68 130 12 145 107 239 12 107 167 30 139 228 247 62 39 65 225 103 46 237 149 143 13 232 141 42 114 216 120) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 4800) (list 1/24 1/12 1 4800) (list 1/8 1/6 1 3800) (list 7/24 1/4 1 4900) (list 13/24 1/12 1 4100) (list 5/8 1/4 1 4200) (list 7/8 1/24 1 4500) (list 11/12 1/4 1 4300) (list 7/6 1/6 1 4100) (list 4/3 1/8 1 4600) (list 35/24 1/24 1 4600) (list 3/2 1/4 1 4600) (list 7/4 1/24 1 5000) (list 43/24 1/4 1 3800) (list 49/24 1/12 1 3600) (list 17/8 1/12 1 3900) (list 53/24 1/6 1 3800) (list 19/8 1/6 1 4100) (list 61/24 5/24 1 4900) (list 11/4 1/4 1 4800) (list 3 1/12 1 4400) (list 37/12 1/6 1 4300) (list 13/4 1/24 1 4800) (list 79/24 1/24 1 4200)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 222 78 102 247 122 195 148 197 80 187 6 17 204 180 172 161 65 183 250 68 130 12 145 107 239 12 107 167 30 139 228 247 62 39 65 225 103 46 237 149 143 13 232 141 42 114 216 120)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 23 239 125 95 112 185 213 142 141 58 91 42 194 178 231 74 21 251 89 224 32 121 185 206 233 193 225 126 76 64 125 153 165 4 74 77 150 222 138 60 62 58 73 78 104 80 95 248) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 7600) (list 1/4 1/4 1 7600) (list 1/2 1/4 1 8000) (list 3/4 5/24 1 7900) (list 23/24 5/24 1 7500) (list 7/6 1/24 1 7600) (list 29/24 5/24 1 7700) (list 17/12 1/8 1 8000) (list 37/24 1/4 1 7400) (list 43/24 1/8 1 7400) (list 23/12 1/12 1 8500) (list 2 1/8 1 8500) (list 17/8 1/12 1 8200) (list 53/24 1/24 1 7400) (list 9/4 5/24 1 7800) (list 59/24 1/6 1 7600) (list 21/8 5/24 1 8200) (list 17/6 1/4 1 7600) (list 37/12 1/24 1 8400) (list 25/8 1/24 1 7200) (list 19/6 5/24 1 8100) (list 27/8 1/24 1 7500) (list 41/12 1/8 1 7200) (list 85/24 1/8 1 8000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 239 125 95 112 185 213 142 141 58 91 42 194 178 231 74 21 251 89 224 32 121 185 206 233 193 225 126 76 64 125 153 165 4 74 77 150 222 138 60 62 58 73 78 104 80 95 248)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 222 78 102 247 122 195 148 197 80 187 6 17 204 180 172 161 65 183 250 68 130 12 145 107 239 12 107 167 30 139 228 247 62 39 65 225 103 46 237 149 143 13 232 141 42 114 216 120 23 239 125 95 112 185 213 142 141 58 91 42 194 178 231 74 21 251 89 224 32 121 185 206 233 193 225 126 76 64 125 153 165 4 74 77 150 222 138 60 62 58 73 78 104 80 95 248)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 378636.2 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 201 82 197 207 119 198 72 113 163 68 121 175 79 238 68 5 214 120 140 50 83 113 189 208 32 22 227 213 96 146 177 186 127 7 53 226 179 183 70 124 184 36 104 181 103 24 116 229 254 89 82 151 155 82 133 209 204 6 91 121 255 185 31 252 159 25 4 85 92 123 187 118 231 134 236 14 15 85 241 226 233 50 219 145 108 217 123 168 80 230 10 21 195 55 48 11) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 201 82 197 207 119 198 72 113 163 68 121 175 79 238 68 5 214 120 140 50 83 113 189 208 32 22 227 213 96 146 177 186 127 7 53 226 179 183 70 124 184 36 104 181 103 24 116 229) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 4200) (list 5/24 1/6 1 3800) (list 3/8 1/24 1 5000) (list 5/12 1/4 1 4800) (list 2/3 1/8 1 4900) (list 19/24 1/12 1 3700) (list 7/8 5/24 1 4000) (list 13/12 1/4 1 4400) (list 4/3 1/24 1 4000) (list 11/8 1/8 1 4100) (list 3/2 1/4 1 4400) (list 7/4 5/24 1 4500) (list 47/24 5/24 1 3800) (list 13/6 1/6 1 3800) (list 7/3 1/8 1 4200) (list 59/24 1/24 1 4800) (list 5/2 1/12 1 4300) (list 31/12 5/24 1 4400) (list 67/24 1/6 1 5000) (list 71/24 5/24 1 4600) (list 19/6 1/24 1 4000) (list 77/24 1/12 1 5000) (list 79/24 1/24 1 4900) (list 10/3 1/12 1 4700)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 201 82 197 207 119 198 72 113 163 68 121 175 79 238 68 5 214 120 140 50 83 113 189 208 32 22 227 213 96 146 177 186 127 7 53 226 179 183 70 124 184 36 104 181 103 24 116 229)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 254 89 82 151 155 82 133 209 204 6 91 121 255 185 31 252 159 25 4 85 92 123 187 118 231 134 236 14 15 85 241 226 233 50 219 145 108 217 123 168 80 230 10 21 195 55 48 11) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 8600) (list 1/4 1/12 1 8400) (list 1/3 5/24 1 7200) (list 13/24 1/4 1 8400) (list 19/24 1/24 1 7000) (list 5/6 1/12 1 7600) (list 11/12 1/4 1 7000) (list 7/6 1/24 1 8400) (list 29/24 1/12 1 7600) (list 31/24 1/12 1 7400) (list 11/8 1/6 1 7700) (list 37/24 5/24 1 7000) (list 7/4 1/8 1 8000) (list 15/8 1/8 1 8500) (list 2 1/12 1 8500) (list 25/12 5/24 1 7300) (list 55/24 1/8 1 8200) (list 29/12 1/12 1 8500) (list 5/2 1/12 1 7600) (list 31/12 1/24 1 7400) (list 21/8 1/8 1 8200) (list 11/4 1/6 1 8000) (list 35/12 1/12 1 7800) (list 3 1/4 1 8400)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 89 82 151 155 82 133 209 204 6 91 121 255 185 31 252 159 25 4 85 92 123 187 118 231 134 236 14 15 85 241 226 233 50 219 145 108 217 123 168 80 230 10 21 195 55 48 11)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 201 82 197 207 119 198 72 113 163 68 121 175 79 238 68 5 214 120 140 50 83 113 189 208 32 22 227 213 96 146 177 186 127 7 53 226 179 183 70 124 184 36 104 181 103 24 116 229 254 89 82 151 155 82 133 209 204 6 91 121 255 185 31 252 159 25 4 85 92 123 187 118 231 134 236 14 15 85 241 226 233 50 219 145 108 217 123 168 80 230 10 21 195 55 48 11)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 445939.78 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 109 87 99 58 100 53 83 31 207 116 32 236 7 53 196 111 200 79 96 125 66 143 52 21 234 90 4 25 5 174 211 84 152 216 210 16 221 67 240 144 247 246 49 75 195 71 138 52 148 40 15 78 105 48 195 239 61 14 118 18 152 15 95 109 24 31 84 248 13 251 254 227 136 140 144 248 100 216 219 151 18 145 25 70 228 181 5 242 243 102 215 80 235 142 220 126) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 109 87 99 58 100 53 83 31 207 116 32 236 7 53 196 111 200 79 96 125 66 143 52 21 234 90 4 25 5 174 211 84 152 216 210 16 221 67 240 144 247 246 49 75 195 71 138 52) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 4000) (list 1/6 5/24 1 4500) (list 3/8 1/4 1 4600) (list 5/8 1/12 1 4400) (list 17/24 1/8 1 4800) (list 5/6 1/8 1 3800) (list 23/24 1/4 1 4300) (list 29/24 1/6 1 3700) (list 11/8 1/12 1 4100) (list 35/24 1/4 1 4200) (list 41/24 1/4 1 4200) (list 47/24 1/6 1 4300) (list 17/8 1/24 1 4500) (list 13/6 1/12 1 4000) (list 9/4 1/24 1 4100) (list 55/24 1/24 1 3700) (list 7/3 1/24 1 3800) (list 19/8 5/24 1 3600) (list 31/12 1/12 1 4700) (list 8/3 1/24 1 3600) (list 65/24 1/24 1 4300) (list 11/4 1/6 1 4000) (list 35/12 1/4 1 3600) (list 19/6 5/24 1 3900)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 109 87 99 58 100 53 83 31 207 116 32 236 7 53 196 111 200 79 96 125 66 143 52 21 234 90 4 25 5 174 211 84 152 216 210 16 221 67 240 144 247 246 49 75 195 71 138 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 148 40 15 78 105 48 195 239 61 14 118 18 152 15 95 109 24 31 84 248 13 251 254 227 136 140 144 248 100 216 219 151 18 145 25 70 228 181 5 242 243 102 215 80 235 142 220 126) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8200) (list 5/24 1/24 1 8500) (list 1/4 1/24 1 7300) (list 7/24 1/4 1 7800) (list 13/24 1/8 1 8000) (list 2/3 1/24 1 8600) (list 17/24 1/6 1 8600) (list 7/8 1/12 1 8000) (list 23/24 1/12 1 7700) (list 25/24 1/8 1 8600) (list 7/6 1/4 1 8300) (list 17/12 1/4 1 8600) (list 5/3 1/8 1 7000) (list 43/24 1/8 1 7800) (list 23/12 1/24 1 8500) (list 47/24 1/12 1 8500) (list 49/24 1/12 1 7100) (list 17/8 5/24 1 7800) (list 7/3 1/12 1 7700) (list 29/12 1/8 1 7500) (list 61/24 1/24 1 7500) (list 31/12 1/8 1 8100) (list 65/24 5/24 1 8400) (list 35/12 1/24 1 8600)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 40 15 78 105 48 195 239 61 14 118 18 152 15 95 109 24 31 84 248 13 251 254 227 136 140 144 248 100 216 219 151 18 145 25 70 228 181 5 242 243 102 215 80 235 142 220 126)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 109 87 99 58 100 53 83 31 207 116 32 236 7 53 196 111 200 79 96 125 66 143 52 21 234 90 4 25 5 174 211 84 152 216 210 16 221 67 240 144 247 246 49 75 195 71 138 52 148 40 15 78 105 48 195 239 61 14 118 18 152 15 95 109 24 31 84 248 13 251 254 227 136 140 144 248 100 216 219 151 18 145 25 70 228 181 5 242 243 102 215 80 235 142 220 126)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 364081.9 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 42 50 135 102 154 164 171 235 99 146 243 89 40 62 246 151 42 255 118 56 249 234 7 32 82 207 31 110 29 36 223 171 30 42 53 243 73 21 120 65 244 125 77 54 80 149 144 196 234 160 85 5 163 5 213 82 179 155 141 237 194 99 164 134 112 166 94 144 139 39 238 233 24 143 254 141 12 245 164 130 188 251 10 230 68 81 166 154 221 83 217 160 159 49 223 149) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 42 50 135 102 154 164 171 235 99 146 243 89 40 62 246 151 42 255 118 56 249 234 7 32 82 207 31 110 29 36 223 171 30 42 53 243 73 21 120 65 244 125 77 54 80 149 144 196) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 4800) (list 1/8 1/24 1 3600) (list 1/6 1/8 1 4000) (list 7/24 1/12 1 4200) (list 3/8 1/8 1 4500) (list 1/2 1/4 1 3900) (list 3/4 1/8 1 4600) (list 7/8 1/12 1 4200) (list 23/24 1/6 1 4800) (list 9/8 1/8 1 4900) (list 5/4 1/24 1 4500) (list 31/24 1/8 1 4300) (list 17/12 1/6 1 4300) (list 19/12 1/8 1 3700) (list 41/24 1/24 1 5000) (list 7/4 1/6 1 4900) (list 23/12 1/24 1 3600) (list 47/24 1/6 1 4400) (list 17/8 1/6 1 4900) (list 55/24 1/4 1 3600) (list 61/24 1/4 1 4000) (list 67/24 1/24 1 3800) (list 17/6 1/4 1 4100) (list 37/12 5/24 1 4500)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 42 50 135 102 154 164 171 235 99 146 243 89 40 62 246 151 42 255 118 56 249 234 7 32 82 207 31 110 29 36 223 171 30 42 53 243 73 21 120 65 244 125 77 54 80 149 144 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 234 160 85 5 163 5 213 82 179 155 141 237 194 99 164 134 112 166 94 144 139 39 238 233 24 143 254 141 12 245 164 130 188 251 10 230 68 81 166 154 221 83 217 160 159 49 223 149) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8300) (list 5/24 1/4 1 7000) (list 11/24 1/4 1 8000) (list 17/24 5/24 1 7900) (list 11/12 1/4 1 7900) (list 7/6 1/6 1 7500) (list 4/3 1/6 1 7700) (list 3/2 1/8 1 8100) (list 13/8 5/24 1 8000) (list 11/6 1/24 1 7900) (list 15/8 1/6 1 7300) (list 49/24 1/4 1 7000) (list 55/24 1/4 1 7700) (list 61/24 1/6 1 8600) (list 65/24 1/4 1 8200) (list 71/24 5/24 1 8100) (list 19/6 1/4 1 7100) (list 41/12 1/8 1 8000) (list 85/24 1/6 1 7000) (list 89/24 5/24 1 8300) (list 47/12 1/4 1 7000) (list 25/6 5/24 1 8300) (list 35/8 1/12 1 7600) (list 107/24 1/4 1 7200)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 234 160 85 5 163 5 213 82 179 155 141 237 194 99 164 134 112 166 94 144 139 39 238 233 24 143 254 141 12 245 164 130 188 251 10 230 68 81 166 154 221 83 217 160 159 49 223 149)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 42 50 135 102 154 164 171 235 99 146 243 89 40 62 246 151 42 255 118 56 249 234 7 32 82 207 31 110 29 36 223 171 30 42 53 243 73 21 120 65 244 125 77 54 80 149 144 196 234 160 85 5 163 5 213 82 179 155 141 237 194 99 164 134 112 166 94 144 139 39 238 233 24 143 254 141 12 245 164 130 188 251 10 230 68 81 166 154 221 83 217 160 159 49 223 149)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 363819.03 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 155 140 170 181 170 198 180 244 161 235 208 25 213 63 232 232 25 167 2 173 217 205 77 48 224 175 167 135 145 200 36 242 77 109 45 26 28 82 18 109 7 154 185 237 197 60 32 83 80 106 158 57 174 158 143 219 23 228 198 228 8 8 14 242 108 212 196 4 36 8 108 249 108 75 20 123 237 191 187 198 139 77 117 210 44 2 65 217 3 224 34 120 28 217 0 8) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 155 140 170 181 170 198 180 244 161 235 208 25 213 63 232 232 25 167 2 173 217 205 77 48 224 175 167 135 145 200 36 242 77 109 45 26 28 82 18 109 7 154 185 237 197 60 32 83) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 4100) (list 1/8 1/12 1 4100) (list 5/24 1/24 1 4100) (list 1/4 5/24 1 3600) (list 11/24 1/12 1 4700) (list 13/24 1/12 1 4900) (list 5/8 1/6 1 3900) (list 19/24 5/24 1 4300) (list 1 1/4 1 4600) (list 5/4 1/4 1 3800) (list 3/2 1/12 1 4300) (list 19/12 1/24 1 3800) (list 13/8 1/12 1 5000) (list 41/24 1/6 1 3800) (list 15/8 1/8 1 4600) (list 2 1/8 1 4200) (list 17/8 1/12 1 3800) (list 53/24 1/8 1 3600) (list 7/3 5/24 1 4900) (list 61/24 1/12 1 3900) (list 21/8 5/24 1 4300) (list 17/6 1/6 1 4100) (list 3 1/24 1 3800) (list 73/24 1/4 1 3800)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 140 170 181 170 198 180 244 161 235 208 25 213 63 232 232 25 167 2 173 217 205 77 48 224 175 167 135 145 200 36 242 77 109 45 26 28 82 18 109 7 154 185 237 197 60 32 83)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 80 106 158 57 174 158 143 219 23 228 198 228 8 8 14 242 108 212 196 4 36 8 108 249 108 75 20 123 237 191 187 198 139 77 117 210 44 2 65 217 3 224 34 120 28 217 0 8) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8200) (list 5/24 1/6 1 7500) (list 3/8 1/8 1 7400) (list 1/2 1/6 1 7700) (list 2/3 1/24 1 7600) (list 17/24 1/24 1 8100) (list 3/4 1/8 1 7800) (list 7/8 1/8 1 8400) (list 1 1/8 1 7600) (list 9/8 5/24 1 7900) (list 4/3 1/8 1 7200) (list 35/24 1/6 1 7600) (list 13/8 1/6 1 7600) (list 43/24 1/6 1 7300) (list 47/24 1/4 1 8600) (list 53/24 1/24 1 7000) (list 9/4 1/4 1 7300) (list 5/2 1/24 1 8500) (list 61/24 1/8 1 8000) (list 8/3 1/12 1 8400) (list 11/4 1/8 1 7300) (list 23/8 1/24 1 7000) (list 35/12 1/12 1 8100) (list 3 1/8 1 7000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 80 106 158 57 174 158 143 219 23 228 198 228 8 8 14 242 108 212 196 4 36 8 108 249 108 75 20 123 237 191 187 198 139 77 117 210 44 2 65 217 3 224 34 120 28 217 0 8)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 140 170 181 170 198 180 244 161 235 208 25 213 63 232 232 25 167 2 173 217 205 77 48 224 175 167 135 145 200 36 242 77 109 45 26 28 82 18 109 7 154 185 237 197 60 32 83 80 106 158 57 174 158 143 219 23 228 198 228 8 8 14 242 108 212 196 4 36 8 108 249 108 75 20 123 237 191 187 198 139 77 117 210 44 2 65 217 3 224 34 120 28 217 0 8)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 344008.16 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 123 45 58 50 253 53 239 252 35 188 246 59 92 182 22 187 3 19 209 167 36 22 121 153 171 141 119 199 130 95 73 78 252 253 30 122 68 159 240 33 120 184 117 64 7 80 112 125 183 118 5 196 74 236 203 41 57 82 119 121 144 238 70 54 176 176 156 189 104 45 128 204 73 172 232 98 101 100 214 198 201 64 253 241 55 150 50 173 206 22 3 7 29 163 70 1) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 123 45 58 50 253 53 239 252 35 188 246 59 92 182 22 187 3 19 209 167 36 22 121 153 171 141 119 199 130 95 73 78 252 253 30 122 68 159 240 33 120 184 117 64 7 80 112 125) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 3900) (list 1/6 1/8 1 4900) (list 7/24 1/4 1 4900) (list 13/24 1/24 1 5000) (list 7/12 1/8 1 4100) (list 17/24 1/4 1 4200) (list 23/24 1/8 1 3800) (list 13/12 1/12 1 4300) (list 7/6 1/12 1 3900) (list 5/4 1/4 1 5000) (list 3/2 5/24 1 4200) (list 41/24 1/6 1 3700) (list 15/8 1/6 1 4200) (list 49/24 1/12 1 5000) (list 17/8 1/4 1 4600) (list 19/8 1/24 1 4900) (list 29/12 1/12 1 4800) (list 5/2 1/8 1 3600) (list 21/8 1/6 1 4400) (list 67/24 1/6 1 3600) (list 71/24 5/24 1 3600) (list 19/6 5/24 1 4800) (list 27/8 1/8 1 4300) (list 7/2 1/4 1 4300)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 123 45 58 50 253 53 239 252 35 188 246 59 92 182 22 187 3 19 209 167 36 22 121 153 171 141 119 199 130 95 73 78 252 253 30 122 68 159 240 33 120 184 117 64 7 80 112 125)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 183 118 5 196 74 236 203 41 57 82 119 121 144 238 70 54 176 176 156 189 104 45 128 204 73 172 232 98 101 100 214 198 201 64 253 241 55 150 50 173 206 22 3 7 29 163 70 1) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8300) (list 5/24 5/24 1 7500) (list 5/12 1/8 1 7600) (list 13/24 1/4 1 8600) (list 19/24 5/24 1 7600) (list 1 1/12 1 7000) (list 13/12 5/24 1 7800) (list 31/24 1/24 1 7200) (list 4/3 1/8 1 7600) (list 35/24 1/6 1 7300) (list 13/8 1/6 1 7200) (list 43/24 1/24 1 7900) (list 11/6 5/24 1 7500) (list 49/24 1/8 1 8100) (list 13/6 5/24 1 8600) (list 19/8 1/24 1 8000) (list 29/12 5/24 1 8400) (list 21/8 1/12 1 8500) (list 65/24 1/24 1 7400) (list 11/4 1/4 1 8600) (list 3 5/24 1 7200) (list 77/24 1/12 1 7300) (list 79/24 1/12 1 8200) (list 27/8 1/12 1 7200)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 183 118 5 196 74 236 203 41 57 82 119 121 144 238 70 54 176 176 156 189 104 45 128 204 73 172 232 98 101 100 214 198 201 64 253 241 55 150 50 173 206 22 3 7 29 163 70 1)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 123 45 58 50 253 53 239 252 35 188 246 59 92 182 22 187 3 19 209 167 36 22 121 153 171 141 119 199 130 95 73 78 252 253 30 122 68 159 240 33 120 184 117 64 7 80 112 125 183 118 5 196 74 236 203 41 57 82 119 121 144 238 70 54 176 176 156 189 104 45 128 204 73 172 232 98 101 100 214 198 201 64 253 241 55 150 50 173 206 22 3 7 29 163 70 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 396015.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 113 232 193 158 146 121 93 138 198 217 17 69 37 188 114 56 76 202 41 224 86 96 20 218 206 206 232 89 230 8 77 243 64 36 131 20 87 166 156 240 41 167 154 101 71 124 209 123 16 224 11 38 42 154 100 42 229 35 166 208 5 40 182 4 186 223 138 5 240 9 201 220 11 237 124 140 174 64 248 179 11 255 184 13 117 169 68 222 100 158 92 150 167 185 7 180) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 113 232 193 158 146 121 93 138 198 217 17 69 37 188 114 56 76 202 41 224 86 96 20 218 206 206 232 89 230 8 77 243 64 36 131 20 87 166 156 240 41 167 154 101 71 124 209 123) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 4400) (list 5/24 1/8 1 4900) (list 1/3 1/12 1 4700) (list 5/12 1/24 1 3900) (list 11/24 1/12 1 3900) (list 13/24 1/6 1 3800) (list 17/24 1/8 1 4300) (list 5/6 1/8 1 4500) (list 23/24 5/24 1 3700) (list 7/6 1/8 1 4700) (list 31/24 1/24 1 4700) (list 4/3 1/8 1 4100) (list 35/24 1/8 1 4700) (list 19/12 1/4 1 4300) (list 11/6 1/8 1 4100) (list 47/24 1/6 1 3800) (list 17/8 1/24 1 4000) (list 13/6 1/8 1 4700) (list 55/24 5/24 1 4800) (list 5/2 1/24 1 4200) (list 61/24 1/4 1 4700) (list 67/24 1/4 1 4000) (list 73/24 5/24 1 4700) (list 13/4 1/6 1 5000)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 113 232 193 158 146 121 93 138 198 217 17 69 37 188 114 56 76 202 41 224 86 96 20 218 206 206 232 89 230 8 77 243 64 36 131 20 87 166 156 240 41 167 154 101 71 124 209 123)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 16 224 11 38 42 154 100 42 229 35 166 208 5 40 182 4 186 223 138 5 240 9 201 220 11 237 124 140 174 64 248 179 11 255 184 13 117 169 68 222 100 158 92 150 167 185 7 180) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 8600) (list 1/8 1/8 1 8100) (list 1/4 5/24 1 7800) (list 11/24 1/24 1 8500) (list 1/2 1/4 1 7800) (list 3/4 5/24 1 8300) (list 23/24 5/24 1 7500) (list 7/6 5/24 1 8200) (list 11/8 1/12 1 8600) (list 35/24 1/4 1 7200) (list 41/24 1/6 1 7200) (list 15/8 5/24 1 8400) (list 25/12 1/6 1 8100) (list 9/4 1/8 1 7500) (list 19/8 5/24 1 7400) (list 31/12 1/4 1 8000) (list 17/6 1/6 1 8100) (list 3 1/12 1 8400) (list 37/12 1/12 1 8500) (list 19/6 1/24 1 7000) (list 77/24 1/8 1 8500) (list 10/3 1/24 1 7700) (list 27/8 1/4 1 8400) (list 29/8 1/24 1 7700)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 16 224 11 38 42 154 100 42 229 35 166 208 5 40 182 4 186 223 138 5 240 9 201 220 11 237 124 140 174 64 248 179 11 255 184 13 117 169 68 222 100 158 92 150 167 185 7 180)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 113 232 193 158 146 121 93 138 198 217 17 69 37 188 114 56 76 202 41 224 86 96 20 218 206 206 232 89 230 8 77 243 64 36 131 20 87 166 156 240 41 167 154 101 71 124 209 123 16 224 11 38 42 154 100 42 229 35 166 208 5 40 182 4 186 223 138 5 240 9 201 220 11 237 124 140 174 64 248 179 11 255 184 13 117 169 68 222 100 158 92 150 167 185 7 180)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 416267.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 220 132 6 108 180 187 176 187 63 20 138 41 204 95 68 5 220 6 204 108 235 20 218 53 177 199 129 9 16 24 10 213 126 63 71 180 13 188 14 88 35 172 233 55 52 132 79 43 240 14 242 172 104 3 177 4 69 181 104 202 108 203 153 55 54 18 3 147 202 84 7 248 220 96 151 124 223 230 181 12 54 115 218 134 215 110 183 119 91 183 162 134 100 97 27 136) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 220 132 6 108 180 187 176 187 63 20 138 41 204 95 68 5 220 6 204 108 235 20 218 53 177 199 129 9 16 24 10 213 126 63 71 180 13 188 14 88 35 172 233 55 52 132 79 43) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 4600) (list 1/24 1/24 1 4200) (list 1/12 1/12 1 3600) (list 1/6 1/12 1 4700) (list 1/4 1/8 1 3900) (list 3/8 1/4 1 3900) (list 5/8 1/4 1 4500) (list 7/8 1/4 1 4400) (list 9/8 1/24 1 4600) (list 7/6 1/24 1 4500) (list 29/24 1/8 1 4600) (list 4/3 1/4 1 4400) (list 19/12 1/12 1 4800) (list 5/3 1/6 1 4500) (list 11/6 1/24 1 3700) (list 15/8 1/6 1 4600) (list 49/24 1/6 1 4200) (list 53/24 1/24 1 4700) (list 9/4 1/8 1 4900) (list 19/8 5/24 1 5000) (list 31/12 5/24 1 4100) (list 67/24 1/12 1 4400) (list 23/8 1/24 1 4300) (list 35/12 1/12 1 4000)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 220 132 6 108 180 187 176 187 63 20 138 41 204 95 68 5 220 6 204 108 235 20 218 53 177 199 129 9 16 24 10 213 126 63 71 180 13 188 14 88 35 172 233 55 52 132 79 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 240 14 242 172 104 3 177 4 69 181 104 202 108 203 153 55 54 18 3 147 202 84 7 248 220 96 151 124 223 230 181 12 54 115 218 134 215 110 183 119 91 183 162 134 100 97 27 136) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 7200) (list 1/8 5/24 1 7400) (list 1/3 1/6 1 7200) (list 1/2 5/24 1 7700) (list 17/24 1/12 1 7100) (list 19/24 5/24 1 7200) (list 1 1/4 1 7600) (list 5/4 1/12 1 7000) (list 4/3 1/24 1 7300) (list 11/8 1/6 1 7300) (list 37/24 1/24 1 8500) (list 19/12 1/8 1 7700) (list 41/24 1/24 1 8600) (list 7/4 5/24 1 8500) (list 47/24 1/8 1 7200) (list 25/12 1/24 1 8100) (list 17/8 1/12 1 7300) (list 53/24 1/8 1 8400) (list 7/3 1/8 1 8100) (list 59/24 1/4 1 8300) (list 65/24 1/6 1 7600) (list 23/8 1/8 1 7900) (list 3 1/12 1 8500) (list 37/12 5/24 1 8000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 240 14 242 172 104 3 177 4 69 181 104 202 108 203 153 55 54 18 3 147 202 84 7 248 220 96 151 124 223 230 181 12 54 115 218 134 215 110 183 119 91 183 162 134 100 97 27 136)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 220 132 6 108 180 187 176 187 63 20 138 41 204 95 68 5 220 6 204 108 235 20 218 53 177 199 129 9 16 24 10 213 126 63 71 180 13 188 14 88 35 172 233 55 52 132 79 43 240 14 242 172 104 3 177 4 69 181 104 202 108 203 153 55 54 18 3 147 202 84 7 248 220 96 151 124 223 230 181 12 54 115 218 134 215 110 183 119 91 183 162 134 100 97 27 136)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (1 (1 (1 1)) (1 (1.0 2)) (1 (1.0 1 4)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4 1.0 1)) (1 (2.0 3 1)) (1 (2.0 1)))) ((4 4) ((1 (1.0 4 1)) (1 (1.0 1 1 3)) (1 (1.0 1)) (1 (1.0 2)))) ((4 4) ((1 (2 3 1)) (1 (1.0 2)) (1 (1.0 2 -3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (3 2 1)) (1 (3 2 1)) (1 (1.0 1)) (1 (2 1)))) ((4 4) ((1 (3.0 2 1)) (1 (4.0 1.0 1)) (1 (1.0 4 1.0)) (1 (4 1.0 1)))) ((4 4) ((1 (4.0 1.0 1)) (1 (4.0 1.0 1)) (1 (3.0 1 2)) 1)) ((4 4) ((1 (2 1)) (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 487 326) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box t)) box))) (quote ((0 0 1 1 nil 0) (16 0 1 2 nil 0) (9 3 7 0 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (13 3 12 0 nil 0) (27 0 16 0 nil 0) (15 0 16 1 nil 0) (19 0 20 0 nil 0) (11 0 20 2 nil 0) (8 0 21 0 nil 0) (23 0 24 1 nil 0) (30 0 26 2 nil 0) (25 0 26 3 nil 0) (26 0 28 0 nil 0) (1 0 28 1 nil 0) (22 0 28 2 nil 0) (21 0 28 3 nil 0) (24 0 28 4 nil 0) (20 0 28 5 nil 0) (31 0 29 0 nil 0) (28 0 29 1 nil 0) (18 0 31 1 nil 0) (28 0 31 2 nil 0))) nil 6.1))
