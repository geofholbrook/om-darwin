; OM File Header - Saved 2015/06/22 9:37:10
; (6.1 :patc (om-make-point 195 476) (om-make-point 176 23) (om-make-point 1369 1099) "" 183 0 nil "2015/06/22 9:37:10")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "GA-DEMO" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 443 323) (om-make-point 76 30) (quote :melodic2) ":melodic2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 3" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :signed-melodic2) (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 406 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 33) (quote "FITNESS FUNCTION") "" (om-make-point 580 648) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 48) (quote "RANGE OF MELODIC INTERVALS IN SEMTIONES") "" (om-make-point 284 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PC RATE OF OCCURENCE") "" (om-make-point 214 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "RATE OF SIMULTANEOUS ATTACKS") "" (om-make-point 556 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 767 134) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0.01))) (om-make-point 692 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 646 219) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "0.0" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 100)) (om-load-inputfun (quote input-funbox) "step" "increment" 5) (om-load-inputfun (quote input-funbox) "slider value" "value" 0) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 523 64) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 25) "untitled" :direction :horizontal :range (quote (0 100)) :increment 1 :value 0))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1066 232) (om-make-point 39 30) 1/4 "1/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1/4))) (om-make-point 991 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1000 120) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "16" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 4 16)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 875 49) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 25) "untitled" :direction :horizontal :range (quote (4 16)) :increment 1 :value 16))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "LENGTH IN QUARTER NOTES") "" (om-make-point 917 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 449 207) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 394 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PITCH CLASSES$(precede with set)") "" (om-make-point 78 231) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "DEFINITION OF MODEL" (om-load-patch-abs1 "DEFINITION OF MODEL" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 170 305) (om-make-point 116 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 51 135) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 206 108) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 130 119) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 49 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 41 60) (om-make-point 90 30) (list 3600 5000) "(3600 5000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 290 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 371 112) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 447 101) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 292 128) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 166 521) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 168 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 294 40) (om-make-point 90 30) (list 7000 8600) "(7000 8600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 0 1 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (9 0 6 0 nil 0) (12 0 6 1 nil 0) (7 0 6 2 nil 0) (8 0 6 3 nil 0) (11 0 10 0 nil 0) (0 0 11 0 nil 0))) 6.1 nil "" (om-make-point 241 183) (om-make-point 697 790)) (quote nil) (om-make-point 184 609) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "DEFINITION OF MODEL"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 903 273) (om-make-point 51 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 966 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote abstraction) "rate of simultaneities" (om-load-patch-abs1 "rate of simultaneities" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 541) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 460 150) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 381 189) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 135) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 373 50) (om-make-point 66 30) (quote :attacks) ":attacks" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" 2) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 276 275) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 585 666)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 673 366) nil (list nil) nil "rate of simultaneities"))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote abstraction) "favour sextuplets, quarter notes" (om-load-patch-abs1 "favour sextuplets, quarter notes" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 63 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 73 306) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 406 103) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 335 50) (om-make-point 86 30) (list 1/12 1/6) "(2/24 4/24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 268 94) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 281 169) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 175 115) (om-make-point 38 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 111 56) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 50 114) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 63 189) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (9 0 1 0 nil 0) (5 0 1 1 nil 0) (4 0 5 0 nil 0) (3 0 5 2 nil 0) (2 0 5 3 nil 0) (8 0 9 0 nil 0) (7 0 9 2 nil 0) (6 0 9 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 531 628)) (quote nil) (om-make-point 479 425) nil (list nil) nil "favour sextuplets, quarter notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1051 468) (om-make-point 46 30) 1/8 "3/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "max difference in length of voices" (om-load-patch-abs1 "max difference in length of voices" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 448 456) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 493 553) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OFFBY" (quote om-darwin::offby) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "VALUE" "VALUE" nil))) (om-make-point 310 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max length diff" 1 (om-make-point 519 395) "" "max length diff" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 282 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 358 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 195 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 240 330) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-CHAN" (quote om-darwin::region-chan) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 117 174) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DEMIX" (quote demix) (quote ((om-load-inputfun (quote input-funbox) "LIS" "LIS" nil) (om-load-inputfun (quote input-funbox) "TEST" "TEST" nil))) (om-make-point 252 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pheno" 0 (om-make-point 208 18) "" "pheno" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 304 721) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (7 1 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (2 0 11 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 730 960)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 924 520) nil (list nil) "l" "max difference in length of voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 226 288) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 189 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 348 173) (om-make-point 48 30) (list 1 4) "(1 4)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 459 580) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 469 1035) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 91 277) (om-make-point 114 30) (list (quote :set) 0 4 6 7 10) "(:set 0 4 6 7 10)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 110 775) (om-make-point 1217 209) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 42 249 161 125 143 72 148 219 165 208 184 76 188 205 110 138 147 91 43 112 33 136 147 63 24 13 119 156 15 94 46 250 78 225 76 104 231 221 111 94 175 62 31 109 5 78 90 90 136 41 235 102 61 190 36 71 132 203 247 47 113 76 3 129 246 107 43 212 188 230 239 227 86 93 137 199 83 101 97 145 66 149 64 209 122 255 207 215 185 147 187 155 87 77 148)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 112548.57 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 148 124 246 204 161 193 189 25 109 130 166 14 58 35 24 93 134 140 236 12 163 82 21 140 233 33 162 95 167 172 254 197 223 47 213 141 136 121 238 200 33 44 223 31 81 228 101 164 182 93 250 254 249 146 89 93 39 163 48 73 54 9 55 165 212 237 89 116 254 194 42 66 73 8 163 75 167 231 72 74 69 143 242 228 9 252 132 5 194 232 254 121 178 244 101 119) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 148 124 246 204 161 193 189 25 109 130 166 14 58 35 24 93 134 140 236 12 163 82 21 140 233 33 162 95 167 172 254 197 223 47 213 141 136 121 238 200 33 44 223 31 81 228 101 164) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 4900) (list 5/24 1/24 1 4200) (list 1/4 1/12 1 4700) (list 1/3 1/12 1 4500) (list 5/12 5/24 1 4000) (list 5/8 1/8 1 3700) (list 3/4 1/4 1 4900) (list 1 1/6 1 4500) (list 7/6 1/8 1 5000) (list 31/24 1/24 1 4700) (list 4/3 5/24 1 4900) (list 37/24 1/8 1 4200) (list 5/3 1/6 1 4400) (list 11/6 1/4 1 4800) (list 25/12 5/24 1 3800) (list 55/24 1/4 1 5000) (list 61/24 1/4 1 4900) (list 67/24 1/6 1 3900) (list 71/24 1/12 1 3700) (list 73/24 1/8 1 4900) (list 19/6 1/8 1 3900) (list 79/24 1/12 1 4900) (list 27/8 1/24 1 4200) (list 41/12 1/8 1 4700)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 124 246 204 161 193 189 25 109 130 166 14 58 35 24 93 134 140 236 12 163 82 21 140 233 33 162 95 167 172 254 197 223 47 213 141 136 121 238 200 33 44 223 31 81 228 101 164)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 182 93 250 254 249 146 89 93 39 163 48 73 54 9 55 165 212 237 89 116 254 194 42 66 73 8 163 75 167 231 72 74 69 143 242 228 9 252 132 5 194 232 254 121 178 244 101 119) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 8200) (list 1/6 1/8 1 8200) (list 7/24 1/8 1 8100) (list 5/12 1/6 1 7400) (list 7/12 1/12 1 7500) (list 2/3 1/12 1 8400) (list 3/4 1/6 1 7300) (list 11/12 1/6 1 7400) (list 13/12 1/6 1 7800) (list 5/4 1/8 1 7400) (list 11/8 1/8 1 8600) (list 3/2 1/24 1 7800) (list 37/24 1/8 1 7500) (list 5/3 1/6 1 8000) (list 11/6 1/6 1 8400) (list 2 1/8 1 7400) (list 17/8 1/4 1 7100) (list 19/8 1/24 1 7400) (list 29/12 1/24 1 7900) (list 59/24 1/4 1 8300) (list 65/24 5/24 1 7700) (list 35/12 1/12 1 8600) (list 3 5/24 1 7800) (list 77/24 1/4 1 8600)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 93 250 254 249 146 89 93 39 163 48 73 54 9 55 165 212 237 89 116 254 194 42 66 73 8 163 75 167 231 72 74 69 143 242 228 9 252 132 5 194 232 254 121 178 244 101 119)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 124 246 204 161 193 189 25 109 130 166 14 58 35 24 93 134 140 236 12 163 82 21 140 233 33 162 95 167 172 254 197 223 47 213 141 136 121 238 200 33 44 223 31 81 228 101 164 182 93 250 254 249 146 89 93 39 163 48 73 54 9 55 165 212 237 89 116 254 194 42 66 73 8 163 75 167 231 72 74 69 143 242 228 9 252 132 5 194 232 254 121 178 244 101 119)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 131847.69 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 67 94 69 3 238 123 240 104 92 59 101 165 73 29 106 124 74 185 108 255 254 203 192 166 222 186 131 239 154 79 31 217 116 26 88 157 147 72 222 228 234 40 62 201 145 98 77 156 90 121 158 98 235 107 30 210 95 93 139 14 58 70 66 39 143 229 18 174 204 201 230 21 231 159 96 184 45 196 178 27 224 124 168 137 101 27 155 169 61 177 65 20 167 204 255 15) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 67 94 69 3 238 123 240 104 92 59 101 165 73 29 106 124 74 185 108 255 254 203 192 166 222 186 131 239 154 79 31 217 116 26 88 157 147 72 222 228 234 40 62 201 145 98 77 156) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 4300) (list 5/24 1/6 1 4500) (list 3/8 1/6 1 4900) (list 13/24 1/8 1 3600) (list 2/3 1/4 1 3800) (list 11/12 1/6 1 4700) (list 13/12 1/4 1 4900) (list 4/3 5/24 1 3700) (list 37/24 1/4 1 5000) (list 43/24 1/6 1 3900) (list 47/24 1/4 1 5000) (list 53/24 5/24 1 4800) (list 29/12 1/24 1 4800) (list 59/24 1/4 1 4700) (list 65/24 1/12 1 4000) (list 67/24 1/12 1 3700) (list 23/8 1/8 1 4700) (list 3 1/12 1 4900) (list 37/12 1/24 1 4800) (list 25/8 1/24 1 4800) (list 19/6 5/24 1 4500) (list 27/8 1/6 1 3800) (list 85/24 1/8 1 4600) (list 11/3 1/24 1 3800)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 67 94 69 3 238 123 240 104 92 59 101 165 73 29 106 124 74 185 108 255 254 203 192 166 222 186 131 239 154 79 31 217 116 26 88 157 147 72 222 228 234 40 62 201 145 98 77 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 90 121 158 98 235 107 30 210 95 93 139 14 58 70 66 39 143 229 18 174 204 201 230 21 231 159 96 184 45 196 178 27 224 124 168 137 101 27 155 169 61 177 65 20 167 204 255 15) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 7500) (list 1/12 1/8 1 7500) (list 5/24 1/4 1 8400) (list 11/24 1/24 1 8300) (list 1/2 1/6 1 8000) (list 2/3 1/8 1 7300) (list 19/24 5/24 1 7700) (list 1 1/6 1 8500) (list 7/6 1/12 1 7700) (list 5/4 1/24 1 7100) (list 31/24 1/6 1 7000) (list 35/24 1/6 1 7900) (list 13/8 1/6 1 8000) (list 43/24 5/24 1 8100) (list 2 5/24 1 8100) (list 53/24 1/6 1 7800) (list 19/8 5/24 1 7300) (list 31/12 1/4 1 8500) (list 17/6 1/6 1 8600) (list 3 1/12 1 7200) (list 37/12 1/6 1 8000) (list 13/4 1/8 1 8400) (list 27/8 1/24 1 8400) (list 41/12 1/6 1 7000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 90 121 158 98 235 107 30 210 95 93 139 14 58 70 66 39 143 229 18 174 204 201 230 21 231 159 96 184 45 196 178 27 224 124 168 137 101 27 155 169 61 177 65 20 167 204 255 15)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 67 94 69 3 238 123 240 104 92 59 101 165 73 29 106 124 74 185 108 255 254 203 192 166 222 186 131 239 154 79 31 217 116 26 88 157 147 72 222 228 234 40 62 201 145 98 77 156 90 121 158 98 235 107 30 210 95 93 139 14 58 70 66 39 143 229 18 174 204 201 230 21 231 159 96 184 45 196 178 27 224 124 168 137 101 27 155 169 61 177 65 20 167 204 255 15)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 149764.85 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 198 65 118 62 97 202 170 100 115 177 177 110 43 12 246 189 123 200 24 246 192 137 235 238 169 170 147 2 250 55 37 229 197 100 97 137 230 102 174 105 115 62 17 81 252 106 25 18 255 15 33 230 187 193 173 8 220 159 236 176 18 18 220 36 241 129 126 8 96 214 141 201 39 23 168 70 174 157 179 134 52 240 172 73 57 195 235 87 226 7 238 200 134 248 62 103) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 198 65 118 62 97 202 170 100 115 177 177 110 43 12 246 189 123 200 24 246 192 137 235 238 169 170 147 2 250 55 37 229 197 100 97 137 230 102 174 105 115 62 17 81 252 106 25 18) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 3900) (list 1/4 1/8 1 4900) (list 3/8 5/24 1 4300) (list 7/12 5/24 1 4100) (list 19/24 1/6 1 4600) (list 23/24 1/8 1 4800) (list 13/12 1/24 1 4900) (list 9/8 1/6 1 4200) (list 31/24 1/8 1 3900) (list 17/12 1/24 1 4500) (list 35/24 1/4 1 4800) (list 41/24 5/24 1 4600) (list 23/12 1/8 1 4000) (list 49/24 1/8 1 4800) (list 13/6 1/12 1 4600) (list 9/4 1/12 1 4300) (list 7/3 5/24 1 3800) (list 61/24 1/4 1 4300) (list 67/24 1/24 1 4100) (list 17/6 1/6 1 4500) (list 3 1/8 1 4600) (list 25/8 1/6 1 3800) (list 79/24 5/24 1 4800) (list 7/2 1/24 1 4600)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 65 118 62 97 202 170 100 115 177 177 110 43 12 246 189 123 200 24 246 192 137 235 238 169 170 147 2 250 55 37 229 197 100 97 137 230 102 174 105 115 62 17 81 252 106 25 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 255 15 33 230 187 193 173 8 220 159 236 176 18 18 220 36 241 129 126 8 96 214 141 201 39 23 168 70 174 157 179 134 52 240 172 73 57 195 235 87 226 7 238 200 134 248 62 103) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 7000) (list 1/6 1/8 1 8600) (list 7/24 1/12 1 7000) (list 3/8 1/8 1 7300) (list 1/2 1/6 1 8600) (list 2/3 1/8 1 8500) (list 19/24 1/24 1 7100) (list 5/6 1/24 1 8600) (list 7/8 1/6 1 7300) (list 25/24 1/8 1 7700) (list 7/6 5/24 1 8100) (list 11/8 1/6 1 7500) (list 37/24 1/4 1 7500) (list 43/24 5/24 1 8500) (list 2 1/12 1 7400) (list 25/12 1/8 1 7900) (list 53/24 1/24 1 7100) (list 9/4 1/12 1 7200) (list 7/3 1/6 1 7600) (list 5/2 1/6 1 8400) (list 8/3 1/12 1 7500) (list 11/4 1/8 1 7000) (list 23/8 1/8 1 8500) (list 3 1/12 1 8100)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 15 33 230 187 193 173 8 220 159 236 176 18 18 220 36 241 129 126 8 96 214 141 201 39 23 168 70 174 157 179 134 52 240 172 73 57 195 235 87 226 7 238 200 134 248 62 103)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 65 118 62 97 202 170 100 115 177 177 110 43 12 246 189 123 200 24 246 192 137 235 238 169 170 147 2 250 55 37 229 197 100 97 137 230 102 174 105 115 62 17 81 252 106 25 18 255 15 33 230 187 193 173 8 220 159 236 176 18 18 220 36 241 129 126 8 96 214 141 201 39 23 168 70 174 157 179 134 52 240 172 73 57 195 235 87 226 7 238 200 134 248 62 103)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 97725.78 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 127 185 65 224 142 50 26 132 105 13 36 57 116 87 11 63 221 89 233 197 82 14 112 78 196 133 200 160 169 248 162 23 47 24 102 115 9 235 127 52 28 127 45 116 46 233 199 220 115 111 109 5 34 231 152 234 91 72 1 59 5 3 157 43 165 102 232 133 246 6 187 204 88 50 89 50 87 232 174 226 16 163 230 253 167 182 90 189 206 91 142 225 135 239 232 217) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 127 185 65 224 142 50 26 132 105 13 36 57 116 87 11 63 221 89 233 197 82 14 112 78 196 133 200 160 169 248 162 23 47 24 102 115 9 235 127 52 28 127 45 116 46 233 199 220) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4300) (list 1/4 1/8 1 4100) (list 3/8 1/8 1 4300) (list 1/2 1/24 1 4700) (list 13/24 1/12 1 3600) (list 5/8 1/6 1 4200) (list 19/24 1/6 1 4700) (list 23/24 1/6 1 4700) (list 9/8 1/4 1 4700) (list 11/8 1/4 1 4400) (list 13/8 1/8 1 4300) (list 7/4 1/24 1 4300) (list 43/24 1/12 1 3700) (list 15/8 5/24 1 4100) (list 25/12 1/8 1 4000) (list 53/24 1/4 1 4800) (list 59/24 1/24 1 3800) (list 5/2 1/12 1 4800) (list 31/12 1/12 1 4500) (list 8/3 5/24 1 4300) (list 23/8 1/12 1 4900) (list 71/24 1/8 1 3600) (list 37/12 1/4 1 3700) (list 10/3 5/24 1 4000)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 127 185 65 224 142 50 26 132 105 13 36 57 116 87 11 63 221 89 233 197 82 14 112 78 196 133 200 160 169 248 162 23 47 24 102 115 9 235 127 52 28 127 45 116 46 233 199 220)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 115 111 109 5 34 231 152 234 91 72 1 59 5 3 157 43 165 102 232 133 246 6 187 204 88 50 89 50 87 232 174 226 16 163 230 253 167 182 90 189 206 91 142 225 135 239 232 217) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 8300) (list 1/6 1/4 1 7700) (list 5/12 1/6 1 7000) (list 7/12 1/24 1 8600) (list 5/8 1/24 1 7600) (list 2/3 1/4 1 7100) (list 11/12 1/6 1 7500) (list 13/12 1/12 1 7400) (list 7/6 1/24 1 8200) (list 29/24 1/12 1 8100) (list 31/24 1/24 1 7800) (list 4/3 1/24 1 7000) (list 11/8 1/8 1 7300) (list 3/2 1/8 1 7400) (list 13/8 5/24 1 7200) (list 11/6 5/24 1 7400) (list 49/24 1/12 1 8600) (list 17/8 1/12 1 7900) (list 53/24 1/8 1 8400) (list 7/3 1/6 1 7500) (list 5/2 1/12 1 7200) (list 31/12 1/6 1 7600) (list 11/4 1/4 1 8600) (list 3 1/12 1 8100)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 115 111 109 5 34 231 152 234 91 72 1 59 5 3 157 43 165 102 232 133 246 6 187 204 88 50 89 50 87 232 174 226 16 163 230 253 167 182 90 189 206 91 142 225 135 239 232 217)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 127 185 65 224 142 50 26 132 105 13 36 57 116 87 11 63 221 89 233 197 82 14 112 78 196 133 200 160 169 248 162 23 47 24 102 115 9 235 127 52 28 127 45 116 46 233 199 220 115 111 109 5 34 231 152 234 91 72 1 59 5 3 157 43 165 102 232 133 246 6 187 204 88 50 89 50 87 232 174 226 16 163 230 253 167 182 90 189 206 91 142 225 135 239 232 217)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 158325.2 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 255 12 145 109 7 224 13 130 226 3 127 56 254 251 14 215 185 47 160 130 134 141 244 196 164 72 196 184 80 77 135 174 203 161 106 110 201 168 60 93 250 20 8 223 115 79 112 116 243 21 145 197 60 115 175 217 50 217 119 169 183 192 63 253 149 64 221 110 95 73 47 36 181 21 75 203 105 117 125 122 157 49 251 4 71 239 202 54 172 77 55 9 135 142 30 203) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 255 12 145 109 7 224 13 130 226 3 127 56 254 251 14 215 185 47 160 130 134 141 244 196 164 72 196 184 80 77 135 174 203 161 106 110 201 168 60 93 250 20 8 223 115 79 112 116) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 3600) (list 1/24 1/12 1 4600) (list 1/8 1/8 1 4300) (list 1/4 5/24 1 4900) (list 11/24 1/6 1 3700) (list 5/8 1/8 1 4300) (list 3/4 1/4 1 5000) (list 1 1/4 1 5000) (list 5/4 1/4 1 4100) (list 3/2 5/24 1 4600) (list 41/24 1/6 1 5000) (list 15/8 5/24 1 4000) (list 25/12 1/24 1 5000) (list 17/8 5/24 1 3700) (list 7/3 1/4 1 4100) (list 31/12 1/24 1 3600) (list 21/8 1/4 1 4400) (list 23/8 1/8 1 3700) (list 3 1/24 1 4200) (list 73/24 1/6 1 3600) (list 77/24 1/8 1 4600) (list 10/3 1/12 1 4400) (list 41/12 1/12 1 4600) (list 7/2 1/8 1 4300)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 12 145 109 7 224 13 130 226 3 127 56 254 251 14 215 185 47 160 130 134 141 244 196 164 72 196 184 80 77 135 174 203 161 106 110 201 168 60 93 250 20 8 223 115 79 112 116)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 243 21 145 197 60 115 175 217 50 217 119 169 183 192 63 253 149 64 221 110 95 73 47 36 181 21 75 203 105 117 125 122 157 49 251 4 71 239 202 54 172 77 55 9 135 142 30 203) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 7500) (list 1/6 1/4 1 7900) (list 5/12 1/12 1 7900) (list 1/2 1/12 1 7500) (list 7/12 1/12 1 8600) (list 2/3 1/12 1 7000) (list 3/4 1/24 1 8300) (list 19/24 1/12 1 8200) (list 7/8 5/24 1 8300) (list 13/12 1/8 1 7000) (list 29/24 1/12 1 8000) (list 31/24 1/24 1 8300) (list 4/3 1/6 1 8100) (list 3/2 1/4 1 7700) (list 7/4 1/6 1 7300) (list 23/12 1/8 1 7600) (list 49/24 1/12 1 7400) (list 17/8 5/24 1 8300) (list 7/3 1/4 1 7300) (list 31/12 1/24 1 8500) (list 21/8 1/4 1 7200) (list 23/8 1/6 1 7400) (list 73/24 5/24 1 8600) (list 13/4 1/4 1 8300)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 243 21 145 197 60 115 175 217 50 217 119 169 183 192 63 253 149 64 221 110 95 73 47 36 181 21 75 203 105 117 125 122 157 49 251 4 71 239 202 54 172 77 55 9 135 142 30 203)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 12 145 109 7 224 13 130 226 3 127 56 254 251 14 215 185 47 160 130 134 141 244 196 164 72 196 184 80 77 135 174 203 161 106 110 201 168 60 93 250 20 8 223 115 79 112 116 243 21 145 197 60 115 175 217 50 217 119 169 183 192 63 253 149 64 221 110 95 73 47 36 181 21 75 203 105 117 125 122 157 49 251 4 71 239 202 54 172 77 55 9 135 142 30 203)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 100334.414 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 144 63 183 46 98 156 222 30 227 239 157 117 138 229 98 86 109 195 61 140 210 69 182 222 155 65 48 244 188 167 6 227 112 111 11 225 41 91 80 153 0 41 203 102 241 203 83 12 239 22 170 211 77 178 115 175 38 57 67 197 57 112 126 239 200 66 240 214 47 169 123 180 85 54 165 146 104 81 76 105 105 57 129 226 118 99 97 55 77 209 1 138 249 22 180 126) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 144 63 183 46 98 156 222 30 227 239 157 117 138 229 98 86 109 195 61 140 210 69 182 222 155 65 48 244 188 167 6 227 112 111 11 225 41 91 80 153 0 41 203 102 241 203 83 12) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 4500) (list 1/6 5/24 1 3900) (list 3/8 1/24 1 4400) (list 5/12 1/24 1 4800) (list 11/24 1/4 1 3800) (list 17/24 1/6 1 4300) (list 7/8 1/12 1 3900) (list 23/24 1/8 1 4400) (list 13/12 1/6 1 4000) (list 5/4 1/8 1 3700) (list 11/8 1/6 1 3600) (list 37/24 1/24 1 3800) (list 19/12 1/4 1 4100) (list 11/6 5/24 1 3900) (list 49/24 1/4 1 4400) (list 55/24 1/4 1 4200) (list 61/24 1/6 1 4300) (list 65/24 1/6 1 4700) (list 23/8 1/12 1 4700) (list 71/24 1/6 1 4100) (list 25/8 1/4 1 3600) (list 27/8 1/24 1 4400) (list 41/12 1/4 1 3700) (list 11/3 1/24 1 4400)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 63 183 46 98 156 222 30 227 239 157 117 138 229 98 86 109 195 61 140 210 69 182 222 155 65 48 244 188 167 6 227 112 111 11 225 41 91 80 153 0 41 203 102 241 203 83 12)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 239 22 170 211 77 178 115 175 38 57 67 197 57 112 126 239 200 66 240 214 47 169 123 180 85 54 165 146 104 81 76 105 105 57 129 226 118 99 97 55 77 209 1 138 249 22 180 126) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 7100) (list 5/24 1/12 1 7000) (list 7/24 5/24 1 7900) (list 1/2 1/12 1 8300) (list 7/12 1/6 1 7400) (list 3/4 1/4 1 8600) (list 1 5/24 1 7600) (list 29/24 1/4 1 7700) (list 35/24 1/24 1 8300) (list 3/2 5/24 1 7200) (list 41/24 1/12 1 8300) (list 43/24 1/24 1 7400) (list 11/6 1/24 1 7000) (list 15/8 1/8 1 8200) (list 2 1/6 1 7200) (list 13/6 1/6 1 7800) (list 7/3 1/6 1 7300) (list 5/2 5/24 1 8000) (list 65/24 1/6 1 8600) (list 23/8 1/12 1 8200) (list 71/24 1/4 1 7900) (list 77/24 1/24 1 7100) (list 13/4 5/24 1 8100) (list 83/24 1/24 1 8000)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 22 170 211 77 178 115 175 38 57 67 197 57 112 126 239 200 66 240 214 47 169 123 180 85 54 165 146 104 81 76 105 105 57 129 226 118 99 97 55 77 209 1 138 249 22 180 126)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 63 183 46 98 156 222 30 227 239 157 117 138 229 98 86 109 195 61 140 210 69 182 222 155 65 48 244 188 167 6 227 112 111 11 225 41 91 80 153 0 41 203 102 241 203 83 12 239 22 170 211 77 178 115 175 38 57 67 197 57 112 126 239 200 66 240 214 47 169 123 180 85 54 165 146 104 81 76 105 105 57 129 226 118 99 97 55 77 209 1 138 249 22 180 126)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 121024.01 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 154 124 115 31 249 215 255 33 106 126 248 164 111 164 225 110 205 54 202 131 107 16 52 167 79 143 255 23 191 37 216 33 1 99 68 214 171 132 161 239 201 254 207 188 172 207 76 77 11 165 36 246 148 54 187 127 216 101 209 132 131 196 89 73 246 117 45 82 176 188 26 67 113 167 99 166 108 100 206 103 100 232 67 170 156 122 76 89 185 3 255 52 93 11 14 111) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 154 124 115 31 249 215 255 33 106 126 248 164 111 164 225 110 205 54 202 131 107 16 52 167 79 143 255 23 191 37 216 33 1 99 68 214 171 132 161 239 201 254 207 188 172 207 76 77) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 4000) (list 5/24 1/12 1 4600) (list 7/24 1/4 1 4500) (list 13/24 1/6 1 3600) (list 17/24 1/24 1 3700) (list 3/4 1/8 1 4400) (list 7/8 1/8 1 4200) (list 1 1/8 1 3600) (list 9/8 1/24 1 4600) (list 7/6 1/4 1 4300) (list 17/12 5/24 1 3800) (list 13/8 1/4 1 4300) (list 15/8 1/4 1 4000) (list 17/8 1/4 1 3600) (list 19/8 1/12 1 4700) (list 59/24 1/6 1 4200) (list 21/8 1/6 1 3700) (list 67/24 5/24 1 4400) (list 3 1/24 1 4200) (list 73/24 1/4 1 4700) (list 79/24 1/8 1 4200) (list 41/12 1/8 1 4800) (list 85/24 1/6 1 4300) (list 89/24 1/4 1 3700)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 124 115 31 249 215 255 33 106 126 248 164 111 164 225 110 205 54 202 131 107 16 52 167 79 143 255 23 191 37 216 33 1 99 68 214 171 132 161 239 201 254 207 188 172 207 76 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 11 165 36 246 148 54 187 127 216 101 209 132 131 196 89 73 246 117 45 82 176 188 26 67 113 167 99 166 108 100 206 103 100 232 67 170 156 122 76 89 185 3 255 52 93 11 14 111) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/6 1 8100) (list 1/6 1/24 1 7200) (list 5/24 1/24 1 8200) (list 1/4 1/12 1 7000) (list 1/3 1/4 1 8200) (list 7/12 1/24 1 7500) (list 5/8 5/24 1 8200) (list 5/6 1/12 1 7400) (list 11/12 1/6 1 7800) (list 13/12 5/24 1 8100) (list 31/24 1/8 1 7600) (list 17/12 1/12 1 7900) (list 3/2 1/4 1 8100) (list 7/4 5/24 1 8400) (list 47/24 5/24 1 7600) (list 13/6 1/12 1 7200) (list 9/4 5/24 1 8500) (list 59/24 1/8 1 8600) (list 31/12 1/8 1 7300) (list 65/24 1/4 1 7800) (list 71/24 1/6 1 8500) (list 25/8 5/24 1 7000) (list 10/3 1/4 1 7800) (list 43/12 1/6 1 8400)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 11 165 36 246 148 54 187 127 216 101 209 132 131 196 89 73 246 117 45 82 176 188 26 67 113 167 99 166 108 100 206 103 100 232 67 170 156 122 76 89 185 3 255 52 93 11 14 111)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 124 115 31 249 215 255 33 106 126 248 164 111 164 225 110 205 54 202 131 107 16 52 167 79 143 255 23 191 37 216 33 1 99 68 214 171 132 161 239 201 254 207 188 172 207 76 77 11 165 36 246 148 54 187 127 216 101 209 132 131 196 89 73 246 117 45 82 176 188 26 67 113 167 99 166 108 100 206 103 100 232 67 170 156 122 76 89 185 3 255 52 93 11 14 111)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 121529.39 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 177 140 197 18 198 96 135 143 136 53 148 252 182 98 197 86 1 195 157 225 185 245 230 72 165 53 5 144 139 177 107 120 223 180 80 212 113 167 194 188 180 106 240 62 154 113 31 89 64 146 224 116 165 174 43 107 123 98 154 209 46 83 70 235 254 238 246 252 56 117 92 5 49 193 45 156 148 115 16 176 105 44 92 225 190 190 202 180 62 202 111 223 57 24 185 155) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 177 140 197 18 198 96 135 143 136 53 148 252 182 98 197 86 1 195 157 225 185 245 230 72 165 53 5 144 139 177 107 120 223 180 80 212 113 167 194 188 180 106 240 62 154 113 31 89) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 4800) (list 1/8 1/24 1 3800) (list 1/6 1/24 1 3900) (list 5/24 1/4 1 3600) (list 11/24 1/4 1 3700) (list 17/24 1/24 1 4900) (list 3/4 1/8 1 3800) (list 7/8 1/8 1 3800) (list 1 1/6 1 3700) (list 7/6 1/6 1 4300) (list 4/3 1/4 1 4100) (list 19/12 1/24 1 4100) (list 13/8 1/4 1 3600) (list 15/8 1/24 1 4100) (list 23/12 1/6 1 4000) (list 25/12 1/24 1 3800) (list 17/8 1/24 1 4900) (list 13/6 1/8 1 4100) (list 55/24 1/4 1 4400) (list 61/24 1/8 1 5000) (list 8/3 5/24 1 3600) (list 23/8 1/8 1 3600) (list 3 1/4 1 4000) (list 13/4 1/4 1 3700)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 177 140 197 18 198 96 135 143 136 53 148 252 182 98 197 86 1 195 157 225 185 245 230 72 165 53 5 144 139 177 107 120 223 180 80 212 113 167 194 188 180 106 240 62 154 113 31 89)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 64 146 224 116 165 174 43 107 123 98 154 209 46 83 70 235 254 238 246 252 56 117 92 5 49 193 45 156 148 115 16 176 105 44 92 225 190 190 202 180 62 202 111 223 57 24 185 155) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 8300) (list 1/8 1/8 1 7300) (list 1/4 1/24 1 8200) (list 7/24 1/4 1 7900) (list 13/24 1/8 1 7400) (list 2/3 1/4 1 7100) (list 11/12 1/4 1 8200) (list 7/6 1/12 1 7200) (list 5/4 5/24 1 8600) (list 35/24 1/24 1 7800) (list 3/2 1/6 1 7500) (list 5/3 1/4 1 7700) (list 23/12 1/12 1 8500) (list 2 1/24 1 8100) (list 49/24 1/12 1 8200) (list 17/8 1/8 1 8600) (list 9/4 1/8 1 7300) (list 19/8 1/6 1 7700) (list 61/24 5/24 1 7300) (list 11/4 1/24 1 8500) (list 67/24 5/24 1 8100) (list 3 1/12 1 7900) (list 37/12 1/24 1 7600) (list 25/8 1/4 1 8500)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 64 146 224 116 165 174 43 107 123 98 154 209 46 83 70 235 254 238 246 252 56 117 92 5 49 193 45 156 148 115 16 176 105 44 92 225 190 190 202 180 62 202 111 223 57 24 185 155)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 177 140 197 18 198 96 135 143 136 53 148 252 182 98 197 86 1 195 157 225 185 245 230 72 165 53 5 144 139 177 107 120 223 180 80 212 113 167 194 188 180 106 240 62 154 113 31 89 64 146 224 116 165 174 43 107 123 98 154 209 46 83 70 235 254 238 246 252 56 117 92 5 49 193 45 156 148 115 16 176 105 44 92 225 190 190 202 180 62 202 111 223 57 24 185 155)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 83660.914 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 30 97 200 183 6 2 49 102 69 92 120 3 245 225 248 199 95 164 50 148 201 247 151 218 108 111 57 137 151 22 147 23 157 206 107 28 180 134 15 94 31 250 204 60 106 53 152 217 97 154 21 192 155 180 55 0 152 36 36 182 185 117 165 125 114 209 49 77 45 95 56 7 204 171 139 146 75 17 110 9 93 173 79 207 8 188 28 66 62 79 1 181 110 152 38 200) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 30 97 200 183 6 2 49 102 69 92 120 3 245 225 248 199 95 164 50 148 201 247 151 218 108 111 57 137 151 22 147 23 157 206 107 28 180 134 15 94 31 250 204 60 106 53 152 217) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 3600) (list 1/12 1/6 1 4100) (list 1/4 1/8 1 4200) (list 3/8 1/24 1 4000) (list 5/12 1/8 1 4500) (list 13/24 1/6 1 3600) (list 17/24 1/6 1 4100) (list 7/8 1/12 1 4400) (list 23/24 1/8 1 4100) (list 13/12 5/24 1 4100) (list 31/24 1/12 1 4200) (list 11/8 1/8 1 3700) (list 3/2 1/6 1 3900) (list 5/3 1/4 1 4800) (list 23/12 5/24 1 3700) (list 17/8 1/4 1 4800) (list 19/8 1/8 1 4300) (list 5/2 5/24 1 3800) (list 65/24 1/8 1 3600) (list 17/6 5/24 1 3600) (list 73/24 5/24 1 3700) (list 13/4 1/24 1 4500) (list 79/24 1/4 1 3700) (list 85/24 1/12 1 3800)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 97 200 183 6 2 49 102 69 92 120 3 245 225 248 199 95 164 50 148 201 247 151 218 108 111 57 137 151 22 147 23 157 206 107 28 180 134 15 94 31 250 204 60 106 53 152 217)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 97 154 21 192 155 180 55 0 152 36 36 182 185 117 165 125 114 209 49 77 45 95 56 7 204 171 139 146 75 17 110 9 93 173 79 207 8 188 28 66 62 79 1 181 110 152 38 200) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 8200) (list 5/24 1/24 1 7400) (list 1/4 1/24 1 7200) (list 7/24 1/24 1 7400) (list 1/3 1/24 1 8600) (list 3/8 1/8 1 7200) (list 1/2 1/6 1 8500) (list 2/3 1/4 1 8200) (list 11/12 1/4 1 8200) (list 7/6 1/4 1 8500) (list 17/12 1/4 1 8100) (list 5/3 1/12 1 7500) (list 7/4 1/6 1 7000) (list 23/12 1/8 1 7300) (list 49/24 1/4 1 7700) (list 55/24 1/6 1 7800) (list 59/24 1/4 1 7800) (list 65/24 1/6 1 8100) (list 23/8 1/8 1 7800) (list 3 1/24 1 8100) (list 73/24 1/12 1 8100) (list 25/8 1/12 1 7100) (list 77/24 1/8 1 7800) (list 10/3 1/8 1 7400)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 97 154 21 192 155 180 55 0 152 36 36 182 185 117 165 125 114 209 49 77 45 95 56 7 204 171 139 146 75 17 110 9 93 173 79 207 8 188 28 66 62 79 1 181 110 152 38 200)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 97 200 183 6 2 49 102 69 92 120 3 245 225 248 199 95 164 50 148 201 247 151 218 108 111 57 137 151 22 147 23 157 206 107 28 180 134 15 94 31 250 204 60 106 53 152 217 97 154 21 192 155 180 55 0 152 36 36 182 185 117 165 125 114 209 49 77 45 95 56 7 204 171 139 146 75 17 110 9 93 173 79 207 8 188 28 66 62 79 1 181 110 152 38 200)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 77928.27 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 74 85 255 77 188 170 151 164 49 111 91 20 67 26 171 67 165 58 144 105 204 42 192 245 69 220 171 168 106 160 122 142 201 153 225 119 123 246 131 94 142 84 238 37 225 109 173 59 69 236 87 80 177 143 216 32 154 46 53 37 143 41 143 255 175 2 104 253 26 242 224 127 126 194 28 221 79 207 101 118 217 223 145 47 163 31 200 74 227 225 120 18 117 62 15 210) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 74 85 255 77 188 170 151 164 49 111 91 20 67 26 171 67 165 58 144 105 204 42 192 245 69 220 171 168 106 160 122 142 201 153 225 119 123 246 131 94 142 84 238 37 225 109 173 59) :decoder (list (list 3600 5000 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/12 1 5000) (list 1/12 1/4 1 3600) (list 1/3 1/8 1 4400) (list 11/24 1/8 1 3700) (list 7/12 1/6 1 4000) (list 3/4 1/8 1 3700) (list 7/8 1/8 1 4300) (list 1 1/12 1 4200) (list 13/12 5/24 1 3600) (list 31/24 1/6 1 4500) (list 35/24 1/24 1 4500) (list 3/2 1/4 1 4800) (list 7/4 5/24 1 4500) (list 47/24 1/24 1 4200) (list 2 5/24 1 3700) (list 53/24 5/24 1 3800) (list 29/12 1/6 1 4200) (list 31/12 1/4 1 3600) (list 17/6 1/24 1 3900) (list 23/8 5/24 1 4700) (list 37/12 1/24 1 4300) (list 25/8 1/12 1 4900) (list 77/24 1/12 1 3600) (list 79/24 1/4 1 4400)) :range (list 3600 5000) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 74 85 255 77 188 170 151 164 49 111 91 20 67 26 171 67 165 58 144 105 204 42 192 245 69 220 171 168 106 160 122 142 201 153 225 119 123 246 131 94 142 84 238 37 225 109 173 59)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 69 236 87 80 177 143 216 32 154 46 53 37 143 41 143 255 175 2 104 253 26 242 224 127 126 194 28 221 79 207 101 118 217 223 145 47 163 31 200 74 227 225 120 18 117 62 15 210) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 7100) (list 1/8 1/8 1 7200) (list 1/4 1/4 1 7700) (list 1/2 1/8 1 8200) (list 5/8 5/24 1 7100) (list 5/6 1/12 1 7200) (list 11/12 1/4 1 7700) (list 7/6 1/6 1 7700) (list 4/3 1/8 1 7500) (list 35/24 1/12 1 7200) (list 37/24 1/8 1 7900) (list 5/3 1/12 1 7300) (list 7/4 1/8 1 7700) (list 15/8 1/4 1 8100) (list 17/8 1/6 1 8100) (list 55/24 5/24 1 8600) (list 5/2 1/12 1 8300) (list 31/12 1/4 1 7900) (list 17/6 1/12 1 8000) (list 35/12 1/8 1 8300) (list 73/24 1/6 1 7600) (list 77/24 1/24 1 7100) (list 13/4 1/8 1 8500) (list 27/8 1/24 1 8500)) :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 69 236 87 80 177 143 216 32 154 46 53 37 143 41 143 255 175 2 104 253 26 242 224 127 126 194 28 221 79 207 101 118 217 223 145 47 163 31 200 74 227 225 120 18 117 62 15 210)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 74 85 255 77 188 170 151 164 49 111 91 20 67 26 171 67 165 58 144 105 204 42 192 245 69 220 171 168 106 160 122 142 201 153 225 119 123 246 131 94 142 84 238 37 225 109 173 59 69 236 87 80 177 143 216 32 154 46 53 37 143 41 143 255 175 2 104 253 26 242 224 127 126 194 28 221 79 207 101 118 217 223 145 47 163 31 200 74 227 225 120 18 117 62 15 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (2 1)) (1 (1.0 3 2)) (1 (1.0 1 1)) (1 (2 1)))) ((4 4) ((1 (1.0 2)) (1 (1 1)) (1 (1 3 2)) (1 (1.0 2)))) ((4 4) ((1 (1 1)) (1 (1.0 (1 (1 1 1)))) (1 (4.0 1.0 1)) (1 (2.0 1)))) ((4 4) ((1 (4 1.0 1)) (1 (4.0 1.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (4 1.0 1)) (1 (1 1 1)) (1 (1.0 1)) 1)) ((4 4) ((1 (2 1)) (1 (1.0 1 4)) (1 (1.0 3 2)) (1 (1.0 2)))) ((4 4) ((1 (1.0 2)) (1 (1.0 4 1.0)) (1 (1.0 4 1.0)) (1 (1.0 4 1)))) ((4 4) ((1 (1.0 3 2)) (1 (1.0 2 1 2)) (1 (1.0 -4 -1.0)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 487 326) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf)) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box t)) box))) (quote ((0 0 1 1 nil 0) (16 0 1 2 nil 0) (9 3 7 0 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (13 3 12 0 nil 0) (27 0 16 0 nil 0) (15 0 16 1 nil 0) (19 0 20 0 nil 0) (11 0 20 2 nil 0) (8 0 21 0 nil 0) (23 0 24 1 nil 0) (30 0 26 2 nil 0) (25 0 26 3 nil 0) (26 0 28 0 nil 0) (1 0 28 1 nil 0) (22 0 28 2 nil 0) (21 0 28 3 nil 0) (24 0 28 4 nil 0) (20 0 28 5 nil 0) (31 0 29 0 nil 0) (28 0 29 1 nil 0) (18 0 31 1 nil 0) (28 0 31 2 nil 0))) nil 6.1))
