; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :maqt (om-make-point 128 340) (om-make-point 144 105) (om-make-point 918 563) "" 182 0 nil "2015/06/22 11:03:39")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-maq2 "4b. overlap maquette" (quote ((let ((box (om-load-tempobj1 "test verticalities overlap" (quote ((om-load-inputfun (quote input-funbox) "" "input" (list 7200 9600)))) (list (quote patch) (om-load-patch-abs1 "test verticalities overlap" (quote ((let ((box (om-load-boxin "input" 1 (om-make-point 879 97) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 6000 8000)))) (om-make-point 715 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "verts" (om-load-patch-abs1 "verts" (quote ((let ((box (om-load-boxcall (quote abstraction) "count-two-fers" (om-load-lisp-abspatch "count-two-fers" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"count-two-fers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (groups)$  (* (loop for group in (remove-if-not #'(lambda (g)$                                           (> (length g) 1))$                                       groups)$           ;do (print group)$           sum (abs (- (d::region-pitch (first group))$                       (d::region-pitch (second group)))))$     1000))$") (quote ((om-load-inputfun (quote input-funbox) "" "GROUPS" nil))) (om-make-point 144 598) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONVERT-TO-CHORD-LIST" (quote om-darwin::convert-to-chord-list) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 488) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 348 306) (om-make-point 104 30) (quote om-darwin::region-start) "d::region-start" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 246 385) (om-make-point 96 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 246 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "spec" 1 (om-make-point 415 27) "" "spec" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-MAQ-OVERLAPS" (quote get-maq-overlaps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 127 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 2 nil 0) (8 0 4 0 nil 0) (5 0 4 1 nil 0) (0 0 6 0 nil 0) (7 0 8 0 nil 0))) 6.1 nil "" (om-make-point 1097 266) (om-make-point 611 725)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 567 185) nil (list nil) "l" "verts"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 521 37) (om-make-point 226 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 498 378) (om-make-point 149 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 188 95) (om-make-point 90 30) (list 2400 9600) "(2400 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 58) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 74) (om-make-point 76 30) (list 100 200) "(100 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 329 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 65 514) (om-make-point 649 144) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) nil) (setf (om-darwin::population om-darwin::ga) (list (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2415.869 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2563.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2731.926 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2901.0996 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 77) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1177 1026) (om-make-point 567 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 95 156) (om-make-point 123 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 248 770) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (7 0 8 0 nil 0) (10 0 9 1 nil 0) (4 0 9 2 nil 0) (6 0 10 0 nil 0) (5 0 10 1 nil 0) (9 0 11 0 nil 0))) 6.1 nil "" (om-make-point 1208 246) (om-make-point 966 876))) 0 1069 8370 (om-make-color 0.5 0.5 0.6) (list (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 76 219 76 1 61 241 246 215 170 237 69 206 30 41 98 129 24 145 194 208 140 164 202 145 9 40 125 69 38 93 57 71) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 76 219 76 1 61 241 246 215 170 237 69 206 30 41 98 129 24 145 194 208 140 164 202 145 9 40 125 69 38 93 57 71)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 2065191.5 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 141 68 131 44 148 82 188 21 139 193 33 107 147 154 47 113 203 182 94 221 16 182 118 91 98 174 142 23 106 79 215 91) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 9200) (list 1/16 1/16 1 9200) (list 1/8 1/16 1 8200) (list 3/16 1/16 1 6800) (list 1/4 1/16 1 2600) (list 5/16 1/16 1 3300) (list 3/8 1/16 1 6600) (list 7/16 1/16 1 4500) (list 1/2 1/16 1 9000) (list 9/16 1/16 1 7100) (list 5/8 1/16 1 5700) (list 11/16 1/16 1 5800) (list 3/4 1/16 1 2500) (list 13/16 1/16 1 3200) (list 7/8 1/16 1 7100) (list 15/16 1/16 1 6400) (list 1 1/16 1 8100) (list 17/16 1/16 1 6000) (list 9/8 1/16 1 4500) (list 19/16 1/16 1 2600) (list 5/4 1/16 1 4000) (list 21/16 1/16 1 6000) (list 11/8 1/16 1 6900) (list 23/16 1/16 1 4200) (list 3/2 1/16 1 4900) (list 25/16 1/16 1 5200) (list 13/8 1/16 1 9300) (list 27/16 1/16 1 4700) (list 7/4 1/16 1 5700) (list 29/16 1/16 1 3000) (list 15/8 1/16 1 9300) (list 31/16 1/16 1 4200)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 141 68 131 44 148 82 188 21 139 193 33 107 147 154 47 113 203 182 94 221 16 182 118 91 98 174 142 23 106 79 215 91)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2182945.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 29 208 24 8 232 147 76 99 188 249 21 5 157 159 222 131 238 15 138 64 189 43 84 250 226 208 126 69 247 252 241 211) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5300) (list 1/16 1/16 1 8600) (list 1/8 1/16 1 4800) (list 3/16 1/16 1 3200) (list 1/4 1/16 1 3700) (list 5/16 1/16 1 2500) (list 3/8 1/16 1 2700) (list 7/16 1/16 1 5000) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 5400) (list 5/8 1/16 1 4500) (list 11/16 1/16 1 2900) (list 3/4 1/16 1 3500) (list 13/16 1/16 1 3700) (list 7/8 1/16 1 2700) (list 15/16 1/16 1 8200) (list 1 1/16 1 4300) (list 17/16 1/16 1 3900) (list 9/8 1/16 1 8900) (list 19/16 1/16 1 8800) (list 5/4 1/16 1 6700) (list 21/16 1/16 1 6700) (list 11/8 1/16 1 3500) (list 23/16 1/16 1 5500) (list 3/2 1/16 1 3100) (list 25/16 1/16 1 8600) (list 13/8 1/16 1 7700) (list 27/16 1/16 1 9300) (list 7/4 1/16 1 5200) (list 29/16 1/16 1 5700) (list 15/8 1/16 1 4600) (list 31/16 1/16 1 8900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 208 24 8 232 147 76 99 188 249 21 5 157 159 222 131 238 15 138 64 189 43 84 250 226 208 126 69 247 252 241 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2161367.8 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 59 71 215 18 231 113 233 53 226 243 29 173 248 53 172 239 149 41 86 97 82 166 156 63 238 25 78 100 39 122 239 16) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8300) (list 1/16 1/16 1 9500) (list 1/8 1/16 1 9300) (list 3/16 1/16 1 4200) (list 1/4 1/16 1 3600) (list 5/16 1/16 1 6400) (list 3/8 1/16 1 3800) (list 7/16 1/16 1 7700) (list 1/2 1/16 1 3100) (list 9/16 1/16 1 4800) (list 5/8 1/16 1 5300) (list 11/16 1/16 1 5100) (list 3/4 1/16 1 5300) (list 13/16 1/16 1 7700) (list 7/8 1/16 1 5000) (list 15/16 1/16 1 4400) (list 1 1/16 1 2700) (list 17/16 1/16 1 6500) (list 9/8 1/16 1 3700) (list 19/16 1/16 1 4800) (list 5/4 1/16 1 3300) (list 21/16 1/16 1 4400) (list 11/8 1/16 1 3400) (list 23/16 1/16 1 8700) (list 3/2 1/16 1 4300) (list 25/16 1/16 1 4900) (list 13/8 1/16 1 2900) (list 27/16 1/16 1 5100) (list 7/4 1/16 1 6300) (list 29/16 1/16 1 7300) (list 15/8 1/16 1 4400) (list 31/16 1/16 1 4000)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 71 215 18 231 113 233 53 226 243 29 173 248 53 172 239 149 41 86 97 82 166 156 63 238 25 78 100 39 122 239 16)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2526536.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 156 150 79 63 12 68 132 119 169 80 0 84 151 59 59 99 96 249 153 73 218 249 76 31 137 110 17 187 60 185 231 85) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 3400) (list 1/16 1/16 1 2800) (list 1/8 1/16 1 3000) (list 3/16 1/16 1 8700) (list 1/4 1/16 1 3600) (list 5/16 1/16 1 9200) (list 3/8 1/16 1 8300) (list 7/16 1/16 1 7000) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 3100) (list 5/8 1/16 1 2400) (list 11/16 1/16 1 3500) (list 3/4 1/16 1 2900) (list 13/16 1/16 1 8300) (list 7/8 1/16 1 8300) (list 15/16 1/16 1 5000) (list 1 1/16 1 4700) (list 17/16 1/16 1 5400) (list 9/8 1/16 1 3100) (list 19/16 1/16 1 2400) (list 5/4 1/16 1 9600) (list 21/16 1/16 1 5400) (list 11/8 1/16 1 2700) (list 23/16 1/16 1 5500) (list 3/2 1/16 1 8800) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 4100) (list 27/16 1/16 1 6500) (list 7/4 1/16 1 8400) (list 29/16 1/16 1 6300) (list 15/8 1/16 1 3600) (list 31/16 1/16 1 3600)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 156 150 79 63 12 68 132 119 169 80 0 84 151 59 59 99 96 249 153 73 218 249 76 31 137 110 17 187 60 185 231 85)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2376113.8 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 98 42 93 117 153 122 126 184 207 152 206 83 241 215 230 190 253 226 19 128 167 138 137 184 193 154 178 252 218 121 83 26) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 4900) (list 1/16 1/16 1 6600) (list 1/8 1/16 1 4400) (list 3/16 1/16 1 6800) (list 1/4 1/16 1 3100) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7700) (list 7/16 1/16 1 6200) (list 1/2 1/16 1 8500) (list 9/16 1/16 1 3000) (list 5/8 1/16 1 8400) (list 11/16 1/16 1 3400) (list 3/4 1/16 1 4600) (list 13/16 1/16 1 9300) (list 7/8 1/16 1 3500) (list 15/16 1/16 1 6800) (list 1 1/16 1 5800) (list 17/16 1/16 1 3100) (list 9/8 1/16 1 4300) (list 19/16 1/16 1 7900) (list 5/4 1/16 1 4500) (list 21/16 1/16 1 8900) (list 11/8 1/16 1 8800) (list 23/16 1/16 1 6200) (list 3/2 1/16 1 7100) (list 25/16 1/16 1 3200) (list 13/8 1/16 1 5600) (list 27/16 1/16 1 5700) (list 7/4 1/16 1 9600) (list 29/16 1/16 1 7200) (list 15/8 1/16 1 3400) (list 31/16 1/16 1 5000)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 98 42 93 117 153 122 126 184 207 152 206 83 241 215 230 190 253 226 19 128 167 138 137 184 193 154 178 252 218 121 83 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2184778.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 206 105 254 203 32 55 176 58 65 7 216 179 220 126 158 40 22 173 220 212 139 137 186 156 188 241 164 8 245 173 30 86) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8400) (list 1/16 1/16 1 5600) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 8100) (list 1/4 1/16 1 5600) (list 5/16 1/16 1 7900) (list 3/8 1/16 1 5400) (list 7/16 1/16 1 8200) (list 1/2 1/16 1 8900) (list 9/16 1/16 1 3100) (list 5/8 1/16 1 9400) (list 11/16 1/16 1 5700) (list 3/4 1/16 1 2500) (list 13/16 1/16 1 7700) (list 7/8 1/16 1 3600) (list 15/16 1/16 1 6400) (list 1 1/16 1 4600) (list 17/16 1/16 1 5100) (list 9/8 1/16 1 2500) (list 19/16 1/16 1 9000) (list 5/4 1/16 1 9000) (list 21/16 1/16 1 8800) (list 11/8 1/16 1 6400) (list 23/16 1/16 1 3400) (list 3/2 1/16 1 6600) (list 25/16 1/16 1 4600) (list 13/8 1/16 1 4200) (list 27/16 1/16 1 3200) (list 7/4 1/16 1 5000) (list 29/16 1/16 1 5100) (list 15/8 1/16 1 5400) (list 31/16 1/16 1 3700)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 206 105 254 203 32 55 176 58 65 7 216 179 220 126 158 40 22 173 220 212 139 137 186 156 188 241 164 8 245 173 30 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1982276.8 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 137 129 61 103 54 97 194 200 171 184 77 222 163 46 101 93 3 8 94 200 103 62 36 242 127 10 137 111 19 254 11 178) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8800) (list 1/16 1/16 1 8000) (list 1/8 1/16 1 8500) (list 3/16 1/16 1 5400) (list 1/4 1/16 1 7800) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7800) (list 1/2 1/16 1 4900) (list 9/16 1/16 1 6200) (list 5/8 1/16 1 2800) (list 11/16 1/16 1 2700) (list 3/4 1/16 1 4100) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 5200) (list 15/16 1/16 1 4400) (list 1 1/16 1 2700) (list 17/16 1/16 1 3200) (list 9/8 1/16 1 4500) (list 19/16 1/16 1 7800) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 8600) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 4700) (list 3/2 1/16 1 7800) (list 25/16 1/16 1 3400) (list 13/8 1/16 1 8800) (list 27/16 1/16 1 6200) (list 7/4 1/16 1 4300) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 3500) (list 31/16 1/16 1 5600)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 129 61 103 54 97 194 200 171 184 77 222 163 46 101 93 3 8 94 200 103 62 36 242 127 10 137 111 19 254 11 178)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2278379.5 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 144 0 188 33 204 141 117 178 230 52 83 240 248 194 176 114 176 147 102 192 28 97 59 19 63 37 89 47 81 63 93 158) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 9500) (list 1/16 1/16 1 2400) (list 1/8 1/16 1 6600) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 8200) (list 5/16 1/16 1 9200) (list 3/8 1/16 1 6800) (list 7/16 1/16 1 5600) (list 1/2 1/16 1 3500) (list 9/16 1/16 1 7600) (list 5/8 1/16 1 3400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 5300) (list 13/16 1/16 1 7200) (list 7/8 1/16 1 5400) (list 15/16 1/16 1 6500) (list 1 1/16 1 5400) (list 17/16 1/16 1 2500) (list 9/8 1/16 1 5300) (list 19/16 1/16 1 7000) (list 5/4 1/16 1 5200) (list 21/16 1/16 1 4800) (list 11/8 1/16 1 8300) (list 23/16 1/16 1 4300) (list 3/2 1/16 1 8700) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 4000) (list 27/16 1/16 1 7100) (list 7/4 1/16 1 3200) (list 29/16 1/16 1 8700) (list 15/8 1/16 1 4400) (list 31/16 1/16 1 3600)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 0 188 33 204 141 117 178 230 52 83 240 248 194 176 114 176 147 102 192 28 97 59 19 63 37 89 47 81 63 93 158)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1981849.1 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 129 49 149 38 41 15 117 184 243 46 41 90 135 47 148 75 174 200 66 79 76 15 46 131 239 184 244 184 132 41 158 39) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8000) (list 1/16 1/16 1 7300) (list 1/8 1/16 1 2700) (list 3/16 1/16 1 6200) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 3900) (list 3/8 1/16 1 6800) (list 7/16 1/16 1 6200) (list 1/2 1/16 1 4800) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 6500) (list 11/16 1/16 1 4100) (list 3/4 1/16 1 8600) (list 13/16 1/16 1 7100) (list 7/8 1/16 1 2600) (list 15/16 1/16 1 2600) (list 1 1/16 1 5200) (list 17/16 1/16 1 7800) (list 9/8 1/16 1 9000) (list 19/16 1/16 1 3000) (list 5/4 1/16 1 2700) (list 21/16 1/16 1 3900) (list 11/8 1/16 1 7000) (list 23/16 1/16 1 8200) (list 3/2 1/16 1 4400) (list 25/16 1/16 1 6200) (list 13/8 1/16 1 4900) (list 27/16 1/16 1 6200) (list 7/4 1/16 1 8300) (list 29/16 1/16 1 6500) (list 15/8 1/16 1 3600) (list 31/16 1/16 1 6300)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 129 49 149 38 41 15 117 184 243 46 41 90 135 47 148 75 174 200 66 79 76 15 46 131 239 184 244 184 132 41 158 39)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2017220.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 129 27 84 75 223 6 251 67 46 4 109 173 76 67 196 20 19 35 11 197 134 60 168 178 176 122 116 238 125 181 54 92) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8000) (list 1/16 1/16 1 5100) (list 1/8 1/16 1 3500) (list 3/16 1/16 1 2600) (list 1/4 1/16 1 2800) (list 5/16 1/16 1 3000) (list 3/8 1/16 1 5600) (list 7/16 1/16 1 9100) (list 1/2 1/16 1 7000) (list 9/16 1/16 1 2800) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 5100) (list 3/4 1/16 1 2700) (list 13/16 1/16 1 9100) (list 7/8 1/16 1 7400) (list 15/16 1/16 1 4400) (list 1 1/16 1 4300) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 3500) (list 19/16 1/16 1 7500) (list 5/4 1/16 1 8500) (list 21/16 1/16 1 8400) (list 11/8 1/16 1 4600) (list 23/16 1/16 1 5600) (list 3/2 1/16 1 5400) (list 25/16 1/16 1 7300) (list 13/8 1/16 1 6700) (list 27/16 1/16 1 4300) (list 7/4 1/16 1 7600) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 7800) (list 31/16 1/16 1 4300)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 129 27 84 75 223 6 251 67 46 4 109 173 76 67 196 20 19 35 11 197 134 60 168 178 176 122 116 238 125 181 54 92)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 22 27 1 nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "test verticalities overlap" (quote ((om-load-inputfun (quote input-funbox) "" "input" (list 3600 6000)))) (list (quote patch) (om-load-patch-abs1 "test verticalities overlap" (quote ((let ((box (om-load-boxin "input" 1 (om-make-point 701 134) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 6000 8000)))) (om-make-point 703 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "verts" (om-load-patch-abs1 "verts" (quote ((let ((box (om-load-boxcall (quote abstraction) "count-two-fers" (om-load-lisp-abspatch "count-two-fers" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"count-two-fers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (groups)$  (* (loop for group in (remove-if-not #'(lambda (g)$                                           (> (length g) 1))$                                       groups)$           ;do (print group)$           sum (abs (- (d::region-pitch (first group))$                       (d::region-pitch (second group)))))$     1000))$") (quote ((om-load-inputfun (quote input-funbox) "" "GROUPS" nil))) (om-make-point 144 598) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONVERT-TO-CHORD-LIST" (quote om-darwin::convert-to-chord-list) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 488) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 348 306) (om-make-point 104 30) (quote om-darwin::region-start) "d::region-start" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 246 385) (om-make-point 96 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 246 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pheno" 1 (om-make-point 340 19) "" "pheno" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-MAQ-OVERLAPS" (quote get-maq-overlaps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 81 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 2 nil 0) (8 0 4 0 nil 0) (5 0 4 1 nil 0) (0 0 6 0 nil 0) (7 0 8 0 nil 0))) 6.1 nil "" (om-make-point 1757 323) (om-make-point 593 872)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "spec" nil))) (om-make-point 499 208) (om-make-point 95 67) (list nil) "l" "verts"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 564 44) (om-make-point 226 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 394 366) (om-make-point 149 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 188 95) (om-make-point 90 30) (list 2400 9600) "(2400 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 58) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 74) (om-make-point 76 30) (list 100 200) "(100 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 329 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 65 514) (om-make-point 649 144) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) nil) (setf (om-darwin::population om-darwin::ga) (list (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2415.869 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2563.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2731.926 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2901.0996 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 77) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1177 1026) (om-make-point 567 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 95 156) (om-make-point 123 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 248 770) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (7 0 8 0 nil 0) (10 0 9 1 nil 0) (4 0 9 2 nil 0) (6 0 10 0 nil 0) (5 0 10 1 nil 0) (9 0 11 0 nil 0))) 6.1 nil "" (om-make-point 123 119) (om-make-point 1057 887))) 0 9257 7915 (om-make-color 0.5 0.5 0.6) (list (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 18 228 33 134 48 132 68 15 193 15 153 100 129 63 142 92 47 90 88 170 176 49 214 201 217 207 116 210 22 129 87 14) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 228 33 134 48 132 68 15 193 15 153 100 129 63 142 92 47 90 88 170 176 49 214 201 217 207 116 210 22 129 87 14)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 1951654.5 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 51 55 242 150 206 26 48 40 249 138 160 244 94 34 145 17 99 192 161 177 56 218 107 204 157 115 215 92 120 95 132 81) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7500) (list 1/16 1/16 1 7900) (list 1/8 1/16 1 4700) (list 3/16 1/16 1 2800) (list 1/4 1/16 1 8400) (list 5/16 1/16 1 5000) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 6400) (list 1/2 1/16 1 5400) (list 9/16 1/16 1 8900) (list 5/8 1/16 1 3800) (list 11/16 1/16 1 4900) (list 3/4 1/16 1 4500) (list 13/16 1/16 1 5800) (list 7/8 1/16 1 9600) (list 15/16 1/16 1 4100) (list 1 1/16 1 5000) (list 17/16 1/16 1 7000) (list 9/8 1/16 1 3900) (list 19/16 1/16 1 5500) (list 5/4 1/16 1 8000) (list 21/16 1/16 1 9600) (list 11/8 1/16 1 5800) (list 23/16 1/16 1 8200) (list 3/2 1/16 1 3500) (list 25/16 1/16 1 6600) (list 13/8 1/16 1 9300) (list 27/16 1/16 1 4300) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 4600) (list 15/8 1/16 1 8300) (list 31/16 1/16 1 3200)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 51 55 242 150 206 26 48 40 249 138 160 244 94 34 145 17 99 192 161 177 56 218 107 204 157 115 215 92 120 95 132 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1917906.4 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 122 222 134 109 68 189 2 7 156 10 210 32 89 40 237 14 167 207 223 197 151 124 217 86 75 84 12 183 148 96 129 253) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7300) (list 1/16 1/16 1 2700) (list 1/8 1/16 1 8500) (list 3/16 1/16 1 6000) (list 1/4 1/16 1 9200) (list 5/16 1/16 1 6700) (list 3/8 1/16 1 2600) (list 7/16 1/16 1 3100) (list 1/2 1/16 1 3400) (list 9/16 1/16 1 3400) (list 5/8 1/16 1 8800) (list 11/16 1/16 1 5600) (list 3/4 1/16 1 4000) (list 13/16 1/16 1 6400) (list 7/8 1/16 1 4200) (list 15/16 1/16 1 3800) (list 1 1/16 1 4500) (list 17/16 1/16 1 8500) (list 9/8 1/16 1 2800) (list 19/16 1/16 1 7500) (list 5/4 1/16 1 2900) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 9500) (list 23/16 1/16 1 3700) (list 3/2 1/16 1 2600) (list 25/16 1/16 1 3500) (list 13/8 1/16 1 3600) (list 27/16 1/16 1 6100) (list 7/4 1/16 1 2600) (list 29/16 1/16 1 4700) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 5800)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 122 222 134 109 68 189 2 7 156 10 210 32 89 40 237 14 167 207 223 197 151 124 217 86 75 84 12 183 148 96 129 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1489545.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 43 36 119 110 173 197 241 12 39 4 175 187 138 121 171 218 87 80 10 225 101 127 33 169 253 205 185 1 209 170 162 137) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6700) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 7000) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 5100) (list 5/16 1/16 1 7500) (list 3/8 1/16 1 4600) (list 7/16 1/16 1 3600) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 2800) (list 5/8 1/16 1 5300) (list 11/16 1/16 1 6500) (list 3/4 1/16 1 8900) (list 13/16 1/16 1 7200) (list 7/8 1/16 1 4900) (list 15/16 1/16 1 9600) (list 1 1/16 1 3800) (list 17/16 1/16 1 3100) (list 9/8 1/16 1 3400) (list 19/16 1/16 1 3000) (list 5/4 1/16 1 5200) (list 21/16 1/16 1 7800) (list 11/8 1/16 1 5700) (list 23/16 1/16 1 4700) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 8300) (list 13/8 1/16 1 6300) (list 27/16 1/16 1 2500) (list 7/4 1/16 1 8700) (list 29/16 1/16 1 4800) (list 15/8 1/16 1 4000) (list 31/16 1/16 1 8800)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 43 36 119 110 173 197 241 12 39 4 175 187 138 121 171 218 87 80 10 225 101 127 33 169 253 205 185 1 209 170 162 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1034007.25 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 91 103 15 28 19 89 100 44 182 169 37 185 96 152 75 55 165 79 208 77 171 85 30 53 190 95 40 246 192 229 77 97) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 4200) (list 1/16 1/16 1 5400) (list 1/8 1/16 1 3900) (list 3/16 1/16 1 5200) (list 1/4 1/16 1 4300) (list 5/16 1/16 1 4000) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6000) (list 9/16 1/16 1 4700) (list 5/8 1/16 1 6100) (list 11/16 1/16 1 6300) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 3000) (list 7/8 1/16 1 2600) (list 15/16 1/16 1 7900) (list 1 1/16 1 4300) (list 17/16 1/16 1 3000) (list 9/8 1/16 1 8600) (list 19/16 1/16 1 2800) (list 5/4 1/16 1 4900) (list 21/16 1/16 1 3600) (list 11/8 1/16 1 5400) (list 23/16 1/16 1 7700) (list 3/2 1/16 1 6800) (list 25/16 1/16 1 4600) (list 13/8 1/16 1 6400) (list 27/16 1/16 1 5100) (list 7/4 1/16 1 7000) (list 29/16 1/16 1 3400) (list 15/8 1/16 1 2800) (list 31/16 1/16 1 4800)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 103 15 28 19 89 100 44 182 169 37 185 96 152 75 55 165 79 208 77 171 85 30 53 190 95 40 246 192 229 77 97)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1597543.8 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 136 223 191 192 188 15 3 144 118 196 91 7 230 129 163 83 188 190 197 153 225 251 23 213 138 22 224 243 207 100 184 108) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 8700) (list 1/16 1/16 1 2800) (list 1/8 1/16 1 6900) (list 3/16 1/16 1 7000) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 3900) (list 3/8 1/16 1 2700) (list 7/16 1/16 1 9500) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 4200) (list 11/16 1/16 1 3100) (list 3/4 1/16 1 3500) (list 13/16 1/16 1 8000) (list 7/8 1/16 1 4100) (list 15/16 1/16 1 3400) (list 1 1/16 1 6600) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 3100) (list 5/4 1/16 1 3000) (list 21/16 1/16 1 5600) (list 11/8 1/16 1 4700) (list 23/16 1/16 1 9100) (list 3/2 1/16 1 8900) (list 25/16 1/16 1 4600) (list 13/8 1/16 1 2900) (list 27/16 1/16 1 4800) (list 7/4 1/16 1 8500) (list 29/16 1/16 1 5100) (list 15/8 1/16 1 6200) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 136 223 191 192 188 15 3 144 118 196 91 7 230 129 163 83 188 190 197 153 225 251 23 213 138 22 224 243 207 100 184 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1029299.1 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 246 103 1 24 3 58 156 87 151 239 23 127 247 82 58 194 166 252 33 240 238 13 26 203 243 23 250 248 11 2 17) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 2500) (list 1/16 1/16 1 5100) (list 1/8 1/16 1 5400) (list 3/16 1/16 1 2500) (list 1/4 1/16 1 4800) (list 5/16 1/16 1 2700) (list 3/8 1/16 1 8200) (list 7/16 1/16 1 3400) (list 1/2 1/16 1 3800) (list 9/16 1/16 1 2900) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4700) (list 3/4 1/16 1 7800) (list 13/16 1/16 1 5200) (list 7/8 1/16 1 3300) (list 15/16 1/16 1 8200) (list 1 1/16 1 7200) (list 17/16 1/16 1 4400) (list 9/8 1/16 1 5700) (list 19/16 1/16 1 5700) (list 5/4 1/16 1 4500) (list 21/16 1/16 1 4300) (list 11/8 1/16 1 3700) (list 23/16 1/16 1 5000) (list 3/2 1/16 1 8100) (list 25/16 1/16 1 4800) (list 13/8 1/16 1 4700) (list 27/16 1/16 1 5500) (list 7/4 1/16 1 5300) (list 29/16 1/16 1 3500) (list 15/8 1/16 1 2600) (list 31/16 1/16 1 4100)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 246 103 1 24 3 58 156 87 151 239 23 127 247 82 58 194 166 252 33 240 238 13 26 203 243 23 250 248 11 2 17)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1175378.1 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 85 86 77 24 20 20 251 224 90 239 67 183 113 226 94 24 244 229 248 50 235 254 131 83 119 63 6 33 48 200 211 115) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 3600) (list 1/16 1/16 1 3700) (list 1/8 1/16 1 2800) (list 3/16 1/16 1 4800) (list 1/4 1/16 1 4400) (list 5/16 1/16 1 4400) (list 3/8 1/16 1 5600) (list 7/16 1/16 1 2900) (list 1/2 1/16 1 4100) (list 9/16 1/16 1 4400) (list 5/8 1/16 1 9100) (list 11/16 1/16 1 6100) (list 3/4 1/16 1 6400) (list 13/16 1/16 1 3100) (list 7/8 1/16 1 4500) (list 15/16 1/16 1 4800) (list 1 1/16 1 4900) (list 17/16 1/16 1 3400) (list 9/8 1/16 1 5300) (list 19/16 1/16 1 7400) (list 5/4 1/16 1 4000) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 8200) (list 23/16 1/16 1 3400) (list 3/2 1/16 1 7000) (list 25/16 1/16 1 8700) (list 13/8 1/16 1 3000) (list 27/16 1/16 1 5700) (list 7/4 1/16 1 7200) (list 29/16 1/16 1 7800) (list 15/8 1/16 1 8900) (list 31/16 1/16 1 6600)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 86 77 24 20 20 251 224 90 239 67 183 113 226 94 24 244 229 248 50 235 254 131 83 119 63 6 33 48 200 211 115)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2022707.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 4 176 202 65 138 220 135 9 94 113 169 173 123 104 49 107 170 148 74 140 1 51 206 2 53 29 186 201 228 170 59 38) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 2800) (list 1/16 1/16 1 5400) (list 1/8 1/16 1 8000) (list 3/16 1/16 1 8900) (list 1/4 1/16 1 8900) (list 5/16 1/16 1 2500) (list 3/8 1/16 1 8600) (list 7/16 1/16 1 3300) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 6400) (list 5/8 1/16 1 4700) (list 11/16 1/16 1 5100) (list 3/4 1/16 1 7400) (list 13/16 1/16 1 5500) (list 7/8 1/16 1 7300) (list 15/16 1/16 1 5800) (list 1 1/16 1 4800) (list 17/16 1/16 1 2600) (list 9/8 1/16 1 2500) (list 19/16 1/16 1 9100) (list 5/4 1/16 1 2500) (list 21/16 1/16 1 7500) (list 11/8 1/16 1 8400) (list 23/16 1/16 1 2600) (list 3/2 1/16 1 7700) (list 25/16 1/16 1 5300) (list 13/8 1/16 1 6400) (list 27/16 1/16 1 7900) (list 7/4 1/16 1 3300) (list 29/16 1/16 1 4800) (list 15/8 1/16 1 8300) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 4 176 202 65 138 220 135 9 94 113 169 173 123 104 49 107 170 148 74 140 1 51 206 2 53 29 186 201 228 170 59 38)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1389054.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 171 28 44 246 232 221 66 8 45 109 109 150 66 247 180 78 191 248 43 45 92 252 238 224 234 48 43 7 151 13 238 215) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 4900) (list 1/16 1/16 1 5200) (list 1/8 1/16 1 6800) (list 3/16 1/16 1 5100) (list 1/4 1/16 1 3700) (list 5/16 1/16 1 2600) (list 3/8 1/16 1 9000) (list 7/16 1/16 1 3200) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 6000) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 2800) (list 3/4 1/16 1 9000) (list 13/16 1/16 1 5200) (list 7/8 1/16 1 5800) (list 15/16 1/16 1 2900) (list 1 1/16 1 6900) (list 17/16 1/16 1 5300) (list 9/8 1/16 1 6700) (list 19/16 1/16 1 6900) (list 5/4 1/16 1 4300) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 4300) (list 23/16 1/16 1 2900) (list 3/2 1/16 1 3900) (list 25/16 1/16 1 7200) (list 13/8 1/16 1 6700) (list 27/16 1/16 1 3100) (list 7/4 1/16 1 2900) (list 29/16 1/16 1 3700) (list 15/8 1/16 1 4300) (list 31/16 1/16 1 9300)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 28 44 246 232 221 66 8 45 109 109 150 66 247 180 78 191 248 43 45 92 252 238 224 234 48 43 7 151 13 238 215)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1970125.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 219 130 196 195 210 74 110 176 132 146 201 169 234 55 61 219 18 57 183 217 207 5 123 201 98 176 243 255 81 7 191 114) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 2400) (list 1/16 1/16 1 8100) (list 1/8 1/16 1 7400) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 8800) (list 5/16 1/16 1 2500) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 5400) (list 1/2 1/16 1 8300) (list 9/16 1/16 1 2400) (list 5/8 1/16 1 7900) (list 11/16 1/16 1 4700) (list 3/4 1/16 1 3900) (list 13/16 1/16 1 7900) (list 7/8 1/16 1 8500) (list 15/16 1/16 1 2400) (list 1 1/16 1 4200) (list 17/16 1/16 1 8100) (list 9/8 1/16 1 6100) (list 19/16 1/16 1 9500) (list 5/4 1/16 1 8500) (list 21/16 1/16 1 2900) (list 11/8 1/16 1 7400) (list 23/16 1/16 1 7900) (list 3/2 1/16 1 4900) (list 25/16 1/16 1 5400) (list 13/8 1/16 1 4800) (list 27/16 1/16 1 6000) (list 7/4 1/16 1 3200) (list 29/16 1/16 1 3100) (list 15/8 1/16 1 6900) (list 31/16 1/16 1 6500)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 219 130 196 195 210 74 110 176 132 146 201 169 234 55 61 219 18 57 183 217 207 5 123 201 98 176 243 255 81 7 191 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 22 55 1 nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 20243 0 63)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) (quote nil) nil t "off" 6.1 nil (quote (1)) (quote (1)) nil))
