; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 172 60) (om-make-point 211 34) (om-make-point 793 802) "" 183 0 "2015/06/22 9:42:20" "2015/06/22 11:05:54")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "5. embedding species" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 531 141) (quote "embedding: built-in species combined with custom species") "" (om-make-point 65 14) nil (om-make-color 0 0 0) (om-make-font "Futura" 48.0 :family "Futura" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 501 235) (om-make-point 83 30) (list 400 1100) "(400 1100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 400 1100)))) (om-make-point 545 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 261 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "partials plus rhythm" (om-load-patch-abs1 "partials plus rhythm" (quote ((let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIES" (quote embed-species) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 435 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 263 629) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "number of notes" 2 (om-make-point 369 42) "" "number of notes" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fundamental frequency" 1 (om-make-point 203 87) "" "fundamental frequency" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-partial" 0 (om-make-point 119 34) "" "max-partial" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 507 82) (om-make-point 46 30) 1/32 "1/32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 569 136) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 222 548) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 404 423) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 207 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 64 65) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 460 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 80 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 104 254) (om-make-point 107 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 16))) (om-make-point 258 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (7 0 1 0 nil 0) (8 0 7 0 nil 0) (14 0 7 1 nil 0) (0 0 8 0 nil 0) (13 0 9 0 nil 0) (2 0 11 0 nil 0) (5 0 11 2 nil 0) (6 0 11 3 nil 0) (10 0 12 0 nil 0) (4 0 12 1 nil 0) (12 0 13 0 nil 0) (3 0 13 1 nil 0) (9 0 14 0 nil 0) (2 0 14 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 699 759)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 141 293) (om-make-point 201 67) (list nil) "l" "partials plus rhythm"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 317 181) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 196 183) (om-make-point 34 30) 55 "55" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 88 202) (om-make-point 34 30) 18 "18" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 130 526) (om-make-point 522 158) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 160 45 143 36 130 247 111 214 42 131 158 83 7 89 100 221 77 29 182 158 42 51 130 252 237 12 167 209 124 35 182 49 76 255 178 216 28 226 76 123 253 157 33 3 52 186 195 186 169 232 231 15 176 163 211 123 142 216 92 21 81 34 167 130 59 116 12 141 32 160 7 200 158 133 57 227 37 207 106 156 127 47 147 118 216 218 208 58 40 230 171 4 238 132 199 59) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 45 143 36 130 247 111 214 42 131 158 83 7 89 100 221 77 29 182 158 42 51 130 252 237 12 167 209 124 35 182 49 76 255 178 216 28 226 76 123 253 157 33 3 52 186 195 186 169 232 231 15 176 163 211 123 142 216 92 21 81 34 167 130 59 116 12 141 32 160 7 200 158 133 57 227 37 207 106 156 127 47 147 118 216 218 208 58 40 230 171 4 238 132 199 59)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 415441.88 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 243 103 182 104 124 72 116 21 92 54 224 33 188 97 105 202 134 74 12 188 243 38 218 252 11 54 33 228 201 231 110 41 32 233 60 112 169 157 29 141 110 191 148 57 107 249 32 144 74 254 145 181 112 105 28 137 161 164 236 241 19 52 235 164 161 181 245 206 98 234 24 148 10 79 170 150 69 26 150 217 197 208 188 250 162 20 198 140 241 101 119 1 7 165 2 203) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 243 103 182 104 124 72 116 21 92 54 224 33 188 97 105 202 134 74 12 188 243 38 218 252 11 54 33 228 201 231 110 41 32 233 60 112 169 157 29 141 110 191 148 57 107 249 32 144 74 254 145 181 112 105 28 137 161 164 236 241 19 52 235 164 161 181 245 206 98 234 24 148 10 79 170 150 69 26 150 217 197 208 188 250 162 20 198 140 241 101 119 1 7 165 2 203)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 230122.05 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 93 6 88 2 68 161 131 39 193 127 27 60 100 110 114 174 85 146 196 219 168 206 181 129 221 51 52 231 55 92 223 72 83 201 243 196 25 183 31 152 207 187 113 217 184 108 87 107 122 221 237 217 104 117 167 91 35 245 8 188 60 70 91 80 216 175 61 40 222 7 192 14 161 202 129 56 44 40 56 88 43 241 243 152 37 163 163 163 162 1 65 151 38 90 223 94) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 6 88 2 68 161 131 39 193 127 27 60 100 110 114 174 85 146 196 219 168 206 181 129 221 51 52 231 55 92 223 72 83 201 243 196 25 183 31 152 207 187 113 217 184 108 87 107 122 221 237 217 104 117 167 91 35 245 8 188 60 70 91 80 216 175 61 40 222 7 192 14 161 202 129 56 44 40 56 88 43 241 243 152 37 163 163 163 162 1 65 151 38 90 223 94)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 262819.78 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 31 69 154 51 137 60 13 41 109 227 154 170 128 131 58 81 44 2 81 77 227 171 246 196 56 203 58 32 194 126 237 70 72 177 151 55 68 191 103 240 232 205 233 162 59 139 199 17 28 185 167 137 196 251 101 141 77 204 192 130 206 144 93 203 105 147 36 192 197 26 63 32 12 244 110 111 243 43 197 26 6 226 68 76 125 163 19 28 44 91 6 134 129 47 8) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 31 69 154 51 137 60 13 41 109 227 154 170 128 131 58 81 44 2 81 77 227 171 246 196 56 203 58 32 194 126 237 70 72 177 151 55 68 191 103 240 232 205 233 162 59 139 199 17 28 185 167 137 196 251 101 141 77 204 192 130 206 144 93 203 105 147 36 192 197 26 63 32 12 244 110 111 243 43 197 26 6 226 68 76 125 163 19 28 44 91 6 134 129 47 8)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 240721.83 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 255 146 214 142 26 227 74 69 180 173 190 156 97 156 127 211 233 150 133 203 110 173 208 12 145 156 50 143 23 181 116 24 13 93 210 106 243 188 60 104 206 207 118 131 181 158 21 179 4 174 61 59 242 42 23 159 53 98 134 214 8 131 28 123 141 20 230 83 29 234 158 154 53 10 169 161 250 35 48 211 150 23 239 189 247 52 138 236 230 80 70 219 40 6 104 6) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 146 214 142 26 227 74 69 180 173 190 156 97 156 127 211 233 150 133 203 110 173 208 12 145 156 50 143 23 181 116 24 13 93 210 106 243 188 60 104 206 207 118 131 181 158 21 179 4 174 61 59 242 42 23 159 53 98 134 214 8 131 28 123 141 20 230 83 29 234 158 154 53 10 169 161 250 35 48 211 150 23 239 189 247 52 138 236 230 80 70 219 40 6 104 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 134167.24 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 38 172 15 153 254 173 113 21 101 17 82 197 192 219 104 234 127 144 190 2 14 211 239 163 248 19 187 78 204 149 152 116 102 241 138 249 72 56 92 216 252 40 174 217 18 173 96 87 140 216 75 171 207 145 156 18 2 37 247 245 169 113 61 13 122 115 153 237 21 76 214 28 152 79 185 162 128 65 12 21 224 69 193 64 9 179 117 109 255 148 53 79 170 174 26 192) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 38 172 15 153 254 173 113 21 101 17 82 197 192 219 104 234 127 144 190 2 14 211 239 163 248 19 187 78 204 149 152 116 102 241 138 249 72 56 92 216 252 40 174 217 18 173 96 87 140 216 75 171 207 145 156 18 2 37 247 245 169 113 61 13 122 115 153 237 21 76 214 28 152 79 185 162 128 65 12 21 224 69 193 64 9 179 117 109 255 148 53 79 170 174 26 192)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 318476.03 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 45 113 194 228 231 187 121 197 216 18 130 252 129 187 1 29 225 128 83 122 109 121 60 218 87 234 163 7 130 165 232 25 121 177 186 51 138 102 159 53 148 245 237 52 144 158 215 69 161 26 3 77 35 95 70 234 115 158 26 69 225 102 13 166 121 233 181 75 161 244 40 33 111 125 188 158 155 34 67 93 65 35 199 136 80 40 31 42 163 234 213 9 149 93 181 100) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 113 194 228 231 187 121 197 216 18 130 252 129 187 1 29 225 128 83 122 109 121 60 218 87 234 163 7 130 165 232 25 121 177 186 51 138 102 159 53 148 245 237 52 144 158 215 69 161 26 3 77 35 95 70 234 115 158 26 69 225 102 13 166 121 233 181 75 161 244 40 33 111 125 188 158 155 34 67 93 65 35 199 136 80 40 31 42 163 234 213 9 149 93 181 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 175311.33 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 229 58 159 61 191 89 13 29 216 30 167 17 104 100 91 15 104 95 37 213 14 213 254 49 136 165 218 178 60 22 176 197 243 202 196 10 12 114 95 210 49 58 13 208 118 151 239 169 48 240 218 48 137 174 170 45 107 3 203 101 127 124 172 79 227 32 56 218 242 254 19 143 23 177 62 94 172 221 183 16 221 127 163 151 46 113 66 173 228 68 232 102 95 229 194 81) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 58 159 61 191 89 13 29 216 30 167 17 104 100 91 15 104 95 37 213 14 213 254 49 136 165 218 178 60 22 176 197 243 202 196 10 12 114 95 210 49 58 13 208 118 151 239 169 48 240 218 48 137 174 170 45 107 3 203 101 127 124 172 79 227 32 56 218 242 254 19 143 23 177 62 94 172 221 183 16 221 127 163 151 46 113 66 173 228 68 232 102 95 229 194 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 389126.6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 78 123 135 212 127 21 130 196 115 49 189 118 144 207 108 49 224 71 125 115 225 101 30 247 60 234 168 51 218 129 58 183 24 63 11 150 237 20 213 222 93 70 196 0 3 173 38 9 60 38 84 73 235 184 7 147 200 223 21 4 152 155 81 142 5 58 144 210 27 89 235 131 163 201 44 82 216 254 209 178 137 72 222 27 213 10 168 68 71 38 193 47 48 203 224 235) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 78 123 135 212 127 21 130 196 115 49 189 118 144 207 108 49 224 71 125 115 225 101 30 247 60 234 168 51 218 129 58 183 24 63 11 150 237 20 213 222 93 70 196 0 3 173 38 9 60 38 84 73 235 184 7 147 200 223 21 4 152 155 81 142 5 58 144 210 27 89 235 131 163 201 44 82 216 254 209 178 137 72 222 27 213 10 168 68 71 38 193 47 48 203 224 235)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 323464.16 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 231 217 12 69 252 223 255 93 77 180 223 107 153 181 246 244 217 119 1 211 40 147 28 14 165 105 174 65 93 246 227 245 177 95 246 228 111 65 195 3 229 76 238 94 66 41 88 38 98 147 56 164 32 44 220 140 109 59 226 80 66 34 82 153 45 91 249 249 33 78 1 219 150 13 204 179 74 236 51 216 235 35 175 56 7 71 76 142 83 223 104 98 17 6 192 226) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 217 12 69 252 223 255 93 77 180 223 107 153 181 246 244 217 119 1 211 40 147 28 14 165 105 174 65 93 246 227 245 177 95 246 228 111 65 195 3 229 76 238 94 66 41 88 38 98 147 56 164 32 44 220 140 109 59 226 80 66 34 82 153 45 91 249 249 33 78 1 219 150 13 204 179 74 236 51 216 235 35 175 56 7 71 76 142 83 223 104 98 17 6 192 226)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 352175.38 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 61 110 23 180 168 202 159 26 255 123 246 230 183 93 246 219 162 134 59 12 200 57 32 137 240 169 218 169 217 177 72 74 97 36 218 57 18 234 22 92 17 92 104 16 224 103 233 20 23 188 220 247 130 236 135 207 61 142 227 220 137 50 91 140 84 80 201 61 95 196 182 157 247 234 191 187 12 16 193 232 106 142 183 60 122 165 237 122 42 4 81 73 220 18 174 85) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 61 110 23 180 168 202 159 26 255 123 246 230 183 93 246 219 162 134 59 12 200 57 32 137 240 169 218 169 217 177 72 74 97 36 218 57 18 234 22 92 17 92 104 16 224 103 233 20 23 188 220 247 130 236 135 207 61 142 227 220 137 50 91 140 84 80 201 61 95 196 182 157 247 234 191 187 12 16 193 232 106 142 183 60 122 165 237 122 42 4 81 73 220 18 174 85)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (2 1 1 2 1 1)) (1 (1.0 2 1 1 1 1 1)) (1 (1 1 2 2 2)) (1 (1 2 2 2 1)))) ((4 4) ((1 (1.0 2 1 1 2 1)) (1 (1.0 2 1 2 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8304)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7602)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6668)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6086)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6668)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6668)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8304)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8204)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5202)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7988)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7602)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7602)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5202)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6402)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 17) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (4 0 3 0 nil 0) (7 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 4 2 nil 0) (3 0 8 1 nil 0) (2 0 8 2 nil 0))) nil 6.1))
