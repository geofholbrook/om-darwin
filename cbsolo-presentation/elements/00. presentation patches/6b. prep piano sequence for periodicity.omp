; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 10 10) (om-make-point 757 24) (om-make-point 926 1093) "" 183 0 "2015/06/21 17:07:27" "2015/06/22 11:24:33")
; End File Header
; External resources 
; (list (list (quote :instance) "#P\"../../globals/2d corpus periodicity db.omi\"" "#P\"../../globals/pp first file midic.omi\"" "#P\"../../globals/2d corpus pitch db.omi\"" "#P\"../../globals/2D pp path list.omi\"") (list (quote :sound) "#P\"../../../../../../../Desktop/out-files/easy-out-138.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "6b. prep piano sequence for periodicity" (quote ((let ((box (om-load-editor-box1 "easy-out-138.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 635 920) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "out-files")) :device nil :host nil :name "easy-out-138" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-138.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 461 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus periodicity db" (get-inst-from-globals "2d corpus periodicity db") (quote nil) (om-make-point 546 71) nil (om-make-point 164 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 539 405) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "corpus def->periodicity" (om-load-patch-abs1 "corpus def->periodicity" (quote ((let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 523 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 445 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 462 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 327 211) (om-make-point 79 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 167 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 91 411) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 132 217) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 199 117) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 195 21) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 257 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 1 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (8 0 3 1 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 575 257) nil (list nil) "l" "corpus def->periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 442 486) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 440 206) (om-make-point 97 30) (list (quote :bpf) 0.2 0.9) "(:bpf 0.2 0.9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 302 180) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus pitch db" (get-inst-from-globals "2d corpus pitch db") (quote nil) (om-make-point 255 20) nil (om-make-point 134 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 264 294) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 635 743) nil (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 912) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 182) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 114 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 72 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 95 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 534) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 3 0 0 nil 0) (6 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (5 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 195 116) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 60 288) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 278 252) (om-make-point 34 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 200 310) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 607) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 126 212) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "engine" 0 (om-make-point 188 28) "" "engine" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil))) (om-make-point 215 508) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 94 418) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 1 1 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (0 1 5 0 nil 0) (9 0 6 0 nil 0) (10 0 9 0 nil 0) (3 0 9 1 nil 0) (4 1 9 2 nil 0) (1 0 10 0 nil 0) (4 0 10 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 396 868) nil (list "/Users/holbrook/Desktop/out-files/easy-out-138.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 39 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-138.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 327 961) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "out-files")) :device nil :host nil :name "easy-out-138" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-138.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 218 199) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 42 612) (om-make-point 543 191) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 204 210 153 133 155 74 134 127 235 47 70 163 37 179 245 233 130 204 60 98 87 196 15 20 208 87 234 191 97 16 117 211 179 16 128 64 119 186 137 242 14 213 44 10 198 79 169 97 181 213 46 196 32 206 161 133 171 5 221 195 64 10 223 63 29 209 49 123 68 148 227 131 17 146 29 228 221 183 87 2 241 156 36 80 127 180 242 47 81 115 242 254 31 215 145 232 192 39 172 44 96 186 185 198 204 234 114 77 85 121 218 86 80 183 64 41 182 208 7 145 90 39 114 246 157 60 217 96 7 88 44 12 208 222 73 238 219 146 168 106 196 54 226 205 27 114 21 118 207 195 32 48 4 88 110 138 151 17 188 197) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 204 210 153 133 155 74 134 127 235 47 70 163 37 179 245 233 130 204 60 98 87 196 15 20 208 87 234 191 97 16 117 211 179 16 128 64 119 186 137 242 14 213 44 10 198 79 169 97 181 213 46 196 32 206 161 133 171 5 221 195 64 10 223 63 29 209 49 123 68 148 227 131 17 146 29 228 221 183 87 2 241 156 36 80 127 180 242 47 81 115 242 254 31 215 145 232 192 39 172 44 96 186 185 198 204 234 114 77 85 121 218 86 80 183 64 41 182 208 7 145 90 39 114 246 157 60 217 96 7 88 44 12 208 222 73 238 219 146 168 106 196 54 226 205 27 114 21 118 207 195 32 48 4 88 110 138 151 17 188 197)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.11249586 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 142 13 145 96 31 161 150 29 224 95 82 177 79 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 30 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 142 13 145 96 31 161 150 29 224 95 82 177 79 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 30 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 0.112649635 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 35 88 163 155 85 222 122 29 13 251 145 96 64 95 150 29 224 163 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 123 117 70 48 57 102 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 138 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 35 88 163 155 85 222 122 29 13 251 145 96 64 95 150 29 224 163 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 123 117 70 48 57 102 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 138 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.1126541 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 12 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 13 142 145 96 31 161 208 227 224 95 82 79 177 202 52 60 95 154 251 37 156 19 128 16 185 226 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 15 86 157 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 12 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 13 142 145 96 31 161 208 227 224 95 82 79 177 202 52 60 95 154 251 37 156 19 128 16 185 226 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 15 86 157 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 0.11277384 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 84 163 155 85 222 122 64 13 251 145 96 31 161 150 29 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 78 185 16 124 78 67 222 215 169 107 117 123 66 52 57 67 131 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 15 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 84 163 155 85 222 122 64 13 251 145 96 31 161 150 29 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 78 185 16 124 78 67 222 215 169 107 117 123 66 52 57 67 131 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 15 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.11278 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 13 251 145 96 31 161 150 28 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 220 67 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 99 202 88 35 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 78 171 34 128 201 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 122 64 13 251 145 96 31 161 150 28 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 220 67 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 99 202 88 35 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 78 171 34 128 201 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.11278362 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 142 145 96 31 161 150 29 224 100 77 79 177 202 251 60 52 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 9 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 142 145 96 31 161 150 29 224 100 77 79 177 202 251 60 52 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 9 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.11280789 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 91 115 34 89 163 155 85 222 122 64 13 251 145 96 31 161 150 29 224 95 82 79 177 202 53 60 251 154 95 37 196 235 128 226 185 16 126 78 67 220 217 169 107 123 117 70 48 57 102 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 15 86 157 188 126 195 44 211 206 201 171 34 128 78 137 135 33 30 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 91 115 34 89 163 155 85 222 122 64 13 251 145 96 31 161 150 29 224 95 82 79 177 202 53 60 251 154 95 37 196 235 128 226 185 16 126 78 67 220 217 169 107 123 117 70 48 57 102 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 15 86 157 188 126 195 44 211 206 201 171 34 128 78 137 135 33 30 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.11283222 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 251 145 96 31 161 150 28 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 99 202 88 35 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 34 211 206 78 171 44 128 201 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 251 145 96 31 161 150 28 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 99 202 88 35 22 97 75 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 34 211 206 78 171 44 128 201 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.11284229 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 155 111 38 89 163 86 85 222 122 64 13 142 145 96 31 161 150 29 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 215 171 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 30 142 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 54 228 24 136 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 155 111 38 89 163 86 85 222 122 64 13 142 145 96 31 161 150 29 224 95 82 79 177 202 52 60 251 154 95 37 156 19 128 226 185 16 126 78 67 220 215 171 107 117 123 66 52 57 19 96 21 12 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 22 30 142 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 54 228 24 136 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.112926096 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 142 145 96 31 161 150 29 224 100 77 79 177 202 251 60 52 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 9 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 75 97 22 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 2 201 60 175 46 229 21 60 137 230 13 78 253 132 121 66 86 115 34 89 163 155 85 222 233 209 13 142 145 96 31 161 150 29 224 100 77 79 177 202 251 60 52 154 95 37 156 19 128 226 185 16 126 78 67 220 217 169 105 117 123 66 52 57 19 96 21 9 238 48 242 147 194 25 187 211 76 35 6 184 198 132 49 35 202 88 99 75 97 22 241 211 71 112 232 244 87 230 94 117 171 207 246 26 49 194 103 140 188 126 195 44 211 206 201 171 34 128 78 137 135 33 34 62 55 132 200 55 6 112 131 131 254 243 187 73 140 141 144 234 78 244 93 230 73 140 215 2 37 240 112 54 7 178 136 228 24 54 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 332) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1 2 1)) (1 (1.0 2 2 1)) (1 (1.0 1 1 2 1)) (1 (1.0 1 1 2 1)))) ((4 4) ((1 (1.0 1 1 1 2)) (1 (1 2 2 1)) (1 (1 2 1 2)) (1 (1 1 1)))) ((4 4) ((1 (1 -4 -1.0)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8650)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10050)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10600)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9050)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 724 74) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 112 429) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 148 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 261 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 292 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 257) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-operons" 2 (om-make-point 730 88) "" "num-operons" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIMEN" (quote embed-specimen) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 714 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 757 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 534 758) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 749 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 870 244) (om-make-point 48 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 940 240) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1005 276) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 263) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 156 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 125 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 358 33) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 470 635) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 512 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 548 240) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 353) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 513 154) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 159) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 430 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 632 859) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 108 29) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 327 537) (om-make-point 84 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (16 0 3 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (17 0 8 1 nil 0) (5 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (25 0 14 0 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (26 0 17 0 nil 0) (5 0 17 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (8 0 24 0 nil 0) (1 0 26 0 nil 0) (20 0 26 1 nil 0))) 6.1 nil "" (om-make-point 75 99) (om-make-point 1165 1008)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 64 300) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (4 0 3 1 nil 0) (2 0 4 1 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (8 0 7 1 nil 0) (17 0 11 0 nil 0) (8 0 12 0 nil 10) (17 0 13 0 nil 0) (10 0 13 1 nil 0) (8 0 14 0 nil 10) (13 0 15 0 nil 0) (18 0 17 1 nil 0) (5 0 17 2 nil 0) (19 0 18 0 nil 0) (7 0 18 1 nil 0) (14 0 19 0 nil 0) (12 0 19 1 nil 0) (16 0 19 2 nil 0))) nil 6.1))
