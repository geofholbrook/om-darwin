; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 172 10) (om-make-point 1040 252) (om-make-point 1009 978) "" 183 0 "2015/06/19 13:35:59" "2015/06/22 11:24:33")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../contours and pitch mapping/ratio2timesig.oml\"" "#P\"single-contour (genetic).omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "single-rhythmic-contour" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 329 363) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "add-sixteenth-to-end" (om-load-lisp-abspatch "add-sixteenth-to-end" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"add-sixteenth-to-end\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (lengths)$ `(,@(butlast lengths)$   ,(+ (last-elem lengths) (if (evenp (apply '+ (om/ lengths 1/16)))$                               0$                             1/16))))") (quote ((om-load-inputfun (quote input-funbox) "" "LENGTHS" nil))) (om-make-point 192 341) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 201 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 314 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 226 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 163 261) (om-make-point 132 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 455 281) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 513 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ratio2timesig" (quote ("elements" "contours and pitch mapping" "ratio2timesig")) (quote ((om-load-inputfun (quote input-funbox) "" "R" nil))) (om-make-point 294 496) nil (list (list 4 4)) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 637 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-START" (quote om-darwin::region-start) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 580 289) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-ARR" (quote om-darwin::make-arr) (quote ((om-load-inputfun (quote input-funbox) "STARTS" "STARTS" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "time-sig" (quote :time-sig) nil nil) (om-load-inputkeyword (quote input-keyword) "" "lengths" (quote :lengths) nil nil))) (om-make-point 103 655) (om-make-point 129 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 154 769) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "single-contour (genetic)" (quote ("elements" "00. presentation patches" "7a. pizz contours" "single-contour (genetic)")) (quote ((om-load-inputfun (quote input-funbox) "" "range" (list 48 72)))) (om-make-point 61 108) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 683 347) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIES" (quote embed-species) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 689 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 349 22) (om-make-point 90 30) (list 6000 6000) "(6000 6000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 292 58) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 516 73) (om-make-point 48 30) (list 2 3) "(2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 426 73) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 323 151) (om-make-point 193 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (13 0 4 0 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (6 0 7 0 nil 0) (14 0 7 1 nil 0) (3 0 8 0 nil 0) (10 0 9 0 nil 0) (14 0 9 1 nil 0) (9 0 11 0 nil 0) (13 0 11 1 nil 0) (8 0 11 2 nil 0) (1 0 11 3 nil 0) (11 0 12 0 nil 0) (2 0 13 0 nil 0) (15 0 14 0 nil 0) (20 0 15 0 nil 0) (17 0 20 0 nil 0) (16 0 20 1 nil 0) (19 0 20 2 nil 0) (18 0 20 3 nil 0))) nil 6.1))
