; OM File Header - Saved 2015/06/22 11:24:33
; (6.1 :patc (om-make-point 172 10) (om-make-point 407 23) (om-make-point 1152 1363) "" 183 0 "2015/06/21 20:05:41" "2015/06/22 11:24:33")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../../../Desktop/out-files/easy-out-140.aiff\"") (list (quote :instance) "#P\"../../../globals/2d corpus periodicity db.omi\"" "#P\"../../../globals/2D pp path list.omi\"" "#P\"../../../globals/pp first file midic.omi\"" "#P\"../../../globals/2D PP CSEQ ANALYSIS.omi\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "excerpt1 tape" (quote ((let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 600 1236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "last note adjusted" (let ((copy (make-instance (quote omlistinstance) :name "last note adjusted" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/16 1 (list (list 5 23) -100)) (list 1/16 1/16 2 (list (list 9 32) -150)) (list 1/8 1/16 1 (list (list 12 2) 100)) (list 3/16 1/16 2 (list (list 17 6) 0)) (list 1/4 1/16 2 (list (list 17 27) 100)) (list 5/16 1/16 1 (list (list 12 7) 0)) (list 3/8 1/16 2 (list (list 20 33) 50)) (list 7/16 1/16 2 (list (list 5 25) 150)) (list 1/2 1/16 1 (list (list 1 27) -100)) (list 9/16 1/16 2 (list (list 10 4) 50)) (list 5/8 1/16 2 (list (list 9 36) -150)) (list 11/16 1/16 2 (list (list 17 27) -150)) (list 3/4 1/16 1 (list (list 4 1) -100)) (list 13/16 1/16 2 (list (list 9 12) 0)) (list 7/8 1/16 1 (list (list 12 3) 0)) (list 15/16 1/16 2 (list (list 9 12) -100)) (list 1 1/16 2 (list (list 9 11) -150)) (list 17/16 1/16 1 (list (list 12 8) -100)) (list 9/8 1/16 2 (list (list 17 5) -100)) (list 19/16 1/16 1 (list (list 21 0) -100)) (list 5/4 1/16 2 (list (list 11 25) -50)) (list 21/16 1/16 1 (list (list 8 29) -150)) (list 11/8 1/16 2 (list (list 20 33) 100)) (list 23/16 1/16 2 (list (list 9 12) -100)) (list 3/2 1/16 1 (list (list 8 2) 100)) (list 25/16 1/16 2 (list (list 9 36) -50)) (list 13/8 1/16 2 (list (list 17 6) -50)) (list 27/16 1/16 1 (list (list 18 7) -100)) (list 7/4 1/16 2 (list (list 7 37) 150)) (list 29/16 1/16 1 (list (list 21 30) 0)) (list 15/8 1/16 2 (list (list 9 11) -150)) (list 31/16 1/16 1 (list (list 5 25) -150)) (list 2 1/16 2 (list (list 17 4) -100)) (list 33/16 1/16 1 (list (list 18 4) 0)) (list 17/8 1/16 2 (list (list 17 6) -50)) (list 35/16 1/16 2 (list (list 15 0) -50)) (list 9/4 1/16 1 (list (list 13 33) 100)) (list 37/16 1/16 2 (list (list 17 4) -150)) (list 19/8 1/16 2 (list (list 7 3) -50)) (list 39/16 1/16 1 (list (list 21 30) 0)) (list 5/2 1/16 2 (list (list 20 33) -50)) (list 41/16 1/16 1 (list (list 21 32) -150)) (list 21/8 1/16 2 (list (list 17 4) 150)) (list 43/16 1/16 2 (list (list 11 25) 150)) (list 11/4 1/16 1 (list (list 13 1) 150)) (list 45/16 1/16 2 (list (list 10 4) -100)) (list 23/8 1/16 2 (list (list 9 13) -100)) (list 47/16 1/16 1 (list (list 15 28) -150)) (list 3 1/16 2 (list (list 9 35) -50)) (list 49/16 1/16 1 (list (list 3 23) 0)) (list 25/8 1/16 2 (list (list 17 28) 100)) (list 51/16 1/16 1 (list (list 21 33) -100)) (list 13/4 1/16 2 (list (list 11 25) 150)) (list 53/16 1/16 2 (list (list 9 11) 100)) (list 27/8 1/16 1 (list (list 1 4) -150)) (list 55/16 1/16 2 (list (list 17 5) 50)) (list 7/2 1/16 2 (list (list 17 28) -100)) (list 57/16 1/16 1 (list (list 5 29) -150)) (list 29/8 1/16 2 (list (list 9 34) 0)) (list 59/16 1/16 2 (list (list 17 26) 100)) (list 15/4 1/16 1 (list (list 18 7) 0)) (list 61/16 1/16 2 (list (list 9 11) -50)) (list 31/8 1/16 1 (list (list 18 9) 100)) (list 63/16 1/16 2 (list (list 17 29) -50)) (list 4 1/16 2 (list (list 17 26) -50)) (list 65/16 1/16 1 (list (list 18 5) 0)) (list 33/8 1/16 2 (list (list 7 40) -150)) (list 67/16 1/16 1 (list (list 8 9) 0)) (list 17/4 1/16 2 (list (list 11 25) 150)) (list 69/16 1/16 2 (list (list 9 32) -50)) (list 35/8 1/16 1 (list (list 21 4) 0)) (list 71/16 1/16 2 (list (list 9 35) -100)) (list 9/2 1/16 2 (list (list 9 9) -100)) (list 73/16 1/16 1 (list (list 6 30) 0)) (list 37/8 1/16 2 (list (list 17 6) -50)) (list 75/16 1/16 2 (list (list 20 7) -50)) (list 19/4 1/16 1 (list (list 8 35) -100)) (list 77/16 1/16 2 (list (list 9 12) -50)) (list 39/8 1/16 2 (list (list 17 6) 0)) (list 79/16 1/16 1 (list (list 12 26) -100)) (list 5 1/16 2 (list (list 10 4) -50)) (list 81/16 1/16 2 (list (list 9 34) 150)) (list 41/8 1/16 1 (list (list 12 20) -100)) (list 83/16 1/16 2 (list (list 9 34) 150)) (list 21/4 1/16 2 (list (list 9 9) 150)) (list 85/16 1/16 2 (list (list 20 7) 50)) (list 43/8 1/16 1 (list (list 3 7) 0)) (list 87/16 1/16 2 (list (list 15 0) 100)) (list 11/2 1/16 1 (list (list 12 24) -100)) (list 89/16 1/16 2 (list (list 17 28) 100)) (list 45/8 1/16 1 (list (list 18 37) 100)) (list 91/16 1/16 2 (list (list 17 29) 0)) (list 23/4 1/16 1 (list (list 5 2) 150)) (list 93/16 1/16 2 (list (list 20 33) -50)) (list 47/8 1/16 2 (list (list 20 7) 100)) (list 95/16 1/16 1 (list (list 11 21) 100)) (list 6 1/16 2 (list (list 20 33) -150)) (list 97/16 1/16 1 (list (list 5 25) 150)) (list 49/8 1/16 2 (list (list 9 12) -50)) (list 99/16 1/16 2 (list (list 8 4) -100)))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2015/06/21 21:04:12" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 914 922) "last note adjusted" (om-make-point 134 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "list" (let ((copy (make-instance (quote omlistinstance) :name "list" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/16 1 (list (list 5 23) -100)) (list 1/16 1/16 2 (list (list 9 32) -150)) (list 1/8 1/16 1 (list (list 12 3) 50)) (list 3/16 1/16 2 (list (list 17 6) 0)) (list 1/4 1/16 2 (list (list 17 27) 100)) (list 5/16 1/16 1 (list (list 12 7) 0)) (list 3/8 1/16 2 (list (list 20 33) 50)) (list 7/16 1/16 2 (list (list 7 40) -100)) (list 1/2 1/16 1 (list (list 1 27) -100)) (list 9/16 1/16 2 (list (list 10 4) 50)) (list 5/8 1/16 2 (list (list 9 36) -150)) (list 11/16 1/16 2 (list (list 17 27) -150)) (list 3/4 1/16 1 (list (list 4 1) -100)) (list 13/16 1/16 2 (list (list 9 12) 0)) (list 7/8 1/16 1 (list (list 12 3) 0)) (list 15/16 1/16 2 (list (list 9 12) -100)) (list 1 1/16 2 (list (list 9 11) -150)) (list 17/16 1/16 1 (list (list 12 8) -100)) (list 9/8 1/16 2 (list (list 17 5) -100)) (list 19/16 1/16 1 (list (list 21 0) -100)) (list 5/4 1/16 2 (list (list 11 25) -50)) (list 21/16 1/16 1 (list (list 8 29) -150)) (list 11/8 1/16 2 (list (list 20 33) 100)) (list 23/16 1/16 2 (list (list 9 12) -50)) (list 3/2 1/16 1 (list (list 8 2) 100)) (list 25/16 1/16 2 (list (list 9 36) -50)) (list 13/8 1/16 2 (list (list 17 6) -50)) (list 27/16 1/16 1 (list (list 18 7) -100)) (list 7/4 1/16 2 (list (list 7 37) 150)) (list 29/16 1/16 1 (list (list 21 30) 0)) (list 15/8 1/16 2 (list (list 9 11) -150)) (list 31/16 1/16 1 (list (list 5 25) -150)) (list 2 1/16 2 (list (list 17 4) -100)) (list 33/16 1/16 1 (list (list 18 4) 0)) (list 17/8 1/16 2 (list (list 17 6) -50)) (list 35/16 1/16 2 (list (list 15 0) -50)) (list 9/4 1/16 1 (list (list 13 33) 100)) (list 37/16 1/16 2 (list (list 17 4) -150)) (list 19/8 1/16 2 (list (list 7 3) -50)) (list 39/16 1/16 1 (list (list 21 30) 0)) (list 5/2 1/16 2 (list (list 20 33) -50)) (list 41/16 1/16 1 (list (list 21 32) -150)) (list 21/8 1/16 2 (list (list 17 4) 150)) (list 43/16 1/16 2 (list (list 11 25) 150)) (list 11/4 1/16 1 (list (list 13 1) 150)) (list 45/16 1/16 2 (list (list 10 4) -100)) (list 23/8 1/16 2 (list (list 9 13) -100)) (list 47/16 1/16 1 (list (list 15 28) -150)) (list 3 1/16 2 (list (list 7 37) -50)) (list 49/16 1/16 1 (list (list 3 23) 0)) (list 25/8 1/16 2 (list (list 17 28) 100)) (list 51/16 1/16 1 (list (list 21 33) -100)) (list 13/4 1/16 2 (list (list 11 25) 150)) (list 53/16 1/16 2 (list (list 9 11) 100)) (list 27/8 1/16 1 (list (list 1 4) -150)) (list 55/16 1/16 2 (list (list 17 5) 50)) (list 7/2 1/16 2 (list (list 17 28) -100)) (list 57/16 1/16 1 (list (list 5 29) -150)) (list 29/8 1/16 2 (list (list 9 34) 0)) (list 59/16 1/16 2 (list (list 7 20) 100)) (list 15/4 1/16 1 (list (list 18 7) 0)) (list 61/16 1/16 2 (list (list 9 11) -50)) (list 31/8 1/16 1 (list (list 18 9) 100)) (list 63/16 1/16 2 (list (list 15 29) -50)) (list 4 1/16 2 (list (list 17 26) -150)) (list 65/16 1/16 1 (list (list 18 5) 0)) (list 33/8 1/16 2 (list (list 7 40) -150)) (list 67/16 1/16 1 (list (list 8 9) 0)) (list 17/4 1/16 2 (list (list 11 13) 150)) (list 69/16 1/16 2 (list (list 9 32) -50)) (list 35/8 1/16 1 (list (list 21 4) 0)) (list 71/16 1/16 2 (list (list 9 35) -100)) (list 9/2 1/16 2 (list (list 9 9) -100)) (list 73/16 1/16 1 (list (list 6 30) 0)) (list 37/8 1/16 2 (list (list 17 6) -50)) (list 75/16 1/16 2 (list (list 20 7) -50)) (list 19/4 1/16 1 (list (list 8 35) -100)) (list 77/16 1/16 2 (list (list 9 12) -50)) (list 39/8 1/16 2 (list (list 17 6) 0)) (list 79/16 1/16 1 (list (list 12 26) -100)) (list 5 1/16 2 (list (list 10 4) -50)) (list 81/16 1/16 2 (list (list 9 34) 150)) (list 41/8 1/16 1 (list (list 12 20) -100)) (list 83/16 1/16 2 (list (list 9 34) 150)) (list 21/4 1/16 2 (list (list 9 9) 150)) (list 85/16 1/16 2 (list (list 20 7) 50)) (list 43/8 1/16 1 (list (list 3 7) 0)) (list 87/16 1/16 2 (list (list 15 0) 100)) (list 11/2 1/16 1 (list (list 12 24) -100)) (list 89/16 1/16 2 (list (list 17 28) 100)) (list 45/8 1/16 1 (list (list 18 37) 100)) (list 91/16 1/16 2 (list (list 17 29) 0)) (list 23/4 1/16 1 (list (list 5 2) 150)) (list 93/16 1/16 2 (list (list 20 33) -50)) (list 47/8 1/16 2 (list (list 20 7) 100)) (list 95/16 1/16 1 (list (list 11 21) 100)) (list 6 1/16 2 (list (list 20 33) 0)) (list 97/16 1/16 1 (list (list 15 26) -100)) (list 49/8 1/16 2 (list (list 9 11) -50)) (list 99/16 1/16 2 (list (list 10 5) -100)))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2015/06/21 21:02:34" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 1035 745) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 221 1238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 198 1096) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 1174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 707 644) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "periodicity" (om-load-patch-abs1 "periodicity" (quote ((let ((box (om-load-boxcall (quote abstraction) "cb-period" (om-load-lisp-abspatch "cb-period" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"cb-pitch\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (* (loop for reg in (d::arr-regions arr)$           sum$           (d::offby (d::region-pitch reg) $                     (if (= (d::region-chan reg) 1)$                         '(0.5 nil)$                       '(nil 0.2))))$     1000))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 133 335) nil (list nil) "l" "cb-period"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 197 667) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus periodicity db" (get-inst-from-globals "2d corpus periodicity db") (quote nil) (om-make-point 298 78) nil (om-make-point 177 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 272 434) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "corpus def->periodicity" (om-load-patch-abs1 "corpus def->periodicity" (quote ((let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 523 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 445 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 462 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 327 211) (om-make-point 79 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 167 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 91 411) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 132 217) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 199 117) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 195 21) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 257 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 1 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (8 0 3 1 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 312 303) nil (list nil) "l" "corpus def->periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 157 540) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (4 0 3 1 nil 0) (2 0 4 1 nil 0) (0 0 5 0 nil 0) (3 0 5 1 nil 0))) 6.1 nil "" (om-make-point 242 230) (om-make-point 593 805)) (quote nil) (om-make-point 796 541) nil (list nil) nil "periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1048 233) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" 0) (om-load-inputfun (quote input-funbox) "" "TEMPO" 80))) (om-make-point 995 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "instance" (let ((copy (make-instance (quote ominstance) :name "instance" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2015/06/21 20:33:25" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 949 106) nil (om-make-point 158 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 688 315) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "excerpt1 arr" (let ((copy (make-instance (quote omlistinstance) :name "excerpt1 arr" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 584 116) nil (om-make-point 269 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "cb-pitch" (om-load-lisp-abspatch "cb-pitch" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"cb-pitch\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr cb-arr period-db)$$  (+ (loop for reg in (d::arr-channel-filter (d::arr-regions arr) 1)$           for cb-reg in (d::arr-regions cb-arr)$           $           sum$           (d::offby (d::region-pitch reg)$                     (car (d::region-pitch cb-reg))))$     $     (loop for reg in (d::arr-channel-filter (d::arr-regions arr) 2)$       $           sum$           (d::offby (d::region-pitch reg) '(4000 6000)))))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil) (om-load-inputfun (quote input-funbox) "" "CB-ARR" nil) (om-load-inputfun (quote input-funbox) "" "PERIOD-DB" nil))) (om-make-point 607 373) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 834 809) nil (om-make-point 130 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 382 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 277 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "channel->amp" (om-load-patch-abs1 "channel->amp" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 303 308) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 340 50) (om-make-point 101 30) (list (list 1 1) (list 2 0.2)) "((1 1) (2 0.2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSOC" (quote assoc) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "ALIST" "ALIST" nil))) (om-make-point 332 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 329 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 465 433)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2171/3 556/3) nil nil "l" "channel->amp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 693 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "jitter" (om-load-lisp-abspatch "jitter" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"jitter\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (times)$  (loop for time in times$        collect (+ time (* (om-random -20 20) .001))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "TIMES" nil))) (om-make-point 235 395) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxout "output 3" 2 (om-make-point 493 659) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "channels" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-CHANNEL-FILTER" (quote om-darwin::arr-channel-filter) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 301 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 217 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 175 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 198 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 202 530) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 2 0 0 nil 0) (8 3 2 0 nil 0) (8 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (5 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 1169 262) (om-make-point 879 963)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 370 109) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 48 308) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 268 186) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 212 271) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 275 704) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 120 158) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "arr" 0 (om-make-point 188 28) "" "arr" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil) (om-load-inputfun (quote input-funbox) "" "AMPS" nil))) (om-make-point 225 601) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 86 512) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (13 0 1 0 nil 0) (2 0 3 0 nil 0) (5 2 3 1 nil 0) (8 0 4 0 nil 0) (0 0 5 0 nil 0) (12 0 6 1 nil 0) (5 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (5 1 10 0 nil 0) (14 0 11 0 nil 0) (15 0 14 0 nil 0) (4 0 14 1 nil 0) (9 1 14 2 nil 0) (3 0 14 3 nil 0) (6 0 15 0 nil 0) (9 0 15 1 nil 0))) 6.1 nil "" (om-make-point 105 67) (om-make-point 885 987)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 799 995) nil (list "/Users/holbrook/Desktop/out-files/easy-out-140.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-140.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 749 1099) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "out-files")) :device nil :host nil :name "easy-out-140" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-140.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 570 104) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 371 432) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 811 817)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 443 368) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2D PP CSEQ ANALYSIS" (get-inst-from-globals "2D PP CSEQ ANALYSIS") (quote nil) (om-make-point 77 184) nil (om-make-point 170 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 183 395) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 69 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 81 735) (om-make-point 665 288) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 236 151 209 165 66 182 55 176 74 255 68 7 150 33 124 183 6 203 179 46 178 155 57 140 206 169 93 2 187 181 178 135 97 188 3 176 186 28 188 138 206 181 180 29 17 41 43 104 78 123 151 201 93 188 117 250 143 168 244 112 85 110 214 207 251 187 179 50 167 228 112 25 46 197 125 248 245 1 202 56 7 246 45 12 32 93 50 185 192 101 236 197 160 252 233 229 121 154 9 32 44 52 134 130 141 246 105 220 210 44 72 106 89 92 26 14 210 184 224 54 79 59 199 16 164 161 178 84 115 97 211 211 248 130 113 79 137 38 46 49 234 155 248 180 41 140 178 162 138 153 207 15 106 243 1 44 10 245 222 129 143 12 3 24 227 100 13 135 166 192 118 66 123 7 94 167 186 17 210 171 167 52 246 242 225 216 18 103 213 94 18 206 240 167 46 22 1 18 210 70 195 116 53 64 3 5 94 212 217 62 115 204 62 147 95 252 172 72 251 101 33 89 238 133 236 121 187 12 99 7 144 236 16 30 117 114 137 81 221 134 90 98 60 127 107 188 119 147 169 211 13 119 217 216 177 134 85 183 119 144 175 179 97 152 213 8 189 0 29 117 65 241 206 116 152 52 198 56 114 208 114 131 245 184 67 79 170 245 125 49 137 110 84 199 77 50 176 25 161 132) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 151 209 165 66 182 55 176 74 255 68 7 150 33 124 183 6 203 179 46 178 155 57 140 206 169 93 2 187 181 178 135 97 188 3 176 186 28 188 138 206 181 180 29 17 41 43 104 78 123 151 201 93 188 117 250 143 168 244 112 85 110 214 207 251 187 179 50 167 228 112 25 46 197 125 248 245 1 202 56 7 246 45 12 32 93 50 185 192 101 236 197 160 252 233 229 121 154 9 32 44 52 134 130 141 246 105 220 210 44 72 106 89 92 26 14 210 184 224 54 79 59 199 16 164 161 178 84 115 97 211 211 248 130 113 79 137 38 46 49 234 155 248 180 41 140 178 162 138 153 207 15 106 243 1 44 10 245 222 129 143 12 3 24 227 100 13 135 166 192 118 66 123 7 94 167 186 17 210 171 167 52 246 242 225 216 18 103 213 94 18 206 240 167 46 22 1 18 210 70 195 116 53 64 3 5 94 212 217 62 115 204 62 147 95 252 172 72 251 101 33 89 238 133 236 121 187 12 99 7 144 236 16 30 117 114 137 81 221 134 90 98 60 127 107 188 119 147 169 211 13 119 217 216 177 134 85 183 119 144 175 179 97 152 213 8 189 0 29 117 65 241 206 116 152 52 198 56 114 208 114 131 245 184 67 79 170 245 125 49 137 110 84 199 77 50 176 25 161 132)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 141496.58 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 175 7 123 71 146 108 147 27 0 50 76 52 168 27 31 7 42 231 7 186 216 161 161 36 74 110 21 6 6 199 227 58 164 30 168 45 16 215 76 121 147 254 57 9 44 17 120 19 187 71 182 31 106 103 233 173 153 241 191 124 106 105 123 197 76 109 177 71 48 127 61 164 80 114 247 13 10 13 247 7 6 199 132 51 76 181 105 106 23 224 89 9 205 184 55 80 171 2 57 27 135 12 196 79 127 165 157 181 158 24 5 8 161 215 117 54 51 252 156 26 181 130 77 8 73 104 159 241 158 170 191 173 17 12 16 104 91 168 132 232 103 8 49 149 219 86 213 1 159 241 156 160 229 220 52 29 210 95 233 0 71 57 134 127 13 59 54 178 203 13 54 155 141 182 85 105 41 60 104 58 0 218 158 243 250 53 144 27 77 160 15 117 145 30 2 151 233 236 70 127 19 107 217 241 120 64 216 214 105 175 237 172 137 15 190 202 166 131 166 38 36 250 76 32 161 118 128 48 149 65 255 167 25 41 172 101 175 177 196 219 21 195 115 196 9 195 177 193 122 23 27 131 137 128 188 132 4 159 221 239 137 156 70 196 178 33 79 26 129 125 103 253 191 65 167 131 204 220 39 122 31 13 134 204 157 239 221 219 207 180 201 50 67 66 18 130 182 109 140 143) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 175 7 123 71 146 108 147 27 0 50 76 52 168 27 31 7 42 231 7 186 216 161 161 36 74 110 21 6 6 199 227 58 164 30 168 45 16 215 76 121 147 254 57 9 44 17 120 19 187 71 182 31 106 103 233 173 153 241 191 124 106 105 123 197 76 109 177 71 48 127 61 164 80 114 247 13 10 13 247 7 6 199 132 51 76 181 105 106 23 224 89 9 205 184 55 80 171 2 57 27 135 12 196 79 127 165 157 181 158 24 5 8 161 215 117 54 51 252 156 26 181 130 77 8 73 104 159 241 158 170 191 173 17 12 16 104 91 168 132 232 103 8 49 149 219 86 213 1 159 241 156 160 229 220 52 29 210 95 233 0 71 57 134 127 13 59 54 178 203 13 54 155 141 182 85 105 41 60 104 58 0 218 158 243 250 53 144 27 77 160 15 117 145 30 2 151 233 236 70 127 19 107 217 241 120 64 216 214 105 175 237 172 137 15 190 202 166 131 166 38 36 250 76 32 161 118 128 48 149 65 255 167 25 41 172 101 175 177 196 219 21 195 115 196 9 195 177 193 122 23 27 131 137 128 188 132 4 159 221 239 137 156 70 196 178 33 79 26 129 125 103 253 191 65 167 131 204 220 39 122 31 13 134 204 157 239 221 219 207 180 201 50 67 66 18 130 182 109 140 143)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 185468.66 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 143 232 244 56 40 9 85 29 171 99 223 110 147 186 189 223 136 216 52 215 190 168 16 12 81 243 247 107 178 218 233 137 140 91 141 162 66 137 124 121 183 17 166 116 113 66 81 147 7 123 33 31 102 122 24 118 81 197 204 77 224 155 36 28 240 20 7 45 1 48 29 223 177 250 223 14 140 38 199 68 190 57 255 186 132 173 168 77 163 171 113 138 174 150 152 194 162 83 129 208 119 92 75 57 92 32 34 0 199 30 158 106 119 190 108 73 188 180 180 184 90 176 209 169 121 44 234 86 255 50 140 237 229 226 40 176 191 40 207 105 92 1 91 5 35 93 89 17 196 172 248 84 181 92 100 65 47 97 12 225 76 209 48 122 159 197 126 227 203 162 205 120 98 178 174 103 47 15 188 93 75 100 226 128 95 29 97 131 237 46 162 243 115 56 214 99 13 181 138 140 104 207 35 249 92 54 55 189 131 164 180 80 60 133 65 68 104 82 4 212 53 109 87 12 158 155 91 16 230 158 236 148 96 17 155 160 105 193 165 135 179 137 195 101 17 76 129 214 115 192 29 157 42 120 252 49 52 150 254 161 248 98 12 89 61 19 161 152 141 199 64 197 198 243 210 151 209 10 207 209 243 14 137 152 78 162 187 78 176 67 1 80 108 201 122 79 182 55 170 29) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 143 232 244 56 40 9 85 29 171 99 223 110 147 186 189 223 136 216 52 215 190 168 16 12 81 243 247 107 178 218 233 137 140 91 141 162 66 137 124 121 183 17 166 116 113 66 81 147 7 123 33 31 102 122 24 118 81 197 204 77 224 155 36 28 240 20 7 45 1 48 29 223 177 250 223 14 140 38 199 68 190 57 255 186 132 173 168 77 163 171 113 138 174 150 152 194 162 83 129 208 119 92 75 57 92 32 34 0 199 30 158 106 119 190 108 73 188 180 180 184 90 176 209 169 121 44 234 86 255 50 140 237 229 226 40 176 191 40 207 105 92 1 91 5 35 93 89 17 196 172 248 84 181 92 100 65 47 97 12 225 76 209 48 122 159 197 126 227 203 162 205 120 98 178 174 103 47 15 188 93 75 100 226 128 95 29 97 131 237 46 162 243 115 56 214 99 13 181 138 140 104 207 35 249 92 54 55 189 131 164 180 80 60 133 65 68 104 82 4 212 53 109 87 12 158 155 91 16 230 158 236 148 96 17 155 160 105 193 165 135 179 137 195 101 17 76 129 214 115 192 29 157 42 120 252 49 52 150 254 161 248 98 12 89 61 19 161 152 141 199 64 197 198 243 210 151 209 10 207 209 243 14 137 152 78 162 187 78 176 67 1 80 108 201 122 79 182 55 170 29)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 140437.1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 139 165 68 179 45 38 194 200 160 236 132 70 65 164 74 206 213 211 140 201 218 66 172 82 229 11 123 32 250 91 153 170 187 87 57 81 45 228 28 119 142 220 123 29 69 254 192 174 133 202 214 51 5 184 55 98 157 238 126 85 166 228 23 122 98 193 96 235 72 142 133 88 88 161 13 73 102 137 73 168 107 160 81 3 127 195 55 185 252 177 26 46 170 254 230 54 30 42 142 100 73 249 45 53 120 132 8 57 250 153 86 236 49 111 212 144 23 98 152 223 140 121 174 217 126 133 141 27 147 81 159 133 226 254 87 209 194 217 17 220 155 83 221 61 147 220 133 126 109 195 57 191 225 3 208 219 43 142 75 72 225 74 214 54 169 203 110 4 178 23 151 209 93 26 75 92 179 169 91 178 29 102 219 52 235 93 24 169 36 65 200 139 40 115 108 176 249 136 241 143 48 219 33 226 159 154 23 238 45 245 214 178 140 16 110 116 75 162 91 196 248 247 65 71 114 242 63 185 229 117 161 216 82 138 209 242 235 164 95 168 188 6 234 59 191 206 111 229 96 239 178 111 104 50 8 45 171 179 147 135 187 79 215 179 220 158 199 209 60 229 50 4 76 120 105 95 117 79 161 159 242 78 110 50 240 177 7 104 111 187 190 226 68 218 194 82 98 164 32 67) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 139 165 68 179 45 38 194 200 160 236 132 70 65 164 74 206 213 211 140 201 218 66 172 82 229 11 123 32 250 91 153 170 187 87 57 81 45 228 28 119 142 220 123 29 69 254 192 174 133 202 214 51 5 184 55 98 157 238 126 85 166 228 23 122 98 193 96 235 72 142 133 88 88 161 13 73 102 137 73 168 107 160 81 3 127 195 55 185 252 177 26 46 170 254 230 54 30 42 142 100 73 249 45 53 120 132 8 57 250 153 86 236 49 111 212 144 23 98 152 223 140 121 174 217 126 133 141 27 147 81 159 133 226 254 87 209 194 217 17 220 155 83 221 61 147 220 133 126 109 195 57 191 225 3 208 219 43 142 75 72 225 74 214 54 169 203 110 4 178 23 151 209 93 26 75 92 179 169 91 178 29 102 219 52 235 93 24 169 36 65 200 139 40 115 108 176 249 136 241 143 48 219 33 226 159 154 23 238 45 245 214 178 140 16 110 116 75 162 91 196 248 247 65 71 114 242 63 185 229 117 161 216 82 138 209 242 235 164 95 168 188 6 234 59 191 206 111 229 96 239 178 111 104 50 8 45 171 179 147 135 187 79 215 179 220 158 199 209 60 229 50 4 76 120 105 95 117 79 161 159 242 78 110 50 240 177 7 104 111 187 190 226 68 218 194 82 98 164 32 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 167048.03 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 136 255 227 0 223 154 36 185 54 19 34 80 69 159 147 179 119 48 2 109 241 129 167 186 3 49 122 72 251 153 10 215 178 22 158 181 209 133 100 126 152 113 42 177 99 235 148 199 133 222 238 27 220 204 95 179 251 160 148 109 171 29 180 173 149 122 246 2 128 71 62 181 224 91 14 95 115 25 184 44 26 220 104 68 41 141 97 171 24 171 211 7 171 188 79 81 133 191 194 96 175 127 177 250 202 133 34 247 236 20 166 186 63 64 178 202 114 254 232 1 183 196 226 248 189 104 218 39 149 129 106 7 204 212 212 29 170 248 245 255 95 147 27 100 153 235 165 123 183 45 174 86 67 204 182 75 133 206 233 47 26 236 235 115 59 213 165 219 157 113 239 181 21 175 13 9 174 174 10 237 170 16 198 155 88 242 63 15 171 194 133 151 102 238 22 170 204 115 164 153 83 135 166 217 190 28 224 36 170 140 150 123 171 182 177 84 219 137 231 161 24 127 56 196 118 93 240 111 43 233 212 88 152 133 37 189 124 78 172 207 202 246 76 220 6 207 44 100 115 154 59 158 141 109 173 31 43 0 123 152 46 210 121 88 142 201 137 190 130 128 65 252 129 220 182 14 167 113 149 136 240 234 197 25 166 211 240 19 238 70 58 208 46 16 200 121 42 146 20) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 136 255 227 0 223 154 36 185 54 19 34 80 69 159 147 179 119 48 2 109 241 129 167 186 3 49 122 72 251 153 10 215 178 22 158 181 209 133 100 126 152 113 42 177 99 235 148 199 133 222 238 27 220 204 95 179 251 160 148 109 171 29 180 173 149 122 246 2 128 71 62 181 224 91 14 95 115 25 184 44 26 220 104 68 41 141 97 171 24 171 211 7 171 188 79 81 133 191 194 96 175 127 177 250 202 133 34 247 236 20 166 186 63 64 178 202 114 254 232 1 183 196 226 248 189 104 218 39 149 129 106 7 204 212 212 29 170 248 245 255 95 147 27 100 153 235 165 123 183 45 174 86 67 204 182 75 133 206 233 47 26 236 235 115 59 213 165 219 157 113 239 181 21 175 13 9 174 174 10 237 170 16 198 155 88 242 63 15 171 194 133 151 102 238 22 170 204 115 164 153 83 135 166 217 190 28 224 36 170 140 150 123 171 182 177 84 219 137 231 161 24 127 56 196 118 93 240 111 43 233 212 88 152 133 37 189 124 78 172 207 202 246 76 220 6 207 44 100 115 154 59 158 141 109 173 31 43 0 123 152 46 210 121 88 142 201 137 190 130 128 65 252 129 220 182 14 167 113 149 136 240 234 197 25 166 211 240 19 238 70 58 208 46 16 200 121 42 146 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 189669.17 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 118 157 251 253 138 39 99 166 21 128 17 62 238 195 212 254 0 139 32 7 243 29 212 250 31 62 251 13 5 25 182 188 241 166 200 224 175 153 23 168 96 16 26 227 99 14 202 77 80 195 134 47 173 204 52 144 163 197 106 214 254 191 191 224 33 90 211 38 228 202 79 221 227 143 36 202 160 46 175 227 192 121 219 23 119 125 211 201 34 179 213 127 227 249 61 245 169 7 47 176 250 254 51 131 1 10 198 67 177 101 110 233 31 173 125 162 184 29 24 3 218 85 148 196 77 16 104 144 48 146 227 225 20 81 169 152 136 150 25 53 242 225 39 143 44 21 167 70 77 93 59 55 193 147 219 18 134 46 153 148 94 94 232 87 81 16 174 217 148 75 0 108 117 62 19 24 41 159 97 150 150 41 196 242 65 203 109 164 187 70 97 44 102 53 94 88 103 162 70 64 72 169 229 245 100 253 179 212 168 129 42 233 223 247 138 196 31 181 171 119 82 31 212 147 169 81 108 164 16 205 255 71 226 194 129 10 187 126 5 234 36 79 50 152 130 2 249 224 177 198 13 180 19 63 145 139 167 120 112 186 49 219 146 165 123 29 121 123 142 189 255 104 115 132 8 52 21 36 52 250 228 22 204 0 220 219 135 61 158 131 54 12 196 235 140 194 184 160 184 23) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 118 157 251 253 138 39 99 166 21 128 17 62 238 195 212 254 0 139 32 7 243 29 212 250 31 62 251 13 5 25 182 188 241 166 200 224 175 153 23 168 96 16 26 227 99 14 202 77 80 195 134 47 173 204 52 144 163 197 106 214 254 191 191 224 33 90 211 38 228 202 79 221 227 143 36 202 160 46 175 227 192 121 219 23 119 125 211 201 34 179 213 127 227 249 61 245 169 7 47 176 250 254 51 131 1 10 198 67 177 101 110 233 31 173 125 162 184 29 24 3 218 85 148 196 77 16 104 144 48 146 227 225 20 81 169 152 136 150 25 53 242 225 39 143 44 21 167 70 77 93 59 55 193 147 219 18 134 46 153 148 94 94 232 87 81 16 174 217 148 75 0 108 117 62 19 24 41 159 97 150 150 41 196 242 65 203 109 164 187 70 97 44 102 53 94 88 103 162 70 64 72 169 229 245 100 253 179 212 168 129 42 233 223 247 138 196 31 181 171 119 82 31 212 147 169 81 108 164 16 205 255 71 226 194 129 10 187 126 5 234 36 79 50 152 130 2 249 224 177 198 13 180 19 63 145 139 167 120 112 186 49 219 146 165 123 29 121 123 142 189 255 104 115 132 8 52 21 36 52 250 228 22 204 0 220 219 135 61 158 131 54 12 196 235 140 194 184 160 184 23)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 155943.88 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 31 20 171 172 35 130 19 27 110 18 228 22 245 242 61 159 127 49 63 213 27 51 165 220 21 19 31 167 138 73 48 146 72 224 252 11 190 63 123 92 186 124 115 160 107 177 162 2 161 227 95 42 1 73 177 94 139 168 46 64 84 152 202 204 98 139 149 93 240 65 131 210 34 54 69 52 238 143 117 160 201 215 202 157 202 94 22 66 135 160 27 47 190 223 140 158 171 229 159 161 49 119 65 172 56 244 160 19 15 118 207 49 206 91 133 88 171 90 2 54 124 252 147 116 252 21 206 110 59 212 3 160 235 111 250 167 37 34 34 9 114 68 191 28 23 194 52 221 163 110 25 34 117 166 209 100 178 166 223 27 194 55 26 232 19 240 236 116 71 140 136 255 112 81 158 115 57 69 96 199 118 77 88 152 60 186 211 132 236 147 153 107 176 147 113 180 16 188 140 253 121 61 108 228 104 122 15 228 141 55 54 148 114 182 47 233 175 91 201 2 168 0 70 7 199 107 86 185 26 130 29 210 153 255 12 193 14 199 39 105 46 77 240 61 155 177 183 90 222 12 201 214 14 28 77 214 107 242 41 138 216 11 246 103 133 132 177 81 226 162 9 57 213 205 128 14 98 84 159 216 72 226 166 90 42 202 2 132 144 114 97 169 201 116 105 36 189 191 171 21) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 31 20 171 172 35 130 19 27 110 18 228 22 245 242 61 159 127 49 63 213 27 51 165 220 21 19 31 167 138 73 48 146 72 224 252 11 190 63 123 92 186 124 115 160 107 177 162 2 161 227 95 42 1 73 177 94 139 168 46 64 84 152 202 204 98 139 149 93 240 65 131 210 34 54 69 52 238 143 117 160 201 215 202 157 202 94 22 66 135 160 27 47 190 223 140 158 171 229 159 161 49 119 65 172 56 244 160 19 15 118 207 49 206 91 133 88 171 90 2 54 124 252 147 116 252 21 206 110 59 212 3 160 235 111 250 167 37 34 34 9 114 68 191 28 23 194 52 221 163 110 25 34 117 166 209 100 178 166 223 27 194 55 26 232 19 240 236 116 71 140 136 255 112 81 158 115 57 69 96 199 118 77 88 152 60 186 211 132 236 147 153 107 176 147 113 180 16 188 140 253 121 61 108 228 104 122 15 228 141 55 54 148 114 182 47 233 175 91 201 2 168 0 70 7 199 107 86 185 26 130 29 210 153 255 12 193 14 199 39 105 46 77 240 61 155 177 183 90 222 12 201 214 14 28 77 214 107 242 41 138 216 11 246 103 133 132 177 81 226 162 9 57 213 205 128 14 98 84 159 216 72 226 166 90 42 202 2 132 144 114 97 169 201 116 105 36 189 191 171 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 159278.02 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 13 249 184 84 173 124 104 72 25 218 241 130 157 237 131 214 108 210 171 65 112 254 247 175 4 241 43 122 254 120 170 109 121 203 204 127 147 221 2 54 212 49 211 228 95 162 122 120 90 81 55 189 37 191 124 114 131 34 46 17 71 74 79 174 36 87 129 78 37 80 228 44 252 122 45 35 182 45 120 118 79 168 15 193 244 190 39 239 37 2 225 2 82 28 2 45 79 17 130 88 167 242 210 160 225 206 230 181 60 155 116 71 48 242 73 156 109 176 83 168 148 210 127 249 216 0 158 93 253 9 109 105 19 234 150 218 3 10 146 45 215 66 205 150 179 129 77 244 2 205 174 16 141 199 18 5 190 56 189 211 240 73 105 116 184 20 198 167 204 235 99 178 32 86 164 95 70 13 221 190 214 28 208 251 182 212 135 164 172 162 172 216 127 144 139 100 37 58 18 201 90 211 192 165 202 224 136 125 230 142 98 228 95 127 202 200 249 255 28 57 2 187 149 69 54 116 197 34 132 231 197 243 109 32 188 123 81 197 126 205 136 192 231 164 103 111 196 200 255 41 71 192 251 142 79 64 226 97 69 49 79 253 181 22 34 203 3 232 57 142 193 0 71 130 194 182 37 150 120 86 38 105 183 54 194 170 131 68 135 126 57 0 12 144 136 7 105 102 31 148) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 249 184 84 173 124 104 72 25 218 241 130 157 237 131 214 108 210 171 65 112 254 247 175 4 241 43 122 254 120 170 109 121 203 204 127 147 221 2 54 212 49 211 228 95 162 122 120 90 81 55 189 37 191 124 114 131 34 46 17 71 74 79 174 36 87 129 78 37 80 228 44 252 122 45 35 182 45 120 118 79 168 15 193 244 190 39 239 37 2 225 2 82 28 2 45 79 17 130 88 167 242 210 160 225 206 230 181 60 155 116 71 48 242 73 156 109 176 83 168 148 210 127 249 216 0 158 93 253 9 109 105 19 234 150 218 3 10 146 45 215 66 205 150 179 129 77 244 2 205 174 16 141 199 18 5 190 56 189 211 240 73 105 116 184 20 198 167 204 235 99 178 32 86 164 95 70 13 221 190 214 28 208 251 182 212 135 164 172 162 172 216 127 144 139 100 37 58 18 201 90 211 192 165 202 224 136 125 230 142 98 228 95 127 202 200 249 255 28 57 2 187 149 69 54 116 197 34 132 231 197 243 109 32 188 123 81 197 126 205 136 192 231 164 103 111 196 200 255 41 71 192 251 142 79 64 226 97 69 49 79 253 181 22 34 203 3 232 57 142 193 0 71 130 194 182 37 150 120 86 38 105 183 54 194 170 131 68 135 126 57 0 12 144 136 7 105 102 31 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 172315.67 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 92 64 87 81 176 119 49 82 249 197 38 234 197 106 79 11 71 160 43 52 105 7 207 234 3 89 152 50 57 233 119 145 61 126 18 46 33 135 207 243 37 113 189 233 64 209 246 149 225 161 157 159 8 13 237 127 213 99 224 152 186 33 236 234 151 169 174 170 32 3 220 131 204 209 8 15 222 215 130 48 253 20 211 163 154 127 41 23 187 222 205 169 210 207 168 63 144 241 79 175 207 23 17 160 177 114 173 167 108 168 238 32 192 103 99 243 189 146 214 57 161 251 209 210 245 150 110 132 124 188 133 67 44 30 31 212 58 6 143 60 189 237 246 129 202 122 164 198 62 173 22 109 13 54 18 69 49 191 135 174 179 54 170 103 221 22 67 51 221 153 131 210 131 81 16 10 7 230 58 199 45 11 42 113 189 237 147 251 53 25 109 229 40 193 143 114 71 147 214 129 140 0 5 218 35 153 128 243 1 216 44 246 160 27 154 96 107 246 79 95 214 9 94 39 133 215 95 116 169 140 250 233 20 243 35 173 71 11 31 90 139 76 150 239 120 67 79 70 104 211 189 62 98 123 117 22 250 255 208 224 141 18 93 101 120 140 145 149 221 177 179 96 36 28 22 107 219 156 155 211 94 70 139 25 14 70 121 109 177 62 220 234 208 13 235 112 180 5 227 30) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 92 64 87 81 176 119 49 82 249 197 38 234 197 106 79 11 71 160 43 52 105 7 207 234 3 89 152 50 57 233 119 145 61 126 18 46 33 135 207 243 37 113 189 233 64 209 246 149 225 161 157 159 8 13 237 127 213 99 224 152 186 33 236 234 151 169 174 170 32 3 220 131 204 209 8 15 222 215 130 48 253 20 211 163 154 127 41 23 187 222 205 169 210 207 168 63 144 241 79 175 207 23 17 160 177 114 173 167 108 168 238 32 192 103 99 243 189 146 214 57 161 251 209 210 245 150 110 132 124 188 133 67 44 30 31 212 58 6 143 60 189 237 246 129 202 122 164 198 62 173 22 109 13 54 18 69 49 191 135 174 179 54 170 103 221 22 67 51 221 153 131 210 131 81 16 10 7 230 58 199 45 11 42 113 189 237 147 251 53 25 109 229 40 193 143 114 71 147 214 129 140 0 5 218 35 153 128 243 1 216 44 246 160 27 154 96 107 246 79 95 214 9 94 39 133 215 95 116 169 140 250 233 20 243 35 173 71 11 31 90 139 76 150 239 120 67 79 70 104 211 189 62 98 123 117 22 250 255 208 224 141 18 93 101 120 140 145 149 221 177 179 96 36 28 22 107 219 156 155 211 94 70 139 25 14 70 121 109 177 62 220 234 208 13 235 112 180 5 227 30)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 162950.33 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 237 227 59 49 3 201 123 139 189 145 103 176 16 188 119 228 108 82 234 64 152 120 253 160 152 157 87 31 223 230 102 91 44 58 16 86 71 144 244 178 205 87 243 216 86 231 112 167 138 199 211 230 203 134 72 17 119 67 89 18 11 127 113 94 192 163 232 18 94 86 19 220 179 21 128 69 131 232 169 20 154 122 241 243 231 204 140 250 181 64 89 240 74 199 169 10 10 88 155 108 90 80 158 99 79 217 192 109 20 157 115 248 153 109 253 203 56 9 204 175 66 175 204 178 99 124 22 100 89 7 242 254 70 135 146 19 94 240 178 4 149 200 100 130 10 188 252 44 37 34 112 179 162 94 90 152 39 247 100 57 176 33 26 50 59 92 27 119 185 201 100 46 238 31 245 83 42 12 253 163 13 202 148 183 19 26 122 196 240 48 215 171 125 106 197 182 131 119 93 232 10 41 200 49 58 71 91 115 116 20 235 231 148 16 93 158 132 249 243 223 148 212 161 211 141 248 33 89 60 174 159 128 17 142 244 94 166 22 179 160 117 183 207 196 171 76 82 249 191 217 220 179 13 135 140 58 88 39 154 237 113 40 20 137 162 184 90 189 169 242 125 184 204 189 71 225 42 97 201 82 72 243 41 33 199 150 156 48 172 186 99 191 167 31 47 131 142 13 142 118) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 237 227 59 49 3 201 123 139 189 145 103 176 16 188 119 228 108 82 234 64 152 120 253 160 152 157 87 31 223 230 102 91 44 58 16 86 71 144 244 178 205 87 243 216 86 231 112 167 138 199 211 230 203 134 72 17 119 67 89 18 11 127 113 94 192 163 232 18 94 86 19 220 179 21 128 69 131 232 169 20 154 122 241 243 231 204 140 250 181 64 89 240 74 199 169 10 10 88 155 108 90 80 158 99 79 217 192 109 20 157 115 248 153 109 253 203 56 9 204 175 66 175 204 178 99 124 22 100 89 7 242 254 70 135 146 19 94 240 178 4 149 200 100 130 10 188 252 44 37 34 112 179 162 94 90 152 39 247 100 57 176 33 26 50 59 92 27 119 185 201 100 46 238 31 245 83 42 12 253 163 13 202 148 183 19 26 122 196 240 48 215 171 125 106 197 182 131 119 93 232 10 41 200 49 58 71 91 115 116 20 235 231 148 16 93 158 132 249 243 223 148 212 161 211 141 248 33 89 60 174 159 128 17 142 244 94 166 22 179 160 117 183 207 196 171 76 82 249 191 217 220 179 13 135 140 58 88 39 154 237 113 40 20 137 162 184 90 189 169 242 125 184 204 189 71 225 42 97 201 82 72 243 41 33 199 150 156 48 172 186 99 191 167 31 47 131 142 13 142 118)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 155953.07 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 179 194 17 33 209 222 46 80 34 214 138 213 84 80 50 207 51 184 39 70 105 75 33 165 65 203 237 142 39 17 122 133 161 220 29 73 123 85 152 203 86 89 244 37 176 226 76 96 250 114 30 54 159 242 56 101 239 62 26 91 131 232 239 46 227 201 123 0 20 29 149 180 153 100 159 234 19 223 166 186 45 170 130 148 98 116 207 191 230 196 125 105 181 96 10 242 90 198 154 245 45 8 182 159 202 186 53 84 174 52 174 38 224 218 238 157 81 56 215 35 65 156 9 74 157 106 58 46 91 31 105 141 220 106 83 140 92 130 1 197 9 152 11 7 27 116 255 253 118 46 136 33 187 94 188 228 32 244 86 22 183 87 115 61 70 49 233 245 98 158 80 176 5 173 98 89 105 6 129 140 46 134 115 216 192 2 25 178 134 117 83 230 159 21 185 157 184 107 118 221 7 128 2 94 16 148 149 30 190 253 212 122 205 107 159 246 138 248 229 235 84 109 65 165 208 178 101 189 248 240 135 198 128 96 170 83 222 121 182 142 17 153 113 203 192 39 70 229 107 4 119 99 104 102 205 0 100 8 99 114 14 214 78 16 109 235 152 45 198 60 113 101 233 98 185 213 167 116 210 22 111 34 108 0 95 20 146 205 151 235 11 65 244 255 118 132 211 132 149 208) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 179 194 17 33 209 222 46 80 34 214 138 213 84 80 50 207 51 184 39 70 105 75 33 165 65 203 237 142 39 17 122 133 161 220 29 73 123 85 152 203 86 89 244 37 176 226 76 96 250 114 30 54 159 242 56 101 239 62 26 91 131 232 239 46 227 201 123 0 20 29 149 180 153 100 159 234 19 223 166 186 45 170 130 148 98 116 207 191 230 196 125 105 181 96 10 242 90 198 154 245 45 8 182 159 202 186 53 84 174 52 174 38 224 218 238 157 81 56 215 35 65 156 9 74 157 106 58 46 91 31 105 141 220 106 83 140 92 130 1 197 9 152 11 7 27 116 255 253 118 46 136 33 187 94 188 228 32 244 86 22 183 87 115 61 70 49 233 245 98 158 80 176 5 173 98 89 105 6 129 140 46 134 115 216 192 2 25 178 134 117 83 230 159 21 185 157 184 107 118 221 7 128 2 94 16 148 149 30 190 253 212 122 205 107 159 246 138 248 229 235 84 109 65 165 208 178 101 189 248 240 135 198 128 96 170 83 222 121 182 142 17 153 113 203 192 39 70 229 107 4 119 99 104 102 205 0 100 8 99 114 14 214 78 16 109 235 152 45 198 60 113 101 233 98 185 213 167 116 210 22 111 34 108 0 95 20 146 205 151 235 11 65 244 255 118 132 211 132 149 208)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/4 (((3 4) ((1 (1 -1 1 -1)) (1 (-1 1 -2)) (1 (1 -3)))) ((15 16) (1 -1 1 -2 1 -1 1 -1 1 -2 1 -2)) ((9 16) (1 -1 1 -1 1 -1 1 -2)) ((11 16) (1 -2 1 -1 1 -2 1 -2)) ((5 8) ((1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (-1 1)) -1)) ((4 4) ((1 (1 -2 1)) (1 (-1 1 -2)) (1 (1 -1 1 -1)) (1 (-1 1 -2)))) ((13 16) (1 -2 1 -2 1 -2 1 -3)) ((7 8) ((1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (-1 1)) (1 (-1 1)) -1)) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/4 (((3 4) ((1 (-1 1 -1 1)) (1 (1 -1 1 1)) (1 (-1 1 1 1)))) ((15 16) (-1 1 -1 1 1 -1 1 -1 1 -1 1 1 -1 1 1)) ((9 16) (-1 1 -1 1 -1 1 -1 1 1)) ((11 16) (-1 1 1 -1 1 -1 1 1 -1 1 1)) ((5 8) ((1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (1 -1)) (1 (1 1)))) ((4 4) ((1 (-1 1 1 -1)) (1 (1 -1 1 1)) (1 (-1 1 -1 1)) (1 (1 -1 1 1)))) ((13 16) (-1 1 1 -1 1 1 -1 1 1 -1 1 1 1)) ((7 8) ((1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (1 -1)) (1 (1 -1)) (1 (1 1)))) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gff) (quote gff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 24) nil nil (quote :midi-player) 19/25 nil 1000 0 (om-make-point 370 280) (om-make-point 1112 94) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 171 615) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 344 645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-HEADER" (quote om-darwin::arr-header) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 393 551) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 101 465) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 243 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 255 430) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 417 324) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1/16))) (om-make-point 341 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 353 162) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 372 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote abstraction) "mini-arr-w-channels" (om-load-lisp-abspatch "mini-arr-w-channels" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"process-w-channels\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (first rest)$  (cons (d::make-region 0 1/16 1 first)$        (loop for note in rest$              for start from 1/16 by 1/16$              collect (d::make-region start 1/16 2 note))))") (quote ((om-load-inputfun (quote input-funbox) "" "FIRST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 304 777) nil nil nil "mini-arr-w-channels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 429 647) (om-make-point 109 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1- 2" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 522 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 282 932) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "len" 2 (om-make-point 489 442) "" "len" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 207 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 268 508) (om-make-point 107 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 349 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 327 133) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 432 128) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 379 327) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 467 214) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 431 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 82 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 113 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 62 290) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 198 284) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 249 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 218 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 180 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 105 454) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (1 0 0 1 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (20 0 7 0 nil 0) (11 0 7 1 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (8 0 11 0 nil 0) (12 0 11 1 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (6 0 15 0 nil 0) (5 0 18 0 nil 0) (17 0 19 0 nil 0) (18 0 19 1 nil 0) (14 0 20 0 nil 0) (19 0 20 1 nil 0))) 6.1 nil "" (om-make-point 615 118) (om-make-point 1268 1216)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 201 305) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 469 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "excerpt1 arr" (let ((copy (make-instance (quote omlistinstance) :name "excerpt1 arr" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2015/06/21 20:13:36" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 581 53) "excerpt1 arr" (om-make-point 124 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "extract arr from excerpt1" (om-load-patch-abs1 "extract arr from excerpt1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 392 657) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 223 260) (om-make-point 363 30) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4)) "((3 4) (15 16) (9 16) (11 16) (5 8) (4 4) (13 16) (7 8) (4 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-ARR" (quote om-darwin::make-arr) (quote ((om-load-inputfun (quote input-funbox) "STARTS" "STARTS" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "time-sig" (quote :time-sig) nil nil))) (om-make-point 249 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 159 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 260 128) (om-make-point 201 87) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (3600) (4000) (3300) (4500) (3600) (4000) (3000) (3500) (2900) (4900) (4300) (4700) (4100) (5200) (4300) (4700) (3800) (5500) (4600) (5100) (4100) (5900) (5000) (5700) (4400) (4900) (4300) (6200) (5400) (5800) (5200) (6400) (5600) (6000) (5100) (5500) (5000))) :lonset (quote (0 333 833 1333 2000 2333 2833 3167 3500 4000 4500 4833 5167 5500 6000 6500 6833 7333 7833 8167 8500 9000 9500 10000 10333 10833 11167 11667 12167 12667 13167 13667 14333 14667 15000 15333 15833 16167 16666)) :ldur (quote ((333) (501) (500) (667) (333) (500) (333) (333) (500) (500) (333) (333) (333) (500) (500) (333) (500) (500) (333) (333) (500) (500) (500) (334) (500) (333) (500) (500) (500) (500) (500) (667) (333) (333) (333) (501) (334) (499))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TREE2RATIO" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "a rythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 64 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TREE" (quote tree) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 50 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "VOICES" (quote voices) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 101 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "cb excerpt1" (let ((copy (make-instance (quote ominstance) :name "cb excerpt1" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2015/06/21 20:13:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 62 50) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (4 1 2 1 nil 0) (1 0 2 2 nil 0) (5 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 517 782)) (quote nil) (om-make-point 552 356) nil (list (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) nil "extract arr from excerpt1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 250 23) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 370 729) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 93 23) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (11 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (8 0 6 0 nil 0) (5 0 6 1 nil 0) (7 0 8 0 nil 0) (10 0 8 1 nil 0) (15 0 9 0 nil 0) (13 0 9 1 nil 0) (11 0 10 0 nil 0) (0 0 14 0 nil 0))) 6.1 nil "" (om-make-point 781 136) (om-make-point 1117 996)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "max-folder-length" nil))) (om-make-point 103 506) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 574 514) (om-make-point 180 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 213 28) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 807 305) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 752 426) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (5 0 3 0 nil 0) (22 0 4 0 nil 0) (4 0 5 0 nil 0) (25 0 6 0 nil 0) (7 0 6 1 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0) (3 0 15 0 nil 0) (14 0 15 1 nil 0) (15 0 16 0 nil 0) (19 0 18 1 nil 0) (19 0 20 0 nil 3) (19 0 21 0 nil 3) (23 0 22 1 nil 0) (6 0 22 2 nil 0) (24 0 23 0 nil 0) (18 0 23 1 nil 0) (21 0 24 0 nil 0) (20 0 24 1 nil 0) (13 0 25 0 nil 0) (27 0 25 1 nil 0) (19 0 26 1 nil 0) (26 0 27 1 nil 0))) nil 6.1))
