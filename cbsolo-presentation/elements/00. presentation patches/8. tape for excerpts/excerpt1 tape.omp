; OM File Header - Saved 2015/06/22 9:37:10
; (6.1 :patc (om-make-point 172 10) (om-make-point 409 23) (om-make-point 1152 1363) "" 183 0 "2015/06/21 20:05:41" "2015/06/21 21:13:37")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/easy-out-20.aiff\"") (list (quote :instance) "#P\"../../globals/2d corpus periodicity db.omi\"" "#P\"../../globals/2D pp path list.omi\"" "#P\"../../globals/pp first file midic.omi\"" "#P\"../../globals/2D PP CSEQ ANALYSIS.omi\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "excerpt1 tape" (quote ((let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 600 1236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "last note adjusted" (let ((copy (make-instance (quote omlistinstance) :name "last note adjusted" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/16 1 (list (list 5 23) -100)) (list 1/16 1/16 2 (list (list 9 32) -150)) (list 1/8 1/16 1 (list (list 12 2) 100)) (list 3/16 1/16 2 (list (list 17 6) 0)) (list 1/4 1/16 2 (list (list 17 27) 100)) (list 5/16 1/16 1 (list (list 12 7) 0)) (list 3/8 1/16 2 (list (list 20 33) 50)) (list 7/16 1/16 2 (list (list 5 25) 150)) (list 1/2 1/16 1 (list (list 1 27) -100)) (list 9/16 1/16 2 (list (list 10 4) 50)) (list 5/8 1/16 2 (list (list 9 36) -150)) (list 11/16 1/16 2 (list (list 17 27) -150)) (list 3/4 1/16 1 (list (list 4 1) -100)) (list 13/16 1/16 2 (list (list 9 12) 0)) (list 7/8 1/16 1 (list (list 12 3) 0)) (list 15/16 1/16 2 (list (list 9 12) -100)) (list 1 1/16 2 (list (list 9 11) -150)) (list 17/16 1/16 1 (list (list 12 8) -100)) (list 9/8 1/16 2 (list (list 17 5) -100)) (list 19/16 1/16 1 (list (list 21 0) -100)) (list 5/4 1/16 2 (list (list 11 25) -50)) (list 21/16 1/16 1 (list (list 8 29) -150)) (list 11/8 1/16 2 (list (list 20 33) 100)) (list 23/16 1/16 2 (list (list 9 12) -100)) (list 3/2 1/16 1 (list (list 8 2) 100)) (list 25/16 1/16 2 (list (list 9 36) -50)) (list 13/8 1/16 2 (list (list 17 6) -50)) (list 27/16 1/16 1 (list (list 18 7) -100)) (list 7/4 1/16 2 (list (list 7 37) 150)) (list 29/16 1/16 1 (list (list 21 30) 0)) (list 15/8 1/16 2 (list (list 9 11) -150)) (list 31/16 1/16 1 (list (list 5 25) -150)) (list 2 1/16 2 (list (list 17 4) -100)) (list 33/16 1/16 1 (list (list 18 4) 0)) (list 17/8 1/16 2 (list (list 17 6) -50)) (list 35/16 1/16 2 (list (list 15 0) -50)) (list 9/4 1/16 1 (list (list 13 33) 100)) (list 37/16 1/16 2 (list (list 17 4) -150)) (list 19/8 1/16 2 (list (list 7 3) -50)) (list 39/16 1/16 1 (list (list 21 30) 0)) (list 5/2 1/16 2 (list (list 20 33) -50)) (list 41/16 1/16 1 (list (list 21 32) -150)) (list 21/8 1/16 2 (list (list 17 4) 150)) (list 43/16 1/16 2 (list (list 11 25) 150)) (list 11/4 1/16 1 (list (list 13 1) 150)) (list 45/16 1/16 2 (list (list 10 4) -100)) (list 23/8 1/16 2 (list (list 9 13) -100)) (list 47/16 1/16 1 (list (list 15 28) -150)) (list 3 1/16 2 (list (list 9 35) -50)) (list 49/16 1/16 1 (list (list 3 23) 0)) (list 25/8 1/16 2 (list (list 17 28) 100)) (list 51/16 1/16 1 (list (list 21 33) -100)) (list 13/4 1/16 2 (list (list 11 25) 150)) (list 53/16 1/16 2 (list (list 9 11) 100)) (list 27/8 1/16 1 (list (list 1 4) -150)) (list 55/16 1/16 2 (list (list 17 5) 50)) (list 7/2 1/16 2 (list (list 17 28) -100)) (list 57/16 1/16 1 (list (list 5 29) -150)) (list 29/8 1/16 2 (list (list 9 34) 0)) (list 59/16 1/16 2 (list (list 17 26) 100)) (list 15/4 1/16 1 (list (list 18 7) 0)) (list 61/16 1/16 2 (list (list 9 11) -50)) (list 31/8 1/16 1 (list (list 18 9) 100)) (list 63/16 1/16 2 (list (list 17 29) -50)) (list 4 1/16 2 (list (list 17 26) -50)) (list 65/16 1/16 1 (list (list 18 5) 0)) (list 33/8 1/16 2 (list (list 7 40) -150)) (list 67/16 1/16 1 (list (list 8 9) 0)) (list 17/4 1/16 2 (list (list 11 25) 150)) (list 69/16 1/16 2 (list (list 9 32) -50)) (list 35/8 1/16 1 (list (list 21 4) 0)) (list 71/16 1/16 2 (list (list 9 35) -100)) (list 9/2 1/16 2 (list (list 9 9) -100)) (list 73/16 1/16 1 (list (list 6 30) 0)) (list 37/8 1/16 2 (list (list 17 6) -50)) (list 75/16 1/16 2 (list (list 20 7) -50)) (list 19/4 1/16 1 (list (list 8 35) -100)) (list 77/16 1/16 2 (list (list 9 12) -50)) (list 39/8 1/16 2 (list (list 17 6) 0)) (list 79/16 1/16 1 (list (list 12 26) -100)) (list 5 1/16 2 (list (list 10 4) -50)) (list 81/16 1/16 2 (list (list 9 34) 150)) (list 41/8 1/16 1 (list (list 12 20) -100)) (list 83/16 1/16 2 (list (list 9 34) 150)) (list 21/4 1/16 2 (list (list 9 9) 150)) (list 85/16 1/16 2 (list (list 20 7) 50)) (list 43/8 1/16 1 (list (list 3 7) 0)) (list 87/16 1/16 2 (list (list 15 0) 100)) (list 11/2 1/16 1 (list (list 12 24) -100)) (list 89/16 1/16 2 (list (list 17 28) 100)) (list 45/8 1/16 1 (list (list 18 37) 100)) (list 91/16 1/16 2 (list (list 17 29) 0)) (list 23/4 1/16 1 (list (list 5 2) 150)) (list 93/16 1/16 2 (list (list 20 33) -50)) (list 47/8 1/16 2 (list (list 20 7) 100)) (list 95/16 1/16 1 (list (list 11 21) 100)) (list 6 1/16 2 (list (list 20 33) -150)) (list 97/16 1/16 1 (list (list 5 25) 150)) (list 49/8 1/16 2 (list (list 9 12) -50)) (list 99/16 1/16 2 (list (list 8 4) -100)))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/21 21:04:12" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 914 922) "last note adjusted" (om-make-point 134 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "list" (let ((copy (make-instance (quote omlistinstance) :name "list" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/16 1 (list (list 5 23) -100)) (list 1/16 1/16 2 (list (list 9 32) -150)) (list 1/8 1/16 1 (list (list 12 3) 50)) (list 3/16 1/16 2 (list (list 17 6) 0)) (list 1/4 1/16 2 (list (list 17 27) 100)) (list 5/16 1/16 1 (list (list 12 7) 0)) (list 3/8 1/16 2 (list (list 20 33) 50)) (list 7/16 1/16 2 (list (list 7 40) -100)) (list 1/2 1/16 1 (list (list 1 27) -100)) (list 9/16 1/16 2 (list (list 10 4) 50)) (list 5/8 1/16 2 (list (list 9 36) -150)) (list 11/16 1/16 2 (list (list 17 27) -150)) (list 3/4 1/16 1 (list (list 4 1) -100)) (list 13/16 1/16 2 (list (list 9 12) 0)) (list 7/8 1/16 1 (list (list 12 3) 0)) (list 15/16 1/16 2 (list (list 9 12) -100)) (list 1 1/16 2 (list (list 9 11) -150)) (list 17/16 1/16 1 (list (list 12 8) -100)) (list 9/8 1/16 2 (list (list 17 5) -100)) (list 19/16 1/16 1 (list (list 21 0) -100)) (list 5/4 1/16 2 (list (list 11 25) -50)) (list 21/16 1/16 1 (list (list 8 29) -150)) (list 11/8 1/16 2 (list (list 20 33) 100)) (list 23/16 1/16 2 (list (list 9 12) -50)) (list 3/2 1/16 1 (list (list 8 2) 100)) (list 25/16 1/16 2 (list (list 9 36) -50)) (list 13/8 1/16 2 (list (list 17 6) -50)) (list 27/16 1/16 1 (list (list 18 7) -100)) (list 7/4 1/16 2 (list (list 7 37) 150)) (list 29/16 1/16 1 (list (list 21 30) 0)) (list 15/8 1/16 2 (list (list 9 11) -150)) (list 31/16 1/16 1 (list (list 5 25) -150)) (list 2 1/16 2 (list (list 17 4) -100)) (list 33/16 1/16 1 (list (list 18 4) 0)) (list 17/8 1/16 2 (list (list 17 6) -50)) (list 35/16 1/16 2 (list (list 15 0) -50)) (list 9/4 1/16 1 (list (list 13 33) 100)) (list 37/16 1/16 2 (list (list 17 4) -150)) (list 19/8 1/16 2 (list (list 7 3) -50)) (list 39/16 1/16 1 (list (list 21 30) 0)) (list 5/2 1/16 2 (list (list 20 33) -50)) (list 41/16 1/16 1 (list (list 21 32) -150)) (list 21/8 1/16 2 (list (list 17 4) 150)) (list 43/16 1/16 2 (list (list 11 25) 150)) (list 11/4 1/16 1 (list (list 13 1) 150)) (list 45/16 1/16 2 (list (list 10 4) -100)) (list 23/8 1/16 2 (list (list 9 13) -100)) (list 47/16 1/16 1 (list (list 15 28) -150)) (list 3 1/16 2 (list (list 7 37) -50)) (list 49/16 1/16 1 (list (list 3 23) 0)) (list 25/8 1/16 2 (list (list 17 28) 100)) (list 51/16 1/16 1 (list (list 21 33) -100)) (list 13/4 1/16 2 (list (list 11 25) 150)) (list 53/16 1/16 2 (list (list 9 11) 100)) (list 27/8 1/16 1 (list (list 1 4) -150)) (list 55/16 1/16 2 (list (list 17 5) 50)) (list 7/2 1/16 2 (list (list 17 28) -100)) (list 57/16 1/16 1 (list (list 5 29) -150)) (list 29/8 1/16 2 (list (list 9 34) 0)) (list 59/16 1/16 2 (list (list 7 20) 100)) (list 15/4 1/16 1 (list (list 18 7) 0)) (list 61/16 1/16 2 (list (list 9 11) -50)) (list 31/8 1/16 1 (list (list 18 9) 100)) (list 63/16 1/16 2 (list (list 15 29) -50)) (list 4 1/16 2 (list (list 17 26) -150)) (list 65/16 1/16 1 (list (list 18 5) 0)) (list 33/8 1/16 2 (list (list 7 40) -150)) (list 67/16 1/16 1 (list (list 8 9) 0)) (list 17/4 1/16 2 (list (list 11 13) 150)) (list 69/16 1/16 2 (list (list 9 32) -50)) (list 35/8 1/16 1 (list (list 21 4) 0)) (list 71/16 1/16 2 (list (list 9 35) -100)) (list 9/2 1/16 2 (list (list 9 9) -100)) (list 73/16 1/16 1 (list (list 6 30) 0)) (list 37/8 1/16 2 (list (list 17 6) -50)) (list 75/16 1/16 2 (list (list 20 7) -50)) (list 19/4 1/16 1 (list (list 8 35) -100)) (list 77/16 1/16 2 (list (list 9 12) -50)) (list 39/8 1/16 2 (list (list 17 6) 0)) (list 79/16 1/16 1 (list (list 12 26) -100)) (list 5 1/16 2 (list (list 10 4) -50)) (list 81/16 1/16 2 (list (list 9 34) 150)) (list 41/8 1/16 1 (list (list 12 20) -100)) (list 83/16 1/16 2 (list (list 9 34) 150)) (list 21/4 1/16 2 (list (list 9 9) 150)) (list 85/16 1/16 2 (list (list 20 7) 50)) (list 43/8 1/16 1 (list (list 3 7) 0)) (list 87/16 1/16 2 (list (list 15 0) 100)) (list 11/2 1/16 1 (list (list 12 24) -100)) (list 89/16 1/16 2 (list (list 17 28) 100)) (list 45/8 1/16 1 (list (list 18 37) 100)) (list 91/16 1/16 2 (list (list 17 29) 0)) (list 23/4 1/16 1 (list (list 5 2) 150)) (list 93/16 1/16 2 (list (list 20 33) -50)) (list 47/8 1/16 2 (list (list 20 7) 100)) (list 95/16 1/16 1 (list (list 11 21) 100)) (list 6 1/16 2 (list (list 20 33) 0)) (list 97/16 1/16 1 (list (list 15 26) -100)) (list 49/8 1/16 2 (list (list 9 11) -50)) (list 99/16 1/16 2 (list (list 10 5) -100)))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/21 21:02:34" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 1035 745) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 221 1238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 198 1096) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 1174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 707 644) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "periodicity" (om-load-patch-abs1 "periodicity" (quote ((let ((box (om-load-boxcall (quote abstraction) "cb-period" (om-load-lisp-abspatch "cb-period" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"cb-pitch\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (* (loop for reg in (d::arr-regions arr)$           sum$           (d::offby (d::region-pitch reg) $                     (if (= (d::region-chan reg) 1)$                         '(0.5 nil)$                       '(nil 0.2))))$     1000))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 133 335) nil (list nil) "l" "cb-period"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 197 667) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus periodicity db" (get-inst-from-globals "2d corpus periodicity db") (quote nil) (om-make-point 298 78) nil (om-make-point 177 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 272 434) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "corpus def->periodicity" (om-load-patch-abs1 "corpus def->periodicity" (quote ((let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 523 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 445 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 462 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 327 211) (om-make-point 79 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 167 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 91 411) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 132 217) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 199 117) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 195 21) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 257 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 1 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (8 0 3 1 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 312 303) nil (list nil) "l" "corpus def->periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 157 540) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (4 0 3 1 nil 0) (2 0 4 1 nil 0) (0 0 5 0 nil 0) (3 0 5 1 nil 0))) 6.1 nil "" (om-make-point 242 230) (om-make-point 593 805)) (quote nil) (om-make-point 796 541) nil (list nil) nil "periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1048 233) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" 0) (om-load-inputfun (quote input-funbox) "" "TEMPO" 80))) (om-make-point 995 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "instance" (let ((copy (make-instance (quote ominstance) :name "instance" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2))) (setf (create-info copy) (quote ("2015/06/21 20:33:25" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 949 106) nil (om-make-point 158 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 688 315) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "excerpt1 arr" (let ((copy (make-instance (quote omlistinstance) :name "excerpt1 arr" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 584 116) nil (om-make-point 269 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "cb-pitch" (om-load-lisp-abspatch "cb-pitch" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"cb-pitch\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr cb-arr period-db)$$  (+ (loop for reg in (d::arr-channel-filter (d::arr-regions arr) 1)$           for cb-reg in (d::arr-regions cb-arr)$           $           sum$           (d::offby (d::region-pitch reg)$                     (car (d::region-pitch cb-reg))))$     $     (loop for reg in (d::arr-channel-filter (d::arr-regions arr) 2)$       $           sum$           (d::offby (d::region-pitch reg) '(4000 6000)))))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil) (om-load-inputfun (quote input-funbox) "" "CB-ARR" nil) (om-load-inputfun (quote input-funbox) "" "PERIOD-DB" nil))) (om-make-point 607 374) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 834 809) nil (om-make-point 130 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 382 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 277 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "channel->amp" (om-load-patch-abs1 "channel->amp" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 303 308) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 340 50) (om-make-point 101 30) (list (list 1 1) (list 2 0.2)) "((1 1) (2 0.2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSOC" (quote assoc) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "ALIST" "ALIST" nil))) (om-make-point 332 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 329 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 465 433)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2171/3 556/3) nil nil "l" "channel->amp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 693 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "jitter" (om-load-lisp-abspatch "jitter" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"jitter\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (times)$  (loop for time in times$        collect (+ time (* (om-random -20 20) .001))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "TIMES" nil))) (om-make-point 235 395) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxout "output 3" 2 (om-make-point 493 659) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "channels" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-CHANNEL-FILTER" (quote om-darwin::arr-channel-filter) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 301 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 217 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 175 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 198 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 202 530) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 2 0 0 nil 0) (8 3 2 0 nil 0) (8 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (5 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 1169 262) (om-make-point 879 963)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 370 109) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 48 308) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 268 186) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 212 271) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 275 704) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 120 158) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "arr" 0 (om-make-point 188 28) "" "arr" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil) (om-load-inputfun (quote input-funbox) "" "AMPS" nil))) (om-make-point 225 601) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 86 512) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (13 0 1 0 nil 0) (2 0 3 0 nil 0) (5 2 3 1 nil 0) (8 0 4 0 nil 0) (0 0 5 0 nil 0) (12 0 6 1 nil 0) (5 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (5 1 10 0 nil 0) (14 0 11 0 nil 0) (15 0 14 0 nil 0) (4 0 14 1 nil 0) (9 1 14 2 nil 0) (3 0 14 3 nil 0) (6 0 15 0 nil 0) (9 0 15 1 nil 0))) 6.1 nil "" (om-make-point 105 67) (om-make-point 885 987)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 799 995) nil (list "/Users/holbrook/Data/lib/OM-libraries/om-darwin/cbsolo-presentation/out-files/easy-out-20.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-20.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 749 1101) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-20" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-20.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 570 104) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 371 432) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 811 817)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 443 368) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2D PP CSEQ ANALYSIS" (get-inst-from-globals "2D PP CSEQ ANALYSIS") (quote nil) (om-make-point 77 184) nil (om-make-point 170 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 183 395) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 69 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 81 735) (om-make-point 665 288) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 220 88 136 139 189 36 96 175 223 39 95 104 227 22 24 243 177 171 115 221 175 224 96 163 92 116 94 117 151 95 2 8 239 163 92 148 16 133 38 21 94 151 173 253 83 55 109 160 119 148 121 84 167 85 228 73 43 231 81 52 229 215 246 133 246 21 224 107 79 96 83 34 9 86 3 135 183 137 167 161 71 198 205 68 217 0 118 155 113 116 123 212 136 104 130 160 3 2 220 238 246 71 24 219 65 33 237 48 228 193 200 88 199 177 187 95 96 9 152 26 226 71 61 88 154 60 230 151 38 118 231 109 104 105 161 143 126 1 58 96 129 51 139 88 196 19 224 4 192 134 156 40 82 215 101 177 131 126 208 159 238 106 70 66 251 229 33 117 208 65 102 203 30 182 12 155 20 191 77 193 100 105 199 102 83 181 172 102 134 176 245 209 123 198 78 83 67 100 95 41 159 81 131 234 5 239 184 44 26 93 233 4 128 150 193 231 12 146 78 42 135 212 249 226 185 78 10 189 251 83 64 217 170 172 104 233 93 39 60 193 62 182 176 55 203 204 95 127 156 93 2 97 180 107 122 253 47 84 240 76 225 104 221 155 159 182 185 97 143 70 141 48 173 44 232 136 100 94 182 125 94 175 71 54 170 184 71 75 32 162 190 184 132 80 110 99 220 31 85 48) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 220 88 136 139 189 36 96 175 223 39 95 104 227 22 24 243 177 171 115 221 175 224 96 163 92 116 94 117 151 95 2 8 239 163 92 148 16 133 38 21 94 151 173 253 83 55 109 160 119 148 121 84 167 85 228 73 43 231 81 52 229 215 246 133 246 21 224 107 79 96 83 34 9 86 3 135 183 137 167 161 71 198 205 68 217 0 118 155 113 116 123 212 136 104 130 160 3 2 220 238 246 71 24 219 65 33 237 48 228 193 200 88 199 177 187 95 96 9 152 26 226 71 61 88 154 60 230 151 38 118 231 109 104 105 161 143 126 1 58 96 129 51 139 88 196 19 224 4 192 134 156 40 82 215 101 177 131 126 208 159 238 106 70 66 251 229 33 117 208 65 102 203 30 182 12 155 20 191 77 193 100 105 199 102 83 181 172 102 134 176 245 209 123 198 78 83 67 100 95 41 159 81 131 234 5 239 184 44 26 93 233 4 128 150 193 231 12 146 78 42 135 212 249 226 185 78 10 189 251 83 64 217 170 172 104 233 93 39 60 193 62 182 176 55 203 204 95 127 156 93 2 97 180 107 122 253 47 84 240 76 225 104 221 155 159 182 185 97 143 70 141 48 173 44 232 136 100 94 182 125 94 175 71 54 170 184 71 75 32 162 190 184 132 80 110 99 220 31 85 48)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 716.4795 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 34 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 200 25 187 115 83 28 54 197 74 71 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 34 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 200 25 187 115 83 28 54 197 74 71 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 732.0627 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 201 208 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 240 130 53 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 57 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 201 208 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 240 130 53 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 57 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 732.06275 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 33 219 71 178 20 74 186 109 73 84 83 211 199 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 102 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 33 219 71 178 20 74 186 109 73 84 83 211 199 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 102 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 736.2675 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 95 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 245 40 89 99 37 205 192 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 128 93 24 3 33 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 205 25 187 115 83 28 54 197 74 71 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 95 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 245 40 89 99 37 205 192 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 128 93 24 3 33 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 205 25 187 115 83 28 54 197 74 71 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 737.24427 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 216 29 3 194 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 79 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 26 31 11 222 89 45 35 193 251 39 17 192 85 38 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 199 193 129 66 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 197 173 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 94 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 216 29 3 194 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 79 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 26 31 11 222 89 45 35 193 251 39 17 192 85 38 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 176 116 153 17 149 6 58 86 171 108 118 117 22 141 175 199 193 129 66 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 197 173 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 94 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 740.50806 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 88 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 148 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 88 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 148 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 742.3629 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 33 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 205 25 187 115 83 28 55 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 142 127 67 47 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 53 240 100 109 127 94 185 117 127 207 91 172 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 5 74 235 231 232 119 94 16 10 4 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 183 87 74 45 61 127 93 29 3 33 219 71 178 20 74 226 109 73 84 83 211 199 213 29 100 101 247 90 32 168 239 185 177 225 125 233 119 251 240 205 25 187 115 83 28 55 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 142 127 67 47 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 53 240 100 109 127 94 185 117 127 207 91 172 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 69 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 5 74 235 231 232 119 94 16 10 4 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 743.203 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 114 6 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 129 237 245 40 89 99 37 205 192 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 10 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 114 6 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 129 237 245 40 89 99 37 205 192 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 222 89 45 35 193 251 39 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 10 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 743.4686 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 108 26 31 11 222 89 45 35 193 251 114 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 149 96 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 172 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 160 198 185 239 45 78 102 92 75 116 69 251 214 41 240 130 53 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 57 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 6 3 149 27 5 210 89 129 64 33 196 227 40 113 1 150 71 252 86 68 185 239 198 171 70 169 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 177 185 239 217 125 233 119 251 240 205 25 187 115 83 28 54 197 74 197 17 108 26 31 11 222 89 45 35 193 251 114 17 192 85 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 149 96 237 67 2 40 251 80 227 163 28 206 91 255 98 71 48 97 196 100 109 127 94 185 117 127 207 91 172 116 153 17 149 6 58 86 171 108 118 117 22 141 175 66 193 129 199 210 190 141 186 160 198 185 239 45 78 102 92 75 116 69 251 214 41 240 130 53 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 57 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 747.64594 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 201 208 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 102 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 228 92 9 155 252 210 248 243 171 5 3 149 27 6 210 89 129 64 33 196 227 201 208 1 150 71 252 86 68 185 239 198 171 68 171 224 1 176 229 12 108 210 3 178 141 217 29 31 52 210 12 213 148 105 46 99 43 246 120 103 0 107 184 152 91 152 115 12 119 159 127 244 109 78 31 77 247 237 129 198 40 89 99 37 205 76 65 153 227 53 52 95 71 107 0 215 250 169 106 4 10 17 211 254 235 164 124 87 74 45 61 127 93 29 3 21 219 71 178 20 74 226 109 73 84 83 250 160 213 29 100 101 247 90 32 168 161 185 239 240 125 233 119 251 217 205 25 187 115 83 28 54 197 74 197 17 109 25 31 11 89 222 45 35 193 251 39 17 192 191 247 29 56 141 34 38 127 67 54 84 253 234 9 216 254 194 9 187 39 152 93 237 67 2 40 251 80 227 102 28 206 91 255 98 71 48 97 196 100 109 127 94 185 114 130 207 91 176 116 153 17 149 6 58 86 171 102 118 117 22 141 175 66 193 129 199 210 190 141 186 45 198 185 239 160 78 102 92 75 116 74 251 214 41 240 130 201 179 48 129 147 41 5 188 188 113 237 28 159 150 242 26 127 70 199 225 43 244 108 115 86 240 171 222 231 185 5 174 74 5 235 231 232 119 93 16 10 4 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5))) (setf (om-darwin::generation om-darwin::ga) 1082) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/4 (((3 4) ((1 (1 -1 1 -1)) (1 (-1 1 -2)) (1 (1 -3)))) ((15 16) (1 -1 1 -2 1 -1 1 -1 1 -2 1 -2)) ((9 16) (1 -1 1 -1 1 -1 1 -2)) ((11 16) (1 -2 1 -1 1 -2 1 -2)) ((5 8) ((1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (-1 1)) -1)) ((4 4) ((1 (1 -2 1)) (1 (-1 1 -2)) (1 (1 -1 1 -1)) (1 (-1 1 -2)))) ((13 16) (1 -2 1 -2 1 -2 1 -3)) ((7 8) ((1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (1 -1)) (1 (-1 1)) (1 (-1 1)) -1)) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/4 (((3 4) ((1 (-1 1 -1 1)) (1 (1 -1 1 1)) (1 (-1 1 1 1)))) ((15 16) (-1 1 -1 1 1 -1 1 -1 1 -1 1 1 -1 1 1)) ((9 16) (-1 1 -1 1 -1 1 -1 1 1)) ((11 16) (-1 1 1 -1 1 -1 1 1 -1 1 1)) ((5 8) ((1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (1 -1)) (1 (1 1)))) ((4 4) ((1 (-1 1 1 -1)) (1 (1 -1 1 1)) (1 (-1 1 -1 1)) (1 (1 -1 1 1)))) ((13 16) (-1 1 1 -1 1 1 -1 1 1 -1 1 1 1)) ((7 8) ((1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (-1 1)) (1 (1 -1)) (1 (1 -1)) (1 (1 1)))) ((4 4) (-4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1112 94) (om-make-point 370 280) 0 1000 nil 19/25 (quote :midi-player) nil nil (om-make-point 0 24) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gff) (quote gff)) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 171 615) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 344 645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-HEADER" (quote om-darwin::arr-header) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 393 551) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 101 465) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 243 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 255 430) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 417 324) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 1/16))) (om-make-point 341 369) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 353 162) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 372 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote abstraction) "mini-arr-w-channels" (om-load-lisp-abspatch "mini-arr-w-channels" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"process-w-channels\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (first rest)$  (cons (d::make-region 0 1/16 1 first)$        (loop for note in rest$              for start from 1/16 by 1/16$              collect (d::make-region start 1/16 2 note))))") (quote ((om-load-inputfun (quote input-funbox) "" "FIRST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 304 777) nil nil nil "mini-arr-w-channels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 429 647) (om-make-point 109 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1- 2" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 522 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 282 932) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "len" 2 (om-make-point 489 442) "" "len" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 207 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 268 508) (om-make-point 107 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 349 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 327 133) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 432 128) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 379 327) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 467 214) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 431 324) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 82 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 113 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 62 290) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 198 284) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 249 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 218 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 180 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 105 454) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (1 0 0 1 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (20 0 7 0 nil 0) (11 0 7 1 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (8 0 11 0 nil 0) (12 0 11 1 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (6 0 15 0 nil 0) (5 0 18 0 nil 0) (17 0 19 0 nil 0) (18 0 19 1 nil 0) (14 0 20 0 nil 0) (19 0 20 1 nil 0))) 6.1 nil "" (om-make-point 615 118) (om-make-point 1268 1216)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 201 305) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 469 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "excerpt1 arr" (let ((copy (make-instance (quote omlistinstance) :name "excerpt1 arr" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/21 20:13:36" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 581 53) "excerpt1 arr" (om-make-point 124 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "extract arr from excerpt1" (om-load-patch-abs1 "extract arr from excerpt1" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 392 657) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 223 260) (om-make-point 363 30) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4)) "((3 4) (15 16) (9 16) (11 16) (5 8) (4 4) (13 16) (7 8) (4 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-ARR" (quote om-darwin::make-arr) (quote ((om-load-inputfun (quote input-funbox) "STARTS" "STARTS" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "time-sig" (quote :time-sig) nil nil))) (om-make-point 249 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 159 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 260 128) (om-make-point 201 87) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (3600) (4000) (3300) (4500) (3600) (4000) (3000) (3500) (2900) (4900) (4300) (4700) (4100) (5200) (4300) (4700) (3800) (5500) (4600) (5100) (4100) (5900) (5000) (5700) (4400) (4900) (4300) (6200) (5400) (5800) (5200) (6400) (5600) (6000) (5100) (5500) (5000))) :lonset (quote (0 333 833 1333 2000 2333 2833 3167 3500 4000 4500 4833 5167 5500 6000 6500 6833 7333 7833 8167 8500 9000 9500 10000 10333 10833 11167 11667 12167 12667 13167 13667 14333 14667 15000 15333 15833 16167 16666)) :ldur (quote ((333) (501) (500) (667) (333) (500) (333) (333) (500) (500) (333) (333) (333) (500) (500) (333) (500) (500) (333) (333) (500) (500) (500) (334) (500) (333) (500) (500) (500) (500) (500) (667) (333) (333) (333) (501) (334) (499))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TREE2RATIO" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "a rythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 64 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TREE" (quote tree) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 50 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "VOICES" (quote voices) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 101 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "cb excerpt1" (let ((copy (make-instance (quote ominstance) :name "cb excerpt1" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2015/06/21 20:13:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 62 50) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (4 1 2 1 nil 0) (1 0 2 2 nil 0) (5 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 517 782)) (quote nil) (om-make-point 552 356) nil (list (list (quote :header) (list (quote :time-sig) (list (list 3 4) (list 15 16) (list 9 16) (list 11 16) (list 5 8) (list 4 4) (list 13 16) (list 7 8) (list 4 4))) (list 0 1/8 1 (list 4200)) (list 1/8 3/16 1 (list 3600)) (list 5/16 3/16 1 (list 4000)) (list 1/2 1/4 1 (list 3300)) (list 3/4 1/8 1 (list 4500)) (list 7/8 3/16 1 (list 3600)) (list 17/16 1/8 1 (list 4000)) (list 19/16 1/8 1 (list 3000)) (list 21/16 3/16 1 (list 3500)) (list 3/2 3/16 1 (list 2900)) (list 27/16 1/8 1 (list 4900)) (list 29/16 1/8 1 (list 4300)) (list 31/16 1/8 1 (list 4700)) (list 33/16 3/16 1 (list 4100)) (list 9/4 3/16 1 (list 5200)) (list 39/16 1/8 1 (list 4300)) (list 41/16 3/16 1 (list 4700)) (list 11/4 3/16 1 (list 3800)) (list 47/16 1/8 1 (list 5500)) (list 49/16 1/8 1 (list 4600)) (list 51/16 3/16 1 (list 5100)) (list 27/8 3/16 1 (list 4100)) (list 57/16 3/16 1 (list 5900)) (list 15/4 1/8 1 (list 5000)) (list 31/8 3/16 1 (list 5700)) (list 65/16 1/8 1 (list 4400)) (list 67/16 3/16 1 (list 4900)) (list 35/8 3/16 1 (list 4300)) (list 73/16 3/16 1 (list 6200)) (list 19/4 3/16 1 (list 5400)) (list 79/16 3/16 1 (list 5800)) (list 41/8 1/4 1 (list 5200)) (list 43/8 1/8 1 (list 6400)) (list 11/2 1/8 1 (list 5600)) (list 45/8 1/8 1 (list 6000)) (list 23/4 3/16 1 (list 5100)) (list 95/16 1/8 1 (list 5500)) (list 97/16 3/16 1 (list 5000)))) nil "extract arr from excerpt1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 250 23) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 370 729) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 93 23) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (11 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (8 0 6 0 nil 0) (5 0 6 1 nil 0) (7 0 8 0 nil 0) (10 0 8 1 nil 0) (15 0 9 0 nil 0) (13 0 9 1 nil 0) (11 0 10 0 nil 0) (0 0 14 0 nil 0))) 6.1 nil "" (om-make-point 781 136) (om-make-point 1117 996)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "max-folder-length" nil))) (om-make-point 103 506) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 574 514) (om-make-point 180 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 213 28) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 807 305) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 752 426) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (5 0 3 0 nil 0) (22 0 4 0 nil 0) (4 0 5 0 nil 0) (25 0 6 0 nil 0) (7 0 6 1 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0) (3 0 15 0 nil 0) (14 0 15 1 nil 0) (15 0 16 0 nil 0) (19 0 18 1 nil 0) (19 0 20 0 nil 3) (19 0 21 0 nil 3) (23 0 22 1 nil 0) (6 0 22 2 nil 0) (24 0 23 0 nil 0) (18 0 23 1 nil 0) (21 0 24 0 nil 0) (20 0 24 1 nil 0) (13 0 25 0 nil 0) (27 0 25 1 nil 0) (19 0 26 1 nil 0) (26 0 27 1 nil 0))) nil 6.1))
