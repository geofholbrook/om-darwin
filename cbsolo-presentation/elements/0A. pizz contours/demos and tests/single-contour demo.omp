; OM File Header - Saved 2015/06/19 18:08:55
; (6.1 :patc (om-make-point 10 10) (om-make-point 1345 520) (om-make-point 854 507) "" 183 0 "2015/06/19 12:31:07" "2015/06/19 18:08:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../simple evaluation.omp\"" "#P\"../single-contour.omp\"" "#P\"../single-contour (genetic).omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "single-contour demo" (quote ((let ((box (om-load-boxcall (quote patch-box) "simple evaluation" (quote ("elements" "pizz contours" "simple evaluation")) (quote ((om-load-inputfun (quote input-funbox) "" "lmidic" nil))) (om-make-point 569 83) (om-make-point 110 67) (list nil) "l" "simple evaluation" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "single-contour 2" (quote ("elements" "pizz contours" "single-contour")) (quote ((om-load-inputfun (quote input-funbox) "" "range" nil))) (om-make-point 403 84) nil (list (list 6900 6100 6800 5500 5900 5200)) nil "single-contour" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "single-contour (genetic) 2" (quote ("elements" "pizz contours" "single-contour (genetic)")) (quote ((om-load-inputfun (quote input-funbox) "" "range" nil))) (om-make-point 64 93) nil (list nil) "l" "single-contour (genetic)" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 330 239) (om-make-point 377 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6100) (6800) (5500) (5900) (5200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 -13) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 260 16) (om-make-point 62 30) (list 48 72) "(48 72)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 173 370) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 51 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (4 0 2 0 nil 0) (6 0 5 0 nil 0) (2 0 6 0 nil 0))) nil 6.1))
