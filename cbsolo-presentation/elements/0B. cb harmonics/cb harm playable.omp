; OM File Header - Saved 2015/06/20 17:10:57
; (6.1 :patc (om-make-point 10 10) (om-make-point 397 530) (om-make-point 1309 1143) "" 183 0 "2015/06/20 16:15:50" "2015/06/20 17:10:57")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/easy-out-8.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "cb harm playable" (quote ((let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 101 948) (om-make-point 707 164) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3700 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 4300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450 4300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 3800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450 3300)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 2800)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 0 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 1 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 1 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 2 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 2 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 3 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((0 3 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 0 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 0 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 1 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 1 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 2 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 2 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 3 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((1 3 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 0 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 0 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 1 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 1 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 2 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 2 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 3 0 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t))) ((2 3 1 0) (if (find-class (quote head-extra) nil) (make-instance (quote head-extra) :thehead "a" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 180 426) (om-make-point 1150 480) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PREP-FOR-OUTPUT" (quote om-darwin::prep-for-output) (quote ((om-load-inputfun (quote input-funbox) "SPEC" "SPEC" nil))) (om-make-point 234 856) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 510 120) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "str-distance" (om-load-patch-abs1 "str-distance" (quote ((let ((box (om-load-boxcall (quote lispfun) "CORDE" (quote om-darwin::corde) (quote ((om-load-inputfun (quote input-funbox) "CB-HARMONICS-NOTE" "CB-HARMONICS-NOTE" nil))) (om-make-point 161 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CORDE" (quote om-darwin::corde) (quote ((om-load-inputfun (quote input-funbox) "CB-HARMONICS-NOTE" "CB-HARMONICS-NOTE" nil))) (om-make-point 361 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 319 354) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 189 528) (om-make-point 96 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 360 657) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 129 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 352 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 102 337) (om-make-point 110 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 120 108) (om-make-point 189 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (8 1 1 0 nil 0) (8 1 3 0 nil 0) (6 0 3 1 nil 0) (2 0 3 2 nil 0) (3 0 4 0 nil 0) (7 0 6 0 nil 0) (1 0 7 0 nil 0) (0 0 7 1 nil 0) (5 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 587 681)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 381 107) nil (list nil) "l" "str-distance"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-ONOPERONS" (quote c-onoperons) (quote ((om-load-inputfun (quote input-funbox) "" "EVAL" nil) (om-load-inputfun (quote input-funbox) "" "TEST" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 476 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-8.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 845 955) (om-make-point 457 79) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-8" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-8.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 612 774) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 892 701) nil (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Contrabass" "artificial-harmonic")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 848 790) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLER" (quote om-sampler) (quote ((om-load-inputfun (quote input-funbox) "" "OBJ" nil) (om-load-inputfun (quote input-funbox) "" "SOUND-LISTS" nil))) (om-make-point 907 869) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 126 278) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "note-replay" (om-load-lisp-abspatch "note-replay" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"string-replay\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pheno)$  (loop for sub on (mapcar 'd::region-pitch pheno)$        while (>= (length sub) 5)$        sum$        (let ((block (first-n sub 5)))$          (if (< (length (remove-duplicates block))$                 (length block))$              1$            0))))") (quote ((om-load-inputfun (quote input-funbox) "" "PHENO" nil))) (om-make-point 895 220) nil (list nil) "l" "note-replay"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "belonging" (om-load-lisp-abspatch "belonging" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"string-replay\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec)$  (loop for sub on (mapcar 'd::corde (d::operons spec))$        while (>= (length sub) 3)$        sum$        (if (or (= (first sub) (second sub))$                (= (first sub) (third sub))$                (= (second sub) (third sub)))$            1$          0)))$                       ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 1121 273) (om-make-point 95 67) (list nil) "l" "belonging"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1088 177) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1020 66) (om-make-point 220 30) (list (quote :set) 0 50 100 500 700 1200 2400) "(:set 0 50 100 500 700 1200 2400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 967 126) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1001 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 657 214) (om-make-point 111 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "string-replay" (om-load-lisp-abspatch "string-replay" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"string-replay\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec)$  (loop for sub on (mapcar 'd::corde (d::operons spec))$        while (>= (length sub) 3)$        sum$        (if (or (= (first sub) (second sub))$                (= (first sub) (third sub))$                (= (second sub) (third sub)))$            1$          0)))$                       ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 593 74) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 470 435) (om-make-point 465 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 106 725) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 172 786) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 104) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pos-distance" (om-load-patch-abs1 "pos-distance" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 319 354) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 189 528) (om-make-point 96 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 360 657) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 129 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 352 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 229 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POS" (quote om-darwin::pos) (quote ((om-load-inputfun (quote input-funbox) "CB-HARMONICS-NOTE" "CB-HARMONICS-NOTE" nil))) (om-make-point 270 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POS" (quote om-darwin::pos) (quote ((om-load-inputfun (quote input-funbox) "CB-HARMONICS-NOTE" "CB-HARMONICS-NOTE" nil))) (om-make-point 200 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 118 107) (om-make-point 189 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 1 1 0 nil 0) (4 0 1 1 nil 0) (0 0 1 2 nil 0) (1 0 2 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 5 1 nil 0) (8 1 6 0 nil 0) (8 0 7 0 nil 0) (3 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 595 713)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 125 91) nil (list nil) "l" "pos-distance"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-ONOPERONS" (quote c-onoperons) (quote ((om-load-inputfun (quote input-funbox) "" "EVAL" nil) (om-load-inputfun (quote input-funbox) "" "TEST" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 220 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 86 530) (om-make-point 628 165) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 249 110 190 228 156 238 225 253 176 104 197 5 195 16 207 151 190 255 162 38 153 241 42 99 240 24 238 29 42 32 205 181 252 197 233 212 11 133 132 252 156 30 24 208 60 21 140 230) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 110 190 228 156 238 225 253 176 104 197 5 195 16 207 151 190 255 162 38 153 241 42 99 240 24 238 29 42 32 205 181 252 197 233 212 11 133 132 252 156 30 24 208 60 21 140 230)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 10.360734 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 112 25 212 74 28 152 212 197 99 154 116 212 47 53 76 246 63 204 106 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 25 212 74 28 152 212 197 99 154 116 212 47 53 76 246 63 204 106 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 10.388905 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 169 49 100 70 29 151 224 197 99 154 116 212 47 53 76 246 63 204 105 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7100) (list 3/8 1/8 1 6400) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 6100) (list 7/8 1/8 1 5000) (list 1 1/8 1 5600) (list 9/8 1/8 1 7100) (list 5/4 1/8 1 5700) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 5600) (list 2 1/8 1 6100) (list 17/8 1/8 1 7400) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6650.0) (list 23/8 1/8 1 4700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 49 100 70 29 151 224 197 99 154 116 212 47 53 76 246 63 204 105 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 10.4203005 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 169 49 100 70 29 151 224 197 99 154 116 212 47 53 76 246 63 204 106 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7100) (list 3/8 1/8 1 6400) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 6100) (list 7/8 1/8 1 5000) (list 1 1/8 1 5600) (list 9/8 1/8 1 6200) (list 5/4 1/8 1 5700) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 5600) (list 2 1/8 1 6100) (list 17/8 1/8 1 7400) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6650.0) (list 23/8 1/8 1 4700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 49 100 70 29 151 224 197 99 154 116 212 47 53 76 246 63 204 106 79 246 186 121 161 192 188 67 26 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 10.454335 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 112 137 212 74 28 152 212 197 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 229 192 44 53 26 250 101 67 199 67 113 166 116 207 46 52 165 219 255 52 238 219 65 246 212) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6400) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 5900) (list 3/8 1/8 1 5700) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6650.0) (list 23/8 1/8 1 4700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 137 212 74 28 152 212 197 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 229 192 44 53 26 250 101 67 199 67 113 166 116 207 46 52 165 219 255 52 238 219 65 246 212)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 10.490633 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 169 53 212 74 0 215 184 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 5700) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 5600) (list 2 1/8 1 6100) (list 17/8 1/8 1 7400) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6650.0) (list 23/8 1/8 1 4700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 53 212 74 0 215 184 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 116 67 113 166 155 207 46 52 165 219 255 52 238 219 65 246 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 10.528927 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 158 53 212 74 0 215 199 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 23 161 192 44 53 250 26 101 67 199 67 113 166 116 207 46 52 165 219 255 52 238 219 65 246 212) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 5200) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 6650.0) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6650.0) (list 23/8 1/8 1 4700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 158 53 212 74 0 215 199 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 23 161 192 44 53 250 26 101 67 199 67 113 166 116 207 46 52 165 219 255 52 238 219 65 246 212)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 10.569017 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 112 137 212 74 0 215 199 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 165 219 255 52 238 219 240 246 65) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6400) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 6650.0) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6150.0) (list 23/8 1/8 1 5200)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 137 212 74 0 215 199 241 99 106 116 224 47 191 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 165 219 255 52 238 219 240 246 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 10.610748 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 169 53 212 74 0 215 199 241 99 106 116 224 47 55 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 36 207 46 52 165 219 255 52 238 219 240 246 65) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 6650.0) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 5700) (list 5/2 1/8 1 7650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6150.0) (list 23/8 1/8 1 5200)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 53 212 74 0 215 199 241 99 106 116 224 47 55 76 137 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 36 207 46 52 165 219 255 52 238 219 240 246 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 10.653992 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 112 137 212 74 0 215 199 241 99 106 116 228 47 191 76 181 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 255 219 165 52 238 219 244 246 65) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6400) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 6650.0) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 7100) (list 7/8 1/8 1 4500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 6700) (list 5/2 1/8 1 6650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6150.0) (list 23/8 1/8 1 5200)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 137 212 74 0 215 199 241 99 106 116 228 47 191 76 181 203 68 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 255 219 165 52 238 219 244 246 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 10.702923 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 169 53 212 74 0 215 199 241 99 106 116 228 47 181 76 191 203 72 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 255 219 165 52 238 219 240 248 65) :decoder (list (list (quote :set) 3 4 5 5.5 7 9 12 16 19 21.5 24 28 31 33.5) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 7400) (list 3/8 1/8 1 6650.0) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 4700) (list 3/4 1/8 1 6100) (list 7/8 1/8 1 5500) (list 1 1/8 1 5600) (list 9/8 1/8 1 5700) (list 5/4 1/8 1 6200) (list 11/8 1/8 1 6650.0) (list 3/2 1/8 1 5200) (list 13/8 1/8 1 6600) (list 7/4 1/8 1 6400) (list 15/8 1/8 1 7100) (list 2 1/8 1 6100) (list 17/8 1/8 1 5900) (list 9/4 1/8 1 6600) (list 19/8 1/8 1 6700) (list 5/2 1/8 1 6650.0) (list 21/8 1/8 1 6200) (list 11/4 1/8 1 6150.0) (list 23/8 1/8 1 5700)) :num-notes 24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 53 212 74 0 215 199 241 99 106 116 228 47 181 76 191 203 72 246 254 246 195 121 161 192 64 53 250 26 101 67 155 67 113 166 116 207 46 52 255 219 165 52 238 219 240 248 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 13))) (setf (om-darwin::generation om-darwin::ga) 494) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf)) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-CB-HARMONICS" (quote make-cb-harmonics) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 16))) (om-make-point 80 345) (om-make-point 167 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (21 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (9 0 5 0 nil 0) (25 0 6 0 nil 0) (7 0 8 0 nil 0) (6 0 9 0 nil 0) (8 0 9 1 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (13 0 16 3 nil 0) (18 0 17 0 nil 0) (24 0 19 0 nil 0) (4 0 19 1 nil 0) (17 0 19 2 nil 0) (11 0 19 3 nil 0) (16 0 19 4 nil 0) (25 0 20 0 nil 0) (20 0 21 0 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (26 0 25 1 nil 0) (19 0 25 2 nil 0) (10 0 26 0 nil 0))) nil 6.1))