; OM File Header - Saved 2015/06/20 17:10:51
; (6.1 :patc (om-make-point 10 10) (om-make-point 941 506) (om-make-point 972 730) "" 183 0 "2015/06/20 15:31:46" "2015/06/20 17:10:51")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "cb harmonic test" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 475 127) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 365 73) (om-make-point 81 30) (list (quote :set) 6 22) "(:set 6 22)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POS" (quote om-darwin::pos) (quote ((om-load-inputfun (quote input-funbox) "CB-HARMONICS-NOTE" "CB-HARMONICS-NOTE" nil))) (om-make-point 277 117) (om-make-point 84 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-OPERONS" (quote c-operons) (quote ((om-load-inputfun (quote input-funbox) "" "EVAL" nil) (om-load-inputfun (quote input-funbox) "" "TEST" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 291 207) (om-make-point 258 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 93 383) (om-make-point 429 154) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 82 11 144 18 17 78 176 120 155 189 112 97 241 67 62 134 59 201 144 219 238 48 253 168 38 241 95 92 86 225 90 130) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 11 144 18 17 78 176 120 155 189 112 97 241 67 62 134 59 201 144 219 238 48 253 168 38 241 95 92 86 225 90 130)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 149 220 72 102 79 33 182 133 3 169 9 217 88 74 143 0 86 207 23 233 242 236 177 46 62 67 135 111 175 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 220 72 102 79 33 182 133 3 169 9 217 88 74 143 0 86 207 23 233 242 236 177 46 62 67 135 111 175 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 450158) (list 0.025737213 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 149 220 72 102 79 33 182 133 3 169 9 217 88 74 143 0 86 207 23 233 242 82 75 46 62 67 135 111 175 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 220 72 102 79 33 182 133 3 169 9 217 88 74 143 0 86 207 23 233 242 82 75 46 62 67 135 111 175 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.06425711 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 149 220 72 102 79 33 182 133 3 217 217 217 88 74 143 0 86 207 23 233 242 236 177 47 61 67 134 111 175 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 220 72 102 79 33 182 133 3 217 217 217 88 74 143 0 86 207 23 233 242 236 177 47 61 67 134 111 175 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.109739155 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 154 215 72 102 79 33 181 134 9 169 248 217 88 74 143 0 86 207 25 233 242 236 177 46 62 67 135 111 175 59 216 222) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 215 72 102 79 33 181 134 9 169 248 217 88 74 143 0 86 207 25 233 242 236 177 46 62 67 135 111 175 59 216 222)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.16042821 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 154 215 72 102 79 33 181 134 9 169 248 217 88 77 140 0 86 207 25 233 242 46 177 236 62 67 135 111 175 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 215 72 102 79 33 181 134 9 169 248 217 88 77 140 0 86 207 25 233 242 46 177 236 62 67 135 111 175 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.21537833 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 154 215 72 102 82 33 181 134 9 169 248 217 88 77 140 0 86 207 25 233 242 236 177 46 62 67 135 111 175 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 215 72 102 82 33 181 134 9 169 248 217 88 77 140 0 86 207 25 233 242 236 177 46 62 67 135 111 175 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.2739815 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 149 220 72 102 50 62 182 133 217 169 5 90 1 225 248 252 86 207 19 237 246 236 67 46 62 177 135 111 182 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 220 72 102 50 62 182 133 217 169 5 90 1 225 248 252 86 207 19 237 246 236 67 46 62 177 135 111 182 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.33580798 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 102 220 72 149 79 33 182 138 254 120 58 217 86 209 74 0 86 46 41 215 242 135 111 67 62 67 236 176 176 59 220 218) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 220 72 149 79 33 182 138 254 120 58 217 86 209 74 0 86 46 41 215 242 135 111 67 62 67 236 176 176 59 220 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.4005349 (let ((om-darwin::spec (if (find-class (quote om-darwin::cb-harmonics) nil) (make-instance (quote om-darwin::cb-harmonics) :raw-genotype (list 151 220 72 55 126 33 182 133 217 169 11 43 88 143 74 254 236 207 67 88 11 152 22 49 154 20 127 148 175 59 220 135) :decoder (list (list (quote :set) 3 4 5 6 7 9 12 16 19 22 24 28 31 34) (list 0 3)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 220 72 55 126 33 182 133 217 169 11 43 88 143 74 254 236 207 67 88 11 152 22 49 154 20 127 148 175 59 220 135)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9))) (setf (om-darwin::generation om-darwin::ga) 450164) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-CB-HARMONICS" (quote make-cb-harmonics) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 16))) (om-make-point 83 110) (om-make-point 125 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (5 0 4 1 nil 0) (3 0 4 2 nil 0))) nil 6.1))
