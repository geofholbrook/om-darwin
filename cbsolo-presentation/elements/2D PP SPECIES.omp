; OM File Header - Saved 2015/06/22 9:37:10
; (6.1 :patc (om-make-point 10 10) (om-make-point 113 23) (om-make-point 1293 1273) "" 183 0 "2015/06/12 11:39:36" "2015/06/22 9:37:10")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../../../out-files/easy-out-6.aiff\"") (list (quote :instance) "#P\"../globals/pp first file midic.omi\"" "#P\"../globals/2D PP CSEQ ANALYSIS.omi\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "2D PP SPECIES" (quote ((let ((box (om-load-boxinstance "2d pp path list" (let ((copy (make-instance (quote omlistinstance) :name "2d pp path list" :icon 129))) (setf (instance copy) (list (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host nil :name "PR.P.10.25" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.11_RUBBER_PEDAL")) :device :unspecific :host nil :name "PR.P.11.26" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.12_SCREW")) :device :unspecific :host nil :name "PR.P.12.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.13_BAMBOO")) :device :unspecific :host nil :name "PR.P.13.22" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.14_BAMBOO_STACC")) :device :unspecific :host nil :name "PR.P.14.22" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.15_BAMBOO_PEDAL")) :device :unspecific :host nil :name "PR.P.15.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.16_PLASTIC_STACC")) :device :unspecific :host nil :name "PR.P.16.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.17_PLASTIC_PEDAL")) :device :unspecific :host nil :name "PR.P.17.18" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.18_PAPER")) :device :unspecific :host nil :name "PR.P.18.24" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.19_PAPER_STACC")) :device :unspecific :host nil :name "PR.P.19.24" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.1_SCREW_STACC")) :device :unspecific :host nil :name "PR.P.01.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.27" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.28" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.29" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.30" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.31" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.32" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.33" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.34" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.35" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.36" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.37" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.38" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.39" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.40" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.20_PENNY_STACC")) :device :unspecific :host nil :name "PR.P.20.41" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.27" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.28" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.29" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.30" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.31" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.32" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.33" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.34" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.35" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.36" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.37" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.38" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.39" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.40" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.21_PENNY_PEDAL")) :device :unspecific :host nil :name "PR.P.21.41" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.24_FELT")) :device :unspecific :host nil :name "PR.P.24.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.2_SCREW+BOLT")) :device :unspecific :host nil :name "PR.P.02.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.3_SCREW+BOLT_S")) :device :unspecific :host nil :name "PR.P.03.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.4_BOLT+DISC")) :device :unspecific :host nil :name "PR.P.04.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.5_BOLT+DISC_S")) :device :unspecific :host nil :name "PR.P.05.23" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.6_BOLT")) :device :unspecific :host nil :name "PR.P.06.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.7_BOLT_STACC")) :device :unspecific :host nil :name "PR.P.07.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.26" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.8_FELT_STACC")) :device :unspecific :host nil :name "PR.P.08.27" :type "aif")) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.01" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.02" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.03" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.04" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.05" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.06" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.07" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.08" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.09" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.10" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.11" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.12" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.13" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.14" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.15" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.16" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.17" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.18" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.19" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.20" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.21" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.22" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.23" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.24" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.25" :type "aif") (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Prepared Pianos" "PR.P.9_RUBBER")) :device :unspecific :host nil :name "PR.P.09.26" :type "aif")))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2015/06/21 12:21:40" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 573 776) "2d pp path list" (om-make-point 165 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 870 410) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 636 380) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 162 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 1180 339) (om-make-point 1066 1079)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 559 146) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 1087 456) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1084 144) (om-make-point 184 189) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3400) (3100) (3000) (4300) (4300) (4300) (4100) (4900) (2200) (2200) (3000) (3300) (3300) (3300) (4200) (4200) (4200) (4200) (2900) (2900) (2900) (3100))) :lonset (quote (0 472 847 1111 1431 1819 2250 2722 3042 3486 3861 4222 4569 4931 5361 5764 6125 6639 7069 7431 7903 8306 9306)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -10) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1150 666) (om-make-point 1140 304) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 976 218) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 3400 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 20) 0 0 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 965 423) (om-make-point 48 30) 6600 "6600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" 500))) (om-make-point 957 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 118 211) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 154 77) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 50 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 279 336)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 515 307) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 753 304) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVALUATE" (quote evaluate) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil))) (om-make-point 525 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2D PP CSEQ ANALYSIS" (get-inst-from-globals "2D PP CSEQ ANALYSIS") (quote nil) (om-make-point 365 25) "2D PP CSEQ ANALYSIS" (om-make-point 196 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 632 384) (om-make-point 162 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "SIGNED?" nil))) (om-make-point 832 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 839 1747/5) (om-make-point 41 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 662 2842/5) (om-make-point 215 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 912) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 117 169) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 933 629) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 970 51) (om-make-point 48 30) 3600 "3600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 986 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 914 1010) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 617 310) (om-make-point 67 30) (quote :regions) ":regions" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 238 64) (om-make-point 477 937)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 42 614) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 405 470) (om-make-point 34 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 227 640) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 200 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 465 734) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 510 628) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 291 992) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 92 342) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "engine" 0 (om-make-point 364 55) "" "engine" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 197 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 186 530) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil))) (om-make-point 225 883) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 106 789) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 268 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 363 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 291 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 1 nil 0) (10 0 2 0 nil 0) (1 0 2 1 nil 0) (13 0 3 0 nil 0) (5 0 4 0 nil 0) (10 3 5 0 nil 0) (11 0 6 0 nil 0) (3 0 9 0 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (2 0 11 1 nil 0) (4 1 11 2 nil 0) (0 0 12 0 nil 0) (4 0 12 1 nil 0) (15 0 13 0 nil 0) (8 0 14 0 nil 0) (14 0 15 0 nil 0))) 6.1 nil "" (om-make-point 665 156) (om-make-point 790 1078)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 525 915) nil (list "/Users/holbrook/Data/lib/OM-libraries/om-darwin/cbsolo-presentation/out-files/easy-out-6.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 39 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-6.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 877 838) (om-make-point 204 131) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "easy-out-6" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-6.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 228 207) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 24 605) (om-make-point 524 193) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 253 235 237 30 41 0 77 128 102 145 19 98 19 238 195 44 89 184 6 145 14 83 169 154 102 26 114 66 51 180 58 166 217 109 76 231 93 18 62 249 112 41 243 127 111 202 98 230 204 3 237 39 41 93 165 196 90 106 18 93 97 190 97 1 60 87 146 93 141 144 63 132 11 126 53 124 6 63 44 118 220 84 144 21 250 9 220 171 163 123 188 161 206 58 244 52 115 180 237 208 163 18 66 225 65 183 87 162 15 25 142 247 202 74 51 200 193 188 239 125 227 23 166 29 197 0 143 34 164 47 226 206 98 223 117 126 33 145 44 181 150 0 236 245 142 201 55 137 188 233 80 21 60 71 69 161 107 55 204 29) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 235 237 30 41 0 77 128 102 145 19 98 19 238 195 44 89 184 6 145 14 83 169 154 102 26 114 66 51 180 58 166 217 109 76 231 93 18 62 249 112 41 243 127 111 202 98 230 204 3 237 39 41 93 165 196 90 106 18 93 97 190 97 1 60 87 146 93 141 144 63 132 11 126 53 124 6 63 44 118 220 84 144 21 250 9 220 171 163 123 188 161 206 58 244 52 115 180 237 208 163 18 66 225 65 183 87 162 15 25 142 247 202 74 51 200 193 188 239 125 227 23 166 29 197 0 143 34 164 47 226 206 98 223 117 126 33 145 44 181 150 0 236 245 142 201 55 137 188 233 80 21 60 71 69 161 107 55 204 29)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 63900.418 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 100 0 88 68 29 131 11 184 216 57 53 181 87 246 218 49 204 249 198 99 188 98 19 119 235 102 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 128 213 148 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 100 0 88 68 29 131 11 184 216 57 53 181 87 246 218 49 204 249 198 99 188 98 19 119 235 102 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 128 213 148 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 63917.094 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 63945.71 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 25 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 183 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 25 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 183 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 63948.54 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 166 13 24 233 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 166 13 24 233 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 63957.875 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 83 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 83 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 63965.223 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 63986.493 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 25 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 82 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 183 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 25 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 82 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 183 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 63991.46 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 253 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 198 99 188 98 252 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 183 51 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 238 131 49 68 191 190 169 253 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 63993.028 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 197 99 188 98 19 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 185 49 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 70 79 106 50 97 155 75 167 143 63 34 55 145 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 100 0 88 68 29 131 11 184 216 57 53 91 177 246 218 49 204 249 197 99 188 98 19 119 235 142 65 233 186 177 217 87 156 106 242 137 255 79 154 150 102 173 109 71 185 49 59 57 160 188 233 13 24 166 135 18 160 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 39 153 196 236 194 0 129 216 57 64 38 217 154 33 238 28 70 79 106 50 97 155 75 167 143 63 34 55 145 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 63993.45 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 204 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 97 3 88 68 28 132 11 184 216 57 53 91 177 242 222 49 204 245 202 99 19 98 188 119 235 142 65 186 233 177 88 216 156 106 247 132 253 79 154 150 102 173 109 71 93 57 59 141 160 188 233 13 24 166 135 18 156 237 123 213 61 216 206 229 49 140 72 25 80 17 44 147 27 231 70 72 168 238 16 44 74 175 74 157 45 156 45 131 238 116 110 252 89 136 208 229 221 131 238 49 68 191 190 169 0 216 255 144 216 78 245 166 229 104 247 210 167 216 243 8 201 211 74 204 153 196 236 194 7 107 216 189 64 38 217 154 33 238 28 29 120 106 50 97 155 75 167 144 63 34 55 146 111 186 214 244 36 234 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8))) (setf (om-darwin::generation om-darwin::ga) 1223) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 2 2)) (1 (1 2 2 1)) (1 (1 1 1 2 1)) (1 (1.0 2 1 2)))) ((4 4) ((1 (1 1 2 1 1)) (1 (1 1 1)) (1 (1 2 1 2)) (1 (1 1 1 1 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 724 74) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 116 451) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 148 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 261 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 292 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 257) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-operons" 2 (om-make-point 730 88) "" "num-operons" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIMEN" (quote embed-specimen) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 714 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 757 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 534 758) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 749 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 870 244) (om-make-point 48 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 940 240) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1005 276) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 263) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 156 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 125 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 358 33) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 469 635) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 512 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 548 240) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 353) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 513 154) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 159) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 430 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 632 859) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 108 29) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 327 537) (om-make-point 84 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (16 0 3 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (17 0 8 1 nil 0) (5 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (25 0 14 0 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (26 0 17 0 nil 0) (5 0 17 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (8 0 24 0 nil 0) (1 0 26 0 nil 0) (20 0 26 1 nil 0))) 6.1 nil "" (om-make-point 941 261) (om-make-point 1188 987)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 64 300) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 2 1 nil 3) (2 0 3 1 nil 0) (6 0 7 0 nil 0) (28 0 10 0 nil 0) (12 0 10 1 nil 0) (8 0 12 0 nil 0) (22 0 12 1 nil 0) (9 0 12 2 nil 0) (14 0 13 0 nil 0) (1 0 13 1 nil 0) (12 0 15 0 nil 0) (18 0 15 1 nil 0) (27 0 16 0 nil 0) (11 0 17 0 nil 3) (13 0 18 0 nil 0) (3 0 18 1 nil 0) (19 0 20 0 nil 0) (25 0 21 0 nil 0) (27 0 23 0 nil 0) (0 0 23 1 nil 0) (11 0 24 0 nil 3) (23 0 25 0 nil 0) (28 0 27 1 nil 0) (18 0 27 2 nil 0) (29 0 28 0 nil 0) (2 0 28 1 nil 0) (24 0 29 0 nil 0) (17 0 29 1 nil 0) (26 0 29 2 nil 0))) nil 6.1))
