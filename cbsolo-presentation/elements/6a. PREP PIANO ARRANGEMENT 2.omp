; OM File Header - Saved 2015/06/21 19:18:36
; (6.1 :patc (om-make-point 10 10) (om-make-point 503 625) (om-make-point 1051 1096) "" 183 0 "2015/06/21 17:07:27" "2015/06/21 19:18:36")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../Desktop/out-files/easy-out-35.aiff\"") (list (quote :instance) "#P\"../globals/2d corpus periodicity db.omi\"" "#P\"../globals/pp first file midic.omi\"" "#P\"../globals/2d corpus pitch db.omi\"" "#P\"../globals/2d pp path list.omi\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "6a. PREP PIANO ARRANGEMENT 2" (quote ((let ((box (om-load-boxcall (quote abstraction) "ramp periodicity" (om-load-patch-abs1 "ramp periodicity" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 739 596) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 635 166) (om-make-point 97 30) (list (quote :bpf) 0.1 0.9) "(:bpf 0.1 0.9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 684 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus periodicity db" (get-inst-from-globals "2d corpus periodicity db") (quote nil) (om-make-point 739 50) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 776 355) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "corpus def->periodicity" (om-load-patch-abs1 "corpus def->periodicity" (quote ((let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 523 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 445 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 462 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 327 211) (om-make-point 79 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 167 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 91 411) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 132 217) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 199 117) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 195 21) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 257 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 1 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (8 0 3 1 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (4 0 10 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 762 224) nil (list nil) "l" "corpus def->periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 699 469) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 4 1 nil 0) (3 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 901 758)) (quote nil) (om-make-point 739 277) nil nil nil "ramp periodicity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVALUATE" (quote evaluate) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil))) (om-make-point 836 739) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 470 128) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 805 429) (om-make-point 62 30) 100000 "100000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 742 548) (om-make-point 89 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d corpus pitch db" (get-inst-from-globals "2d corpus pitch db") (quote nil) (om-make-point 268 23) nil (om-make-point 134 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 264 294) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 646 830) nil (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 574 285) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "SIGNED?" nil))) (om-make-point 479 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 446 1472/5) (om-make-point 76 30) (list 400 700) "(400 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 912) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 182) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 444 444) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 114 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 72 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 95 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 534) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 3 0 0 nil 0) (6 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (5 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 195 116) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 60 288) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 278 252) (om-make-point 34 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 200 310) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 607) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 126 212) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "engine" 0 (om-make-point 188 28) "" "engine" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil))) (om-make-point 215 508) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 94 418) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 1 1 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (0 1 5 0 nil 0) (9 0 6 0 nil 0) (10 0 9 0 nil 0) (3 0 9 1 nil 0) (4 1 9 2 nil 0) (1 0 10 0 nil 0) (4 0 10 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 396 868) nil (list "/Users/holbrook/Desktop/out-files/easy-out-35.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 39 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-35.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 327 962) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "out-files")) :device nil :host nil :name "easy-out-35" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-35.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 218 199) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 32 622) (om-make-point 543 191) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 49 17 92 124 137 163 98 211 191 171 76 159 10 69 161 189 137 226 254 22 231 209 149 216 64 218 108 103 71 13 198 13 79 152 70 129 118 253 173 230 233 5 149 19 219 172 39 124 133 91 144 73 27 41 64 96 244 194 12 27 95 128 165 148 83 54 31 34 77 228 5 105 91 168 48 236 190 24 160 206 48 117 98 108 70 180 229 235 126 160 152 74 145 237 84 98 63 69 201 106 65 30 85 139 7 171 135 111 244 225 174 171 148 183 100 185 37 232 221 47 231 114 23 89 207 245 133 184 20 240 62 79 8 42 160 62 133 180 178 166 1 136 84 44 231 163 247 253 169 83 36 205 92 176 48 222 205 87 157 62) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 49 17 92 124 137 163 98 211 191 171 76 159 10 69 161 189 137 226 254 22 231 209 149 216 64 218 108 103 71 13 198 13 79 152 70 129 118 253 173 230 233 5 149 19 219 172 39 124 133 91 144 73 27 41 64 96 244 194 12 27 95 128 165 148 83 54 31 34 77 228 5 105 91 168 48 236 190 24 160 206 48 117 98 108 70 180 229 235 126 160 152 74 145 237 84 98 63 69 201 106 65 30 85 139 7 171 135 111 244 225 174 171 148 183 100 185 37 232 221 47 231 114 23 89 207 245 133 184 20 240 62 79 8 42 160 62 133 180 178 166 1 136 84 44 231 163 247 253 169 83 36 205 92 176 48 222 205 87 157 62)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.03455541 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 73 93 187 146 185 253 130 245 251 22 84 44 195 55 35 212 203 212 33 98 76 89 8 125 62 135 140 140 140 234 131 251 151 196 239 128 186 46 38 107 216 205 118 2 62 149 160 113 200 82 106 80 163 160 254 135 228 154 165 122 45 3 167 50 65 185 70 200 65 132 235 118 59 65 120 122 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 54 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 147 232 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 73 93 187 146 185 253 130 245 251 22 84 44 195 55 35 212 203 212 33 98 76 89 8 125 62 135 140 140 140 234 131 251 151 196 239 128 186 46 38 107 216 205 118 2 62 149 160 113 200 82 106 80 163 160 254 135 228 154 165 122 45 3 167 50 65 185 70 200 65 132 235 118 59 65 120 122 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 54 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 147 232 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.03458414 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 185 146 73 251 130 247 251 21 85 55 127 227 176 30 200 212 32 98 127 183 239 130 165 135 197 248 107 11 98 249 188 192 46 82 4 157 123 253 245 107 170 180 10 255 160 113 107 19 178 242 246 45 25 199 55 129 46 246 192 251 102 130 65 185 122 200 65 132 235 118 59 65 120 235 16 72 227 133 57 22 109 96 133 196 255 76 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 27 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 185 146 73 251 130 247 251 21 85 55 127 227 176 30 200 212 32 98 127 183 239 130 165 135 197 248 107 11 98 249 188 192 46 82 4 157 123 253 245 107 170 180 10 255 160 113 107 19 178 242 246 45 25 199 55 129 46 246 192 251 102 130 65 185 122 200 65 132 235 118 59 65 120 235 16 72 227 133 57 22 109 96 133 196 255 76 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 27 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.03459402 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 185 146 73 251 130 247 251 21 85 200 127 227 176 212 55 30 32 98 117 183 165 130 239 127 8 16 51 62 250 34 46 87 22 97 32 46 7 234 165 139 107 206 160 253 10 113 200 177 107 251 163 160 79 8 108 129 122 22 76 5 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 51 196 252 71 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 185 146 73 251 130 247 251 21 85 200 127 227 176 212 55 30 32 98 117 183 165 130 239 127 8 16 51 62 250 34 46 87 22 97 32 46 7 234 165 139 107 206 160 253 10 113 200 177 107 251 163 160 79 8 108 129 122 22 76 5 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 51 196 252 71 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.034597464 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 185 146 73 19 132 247 251 251 85 55 127 227 176 212 200 30 32 98 127 183 165 130 239 250 8 224 147 62 135 34 46 87 22 97 34 46 7 139 165 234 107 206 160 253 10 113 200 79 107 251 163 160 84 8 108 129 122 22 76 5 97 78 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 27 213 213 213 166 169 28 212 149 197 42 27 133 208 187 187 228 21 135 125 46 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 221 137 234 199 71 109 151 166 232 212 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 185 146 73 19 132 247 251 251 85 55 127 227 176 212 200 30 32 98 127 183 165 130 239 250 8 224 147 62 135 34 46 87 22 97 34 46 7 139 165 234 107 206 160 253 10 113 200 79 107 251 163 160 84 8 108 129 122 22 76 5 97 78 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 27 213 213 213 166 169 28 212 149 197 42 27 133 208 187 187 228 21 135 125 46 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 221 137 234 199 71 109 151 166 232 212 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.03459819 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 185 146 73 19 132 247 251 251 85 55 127 227 176 212 200 30 32 98 127 183 165 130 239 250 8 253 118 7 102 94 87 45 141 187 32 107 119 247 216 34 188 171 143 118 160 226 247 89 83 32 219 86 41 251 204 177 49 50 41 54 58 237 65 185 130 200 65 132 235 118 59 65 120 236 16 72 134 22 57 22 109 96 133 196 255 76 228 65 210 248 248 169 213 166 169 28 212 129 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 84 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 185 146 73 19 132 247 251 251 85 55 127 227 176 212 200 30 32 98 127 183 165 130 239 250 8 253 118 7 102 94 87 45 141 187 32 107 119 247 216 34 188 171 143 118 160 226 247 89 83 32 219 86 41 251 204 177 49 50 41 54 58 237 65 185 130 200 65 132 235 118 59 65 120 236 16 72 134 22 57 22 109 96 133 196 255 76 228 65 210 248 248 169 213 166 169 28 212 129 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 84 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.034617927 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 135 190 134 243 185 78 253 26 84 123 55 55 183 35 29 127 132 123 31 32 172 251 194 135 32 253 118 7 102 94 87 45 141 187 32 107 119 247 216 34 188 171 143 118 160 226 247 89 83 32 219 86 41 251 204 177 49 50 41 237 58 54 65 185 130 200 65 132 235 118 59 65 120 236 16 72 134 22 57 22 109 96 133 196 255 76 228 65 210 205 35 169 213 166 169 28 212 129 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 166 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 84 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 135 190 134 243 185 78 253 26 84 123 55 55 183 35 29 127 132 123 31 32 172 251 194 135 32 253 118 7 102 94 87 45 141 187 32 107 119 247 216 34 188 171 143 118 160 226 247 89 83 32 219 86 41 251 204 177 49 50 41 237 58 54 65 185 130 200 65 132 235 118 59 65 120 236 16 72 134 22 57 22 109 96 133 196 255 76 228 65 210 205 35 169 213 166 169 28 212 129 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 166 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 84 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.03462275 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 94 243 80 73 84 130 185 251 247 25 127 55 128 112 26 35 148 127 231 65 52 76 32 98 135 197 248 190 13 98 249 188 123 46 4 82 157 107 253 245 107 255 180 10 170 160 113 107 19 178 17 215 45 25 199 55 129 46 246 192 251 102 130 65 185 122 200 65 132 235 118 59 65 120 235 16 72 227 133 57 22 109 96 133 196 252 76 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 1 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 175 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 94 243 80 73 84 130 185 251 247 25 127 55 128 112 26 35 148 127 231 65 52 76 32 98 135 197 248 190 13 98 249 188 123 46 4 82 157 107 253 245 107 255 180 10 170 160 113 107 19 178 17 215 45 25 199 55 129 46 246 192 251 102 130 65 185 122 200 65 132 235 118 59 65 120 235 16 72 227 133 57 22 109 96 133 196 252 76 228 65 210 205 35 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 1 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 175 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.034626194 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 185 190 134 243 135 78 251 28 84 123 55 112 183 35 14 89 132 123 31 32 172 98 60 135 32 248 196 7 45 94 186 102 141 32 35 109 181 247 216 34 188 171 146 115 160 113 104 89 81 34 219 86 41 251 204 62 164 50 41 237 58 54 65 185 130 200 65 132 235 118 59 65 120 236 16 72 23 133 57 132 109 96 133 196 35 71 228 65 207 27 213 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 20 135 125 45 194 250 114 223 134 27 97 8 58 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 166 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 185 190 134 243 135 78 251 28 84 123 55 112 183 35 14 89 132 123 31 32 172 98 60 135 32 248 196 7 45 94 186 102 141 32 35 109 181 247 216 34 188 171 146 115 160 113 104 89 81 34 219 86 41 251 204 62 164 50 41 237 58 54 65 185 130 200 65 132 235 118 59 65 120 236 16 72 23 133 57 132 109 96 133 196 35 71 228 65 207 27 213 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 20 135 125 45 194 250 114 223 134 27 97 8 58 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 166 232 214 254 230 156 128 121 252 238 95 23 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.034629938 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 93 181 146 73 251 130 247 251 21 85 55 127 227 176 209 200 30 32 98 127 183 166 129 239 250 8 16 99 62 135 34 46 87 22 97 30 50 7 139 165 234 107 22 160 253 10 113 200 84 108 250 163 160 79 8 113 124 122 22 76 5 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 53 187 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 27 90 162 170 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 93 181 146 73 251 130 247 251 21 85 55 127 227 176 209 200 30 32 98 127 183 166 129 239 250 8 16 99 62 135 34 46 87 22 97 30 50 7 139 165 234 107 22 160 253 10 113 200 84 108 250 163 160 79 8 113 124 122 22 76 5 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 23 85 105 32 109 96 133 196 35 71 228 65 210 53 187 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 27 90 162 170 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.03463608 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 25 93 185 146 73 251 130 247 251 21 85 55 127 227 176 30 200 212 32 239 127 183 98 125 170 135 8 144 99 62 250 120 192 87 22 92 39 49 4 139 165 234 107 206 160 253 10 113 200 84 107 251 163 160 79 108 8 129 122 22 81 0 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 32 85 105 23 109 96 51 196 252 71 228 65 210 27 213 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 194 2 162 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 25 93 185 146 73 251 130 247 251 21 85 55 127 227 176 30 200 212 32 239 127 183 98 125 170 135 8 144 99 62 250 120 192 87 22 92 39 49 4 139 165 234 107 206 160 253 10 113 200 84 107 251 163 160 79 108 8 129 122 22 81 0 78 97 65 185 50 200 65 132 235 118 59 65 120 235 16 72 32 85 105 23 109 96 51 196 252 71 228 65 210 27 213 169 213 166 169 28 212 149 197 42 27 133 208 187 187 228 16 135 125 45 194 250 114 223 134 27 97 8 59 34 198 90 91 12 171 200 94 226 232 174 40 244 90 145 137 234 199 71 109 151 232 232 214 254 230 156 128 121 252 238 95 23 90 162 194 2 162 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2))) (setf (om-darwin::generation om-darwin::ga) 1925) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (2 1 2 1)) (1 (1.0 1 1 2 1)) (1 (1 1 2 2)) (1 (2 1 1 2)))) ((4 4) ((1 (1 1 1 2 1)) (1 (1.0 1 2 2)) (1 (1 1 1 2 1)) (1 (1 2 1 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9250)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10350)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9850)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2050)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 724 74) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 112 429) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 148 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 261 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 292 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 257) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-operons" 2 (om-make-point 730 88) "" "num-operons" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIMEN" (quote embed-specimen) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 714 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 757 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 534 758) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 749 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 870 244) (om-make-point 48 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 940 240) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1005 276) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 263) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 156 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 125 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 358 33) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 470 635) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 512 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 548 240) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 353) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 513 154) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 159) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 430 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 632 859) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 108 29) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 327 537) (om-make-point 84 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (16 0 3 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (17 0 8 1 nil 0) (5 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (25 0 14 0 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (26 0 17 0 nil 0) (5 0 17 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (8 0 24 0 nil 0) (1 0 26 0 nil 0) (20 0 26 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 64 300) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((19 0 1 0 nil 0) (13 0 1 1 nil 0) (5 0 2 1 nil 0) (13 0 4 0 nil 0) (0 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 8 1 nil 0) (10 0 9 0 nil 0) (18 0 11 0 nil 0) (5 0 12 0 nil 10) (9 0 13 0 nil 0) (8 0 13 1 nil 0) (18 0 14 0 nil 0) (7 0 14 1 nil 0) (5 0 15 0 nil 10) (14 0 16 0 nil 0) (19 0 18 1 nil 0) (0 0 18 2 nil 0) (20 0 19 0 nil 0) (2 0 19 1 nil 0) (15 0 20 0 nil 0) (12 0 20 1 nil 0) (17 0 20 2 nil 0))) nil 6.1))
