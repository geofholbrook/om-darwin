; OM File Header - Saved 2015/06/21 16:07:01
; (6.1 :patc (om-make-point 10 10) (om-make-point 880 331) (om-make-point 828 1042) "" 183 0 "2015/06/21 12:27:15" "2015/06/21 16:07:01")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/easy-out-8.aiff\"") (list (quote :instance) "#P\"../globals/2d pp path list.omi\"" "#P\"../globals/pp first file midic.omi\"" "#P\"../globals/2D PP CSEQ ANALYSIS.omi\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "6a. PREP PIANO ARRANGEMENT" (quote ((let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 264 294) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 631 666) "2d pp path list" (om-make-point 129 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 519 309) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 137 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 784 830)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 431 144) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 608 273) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2D PP CSEQ ANALYSIS" (get-inst-from-globals "2D PP CSEQ ANALYSIS") (quote nil) (om-make-point 271 29) nil (om-make-point 184 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "SIGNED?" nil))) (om-make-point 479 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 466 1382/5) (om-make-point 41 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 912) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 182) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 444 444) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 114 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 72 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 95 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 534) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 3 0 0 nil 0) (6 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (5 0 8 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 499 787)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 195 116) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 60 288) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 278 252) (om-make-point 34 30) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 200 310) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 607) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 126 212) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "engine" 0 (om-make-point 188 28) "" "engine" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil))) (om-make-point 215 508) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 94 418) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 1 1 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (0 1 5 0 nil 0) (9 0 6 0 nil 0) (10 0 9 0 nil 0) (3 0 9 1 nil 0) (4 1 9 2 nil 0) (1 0 10 0 nil 0) (4 0 10 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 584 701)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 396 791) nil (list "/Users/holbrook/Data/lib/OM-libraries/om-darwin/cbsolo-presentation/out-files/easy-out-8.aiff") nil "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 39 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-8.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 318 891) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-8" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-8.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 218 199) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 51 550) (om-make-point 543 191) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 118 201 130 96 132 248 130 76 48 37 175 29 239 33 133 9 46 82 207 219 117 96 63 228 7 196 16 163 235 196 165 115 41 14 172 16 60 87 160 73 194 192 231 143 45 111 197 137 176 219 57 55 182 132 233 242 146 12 150 52 217 238 123 231 111 6 128 78 246 206 185 2 172 22 172 24 195 207 251 86 30 57 33 157 147 240 16 127 180 144 140 77 112 4 198 108 253 61 71 52 150 132 6 251 114 88 85 25 219 4 17 194 40 194 40 96 127 175 221 189 44 61 167 6 222 255 224 227 243 191 185 35 214 208 135 184 66 111 213 30 76 109 119 161 194 244 2 62 194 132 67 234 196 93 202 43 64 71 114) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 118 201 130 96 132 248 130 76 48 37 175 29 239 33 133 9 46 82 207 219 117 96 63 228 7 196 16 163 235 196 165 115 41 14 172 16 60 87 160 73 194 192 231 143 45 111 197 137 176 219 57 55 182 132 233 242 146 12 150 52 217 238 123 231 111 6 128 78 246 206 185 2 172 22 172 24 195 207 251 86 30 57 33 157 147 240 16 127 180 144 140 77 112 4 198 108 253 61 71 52 150 132 6 251 114 88 85 25 219 4 17 194 40 194 40 96 127 175 221 189 44 61 167 6 222 255 224 227 243 191 185 35 214 208 135 184 66 111 213 30 76 109 119 161 194 244 2 62 194 132 67 234 196 93 202 43 64 71 114)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 152467.75 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 25 27 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 110 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 164) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 25 27 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 110 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 164)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 157585.07 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 55 9 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 102 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 55 9 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 102 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 165882.75 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 128 39 193 69 232 10 126 85 123 111 149 89 48 87 12 140 249 11 69 245 167 242 106 77 237 161 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 128 39 193 69 232 10 126 85 123 111 149 89 48 87 12 140 249 11 69 245 167 242 106 77 237 161 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 166437.99 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 231 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 231 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 166905.22 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 127 28 89 68 200 171 134 241 212 61 110 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 127 28 89 68 200 171 134 241 212 61 110 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 167009.82 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 167241.17 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 84 65 202 91 95 79 13 73 194 172 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 55 253 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 90 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 84 65 202 91 95 79 13 73 194 172 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 55 253 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 90 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 167287.55 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 84 65 202 91 95 79 13 73 194 172 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 55 253 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 110 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 84 65 202 91 95 79 13 73 194 172 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 124 43 193 69 232 55 253 85 123 87 149 89 48 111 12 140 249 11 65 245 167 242 106 77 237 234 196 52 89 47 232 6 116 212 226 118 202 166 159 128 26 158 248 110 197 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 167292.46 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 247 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 60 231 254 62 70 171 28 89 68 200 127 134 241 212 61 247 95 39 43 71 164 5 173 141 91 22 110 193 69 147 124 55 193 69 232 43 126 85 123 111 149 89 48 87 12 140 249 11 65 106 167 242 245 77 237 234 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 6 13 192 83 149 231 135 59 189 73 83 144 184 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 167360.39 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 128 39 193 67 232 55 126 85 123 111 149 89 48 87 12 140 249 11 69 245 167 242 161 77 237 106 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 177 207 188 150 218 144 219 74 136 194 197 231 172 12 7 111 62 2 249 214 93 43 82 198 13 98 185 2 80 69 202 91 95 79 13 73 72 38 140 32 67 192 251 82 157 61 205 220 85 75 169 107 89 159 14 48 11 165 35 218 3 216 168 78 55 231 254 62 70 171 28 89 68 200 127 134 241 212 61 110 95 39 42 72 164 5 173 141 91 22 110 193 69 147 128 39 193 67 232 55 126 85 123 111 149 89 48 87 12 140 249 11 69 245 167 242 161 77 237 106 196 52 89 47 232 6 113 212 226 118 202 166 159 128 26 158 248 110 211 72 98 146 83 104 99 214 9 192 83 149 231 135 59 189 73 83 144 184 215)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 26) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (2 1 1 2)) (1 (1 2 1 2)) (1 (1 2 2 1)) (1 (2 2 1 1)))) ((4 4) ((1 (2 2 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (2 1 2 1)))) ((4 4) ((1 (1.0 2 1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 724 74) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "prop->pitch" (quote :prop->pitch) nil nil))) (om-make-point 112 429) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 148 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 261 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 292 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 257) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-operons" 2 (om-make-point 730 88) "" "num-operons" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EMBED-SPECIMEN" (quote embed-specimen) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 714 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 757 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 534 758) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 749 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 870 244) (om-make-point 48 30) (list 0 0) "(0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 940 240) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1005 276) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 263) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 156 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 125 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 358 33) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 470 635) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 512 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 548 240) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 353) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 513 154) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 159) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 430 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 632 859) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 108 29) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 327 537) (om-make-point 84 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (16 0 3 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (17 0 8 1 nil 0) (5 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (25 0 14 0 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (26 0 17 0 nil 0) (5 0 17 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (8 0 24 0 nil 0) (1 0 26 0 nil 0) (20 0 26 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 1047 1029)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 64 300) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 1 nil 3) (3 0 4 1 nil 0) (7 0 6 0 nil 0) (2 0 6 1 nil 0) (15 0 8 0 nil 0) (5 0 9 0 nil 3) (6 0 10 0 nil 0) (4 0 10 1 nil 0) (15 0 11 0 nil 0) (1 0 11 1 nil 0) (5 0 12 0 nil 3) (11 0 13 0 nil 0) (16 0 15 1 nil 0) (10 0 15 2 nil 0) (17 0 16 0 nil 0) (3 0 16 1 nil 0) (12 0 17 0 nil 0) (9 0 17 1 nil 0) (14 0 17 2 nil 0))) nil 6.1))
