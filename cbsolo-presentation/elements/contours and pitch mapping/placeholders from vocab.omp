; OM File Header - Saved 2015/06/21 12:55:12
; (6.1 :patc (om-make-point 118 10) (om-make-point 961 229) (om-make-point 652 861) "" 183 0 "2015/06/08 16:10:58" "2015/06/21 12:55:12")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"ratio2timesig.oml\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "placeholders from vocab" (quote ((let ((box (om-load-boxcall (quote genfun) "NTH-GENE" (quote nth-gene) (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 84 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 154 450) (om-make-point 116 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-operons" 2 (om-make-point 425 263) "" "num-operons" 8 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pulse note value" 1 (om-make-point 445 34) "" "pulse note value" 1/16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pulse vocab" 0 (om-make-point 324 28) "" "pulse vocab" (list (list 2 1 1) (list 2 1 2) (list 2 2 1 1 1) (list 2 2)) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1/16))) (om-make-point 385 138) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 244 247) (om-make-point 65 43) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-vocab-entry" (om-load-patch-abs1 "make-vocab-entry" (quote ((let ((box (om-load-boxcall (quote abstraction) "get chans" (om-load-lisp-abspatch "get chans" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"make-pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pulses)$  (append '(2)$          (create-list (1- (length pulses)) 1)))") (quote ((om-load-inputfun (quote input-funbox) "" "PULSES" nil))) (om-make-point 481 253) nil (list (list 6200 7700 7700)) nil "get chans"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-timesig" (om-load-patch-abs1 "get-timesig" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 220 364) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 97) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 198 199) (om-make-point 116 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 273 50) (om-make-point 42 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "ratio2timesig" (quote ("elements" "contours and pitch mapping" "ratio2timesig")) (quote ((om-load-inputfun (quote input-funbox) "" "R" nil))) (om-make-point 217 275) nil (list (list 2 4)) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 525 516)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 373 266) nil (list nil) nil "get-timesig"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" 0))) (om-make-point 161 310) (om-make-point 112 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-ARR" (quote om-darwin::make-arr) (quote ((om-load-inputfun (quote input-funbox) "STARTS" "STARTS" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "time-sig" (quote :time-sig) nil nil) (om-load-inputkeyword (quote input-keyword) "" "channels" (quote :channels) nil nil) (om-load-inputkeyword (quote input-keyword) "" "lengths" (quote :lengths) nil nil))) (om-make-point 263 501) (om-make-point 120 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 292 663) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 171 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get hauteurs" (om-load-lisp-abspatch "get hauteurs" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"make-pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pulses)$  (append '(6200)$          (create-list (1- (length pulses)) 7900)))") (quote ((om-load-inputfun (quote input-funbox) "" "PULSES" nil))) (om-make-point 43 303) nil (list (list 6200 7700 7700)) nil "get hauteurs"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (5 0 1 0 nil 0) (5 0 2 1 nil 0) (2 0 3 0 nil 0) (6 0 3 1 nil 0) (1 0 3 2 nil 0) (0 0 3 3 nil 0) (5 0 3 4 nil 0) (3 0 4 0 nil 0) (5 0 6 0 nil 0))) 6.1 nil "" (om-make-point 710 185) (om-make-point 601 749)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 180 120) nil (list nil) "l" "make-vocab-entry"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 252 611) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 8 0 nil 0))) nil 6.1))
