; OM File Header - Saved 2015/06/10 19:57:44
; (6.1 :patc (om-make-point 172 10) (om-make-point 146 304) (om-make-point 1112 761) "" 183 0 "2015/06/10 17:34:47" "2015/06/10 19:03:33")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "c-list test" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 147 75) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 720 230) (om-make-point 127 30) (list (quote :set) 300 500 700) "(:set 300 500 700)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 756 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 127)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 697 40) (om-make-point 244 72) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 228 24) "untitled" :direction :horizontal :range (quote (0 127)) :increment 1 :value 127))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 127)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 375 37) (om-make-point 244 72) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 228 24) "untitled" :direction :horizontal :range (quote (0 127)) :increment 1 :value 0))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 333 146) (om-make-point 125 30) (list (quote :set) 0 2 4 6 8 10) "(:set 0 2 4 6 8 10)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 363 246) (om-make-point 82 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 658 468) (om-make-point 281 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 168 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 40 377) (om-make-point 659 91) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 148 64 7 0 177 121 102 130 103 63 243 54 50 106 105 195 50 70 9 117 112 176 226 131 210 106 231 255 85 82 178 246) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 64 7 0 177 121 102 130 103 63 243 54 50 106 105 195 50 70 9 117 112 176 226 131 210 106 231 255 85 82 178 246)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 5.5328155 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 233 111 43 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 233 111 43 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 9.4490185 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 233 111 43 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 207 238 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6400) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6300) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6400) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 233 111 43 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 207 238 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 13.813567 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 233 21 133 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6800) (list 5/16 1/16 1 6300) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6300) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 233 21 133 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 18.54501 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 5 43 98 233 111 43 196 229 198 253 133 75 249 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6400) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6200) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6300) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 43 98 233 111 43 196 229 198 253 133 75 249 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 23.590998 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 5 43 98 233 19 135 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6500) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6600) (list 5/16 1/16 1 6500) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6300) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 43 98 233 19 135 196 229 198 253 133 75 135 117 83 190 81 216 31 223 210 165 246 35 116 73 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 28.914525 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 43 111 233 196 229 198 253 133 75 186 165 83 190 81 117 31 223 90 29 246 35 116 73 239 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6400) (list 13/16 1/16 1 6900) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6300) (list 17/16 1/16 1 6000) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 7200) (list 21/16 1/16 1 6300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 43 111 233 196 229 198 253 133 75 186 165 83 190 81 117 31 223 90 29 246 35 116 73 239 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 34.487797 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 233 111 43 196 229 198 253 133 75 135 216 83 190 112 86 31 223 210 165 239 35 116 73 246 233 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6400) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6800) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6800) (list 1 1/16 1 6800) (list 17/16 1/16 1 6800) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 6500) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 7200) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 233 111 43 196 229 198 253 133 75 135 216 83 190 112 86 31 223 210 165 239 35 116 73 246 233 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 40.289025 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 43 111 233 196 229 198 253 133 75 135 216 83 193 78 117 31 223 210 165 246 35 116 73 239 233 5 175 129 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6800) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 7100) (list 1 1/16 1 6000) (list 17/16 1/16 1 6000) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 6900) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6600) (list 15/8 1/16 1 7200) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 43 111 233 196 229 198 253 133 75 135 216 83 193 78 117 31 223 210 165 246 35 116 73 239 233 5 175 129 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 46.30061 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 233 111 43 196 229 198 253 133 75 135 107 219 190 165 117 31 83 214 81 246 35 116 77 239 239 5 208 96 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 7200) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6400) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6300) (list 7/8 1/16 1 7100) (list 15/16 1/16 1 6800) (list 1 1/16 1 6900) (list 17/16 1/16 1 6000) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6500) (list 5/4 1/16 1 6600) (list 21/16 1/16 1 6300) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 7200) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 6500) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6000) (list 15/8 1/16 1 6500) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 233 111 43 196 229 198 253 133 75 135 107 219 190 165 117 31 83 214 81 246 35 116 77 239 239 5 208 96 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 52.507943 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 1 43 98 43 111 233 196 229 198 253 133 75 135 216 83 193 78 117 31 223 210 167 246 35 116 73 239 233 5 175 129 145) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6400) (list 1/8 1/16 1 6700) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 7200) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6300) (list 9/16 1/16 1 6600) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 7000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6800) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 7100) (list 1 1/16 1 6000) (list 17/16 1/16 1 6000) (list 9/8 1/16 1 6500) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 6200) (list 21/16 1/16 1 7100) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6900) (list 3/2 1/16 1 7200) (list 25/16 1/16 1 6800) (list 13/8 1/16 1 6500) (list 27/16 1/16 1 7200) (list 7/4 1/16 1 6500) (list 29/16 1/16 1 6600) (list 15/8 1/16 1 7200) (list 31/16 1/16 1 6200)) :num-notes 32 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 43 98 43 111 233 196 229 198 253 133 75 135 216 83 193 78 117 31 223 210 167 246 35 116 73 239 233 5 175 129 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6))) (setf (om-darwin::generation om-darwin::ga) 6405) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 455 641) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box))) (quote ((1 0 2 0 nil 0) (5 0 6 0 nil 0) (6 0 7 0 nil 0) (4 3 7 1 nil 0) (2 0 7 2 nil 0) (3 3 7 3 nil 0) (0 0 8 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 2) (9 0 10 0 nil 0) (7 0 10 1 nil 2))) nil 6.1))
