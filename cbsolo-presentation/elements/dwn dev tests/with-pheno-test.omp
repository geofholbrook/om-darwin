; OM File Header - Saved 2015/06/10 19:57:46
; (6.1 :patc (om-make-point 10 60) (om-make-point 512 505) (om-make-point 944 650) "" 183 0 "2015/06/10 15:15:18" "2015/06/10 19:57:46")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "with-pheno-test" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 714 42) (om-make-point 76 30) (list 220 880) "(220 880)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 734 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 632 209) (om-make-point 179 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 104 38) (om-make-point 90 30) (list 4800 8400) "(4800 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 75 38) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 581 58) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 517 31) (om-make-point 41 30) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" 50) (om-load-inputfun (quote input-funbox) "" "SIGNED?" nil))) (om-make-point 481 88) (om-make-point 155 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "arr mc->f" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 338 75) nil nil "l" (list (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 0))) (om-make-point 106 339) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 0) (om-load-inputfun (quote input-funbox) "number of elements" "N" 3))) (om-make-point 94 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 133 461) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 217 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 177 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 147 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 154 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 330 500) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 378 605) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 278 605) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (0 1 2 1 nil 0) (0 2 2 2 nil 0) (3 0 2 3 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (2 0 7 0 nil 0) (7 1 8 0 nil 0) (7 0 9 0 nil 0))) 1 "arr mc->f" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 347 286) (om-make-point 202 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 57 414) (om-make-point 518 178) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 204 2 202 158 102 183 184 7) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 204 2 202 158 102 183 184 7)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 11931.219 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 61 237 91 207 114 88 231 30) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 61 237 91 207 114 88 231 30)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 25529.586 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 42 146 131 13 139 238 247 236) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 42 146 131 13 139 238 247 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 21977.858 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 201 110 246 249 5 203 12 4) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 201 110 246 249 5 203 12 4)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15944.441 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 42 203 51 190 196 216 185 240) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 42 203 51 190 196 216 185 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 22508.422 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 169 76 101 112 251 177 53 138) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 76 101 112 251 177 53 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 14833.113 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 93 97 170 15 180 162 83 50) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 97 170 15 180 162 83 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 17235.041 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 187 120 60 54 34 81 61 29) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 120 60 54 34 81 61 29)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9172.946 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 21 242 4 160 4 208 97 252) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 242 4 160 4 208 97 252)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15017.019 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 138 153 18 51 121 25 155 97) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 153 18 51 121 25 155 97)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15347.293 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 22 23 239 252 229 124 197 68) :decoder (list (list 4800 8400 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :range (list 4800 8400) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 22 23 239 252 229 124 197 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 50 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (7 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (2 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 1 nil 0) (9 0 10 2 nil 0) (4 0 11 0 nil 0) (3 0 11 1 nil 0))) nil 6.1))