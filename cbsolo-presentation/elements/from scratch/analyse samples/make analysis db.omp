; OM File Header - Saved 2015/06/18 19:12:26
; (6.1 :patc (om-make-point 226 10) (om-make-point 56 50) (om-make-point 1009 1035) "" 183 0 "2015/06/12 18:01:35" "2015/06/18 19:12:26")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../prepared-piano arrangement/analyze sample.omp\"") (list (quote :instance) "#P\"../../../globals/2D pp path list.omi\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "make analysis db" (quote ((let ((box (om-load-boxinstance "2D pp path list" (get-inst-from-globals "2D pp path list") (quote nil) (om-make-point 767 575) "2D pp path list" (om-make-point 165 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 365 542) (om-make-point 120 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 234 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 79 201) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 168 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 122 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 495 372) (om-make-point 120 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "analyze sample" (quote ("elements" "prepared-piano arrangement" "analyze sample")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 375 96) nil (list nil) "l" "analyze sample" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (4 0 2 1 nil 0) (5 0 4 0 nil 0) (7 0 6 0 nil 0))) nil 6.1))
