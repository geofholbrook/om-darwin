; OM File Header - Saved 2015/06/12 12:49:48
; (6.1 :maqt (om-make-point 10 10) (om-make-point 837 331) (om-make-point 864 418) "" 182 0 "2015/06/12 12:48:41" "2015/06/12 12:49:48")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-maq2 "Maquette" (quote ((let ((box (om-load-tempobj1 "2D PP SPECIES" (quote nil) (list (quote patchb) (quote ("elements" "2D PP SPECIES"))) 1 1818 3158 (om-make-color 0.5 0.5 0.6) (list nil (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 253 17 66 243 159 52 186 116 190 74 229 217 73 168 125 233 20 185 181 101 40 150 249 107 61 228 132 77 168 139 157 215 214 185 222 198 66 231 141 87 204 45 138 208 75 41 192 182 51 103 166 155 234 206 212 231 253 209 101 120 163 1 21 24 18 101 27 243 168 171 202 238 28 11 197 130 201 65 38 227) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 17 66 243 159 52 186 116 190 74 229 217 73 168 125 233 20 185 181 101 40 150 249 107 61 228 132 77 168 139 157 215 214 185 222 198 66 231 141 87 204 45 138 208 75 41 192 182 51 103 166 155 234 206 212 231 253 209 101 120 163 1 21 24 18 101 27 243 168 171 202 238 28 11 197 130 201 65 38 227)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 87 180 32 48 158 236 240 205 67 225 55 145 56 35 186 73 151 149 205 242 1 220 22 190 92 189 28 110 194 217 204 22 72 175 52 59 56 212 93 252 178 194 156 174 168 4 220 103 132 158 55 5 255 175 109 252 209 102 219 38 196 42 65 147 249 45 232 203 192 39 0 27 107 43 8 221 197 43 88 144) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 180 32 48 158 236 240 205 67 225 55 145 56 35 186 73 151 149 205 242 1 220 22 190 92 189 28 110 194 217 204 22 72 175 52 59 56 212 93 252 178 194 156 174 168 4 220 103 132 158 55 5 255 175 109 252 209 102 219 38 196 42 65 147 249 45 232 203 192 39 0 27 107 43 8 221 197 43 88 144)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 130 73 234 157 246 87 221 170 99 35 3 148 132 254 205 45 199 182 133 201 9 193 20 34 128 239 158 165 196 217 125 201 254 43 88 176 63 98 40 244 158 82 137 48 195 49 141 173 247 123 108 241 51 13 77 73 21 245 168 150 63 210 89 195 85 31 182 193 254 188 116 173 2 53 250 246 35 111 203 4) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 130 73 234 157 246 87 221 170 99 35 3 148 132 254 205 45 199 182 133 201 9 193 20 34 128 239 158 165 196 217 125 201 254 43 88 176 63 98 40 244 158 82 137 48 195 49 141 173 247 123 108 241 51 13 77 73 21 245 168 150 63 210 89 195 85 31 182 193 254 188 116 173 2 53 250 246 35 111 203 4)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 149 79 92 26 79 34 195 130 119 102 0 96 230 106 77 84 192 42 187 84 254 120 251 16 187 77 77 94 113 12 151 110 14 152 159 186 195 16 171 225 226 124 82 188 236 170 20 242 73 69 129 224 215 157 3 95 244 185 11 231 211 47 88 72 126 180 162 88 247 106 180 117 0 213 224 81 154 21 26 67) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 79 92 26 79 34 195 130 119 102 0 96 230 106 77 84 192 42 187 84 254 120 251 16 187 77 77 94 113 12 151 110 14 152 159 186 195 16 171 225 226 124 82 188 236 170 20 242 73 69 129 224 215 157 3 95 244 185 11 231 211 47 88 72 126 180 162 88 247 106 180 117 0 213 224 81 154 21 26 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 8 105 88 225 200 200 88 22 85 94 27 9 23 149 87 126 41 156 63 68 43 14 140 79 236 58 186 101 205 183 12 16 105 4 222 70 239 159 252 223 64 151 61 151 194 1 81 193 26 11 1 228 211 79 24 210 94 191 14 183 249 20 52 158 180 72 174 87 88 207 236 184 74 69 17 225 221 105 192 152) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 8 105 88 225 200 200 88 22 85 94 27 9 23 149 87 126 41 156 63 68 43 14 140 79 236 58 186 101 205 183 12 16 105 4 222 70 239 159 252 223 64 151 61 151 194 1 81 193 26 11 1 228 211 79 24 210 94 191 14 183 249 20 52 158 180 72 174 87 88 207 236 184 74 69 17 225 221 105 192 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 123 117 134 176 34 68 7 184 38 246 70 249 205 205 248 225 132 168 163 222 186 131 180 134 118 106 133 115 94 219 22 231 4 255 242 227 1 150 149 204 86 252 56 137 111 108 210 189 123 102 80 199 155 176 98 123 133 164 5 71 159 79 244 76 66 51 88 62 102 181 67 37 11 48 129 30 102 234 241 241) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 123 117 134 176 34 68 7 184 38 246 70 249 205 205 248 225 132 168 163 222 186 131 180 134 118 106 133 115 94 219 22 231 4 255 242 227 1 150 149 204 86 252 56 137 111 108 210 189 123 102 80 199 155 176 98 123 133 164 5 71 159 79 244 76 66 51 88 62 102 181 67 37 11 48 129 30 102 234 241 241)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 43 120 165 122 103 219 82 65 37 59 63 252 74 15 123 9 104 12 143 212 188 176 108 147 200 110 23 25 61 207 200 203 66 136 155 155 3 201 75 155 100 205 58 113 243 145 158 248 241 55 127 41 194 185 246 186 47 23 2 222 29 142 194 161 14 56 189 4 14 169 98 253 198 85 229 114 39 137 132 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 43 120 165 122 103 219 82 65 37 59 63 252 74 15 123 9 104 12 143 212 188 176 108 147 200 110 23 25 61 207 200 203 66 136 155 155 3 201 75 155 100 205 58 113 243 145 158 248 241 55 127 41 194 185 246 186 47 23 2 222 29 142 194 161 14 56 189 4 14 169 98 253 198 85 229 114 39 137 132 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 48 27 29 236 86 143 227 150 213 90 7 217 244 255 99 149 143 88 103 186 41 126 144 103 156 72 176 15 135 157 199 238 92 231 248 132 195 4 163 201 23 107 200 210 224 141 45 241 47 36 56 18 35 102 30 121 6 228 220 82 233 59 158 113 114 163 200 223 242 194 130 135 139 242 59 161 246 133 21 78) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 48 27 29 236 86 143 227 150 213 90 7 217 244 255 99 149 143 88 103 186 41 126 144 103 156 72 176 15 135 157 199 238 92 231 248 132 195 4 163 201 23 107 200 210 224 141 45 241 47 36 56 18 35 102 30 121 6 228 220 82 233 59 158 113 114 163 200 223 242 194 130 135 139 242 59 161 246 133 21 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 150 235 217 136 4 142 205 91 155 76 164 248 103 75 158 246 188 15 129 133 180 8 127 186 37 235 171 106 172 72 99 129 40 246 225 164 235 17 106 95 217 98 119 120 140 6 69 23 40 76 96 49 95 179 23 21 209 105 168 121 224 199 250 39 6 113 223 217 166 61 211 57 207 231 231 105 50 209 60 190) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 235 217 136 4 142 205 91 155 76 164 248 103 75 158 246 188 15 129 133 180 8 127 186 37 235 171 106 172 72 99 129 40 246 225 164 235 17 106 95 217 98 119 120 140 6 69 23 40 76 96 49 95 179 23 21 209 105 168 121 224 199 250 39 6 113 223 217 166 61 211 57 207 231 231 105 50 209 60 190)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 22 18 39 40 42 125 79 254 82 131 196 183 167 52 18 49 94 95 245 56 24 83 230 98 116 90 137 221 148 102 207 189 43 63 151 110 48 57 57 207 62 206 224 85 40 33 51 91 65 242 15 103 162 141 213 63 104 193 152 173 138 55 35 195 148 153 252 92 51 102 187 160 231 73 127 247 117 55 179 194) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 22 18 39 40 42 125 79 254 82 131 196 183 167 52 18 49 94 95 245 56 24 83 230 98 116 90 137 221 148 102 207 189 43 63 151 110 48 57 57 207 62 206 224 85 40 33 51 91 65 242 15 103 162 141 213 63 104 193 152 173 138 55 35 195 148 153 252 92 51 102 187 160 231 73 127 247 117 55 179 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 74 119 65 242 8 226 240 213 50 108 140 110 159 140 224 181 41 212 31 152 108 16 5 60 134 168 150 151 183 49 61 243 6 57 250 216 177 165 75 196 210 125 205 210 203 165 37 207 41 141 14 240 230 1 63 125 124 236 226 147 151 32 246 64 11 59 115 89 135 220 250 255 174 166 92 246 6 125 5 38) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 74 119 65 242 8 226 240 213 50 108 140 110 159 140 224 181 41 212 31 152 108 16 5 60 134 168 150 151 183 49 61 243 6 57 250 216 177 165 75 196 210 125 205 210 203 165 37 207 41 141 14 240 230 1 63 125 124 236 226 147 151 32 246 64 11 59 115 89 135 220 250 255 174 166 92 246 6 125 5 38)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 2 1)) (1 (1.0 2 2 1)) (1 (1.0 2 1 1 1)) (1 (2 1 2 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7058)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6020)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5068)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5918)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6978)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4228)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6312)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7024)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7416)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4554)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6360)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4896)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6884)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4534)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 47 65 1 0 (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) (quote nil) nil t "off" 6.1 nil (quote (1)) (quote (1)) nil))
