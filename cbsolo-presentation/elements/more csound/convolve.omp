; OM File Header - Saved 2015/06/21 16:07:01
; (6.1 :patc (om-make-point 137 176) (om-make-point 1571 172) (om-make-point 989 1246) "" 183 0 nil "2015/06/21 16:07:01")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../../../../out-files/snd37065.aiff\"" "#P\"../../out-files/easy-out-13.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om4csound")))(setf *om-current-persistent* (om-load-patch1 "convolve" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 25 485) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 44 569) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "mix" 2 (om-make-point 811 450) "" "mix" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 64 664) (om-make-point 50 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 113 737) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 139 654) (om-make-point 108 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 566 533) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 441 602) (om-make-point 133 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "impulse" 1 (om-make-point 369 77) "" "impulse" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sound" 0 (om-make-point 86 0) "" "sound" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 454 232) (om-make-point 117 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 249 380) (om-make-point 48 30) 1024 "1024" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "snd37065.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 40 285) (om-make-point 117 83) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "snd37065" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snd37065.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 135 100) (om-make-point 117 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-STEREO-TO-MONO" (quote sound-stereo-to-mono) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 51 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-13.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 481 825) (om-make-point 210 145) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-13" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-13.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 522 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 273 889) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 314 592) (om-make-point 31 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 419 449) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 93 399) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A_PCONVOLVE" (quote om-auro::a_pconvolve) (quote ((om-load-inputfun (quote input-funbox) "" "AIN" 1) (om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfunmenu1 (quote input-funmenu) "" "IPARTITIONSIZE" 1 (list (list "0bit (0)" 0) (list "1bit (2)" 2) (list "2bit (4)" 4) (list "3bit (8)" 8) (list "4bit (16)" 16) (list "5bit (32)" 32) (list "6bit (64)" 64) (list "7bit (128)" 128) (list "8bit (256)" 256) (list "9bit (512)" 512) (list "10bit (1024)" 1024) (list "11bit (2048)" 2048) (list "12bit (4096)" 4096) (list "13bit (8192)" 8192) (list "14bit (16384)" 16384) (list "15bit (32768)" 32768) (list "16bit (65536)" 65536) (list "17bit (131072)" 131072) (list "18bit (262144)" 262144) (list "19bit (524288)" 524288) (list "20bit (1048576)" 1048576) (list "21bit (2097152)" 2097152) (list "22bit (4194304)" 4194304) (list "23bit (8388608)" 8388608) (list "24bit (16777216)" 16777216))))) (om-make-point 149 537) (om-make-point 144 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EASY-CSD" (quote easy-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, or a lambda function with at least one input (p3)" "OPCODES" nil) (om-load-inputfun (quote input-funbox) "p2 (offset)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p3 (duration)" "PARAMS" nil))) (om-make-point 252 722) (om-make-point 151 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 3) (20 0 3 0 nil 2) (1 0 3 1 nil 2) (3 0 4 0 nil 2) (5 0 4 1 nil 2) (21 0 5 0 nil 2) (2 0 5 1 nil 3) (19 0 7 0 nil 0) (16 0 7 1 nil 0) (6 0 7 2 nil 0) (8 0 10 0 nil 0) (14 0 12 0 nil 0) (9 0 13 0 nil 0) (13 0 14 0 nil 0) (22 0 15 0 nil 0) (10 0 16 0 nil 0) (22 0 17 0 nil 0) (13 0 19 0 nil 0) (12 0 20 0 nil 0) (20 0 21 0 nil 2) (10 0 21 1 nil 0) (11 0 21 2 nil 0) (4 0 22 0 nil 2) (18 0 22 1 nil 0) (7 0 22 2 nil 0))) nil 6.1))
