; OM File Header - Saved 2015/06/09 16:58:26
; (6.050102 :patc (om-make-point 10 10) (om-make-point 280 0) (om-make-point 996 756) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/easy-out-91.aiff" "../../in-files/ocean.aif" "../../in-files/IR's/Bath.aif"))
(in-package :om)(load-lib-for (quote ("om4csound" "om-geof")))(setf *om-current-persistent* (om-load-patch1 "pconvolve-test" (quote ((om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 527 495) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "OM-RESAN 2" (quote om-resan) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND-FILE" nil) (om-load-inputfun (quote input-funbox) "" "STEPS" nil))) (om-make-point 450 528) nil nil nil nil 1) (om-load-boxcall (quote genfun) "A_PCONVOLVE" (quote om-auro::a_pconvolve) (quote ((om-load-inputfun (quote input-funbox) "" "AIN" 1) (om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfunmenu1 (quote input-funmenu) "" "IPARTITIONSIZE" 1 (list (list "0bit (0)" 0) (list "1bit (2)" 2) (list "2bit (4)" 4) (list "3bit (8)" 8) (list "4bit (16)" 16) (list "5bit (32)" 32) (list "6bit (64)" 64) (list "7bit (128)" 128) (list "8bit (256)" 256) (list "9bit (512)" 512) (list "10bit (1024)" 1024) (list "11bit (2048)" 2048) (list "12bit (4096)" 4096) (list "13bit (8192)" 8192) (list "14bit (16384)" 16384) (list "15bit (32768)" 32768) (list "16bit (65536)" 65536) (list "17bit (131072)" 131072) (list "18bit (262144)" 262144) (list "19bit (524288)" 524288) (list "20bit (1048576)" 1048576) (list "21bit (2097152)" 2097152) (list "22bit (4194304)" 4194304) (list "23bit (8388608)" 8388608) (list "24bit (16777216)" 16777216))))) (om-make-point 215 395) (om-make-point 144 59) nil nil nil 1) (om-load-boxcall (quote genfun) "UNPACK2" (quote om-auro::unpack2) (quote ((om-load-inputfun (quote input-funbox) "list" "ITEMS" (list 1 2)))) (om-make-point 357 275) nil nil nil nil 2) (om-load-boxcall (quote genfun) "UNPACK2" (quote om-auro::unpack2) (quote ((om-load-inputfun (quote input-funbox) "list" "ITEMS" (list 1 2)))) (om-make-point 103 283) nil nil nil nil 2) (om-load-boxcall (quote genfun) "OM-RESAN" (quote om-resan) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND-FILE" nil) (om-load-inputfun (quote input-funbox) "" "STEPS" nil))) (om-make-point 782 485) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "make-IR-pathname" (om-load-patch-abs1 "make-IR-pathname" (quote ((om-load-boxout "output" 0 (om-make-point 221 442) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input1" 1 (om-make-point 196 202) "" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 105 50) "" nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 342 323) (om-make-point 38 30) "aif" "\"aif\"" nil) (om-load-boxcall (quote lispfun) "MAKE-PATHNAME" (quote make-pathname) (quote ((om-load-inputkeyword (quote input-keyword) "" "directory" (quote :directory) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "type" (quote :type) nil nil))) (om-make-point 140 383) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PATHNAME-DIRECTORY" (quote pathname-directory) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 50 296) nil nil nil nil 1))) (quote ((4 0 0 0 nil 0) (5 0 4 0 nil 0) (1 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 5 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 423 554)) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 732 282) nil nil nil "make-IR-pathname") (om-load-boxcall (quote abstraction) "get-directory-and-contents" (om-load-patch-abs1 "get-directory-and-contents" (quote ((om-load-boxout "output1" 1 (om-make-point 263 437) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output0" 0 (om-make-point 123 463) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 310 373) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PATHNAME-NAME" (quote pathname-name) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 382 286) nil nil "l" nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 278 105) (om-make-point 38 30) "aif" "\"aif\"" nil) (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil) (om-load-inputkeyword (quote input-keyword) "" "type" (quote :type) nil nil))) (om-make-point 216 215) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 50 50) nil nil nil nil 1))) (quote ((2 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.050102 nil "" (om-make-point 200 168) (om-make-point 507 588)) (quote nil) (om-make-point 792 95) nil (list (om-make-pathname :directory (quote (:absolute "Users" "geofholbrook" "Data" "projects" "supersound-wksp 0.20i-B" "in-files" "IR's")) :device :unspecific :host nil :name nil :type nil) (list "70's_Philips_box" "Bath" "Blaupunkt_tube_radio" "Bucket" "can" "Coalhod" "Djembe" "dustbin1" "Factory-hall" "Glasscup" "PA_horn" "POT1" "POT2" "Small_portable_1" "Small_speaker" "spaceech_Mode<2022>01" "Va-hit-body-1" "Va-hit-body-2" "Va-hit-body-3" "Va-hit-body-4" "Va-hit-body-5" "Vacuum-cleaner-tube" "Very_small_speaker" "walkman" "Washing-machine")) "x" "get-directory-and-contents") (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 878 194) (om-make-point 239 57) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 219 24) "untitled" :range (quote ("70's_Philips_box" "Bath" "Blaupunkt_tube_radio" "Bucket" "can" "Coalhod" "Djembe" "dustbin1" "Factory-hall" "Glasscup" "PA_horn" "POT1" "POT2" "Small_portable_1" "Small_speaker" "spaceech_Mode<2022>01" "Va-hit-body-1" "Va-hit-body-2" "Va-hit-body-3" "Va-hit-body-4" "Va-hit-body-5" "Vacuum-cleaner-tube" "Very_small_speaker" "walkman" "Washing-machine"))))) (om-set-selected-item-index rep (quote 1)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 613 335) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 474 397) (om-make-point 163 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 363 403) (om-make-point 31 30) (list 0) "(0)" nil) (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 485 277) nil nil nil nil 1) (om-load-editor-box1 "easy-out-91.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 614) (om-make-point 222 88) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-91" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-91.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 1259 996) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 108 200) nil nil nil nil 1) (om-load-editor-box1 "ocean.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 68 6) (om-make-point 233 133) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "ocean" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ocean.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-editor-box1 "Bath.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 378 98) (om-make-point 222 88) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "IR's")) :device :unspecific :host :unspecific :name "Bath" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bath.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote genfun) "A_PCONVOLVE" (quote om-auro::a_pconvolve) (quote ((om-load-inputfun (quote input-funbox) "" "AIN" 1) (om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfunmenu1 (quote input-funmenu) "" "IPARTITIONSIZE" 1 (list (list "0bit (0)" 0) (list "1bit (2)" 2) (list "2bit (4)" 4) (list "3bit (8)" 8) (list "4bit (16)" 16) (list "5bit (32)" 32) (list "6bit (64)" 64) (list "7bit (128)" 128) (list "8bit (256)" 256) (list "9bit (512)" 512) (list "10bit (1024)" 1024) (list "11bit (2048)" 2048) (list "12bit (4096)" 4096) (list "13bit (8192)" 8192) (list "14bit (16384)" 16384) (list "15bit (32768)" 32768) (list "16bit (65536)" 65536) (list "17bit (131072)" 131072) (list "18bit (262144)" 262144) (list "19bit (524288)" 524288) (list "20bit (1048576)" 1048576) (list "21bit (2097152)" 2097152) (list "22bit (4194304)" 4194304) (list "23bit (8388608)" 8388608) (list "24bit (16777216)" 16777216))))) (om-make-point 27 399) (om-make-point 144 59) nil nil nil 1) (om-load-boxcall (quote genfun) "EASY-CSD" (quote easy-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, or a lambda function with at least one input (p3)" "OPCODES" nil) (om-load-inputfun (quote input-funbox) "p2 (offset)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p3 (duration)" "PARAMS" nil))) (om-make-point 236 534) (om-make-point 151 59) nil nil nil 1))) (quote ((16 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 3 0 nil 0) (14 0 4 0 nil 0) (7 0 6 0 nil 0) (8 1 6 1 nil 0) (7 1 8 0 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (15 0 12 0 nil 0) (18 0 13 0 nil 0) (15 0 14 0 nil 0) (6 0 16 0 nil 0) (14 0 17 0 nil 0) (16 0 17 1 nil 0) (17 0 18 0 nil 0) (11 0 18 1 nil 0) (10 0 18 2 nil 0))) nil 6.050102))
