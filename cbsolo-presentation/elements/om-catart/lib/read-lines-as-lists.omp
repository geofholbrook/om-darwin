; OM File Header - Saved 2015/06/21 17:02:54
; (6.1 :patc (om-make-point 24 24) (om-make-point 56 50) (om-make-point 500 400) "" 183 0 nil "2015/06/21 17:02:54")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "read-lines-as-lists" (quote ((let ((box (om-load-boxout "output0" 0 (om-make-point 124 296) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 88 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "read-lines-as-lists" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 137) (om-make-point 136 67) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "NULL" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 422 459) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 466 517) nil nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-EOF-P" (quote file-eof-p) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 459 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "remove-chars" (om-load-lisp-abspatch "remove-chars" 6.1 "$(lambda (str) $  (remove-if #'(lambda (ch)$                 (member ch '(#\\, #\\;)))$             str))") (quote ((om-load-inputfun (quote input-funbox) "" "STR" nil))) (om-make-point 212 238) nil nil nil "remove-chars"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+ 2" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "(") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" ")"))) (om-make-point 128 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "READ-FROM-STRING" (quote read-from-string) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 116 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-READ-LINE" (quote file-read-line) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 129 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 421 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 190 358) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 371 51) "" nil "pp.sy.txt" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 426 233) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :input (if-ex box) :rename) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 86 473) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 306 481) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 186 475) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (10 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 4 1 nil 0) (3 0 5 0 nil 0) (10 0 6 0 nil 0) (9 0 7 0 nil 0) (5 0 8 0 nil 0) (7 0 10 0 nil 0) (8 1 12 0 nil 0) (8 0 13 0 nil 0))) 1 "read-lines-as-lists" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) nil 6.1))
