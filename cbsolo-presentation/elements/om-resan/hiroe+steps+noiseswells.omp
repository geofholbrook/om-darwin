; OM File Header - Saved 2015/06/09 16:34:32
; (6.050102 :patc (om-make-point 442 10) (om-make-point 144 0) (om-make-point 1421 1156) "" 183 0 nil "2015/06/08 16:42:06")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../../../threestep-immobile/OM WORKSPACES/threestep-wksp/in-files/giant-steps-mrk.sdif" "../../in-files/hiroe-coltrane-mrk.sdif") (list (quote :sound) "../../out-files/tiramolla67.aiff" "../../out-files/tiramolla68.aiff" "../../out-files/tiramolla69.aiff" "../../out-files/tiramolla70.aiff" "../../out-files/tiramolla71.aiff" "../../out-files/tiramolla72.aiff" "../../out-files/tiramolla73.aiff" "../../out-files/tiramolla74.aiff" "../../out-files/tiramolla75.aiff" "../../out-files/tiramolla76.aiff" "../../out-files/tiramolla77.aiff" "../../out-files/tiramolla78.aiff" "../../out-files/tiramolla79.aiff" "../../out-files/tiramolla80.aiff" "../../out-files/tiramolla81.aiff" "../../out-files/tiramolla82.aiff" "../../out-files/tiramolla83.aiff" "../../out-files/tiramolla84.aiff" "../../out-files/tiramolla85.aiff" "../../out-files/tiramolla86.aiff" "../../out-files/tiramolla87.aiff" "../../out-files/tiramolla88.aiff" "../../out-files/tiramolla89.aiff" "../../out-files/tiramolla90.aiff" "../../out-files/tiramolla91.aiff" "../../out-files/tiramolla92.aiff" "../../out-files/tiramolla93.aiff" "../../out-files/tiramolla94.aiff" "../../out-files/tiramolla95.aiff" "../../out-files/tiramolla96.aiff" "../../out-files/tiramolla97.aiff" "../../out-files/tiramolla98.aiff" "../../out-files/tiramolla99.aiff" "../../out-files/tiramolla100.aiff" "../../out-files/tiramolla101.aiff" "../../out-files/tiramolla102.aiff" "../../out-files/tiramolla103.aiff" "../../out-files/tiramolla104.aiff" "../../out-files/tiramolla105.aiff" "../../out-files/tiramolla106.aiff" "../../out-files/tiramolla107.aiff" "../../out-files/tiramolla108.aiff" "../../out-files/tiramolla109.aiff" "../../out-files/tiramolla110.aiff" "../../out-files/tiramolla111.aiff" "../../out-files/tiramolla112.aiff" "../../out-files/tiramolla113.aiff" "../../out-files/tiramolla114.aiff" "../../out-files/tiramolla115.aiff" "../../out-files/tiramolla116.aiff" "../../out-files/easy-out-97.aiff") (list (quote :abstraction) "reson-synth/reson-synth-2.omp"))
(in-package :om)(load-lib-for (quote ("om-geof" "om4csound")))(setf *om-current-persistent* (om-load-patch1 "hiroe+steps+noiseswells" (quote ((om-load-boxcall (quote abstraction) "one-impulse" (om-load-patch-abs1 "one-impulse" (quote ((om-load-boxout "output0" 0 (om-make-point 212 307) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "A_MPULSE" (quote om-auro::a_mpulse) (quote ((om-load-inputfun (quote input-funbox) "" "KAMP" 10000) (om-load-inputfun (quote input-funbox) "" "KINTVL" 0))) (om-make-point 50 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 109 50) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "P5" (quote om-auro::p5) (quote nil) (om-make-point 61 99) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 846 350) nil nil nil "one-impulse") (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 912 866) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "onsets" (om-load-lisp-abspatch "onsets" 6.050102 "(lambda (lis) (loop for e in (butlast (dx->x 0 lis)) append (list e e)))") (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 568 648) nil nil nil "onsets") (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 697 708) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 480 244) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 653 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N 2" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 1163 356) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 1043 267) (om-make-point 47 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBSEQ 2" (quote subseq) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" 0) (om-load-inputfun (quote input-funbox) "START" "START" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 358 270) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "noise-burst" (om-load-patch-abs1 "noise-burst" (quote ((om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 375 162) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 308 162) (om-make-point 32 30) 0.4 "0.4" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 266 166) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 219 162) (om-make-point 32 30) 0.4 "0.4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 182 162) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "A_LINSEG" (quote om-auro::a_linseg) (quote ((om-load-inputfun (quote input-funbox) "" "IA" 1) (om-load-inputfun (quote input-funbox) "" "IDUR1" 0.05) (om-load-inputfun (quote input-funbox) "" "IB" 1) (om-load-inputfun (quote input-funbox) "" "IDUR2" 0.01) (om-load-inputfun (quote input-funbox) "" "IC" 0))) (om-make-point 235 259) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 131 366) (om-make-point 118 35) nil nil nil 1) (om-load-boxcall (quote genfun) "A_RAND" (quote om-auro::a_rand) (quote ((om-load-inputfun (quote input-funbox) "" "XAMP" 0))) (om-make-point 91 238) nil nil nil nil 1) (om-load-boxout "output0" 0 (om-make-point 183 492) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "P5" (quote om-auro::p5) (quote nil) (om-make-point 61 99) nil nil nil nil 1))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 7 0 nil 0) (6 0 8 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 582 550)) (quote nil) (om-make-point 1222 402) nil nil nil "noise-burst") (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1016 169) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote lispfun) "SUBSEQ" (quote subseq) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "START" "START" 2) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 27))) (om-make-point 958 374) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 1124 88) nil (list (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "supersound-wksp 0.19L" "in-files" "giant-chord-FILS")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1) (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 868 98) nil (list (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "supersound-wksp 0.19L" "in-files" "hiroe-coltrane-FILS")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1) (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 1191 230) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 828 201) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1071 685) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1095 434) (om-make-point 60 30) (list 0.75 3) "(0.75 3)" nil) (om-load-boxcall (quote patch-box) "reson-synth-2" (quote ("elements" "om-resan" "reson-synth" "reson-synth-2")) (quote ((om-load-inputfun (quote input-funbox) "" "input-FIL-sdif" nil) (om-load-inputfun (quote input-funbox) "" "bw-scale" (list 0.75 3)) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1086 525) nil nil "l" "reson-synth-2" 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1179 613) nil (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla67" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla67.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla68" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla68.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla69" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla69.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla70" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla70.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla71" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla71.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla72" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla72.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla73" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla73.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla74" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla74.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla75" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla75.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla76" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla76.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla77" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla77.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla78" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla78.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla79" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla79.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla80" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla80.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla81" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla81.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla82" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla82.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla83" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla83.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla84" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla84.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla85" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla85.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla86" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla86.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla87" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla87.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla88" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla88.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla89" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla89.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla90" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla90.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla91" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla91.aiff") (set-tonalite newobj nil) newobj))) "x" nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 873 768) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 1002 746) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 964 616) nil (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla92" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla92.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla93" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla93.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla94" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla94.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla95" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla95.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla96" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla96.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla97" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla97.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla98" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla98.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla99" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla99.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla100" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla100.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla101" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla101.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla102" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla102.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla103" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla103.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla104" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla104.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla105" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla105.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla106" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla106.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla107" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla107.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla108" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla108.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla109" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla109.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla110" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla110.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla111" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla111.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla112" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla112.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla113" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla113.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla114" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla114.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla115" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla115.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla116" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla116.aiff") (set-tonalite newobj nil) newobj))) "x" nil 1) (om-load-boxcall (quote genfun) "P4" (quote om-auro::p4) (quote nil) (om-make-point 282 557) nil nil nil nil 1) (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 356 688) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 534 414) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote lispfun) "AVERAGE" (quote average) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil) (om-load-inputfun (quote input-funbox) "WEIGHTS?" "WEIGHTS?" nil))) (om-make-point 519 489) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 624 540) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 736 45) (om-make-point 28 30) 25 "25" nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 26) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 607 192) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 597 423) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 603 345) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 606 255) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 431 320) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIF->MARKERS" (quote sdif->markers) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 481 105) nil nil nil nil 1) (om-load-editor-box1 "giant-steps-mrk.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 432 22) (om-make-point 145 63) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "threestep-immobile" "OM WORKSPACES" "threestep-wksp" "in-files")) :device nil :host nil :name "giant-steps-mrk" :type "sdif")))) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) t nil nil nil) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 1152 900) nil nil nil nil 1) (om-load-editor-box1 "easy-out-97.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 484 925) (om-make-point 326 118) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-97" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-97.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote genfun) "EASY-CSD" (quote easy-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, or a lambda function with at least one input (p3)" "OPCODES" nil) (om-load-inputfun (quote input-funbox) "p2 (offset)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p3 (duration)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p4" "PARAMS" nil))) (om-make-point 474 819) (om-make-point 250 59) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 759 452) (om-make-point 60 30) (list 0.75 3) "(0.75 3)" nil) (om-load-boxcall (quote lispfun) "OPEN-WS-FOLDER" (quote open-ws-folder) (quote nil) (om-make-point 153 285) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "reson-synth-2" (quote ("elements" "om-resan" "reson-synth" "reson-synth-2")) (quote ((om-load-inputfun (quote input-funbox) "" "input-FIL-sdif" nil) (om-load-inputfun (quote input-funbox) "" "bw-scale" (list 0.75 3)) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 833 538) nil nil "l" "reson-synth-2" 1) (om-load-boxcall (quote genfun) "SDIF->MARKERS" (quote sdif->markers) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 209 115) nil nil nil nil 1) (om-load-editor-box1 "hiroe-coltrane-mrk.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 164 15) (om-make-point 145 63) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "hiroe-coltrane-mrk" :type "sdif")))) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) t nil nil nil))) (quote ((2 0 1 0 nil 0) (27 0 2 0 nil 0) (7 0 4 0 nil 8) (28 0 5 0 nil 2) (14 0 6 0 nil 0) (28 0 6 1 nil 2) (10 0 7 0 nil 4) (28 0 7 1 nil 2) (42 0 8 0 nil 0) (10 0 8 1 nil 4) (4 0 8 2 nil 0) (15 0 11 0 nil 0) (10 0 11 1 nil 4) (7 0 11 2 nil 8) (12 0 14 0 nil 0) (13 0 15 0 nil 0) (22 0 16 0 nil 0) (19 0 16 1 nil 0) (17 0 18 1 nil 0) (9 0 18 2 nil 0) (18 0 19 0 nil 0) (6 0 19 1 nil 0) (21 0 20 0 nil 0) (16 0 21 0 nil 0) (41 0 22 0 nil 0) (11 0 22 1 nil 0) (23 0 24 0 nil 0) (25 0 26 1 nil 0) (26 0 27 0 nil 0) (30 0 27 1 nil 0) (34 0 29 0 nil 0) (5 0 29 1 nil 0) (31 0 30 0 nil 0) (33 0 31 0 nil 0) (32 0 31 1 nil 0) (29 0 32 0 nil 0) (8 0 33 0 nil 0) (35 0 34 0 nil 0) (37 0 36 0 nil 0) (38 0 37 0 nil 0) (24 0 38 0 nil 0) (2 0 38 1 nil 0) (3 0 38 2 nil 0) (20 0 38 3 nil 0) (39 0 41 1 nil 0) (0 0 41 2 nil 0) (43 0 42 0 nil 0))) nil 6.050102))
