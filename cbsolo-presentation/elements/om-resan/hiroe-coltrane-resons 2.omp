; OM File Header - Saved 2015/06/09 16:34:32
; (6.050102 :patc (om-make-point 442 10) (om-make-point 146 0) (om-make-point 1179 1031) "" 183 0 nil "2015/06/08 16:42:06")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/hiroe-coltrane-mrk.sdif") (list (quote :abstraction) "reson-synth/reson-synth-2.omp") (list (quote :sound) "../../out-files/easy-out-92.aiff" "../../in-files/hiroe-coltrane.wav"))
(in-package :om)(load-lib-for (quote ("om-geof" "om4csound")))(setf *om-current-persistent* (om-load-patch1 "hiroe-coltrane-resons 2" (quote ((om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 207 541) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 454 370) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 352 417) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 888 101) (om-make-point 119 30) "giant-chord-FILS" "\"giant-chord-FILS\"" nil) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 932 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 1029 808) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 702 94) (om-make-point 119 30) "giant-chord-FILS" "\"giant-chord-FILS\"" nil) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 783 200) nil nil nil nil 1) (om-load-editor-box1 "easy-out-92.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 422 818) (om-make-point 326 118) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-92" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-92.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote genfun) "P4" (quote om-auro::p4) (quote nil) (om-make-point 157 684) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 705 386) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 623 468) (om-make-point 100 35) nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 622 342) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 522 299) nil nil nil nil 1) (om-load-boxcall (quote genfun) "EASY-CSD" (quote easy-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, or a lambda function with at least one input (p3)" "OPCODES" nil) (om-load-inputfun (quote input-funbox) "p2 (offset)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p3 (duration)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p4" "PARAMS" nil))) (om-make-point 512 741) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 136 478) (om-make-point 60 30) (list 0.75 3) "(0.75 3)" nil) (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 256 743) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 389 631) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "OPEN-WS-FOLDER" (quote open-ws-folder) (quote nil) (om-make-point 790 537) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 111 267) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote genfun) "OM-RESAN" (quote om-resan) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND-FILE" nil) (om-load-inputfun (quote input-funbox) "" "STEPS" nil))) (om-make-point 61 342) (om-make-point 96 59) nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 276 522) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "reson-synth-2" (quote ("elements" "om-resan" "reson-synth" "reson-synth-2")) (quote ((om-load-inputfun (quote input-funbox) "" "input-FIL-sdif" nil) (om-load-inputfun (quote input-funbox) "" "bw-scale" (list 0.75 3)) (om-load-inputfun (quote input-funbox) "" "signal-to-resonators" nil))) (om-make-point 145 571) nil nil "l" "reson-synth-2" 1) (om-load-boxcall (quote genfun) "SOUND-REGIONS" (quote sound-regions) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND" nil))) (om-make-point 212 332) (om-make-point 200 59) nil nil nil 1) (om-load-editor-box1 "hiroe-coltrane.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 295 213) (om-make-point 179 66) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "hiroe-coltrane" :type "wav") 1))) (when thesound (setf (markers thesound) (quote (0.0D0 0.6985033750534058D0 1.3235374689102173D0 1.9785940647125245D0 2.6328344345092774D0 3.2477550506591797D0 3.947392225265503D0 5.171995639801025D0 5.819705009460449D0 6.435782432556152D0 7.1059184074401856D0 7.736485481262207D0 8.369637489318848D0 9.007755279541016D0 10.4954195022583D0 11.148276329040528D0 11.810748100280762D0 13.076258659362793D0 13.705533027648926D0 14.3335599899292D0 15.693220138549805D0 16.18376350402832D0 16.97294807434082D0 18.305057525634766D0 19.126008987426758D0 19.798934936523438D0 21.235668182373047D0 21.997846603393555D0 23.180408477783203D0 24.454580307006836D0)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "hiroe-coltrane.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote genfun) "SDIF->MARKERS" (quote sdif->markers) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 520 104) nil nil nil nil 1) (om-load-editor-box1 "hiroe-coltrane-mrk.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 455 20) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "hiroe-coltrane-mrk" :type "sdif")))) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "hiroe-coltrane.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 116 45) (om-make-point 236 109) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "hiroe-coltrane" :type "wav") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "hiroe-coltrane.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((23 0 2 0 nil 0) (1 0 2 1 nil 0) (3 0 4 0 nil 0) (8 0 5 0 nil 0) (6 0 7 0 nil 0) (14 0 8 0 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (25 0 12 0 nil 0) (25 0 13 0 nil 0) (16 0 14 0 nil 0) (13 0 14 1 nil 0) (11 0 14 2 nil 0) (17 0 14 3 nil 0) (9 0 16 0 nil 0) (22 0 17 0 nil 0) (21 0 17 1 nil 0) (19 0 20 1 nil 0) (20 0 21 0 nil 0) (2 0 21 1 nil 0) (15 0 22 1 nil 0) (0 0 22 2 nil 0) (24 0 23 0 nil 0) (27 0 24 0 nil 0) (25 0 24 2 nil 0) (26 0 25 0 nil 0))) nil 6.050102))
