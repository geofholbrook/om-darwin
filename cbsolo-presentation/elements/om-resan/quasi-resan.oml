; OM File Header - Saved 2013/02/24 15:21:45
; (6.050102 :lisp (om-make-point 10 60) (om-make-point 50 50) (om-make-point 500 400) "" 124 0 "2013/02/09 13:56:30" "2013/02/24 15:21:45")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-lisp-patch "quasi-resan" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"LispFunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (sound-file steps)$  (let ((global (get-inst-from-globals \"modres-path\")))$    (when global$      (let ((kernelstr (value (instance global)))$            (steps (or steps 6))$            (tempstr (directory-namestring *om-tmpfiles-folder*))$            (racine (pathname-name sound-file))$            (dur (sound-dur sound-file)))$$        (print (string+ \"sound duration: \" (prin1-to-string dur)))$$        (om-shell (string+ \"\\\"\" kernelstr $                           \"snd\\\" -v -aExtract -i\\\"\" (namestring sound-file) $                           \"\\\" -c1 -o\\\"\" tempstr racine $                           \".temp.aiff\\\" -fAiff -d16\"))$$        (loop for division from (1+ steps) downto 2$              for k from 0$              do$              (om-shell (string+ \"\\\"\" kernelstr $                                 \"modres\\\" -v \"$                                 \"-D\\\"\" (subseq tempstr 0 (1- (length tempstr))) \"\\\" \" ;; get rid of slash at the end$                                 \"-d\\\"\" (subseq tempstr 0 (1- (length tempstr))) \"\\\" \"$                                 $                                 \"-i\\\"\" racine \".temp.aiff\\\" \" $                                 $                                 \"-o\\\"\" racine \"\\\" \"$                                 $                                 \"-zi \"$                                 (cond ((= k 0) nil)$                                       ((= k 1) (string+ \"-p\\\"\" racine \".e0\\\" \"))$                                       (t (string+ \"-p\\\"\" racine \".m\" + (prin1-to-string (1- k)) + \"\\\" \")))$                                 \"-Zm \"$                                 (when (= division 2) \"-Im -Jm \")$                                 \"-w\" (prin1-to-string (/ (- dur 0.01) (expt 2 (1- division)))) \" \"$                                 (when (> k 0) \"-V\"))))$$        (string+ tempstr racine \".m\" (prin1-to-string (1- steps)) \".FIL.sdif\")$))))$                              $                              $                              $          $"))