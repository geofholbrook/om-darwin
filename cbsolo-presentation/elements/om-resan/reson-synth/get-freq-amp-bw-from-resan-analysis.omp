; OM File Header - Saved 2015/06/10 14:01:38
; (6.1 :patc (om-make-point 10 10) (om-make-point 179 83) (om-make-point 879 742) "" 183 0 nil "2015/06/10 14:01:38")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "get-freq-amp-bw-from-resan-analysis" (quote ((let ((box (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 79 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Steel-Drum.m6.FOF.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 134 42) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 642 562) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "bandwidths" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 537 562) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "amplitudes" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 440 562) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "frequencies" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 630) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 62 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 93 535) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 218 515) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETCOL" (quote getcol) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "frame number" "FNUM" 0) (om-load-inputfun (quote input-funbox) "matrix number" "MNUM" 0) (om-load-inputfun (quote input-funbox) "column number" "CNUM" 0))) (om-make-point 472 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 578 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 624 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 673 202) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 489 202) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 441 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 395 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETCOL" (quote getcol) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "frame number" "FNUM" 0) (om-load-inputfun (quote input-funbox) "matrix number" "MNUM" 0) (om-load-inputfun (quote input-funbox) "column number" "CNUM" 0))) (om-make-point 276 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 328 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 276 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 229 202) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETCOL" (quote getcol) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "frame number" "FNUM" 0) (om-load-inputfun (quote input-funbox) "matrix number" "MNUM" 0) (om-load-inputfun (quote input-funbox) "column number" "CNUM" 0))) (om-make-point 127 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Steel-Drum.m6.FOF.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 76 227) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (9 0 2 0 nil 0) (16 0 3 0 nil 0) (20 0 4 0 nil 0) (7 0 5 0 nil 0) (8 0 7 0 nil 0) (20 0 8 0 nil 0) (16 0 8 1 nil 0) (9 0 8 2 nil 0) (21 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (12 0 9 3 nil 0) (21 0 16 0 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (13 0 16 3 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (18 0 20 2 nil 0) (17 0 20 3 nil 0) (0 0 21 0 nil 0))) nil 6.1))
