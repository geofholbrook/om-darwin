; OM File Header - Saved 2015/06/09 16:34:32
; (6.050102 :patc (om-make-point 24 24) (om-make-point -6 0) (om-make-point 764 749) "" 183 0 nil "2015/06/08 16:42:06")
; End File Header
; External resources 
; (list (list (quote :abstraction) "get-freq-amp-bw-from-resan-analysis.omp") (list (quote :sdif) "../../../../../../Downloads/Klinci_18.FIL.sdif") (list (quote :sound) "../../../out-files/snd58941.aiff" "../../../../../../Downloads/More_15.aiff" "../../../out-files/tiramolla6.aiff"))
(in-package :om)(load-lib-for (quote ("om4csound")))(setf *om-current-persistent* (om-load-patch1 "reson-synth-2" (quote ((om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 1023 762) nil nil nil nil 1) (om-load-editor-box1 "snd58941.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 996 603) (om-make-point 182 106) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snd58941" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snd58941.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 2035 511) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1047 513) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 1009 543) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 455 606) (om-make-point 37 30) -0.5 "-0.5" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 503 320) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 4))) (om-make-point 493 350) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-DUR 2" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 427 259) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CONDITIONAL 2" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 163 261) nil nil nil nil 1) (om-load-boxin "signal-to-resonators" 2 (om-make-point 21 61) "" "signal-to-resonators" nil nil) (om-load-editor-box1 "More_15.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 120 13) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "geofholbrook" "Downloads")) :device nil :host nil :name "More_15" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "More_15.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 951 668) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 172 152) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "noise-burst" (om-load-patch-abs1 "noise-burst" (quote ((om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 375 162) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 308 162) (om-make-point 32 30) 0.4 "0.4" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 266 166) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 219 162) (om-make-point 32 30) 0.4 "0.4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 182 162) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "A_LINSEG" (quote om-auro::a_linseg) (quote ((om-load-inputfun (quote input-funbox) "" "IA" 1) (om-load-inputfun (quote input-funbox) "" "IDUR1" 0.05) (om-load-inputfun (quote input-funbox) "" "IB" 1) (om-load-inputfun (quote input-funbox) "" "IDUR2" 0.01) (om-load-inputfun (quote input-funbox) "" "IC" 0))) (om-make-point 235 259) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 131 366) (om-make-point 118 35) nil nil nil 1) (om-load-boxcall (quote genfun) "A_RAND" (quote om-auro::a_rand) (quote ((om-load-inputfun (quote input-funbox) "" "XAMP" 0))) (om-make-point 91 238) nil nil nil nil 1) (om-load-boxout "output0" 0 (om-make-point 183 492) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "P5" (quote om-auro::p5) (quote nil) (om-make-point 61 99) nil nil nil nil 1))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 7 0 nil 0) (6 0 8 0 nil 0))) 6.050102 nil "" (om-make-point 301 306) (om-make-point 515 647)) (quote nil) (om-make-point 245 50) nil nil nil "noise-burst") (om-load-boxcall (quote abstraction) "one-impulse" (om-load-patch-abs1 "one-impulse" (quote ((om-load-boxout "output0" 0 (om-make-point 212 307) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "A_MPULSE" (quote om-auro::a_mpulse) (quote ((om-load-inputfun (quote input-funbox) "" "KAMP" 10000) (om-load-inputfun (quote input-funbox) "" "KINTVL" 0))) (om-make-point 50 219) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 109 50) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "P5" (quote om-auro::p5) (quote nil) (om-make-point 61 99) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 337 432)) (quote nil) (om-make-point 352 20) nil nil nil "one-impulse") (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 648 81) nil nil nil nil 1) (om-load-boxin "bw-scale" 1 (om-make-point 948 206) "" "bw-scale" (list 0.75 3) nil) (om-load-boxcall (quote abstraction) "res-transform" (om-load-patch-abs1 "res-transform" (quote ((om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 256 269) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 292 113) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-boxin "input 2" 1 (om-make-point 351 14) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 167 10) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 263 386) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((3 0 0 0 nil 0) (1 0 0 1 nil 0) (1 1 0 2 nil 0) (2 0 1 0 nil 0) (0 0 4 0 nil 0))) 6.050102 nil "" (om-make-point 200 28) (om-make-point 661 728)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 779 278) nil nil nil nil) (om-load-boxout "output" 0 (om-make-point 888 754) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 552 338) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 382 426) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 437 478) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 682 680) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 116 389) (om-make-point 48 30) "outc" "\"outc\"" nil) (om-load-boxcall (quote genfun) "CS_OUT" (quote om-auro::cs_out) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "out type" "OUT_TYPE" "out" (list (list "out" "out") (list "outs" "outs") (list "outs1" "outs1") (list "outs2" "outs2") (list "out32" "out32") (list "outh" "outh") (list "outo" "outo") (list "outq" "outq") (list "outq1" "outq1") (list "outq2" "outq2") (list "outq3" "outq3") (list "outq4" "outq4") (list "outx" "outx") (list "outc" "outc"))) (om-load-inputfun (quote input-funbox) "args" "ARG0" nil))) (om-make-point 156 536) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAKE-CSD" (quote om-auro::make-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, pr a lambda function with at least one input (p3)" "INSTRUMENT" nil) (om-load-inputfun (quote input-funbox) "p2" "P2" (list 0)) (om-load-inputfun (quote input-funbox) "p3" "P3" 10) (om-load-inputfun (quote input-funbox) "p4" "P4" nil) (om-load-inputfun (quote input-funbox) "p5" "P5" nil) (om-load-inputfun (quote input-funbox) "p6" "P6" nil))) (om-make-point 517 596) (om-make-point 121 65) nil nil nil 1) (om-load-boxcall (quote genfun) "CSD->SYNTH" (quote om-auro::csd->synth) (quote ((om-load-inputfun (quote input-funbox) "a list of 'csd' classes" "CSD" nil) (om-load-inputfun (quote input-funbox) "name (a simple string) for .sco .orc and .aiff file (outpath from preferences)" "NAME" "tiramolla") (om-load-inputfunmenu1 (quote input-funmenu) "sample rate" "SR" 44100 (list (list "44100" 44100) (list "48000" 48000) (list "96000" 96000) (list "192000" 192000))) (om-load-inputfunmenu1 (quote input-funmenu) "bit depth" "BD" 24 (list (list "16 bit" 16) (list "24 bit" 24) (list "32 bit" 32) (list "64 bit" 64))) (om-load-inputfun (quote input-funbox) "control rate (if nil kr=sr)" "KR" nil) (om-load-inputfun (quote input-funbox) "rescale (in dB, avoid 0)" "RESCALE" -0.5))) (om-make-point 258 640) (om-make-point 161 65) nil nil nil 1) (om-load-boxin "input-FIL-sdif" 0 (om-make-point 445 33) "" "input-FIL-sdif" nil nil) (om-load-boxcall (quote lispfun) "OPEN-WS-FOLDER" (quote open-ws-folder) (quote nil) (om-make-point 1022 296) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 230 71) (quote "pretty close to resan resynth if you multiply the amplitudes by the frequency.") "" (om-make-point 961 458) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 10000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 756 479) (om-make-point 59 35) nil nil nil 1) (om-load-editor-box1 "tiramolla6.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 755 568) (om-make-point 182 106) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "tiramolla6" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tiramolla6.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 2035 511) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 925 372) (om-make-point 28 30) 20 "20" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 10000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 847 459) nil nil nil nil 1) (om-load-editor-box1 "Klinci_18.FIL.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 806 6) (om-make-point 196 96) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "geofholbrook" "Downloads")) :device nil :host nil :name "Klinci_18.FIL" :type "sdif")))) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 1043 496) (om-make-point 233 260))) nil nil nil t) (om-load-boxcall (quote patch-box) "get-freq-amp-bw-from-resan-analysis" (quote ("elements" "om-resan" "reson-synth" "get-freq-amp-bw-from-resan-analysis")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 545 156) nil nil "&" nil 4) (om-load-boxcall (quote genfun) "P6" (quote om-auro::p6) (quote nil) (om-make-point 427 152) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P4" (quote om-auro::p4) (quote nil) (om-make-point 339 186) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 644 413) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote genfun) "A_RESON" (quote om-auro::a_reson) (quote ((om-load-inputfun (quote input-funbox) "" "ASIG" 0) (om-load-inputfun (quote input-funbox) "" "KCF" 0) (om-load-inputfun (quote input-funbox) "" "KBW" 5))) (om-make-point 231 327) (om-make-point 128 59) nil nil nil 1))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (30 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (10 0 7 0 nil 0) (9 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 11 0 nil 0) (26 0 14 0 nil 0) (33 0 14 1 nil 0) (34 3 16 0 nil 0) (15 0 16 1 nil 0) (30 0 17 0 nil 0) (34 1 18 0 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0) (30 0 21 0 nil 0) (22 0 23 0 nil 0) (38 0 23 1 nil 0) (23 0 24 0 nil 0) (20 0 24 1 nil 0) (6 0 24 2 nil 0) (34 1 24 3 nil 0) (29 0 24 4 nil 0) (16 0 24 5 nil 0) (24 0 25 0 nil 0) (4 0 25 5 nil 0) (34 1 29 0 nil 0) (32 0 29 1 nil 0) (25 0 30 0 nil 0) (34 2 32 0 nil 0) (31 0 32 1 nil 0) (14 0 34 0 nil 0) (8 0 38 0 nil 0) (36 0 38 1 nil 0) (35 0 38 2 nil 0))) nil 6.050102))
