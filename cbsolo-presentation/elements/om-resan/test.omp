; OM File Header - Saved 2015/06/09 19:06:38
; (6.1 :patc (om-make-point 172 10) (om-make-point 665 22) (om-make-point 1195 1144) "" 183 0 nil "2015/06/09 19:06:38")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../out-files/easy-out-8.aiff\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0000\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0613\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0614\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0615\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0616\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0617\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0618\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0619\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0620\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0621\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0622\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0623\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0624\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0625\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0626\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0627\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0628\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0629\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0630\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0631\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0632\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0633\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0634\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0635\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0636\"" "#P\"../../../../../../../../Volumes/Data/Geof/tmpfiles/cutting-0637\"" "#P\"../../../../../../../../Network/Servers/hebus.ircam.fr/Volumes/Bernardus2-3/Cursus/Cursus1-12-13/holbrook/Data/projects/threestep-immobile/threestep-wksp/in-files/giant-steps-L.aiff\"" "#P\"../../../../../../../../Network/Servers/hebus.ircam.fr/Volumes/Bernardus2-3/Cursus/Cursus1-12-13/holbrook/Data/projects/threestep-immobile/threestep-wksp/in-files/giant-steps-R.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om4csound")))(setf *om-current-persistent* (om-load-patch1 "test" (quote ((let ((box (let ((newbox (om-load-boxcall (quote patch-box) "reson-w-bwscale" (quote ("elements" "om-resan" "reson-synth" "reson-w-bwscale")) (quote ((om-load-inputfun (quote input-funbox) "" "input-FIL-sdif" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 193 563) nil nil "l" "reson-w-bwscale" 1))) (setf (frame-position newbox) (om-make-point 193 563)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 731 665) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 718 566) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 674 666) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 771 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "begin time (ms)" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time (ms)" "END" 1000))) (om-make-point 730 796) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 445 551) (om-make-point 28 30) 26 "26" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N 2" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 5))) (om-make-point 409 709) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N 2" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 5))) (om-make-point 384 593) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 260 504) (om-make-point 60 30) (list 0.75 3) "(0.75 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 329 688) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "giant-fils" (let ((copy (make-instance (quote omlistinstance) :name "giant-fils" :icon 129))) (setf (instance copy) (list (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0613.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0614.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0615.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0616.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0617.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0618.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0619.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0620.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0621.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0622.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0623.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0624.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0625.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0626.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0627.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0628.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0629.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0630.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0631.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0632.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0633.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0634.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0635.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0636.m5.FIL" :type "sdif") (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "openmusic" "om-resan-wksp" "in-files")) :device :unspecific :host nil :name "cutting-0637.m5.FIL" :type "sdif"))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2013/02/09 16:30:37" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 378 475) "giant-fils" (om-make-point 90 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 415 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 432 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 624 650) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 2) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 502 673) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 646 538) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 547 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P4" (quote om-auro::p4) (quote nil) (om-make-point 113 562) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A_DISKIN2" (quote om-auro::a_diskin2) (quote ((om-load-inputfun (quote input-funbox) "" "IFILCOD" 1) (om-load-inputfun (quote input-funbox) "" "KPITCH" 1))) (om-make-point 119 677) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 518 510) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 226 674) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-8.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 140 905) (om-make-point 293 103) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-8" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-8.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EASY-CSD" (quote easy-csd) (quote ((om-load-inputfun (quote input-funbox) "instrument : an opcode or a list of opcodes, or a lambda function with at least one input (p3)" "OPCODES" nil) (om-load-inputfun (quote input-funbox) "p2 (offset)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p3 (duration)" "PARAMS" nil) (om-load-inputfun (quote input-funbox) "p4" "PARAMS" nil))) (om-make-point 191 795) (om-make-point 166 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "do-resan" (om-load-patch-abs1 "do-resan" (quote ((let ((box (let ((newbox (om-load-boxcall (quote patch-box) "quasi-resan 2" (quote ("elements" "om-resan" "quasi-resan")) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND-FILE" nil) (om-load-inputfun (quote input-funbox) "" "STEPS" nil))) (om-make-point 126 244) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 126 244)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output0" 0 (om-make-point 214 397) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 242 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOUND-PATH" (quote sound-path) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 87 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0))) 6.1 nil "" (om-make-point 703 262) (om-make-point 568 605)) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 147 348) nil nil "l" "do-resan"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 276 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 743 297) (om-make-point 28 30) 26 "26" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 20) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 638 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "SOUND 2" (let ((copy (make-instance (quote ominstance) :name "SOUND 2" :icon 287))) (setf (instance copy) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0000" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0000") (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0))) (setf (create-info copy) (quote ("2013/02/09 16:04:41" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 892 530) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOUND-REGIONS" (quote sound-regions) (quote ((om-load-inputfun (quote input-funbox) "SOUND" "SOUND" nil))) (om-make-point 225 296) (om-make-point 150 43) (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0613" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0613") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0614" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0614") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0615" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0615") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0616" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0616") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0617" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0617") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0618" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0618") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0619" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0619") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0620" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0620") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0621" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0621") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0622" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0622") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0623" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0623") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0624" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0624") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0625" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0625") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0626" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0626") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0627" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0627") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0628" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0628") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0629" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0629") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0630" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0630") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0631" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0631") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0632" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0632") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0633" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0633") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0634" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0634") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0635" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0635") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0636" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0636") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Volumes" "Data" "Geof" "tmpfiles")) :device nil :host nil :name "cutting-0637" :type :unspecific) 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cutting-0637") (set-tonalite newobj nil) newobj))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "giant-steps-L.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 211 175) (om-make-point 211 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "threestep-immobile" "threestep-wksp" "in-files")) :device nil :host nil :name "giant-steps-L" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote (1.0681178569793702D0 1.479352355003357D0 1.9134138822555542D0 2.329758644104004D0 2.728344678878784D0 3.6455328464508057D0 4.005442142486572D0 4.4380574226379395D0 4.880977153778076D0 5.306180000305176D0 5.749100208282471D0 6.147727966308594D0 7.000816345214844D0 7.372335433959961D0 7.709024906158447D0 8.684263229370118D0 9.044172286987305D0 9.369251251220704D0 10.286439895629883D0 10.66956901550293D0 10.983038902282715D0 11.993106842041016D0 12.318185806274414D0 12.678094863891602D0 13.560453414916993D0 13.93197250366211D0)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "giant-steps-L.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->MARKERS" (quote sdif->markers) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 578 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "giant-steps-mrk.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 571 169) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "giant-steps-R.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 596 14) (om-make-point 211 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "threestep-immobile" "threestep-wksp" "in-files")) :device nil :host nil :name "giant-steps-R" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "giant-steps-R.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OPEN-WS-FOLDER" (quote open-ws-folder) (quote nil) (om-make-point 779 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "test" (om-load-lisp-abspatch "test" 6.1 "") (quote nil) (om-make-point 85 240) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "giant-steps-L.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 214 42) (om-make-point 211 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Network" "Servers" "hebus.ircam.fr" "Volumes" "Bernardus2-3" "Cursus" "Cursus1-12-13" "holbrook" "Data" "projects" "threestep-immobile" "threestep-wksp" "in-files")) :device nil :host nil :name "giant-steps-L" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "giant-steps-L.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "set-kernel-path" (quote ("elements" "om-resan" "set-kernel-path")) (quote nil) (om-make-point 72 38) nil nil nil "set-kernel-path" 1))) (setf (frame-position newbox) (om-make-point 72 38)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 1 nil 0) (4 0 1 0 nil 0) (2 0 1 1 nil 0) (16 0 3 0 nil 0) (2 0 3 1 nil 0) (27 0 4 0 nil 0) (3 0 5 1 nil 0) (1 0 5 2 nil 0) (15 0 7 0 nil 0) (6 0 7 1 nil 0) (11 0 8 0 nil 0) (6 0 8 1 nil 0) (0 0 10 0 nil 0) (8 0 10 1 nil 0) (13 0 12 0 nil 0) (17 0 15 0 nil 0) (14 0 15 1 nil 0) (27 0 16 0 nil 0) (20 0 17 0 nil 0) (16 0 17 1 nil 0) (18 0 19 0 nil 0) (27 0 20 0 nil 0) (23 0 22 0 nil 0) (19 0 23 0 nil 0) (7 0 23 1 nil 0) (21 0 23 2 nil 0) (10 0 23 3 nil 0) (24 0 25 0 nil 0) (29 0 25 1 nil 0) (31 0 27 0 nil 0) (26 0 27 1 nil 0) (30 0 29 0 nil 0) (36 0 30 0 nil 0) (27 0 30 2 nil 0) (32 0 31 0 nil 0))) nil 6.1))
