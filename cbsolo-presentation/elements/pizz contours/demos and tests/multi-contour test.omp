; OM File Header - Saved 2015/06/19 21:14:56
; (6.1 :patc (om-make-point 10 110) (om-make-point 469 226) (om-make-point 1550 1117) "" 183 0 "2015/06/19 16:26:14" "2015/06/19 21:14:56")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../multi-contour.omp\"") (list (quote :sound) "#P\"../../../../../../../projects/cbsolo-ws/out-files/easy-out-43.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "multi-contour test" (quote ((let ((box (om-load-boxcall (quote genfun) "EXPORT-MUSICXML" (quote export-musicxml) (quote ((om-load-inputfun (quote input-funbox) "a VOICE or POLY object" "SELF" nil))) (om-make-point 1271 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "best-pheno" (om-load-patch-abs1 "best-pheno" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 275 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 89 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 203 947) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 41 253 142 137 108 61 189 206 35 164 120 131 147 36 121 2 15 180 30 195 169 1 238 140 12 14 92 102 45 244 80 173 81 5 71 185 7 148 132 107 116 113 121 215 87 149 138 13 129 92 135 224 88 81 238 214 145 251 12 9 80 206 79) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 253 142 137 108 61 189 206 35 164 120 131 147 36 121 2 15 180 30 195 169 1 238 140 12 14 92 102 45 244 80 173 81 5 71 185 7 148 132 107 116 113 121 215 87 149 138 13 129 92 135 224 88 81 238 214 145 251 12 9 80 206 79)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "best-pheno"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "length" (om-load-patch-abs1 "length" (quote ((let ((box (om-load-boxcall (quote abstraction) "best-pheno" (om-load-patch-abs1 "best-pheno" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 275 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 89 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 295 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 420 423)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 103 160) nil nil nil "best-pheno"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 314) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 0) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 275 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 370 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 1463 477)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 70 864) nil (list 88) nil "length"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "ascent 1" (let ((copy (make-instance (quote ominstance) :name "ascent 1" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 24 2))) (setf (create-info copy) (quote ("2015/06/19 18:44:14" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 1171 406) "ascent 1" (om-make-point 124 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 160 864) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "with output arrangement" (om-load-patch-abs1 "with output arrangement" (quote ((let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" 0) (om-load-inputfun (quote input-funbox) "" "CS" 0))) (om-make-point 1090 673) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 1221 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "list" (let ((copy (make-instance (quote omlistinstance) :name "list" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 13 16) (list 19 16) (list 17 16) (list 4 4) (list 15 16) (list 15 16) (list 15 16) (list 15 16) (list 9 8) (list 4 4) (list 7 8))) (list 0 1/8 1 4200) (list 1/8 1/8 1 3500) (list 1/4 1/8 1 2800) (list 3/8 1/8 1 3600) (list 1/2 1/8 1 3100) (list 5/8 3/16 1 3900) (list 13/16 3/16 1 4400) (list 1 3/16 1 3400) (list 19/16 3/16 1 3000) (list 11/8 3/16 1 3500) (list 25/16 3/16 1 3100) (list 7/4 1/4 1 3600) (list 2 3/16 1 4700) (list 35/16 1/8 1 4300) (list 37/16 3/16 1 4000) (list 5/2 3/16 1 3800) (list 43/16 1/8 1 3600) (list 45/16 1/4 1 3200) (list 49/16 1/8 1 4900) (list 51/16 3/16 1 4200) (list 27/8 3/16 1 3300) (list 57/16 3/16 1 4300) (list 15/4 1/8 1 3800) (list 31/8 3/16 1 4600) (list 65/16 1/8 1 5100) (list 67/16 3/16 1 4200) (list 35/8 1/8 1 3600) (list 9/2 3/16 1 4400) (list 75/16 1/8 1 3700) (list 77/16 3/16 1 5000) (list 5 1/8 1 5400) (list 41/8 1/8 1 4800) (list 21/4 3/16 1 4400) (list 87/16 1/8 1 4900) (list 89/16 1/8 1 4500) (list 91/16 1/4 1 5200) (list 95/16 1/8 1 5600) (list 97/16 1/8 1 4700) (list 99/16 3/16 1 4100) (list 51/8 3/16 1 4900) (list 105/16 1/8 1 4200) (list 107/16 3/16 1 5200) (list 55/8 3/16 1 5900) (list 113/16 1/8 1 5100) (list 115/16 1/8 1 4500) (list 117/16 1/8 1 5200) (list 119/16 3/16 1 4600) (list 61/8 3/16 1 5500) (list 125/16 3/16 1 6100) (list 8 3/16 1 5000) (list 131/16 3/16 1 4500) (list 67/8 1/8 1 5200) (list 17/2 3/16 1 4700) (list 139/16 1/4 1 5400) (list 143/16 1/8 1 6400) (list 145/16 3/16 1 5400) (list 37/4 1/8 1 5000) (list 75/8 3/16 1 5500) (list 153/16 3/16 1 5100) (list 39/4 3/16 1 6000) (list 159/16 1/8 1 6500) (list 161/16 1/8 1 5600) (list 163/16 3/16 1 5200) (list 83/8 1/8 1 5900) (list 21/2 1/8 1 5400) (list 85/8 3/16 1 6300))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/19 19:30:16" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 1172 270) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "accelerating" (om-load-lisp-abspatch "accelerating" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"long enough\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (loop for sub on (mapcar #'d::region-len (d::arr-regions arr))$        while (>= (length sub) 5)$$        for goal in (interpolation 0.1875 0.13 (- (length arr) 4) 0.0)$$        sum (d::offby (average (first-n sub  5) nil) goal)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 861 523) nil (list (list 1/2 19/16 2 43/16 27/8 65/16 75/16 21/4 95/16 105/16 115/16 125/16 17/2 37/4 159/16 21/2)) "l" "accelerating"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 966 147) (om-make-point 45 30) 0.55 "0.55" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 820 186) (om-make-point 96 30) (list (quote :set) 2 4 7 9) "(:set 2 4 7 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 729 132) (om-make-point 85 30) (quote :pitch-class) ":pitch-class" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 746 279) (om-make-point 229 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "long enough" (om-load-lisp-abspatch "long enough" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"long enough\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (* (d::offby $      (length (d::arr-regions arr))$      '(42 nil)) 10000))$") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 539 185) nil nil "l" "long enough"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 966 749) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 466 150) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tsig-variety" (om-load-lisp-abspatch "tsig-variety" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"tsig-variety\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (let ((tsigs (d::get-arr-property arr :time-sig)))$    (om* 10000$       (- (length tsigs)$          (length (remove-duplicates tsigs :test 'equalp))))))$          $          ") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 415 292) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST 2" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 266 538) (om-make-point 360 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 379 100) (om-make-point 86 30) (list -700 -600) "(-700 -600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 310 383) (om-make-point 59 30) 1.0E-4 "0.0001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 138 104) (om-make-point 68 30) (list 400 nil) "(400 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 50 53) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 86 221) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 288 50) (om-make-point 111 30) (quote :signed-melodic) ":signed-melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 324 212) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 1 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (4 0 7 3 nil 0) (12 0 9 0 nil 0) (17 0 12 0 nil 0) (14 0 12 1 nil 0) (19 0 12 2 nil 0) (11 0 12 3 nil 0) (8 0 12 4 nil 0) (7 0 12 5 nil 0) (3 0 12 6 nil 0) (16 0 17 1 nil 0) (15 0 17 2 nil 0) (18 0 19 1 nil 0) (13 0 19 2 nil 0) (10 0 19 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 1450 900)) (quote nil) (om-make-point 481 198) nil (list nil) nil "with output arrangement"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 351 955) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "->audio" (om-load-patch-abs1 "->audio" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 117 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 47 86) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 112 37) (om-make-point 196 43) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Contrabass" "fp")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLER" (quote om-sampler) (quote ((om-load-inputfun (quote input-funbox) "" "OBJ" nil) (om-load-inputfun (quote input-funbox) "" "SOUND-LISTS" nil))) (om-make-point 172 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 4 0 nil 0) (2 0 4 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 391 414)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 617 824) nil (list "/Users/holbrook/Data/projects/cbsolo-ws/out-files/easy-out-43.aiff") nil "->audio"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 252 100) (om-make-point 62 30) (list 34 50) "(34 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-43.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 782 873) (om-make-point 412 170) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "projects" "cbsolo-ws" "out-files")) :device nil :host nil :name "easy-out-43" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-43.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 799 148) (om-make-point 1661 434) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 856 190) (om-make-point 76 30) (list 100 300) "(100 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 733 178) (om-make-point 81 30) (quote :signed-dx) ":signed-dx" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 797 254) (om-make-point 116 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 693 558) (om-make-point 103 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 853 381) (om-make-point 115 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first-notes" (om-load-patch-abs1 "first-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 220 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first pitch" (om-load-patch-abs1 "first pitch" (quote ((let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 187 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 90 350) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 130 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 139 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 103 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.1 nil "" (om-make-point 141 221) (om-make-point 416 562)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 168 171) (om-make-point 118 67) nil "l" "first pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 299 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 469 119) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 2 0 nil 0))) 6.1 nil "" (om-make-point 688 274) (om-make-point 584 542)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 944 265) (om-make-point 111 67) (list nil) "l" "first-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 141 376) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 219 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 95 160) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 528 533)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 622 291) nil (list nil) "l" "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 560 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1032 384) nil nil "l" (list (let ((box (om-load-boxcall (quote abstraction) "dupli penalty" (om-load-lisp-abspatch "dupli penalty" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"dupli penalty\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (lmidic)$  (let ((pcs (mapcar #'(lambda (midic)$                         (mod (/ midic 100) 12))$                     lmidic)))$    (if (< (length (remove-duplicates pcs))$         (length pcs))$      1000$    0)))") (quote ((om-load-inputfun (quote input-funbox) "" "LMIDIC" nil))) (om-make-point 267 386) (om-make-point 133 67) nil nil "dupli penalty"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 193 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 378 116) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 254 304) (om-make-point 119 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 185 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 261 487) (om-make-point 140 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 359 661) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 225 601) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (5 0 1 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (4 0 5 0 nil 0) (0 0 6 0 nil 0) (6 1 7 0 nil 0) (6 0 8 0 nil 0))) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "finalize for display" (om-load-patch-abs1 "finalize for display" (quote ((let ((box (om-load-boxcall (quote abstraction) "convert-to-16ths" (om-load-lisp-abspatch "convert-to-16ths" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"convert-to-16ths\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (append (d::arr-header arr)$          (loop for reg in (d::arr-regions arr)$                append$                (loop for onset from (d::region-start reg) by 1/16$$                      collect$                      `(,onset$                        1/16$                        ,@(nthcdr 2 reg))))))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 150 225) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 86 285) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 188 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 50 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 174 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 313 410)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 177 110) nil nil nil "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 496) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 143 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 4 0 nil 0))) 6.1 nil "" (om-make-point 845 479) (om-make-point 931 765)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 311 172) nil (list nil) "l" "finalize for display"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 64 661) (om-make-point 1388 123) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 66 235 179 23 3 252 9 161 64 107 205 68 127 34 69 37 241 49 243 230 70 81 209 100 146 38 208 202 76 244 166 117 63 243 173 229 59 5 29 221 173 135 39 119 9 124 78 129 125 110 71 131 251 29 183 44 168 196 234 57 14 190 31 24 86 109 246 43 193 117 116 174 97 45 201 78 238 29 190 206 148 180 133 2 102 148 89 73 26 219 104 200 146 83 91 234 86 64 89 108 107 65 75 4 253 8 255 133 77 133 243 222 197 161 214 82 114 117 64 195 54 132 45 224 181 249 103 42 211 79 117 106 67 193 116 123 40 218 186 6 206 139 221 17 236 245 116) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 66 235 179 23 3 252 9 161 64 107 205 68 127 34 69 37 241 49 243 230 70 81 209 100 146 38 208 202 76 244 166 117 63 243 173 229 59 5 29 221 173 135 39 119 9 124 78 129 125 110 71 131 251 29 183 44 168 196 234 57 14 190 31 24 86 109 246 43 193 117 116 174 97 45 201 78 238 29 190 206 148 180 133 2 102 148 89 73 26 219 104 200 146 83 91 234 86 64 89 108 107 65 75 4 253 8 255 133 77 133 243 222 197 161 214 82 114 117 64 195 54 132 45 224 181 249 103 42 211 79 117 106 67 193 116 123 40 218 186 6 206 139 221 17 236 245 116)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 2564.3914 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 17 186 215 204 91 227 152 167 136 61 90 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 223 195 36 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 133 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 36 65 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 17 186 215 204 91 227 152 167 136 61 90 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 223 195 36 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 133 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 36 65 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 2564.3943 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 13 190 91 204 227 215 152 167 136 61 107 254 185 185 198 1 124 85 96 13 180 201 74 51 180 157 91 95 18 163 9 136 229 13 90 169 53 38 230 199 162 179 65 166 123 193 160 115 108 131 121 169 18 213 126 175 196 57 12 115 105 207 210 142 4 173 45 8 139 222 202 50 187 114 124 87 40 151 137 154 127 246 159 161 28 120 189 19 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 13 190 91 204 227 215 152 167 136 61 107 254 185 185 198 1 124 85 96 13 180 201 74 51 180 157 91 95 18 163 9 136 229 13 90 169 53 38 230 199 162 179 65 166 123 193 160 115 108 131 121 169 18 213 126 175 196 57 12 115 105 207 210 142 4 173 45 8 139 222 202 50 187 114 124 87 40 151 137 154 127 246 159 161 28 120 189 19 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 2564.3977 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 17 186 227 204 91 215 152 167 136 61 107 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 65 166 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 115 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 178 23 44 165 166 202 241 84 25 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 4 224 49 230 49 42 136 120 224 195 146 11 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 17 186 227 204 91 215 152 167 136 61 107 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 65 166 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 115 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 178 23 44 165 166 202 241 84 25 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 4 224 49 230 49 42 136 120 224 195 146 11 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 2564.3985 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 17 186 215 204 91 167 152 227 136 61 90 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 195 36 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 133 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 36 65 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 17 186 215 204 91 167 152 227 136 61 90 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 195 36 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 133 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 36 65 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 2564.3987 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 229 139 21 215 181 5 160 91 167 151 228 26 107 136 254 185 185 198 1 245 136 72 13 41 85 98 51 180 85 182 95 164 18 230 240 165 8 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 169 4 142 24 8 139 222 202 50 187 114 124 87 126 151 137 154 127 246 159 161 118 28 189 109 208 170 19 44 25 183 172 241 84 165 202 237 69 114 237 18 45 22 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 120 146 11 62 204 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 229 139 21 215 181 5 160 91 167 151 228 26 107 136 254 185 185 198 1 245 136 72 13 41 85 98 51 180 85 182 95 164 18 230 240 165 8 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 169 4 142 24 8 139 222 202 50 187 114 124 87 126 151 137 154 127 246 159 161 118 28 189 109 208 170 19 44 25 183 172 241 84 165 202 237 69 114 237 18 45 22 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 49 42 136 195 224 120 146 11 62 204 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2564.4002 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 178 17 186 109 56 91 167 151 228 26 107 136 254 185 185 198 1 245 85 96 13 41 136 72 51 180 85 182 95 164 18 230 240 165 8 90 169 53 38 230 199 162 179 65 166 123 115 106 247 108 134 121 169 18 213 126 175 196 57 12 115 105 137 45 169 4 142 24 8 139 222 202 50 187 114 124 87 126 151 137 152 129 246 159 161 28 170 189 109 208 120 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 234 123 66 66 36 85 54 135 128 118 58 240 83 29 158 13 41 4 77 222 49 230 49 42 136 195 224 120 146 11 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 178 17 186 109 56 91 167 151 228 26 107 136 254 185 185 198 1 245 85 96 13 41 136 72 51 180 85 182 95 164 18 230 240 165 8 90 169 53 38 230 199 162 179 65 166 123 115 106 247 108 134 121 169 18 213 126 175 196 57 12 115 105 137 45 169 4 142 24 8 139 222 202 50 187 114 124 87 126 151 137 152 129 246 159 161 28 170 189 109 208 120 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 234 123 66 66 36 85 54 135 128 118 58 240 83 29 158 13 41 4 77 222 49 230 49 42 136 195 224 120 146 11 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 2564.4007 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 13 190 91 204 227 215 254 119 184 61 107 152 185 185 198 1 124 85 96 13 180 201 72 51 180 157 91 95 18 163 9 206 159 13 90 169 53 38 230 25 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 142 4 169 24 8 139 220 202 50 187 114 124 87 126 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 147 172 237 69 114 237 18 45 232 125 82 54 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 53 38 136 120 224 195 146 11 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 13 190 91 204 227 215 254 119 184 61 107 152 185 185 198 1 124 85 96 13 180 201 72 51 180 157 91 95 18 163 9 206 159 13 90 169 53 38 230 25 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 142 4 169 24 8 139 220 202 50 187 114 124 87 126 151 137 40 127 246 159 161 28 120 189 109 208 170 19 44 25 183 202 241 84 147 172 237 69 114 237 18 45 232 125 82 54 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 49 230 53 38 136 120 224 195 146 11 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2564.4014 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 178 13 190 91 204 227 215 52 11 136 61 107 254 185 185 198 1 124 85 96 13 180 201 74 51 180 157 91 95 18 163 9 206 159 13 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 163 169 18 213 126 175 196 57 12 115 105 137 24 142 4 173 45 8 139 222 202 50 187 114 124 87 40 151 137 154 127 246 159 161 28 120 189 19 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 51 228 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 178 13 190 91 204 227 215 52 11 136 61 107 254 185 185 198 1 124 85 96 13 180 201 74 51 180 157 91 95 18 163 9 206 159 13 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 163 169 18 213 126 175 196 57 12 115 105 137 24 142 4 173 45 8 139 222 202 50 187 114 124 87 40 151 137 154 127 246 159 161 28 120 189 19 208 170 19 44 25 183 202 241 84 165 172 237 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 77 222 51 228 49 42 136 195 224 172 11 146 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 2564.4029 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 21 139 171 215 183 7 158 91 167 151 228 136 107 26 254 185 185 198 1 245 85 96 13 41 136 72 51 180 85 182 95 230 18 164 241 164 8 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 142 4 173 24 8 139 222 202 50 187 114 124 87 126 151 137 154 127 246 159 161 158 120 187 109 208 170 19 44 25 183 202 241 84 165 255 237 68 114 241 18 45 232 125 66 85 36 66 54 135 128 118 58 240 83 29 158 13 8 4 77 222 54 230 49 42 28 195 224 120 146 11 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 21 139 171 215 183 7 158 91 167 151 228 136 107 26 254 185 185 198 1 245 85 96 13 41 136 72 51 180 85 182 95 230 18 164 241 164 8 90 169 53 38 230 199 162 179 65 166 123 115 160 193 108 131 121 169 18 213 126 175 196 57 12 115 105 137 45 142 4 173 24 8 139 222 202 50 187 114 124 87 126 151 137 154 127 246 159 161 158 120 187 109 208 170 19 44 25 183 202 241 84 165 255 237 68 114 241 18 45 232 125 66 85 36 66 54 135 128 118 58 240 83 29 158 13 8 4 77 222 54 230 49 42 28 195 224 120 146 11 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 2564.4048 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 205 99 5 141 194 17 186 227 204 91 215 152 167 136 61 107 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 65 166 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 115 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 183 23 44 165 166 202 241 84 25 176 233 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 4 224 49 230 49 42 136 120 224 195 146 11 62 199 133 39 53 134 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 205 99 5 141 194 17 186 227 204 91 215 152 167 136 61 107 254 188 185 198 1 124 85 96 13 180 201 94 51 180 85 163 95 18 200 9 206 164 8 90 169 53 38 230 199 162 115 65 166 123 179 160 193 108 131 121 169 18 213 126 175 196 57 12 115 169 137 45 105 4 142 24 8 139 222 202 50 187 114 212 87 22 151 137 40 127 246 159 161 28 120 189 109 208 183 23 44 165 166 202 241 84 25 176 233 69 114 237 18 45 232 125 66 66 36 85 54 135 128 118 58 240 83 29 158 13 8 4 4 224 49 230 49 42 136 120 224 195 146 11 62 199 133 39 53 134 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8))) (setf (om-darwin::generation om-darwin::ga) 748) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((19 16) (3 3 3 3 3 4)) ((15 16) (2 2 3 3 2 3)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (1.0 2 1)) (1 (1.0 3)))) ((17 16) (3 3 2 3 2 4)) ((13 16) (2 2 2 2 2 3)) ((7 8) (1 1 1 1 1 (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 2186 389) (om-make-point 357 347) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ff)) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "finalizer" (quote :finalizer) nil nil))) (om-make-point 244 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 52) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "multi-contour" (quote ("elements" "pizz contours" "multi-contour")) (quote ((om-load-inputfun (quote input-funbox) "" "num-contours" 3) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 180 236) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (20 0 1 0 nil 10) (20 0 2 0 nil 10) (20 0 4 0 nil 10) (20 0 6 0 nil 10) (13 0 6 1 nil 10) (4 0 7 0 nil 0) (7 0 9 0 nil 10) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (17 0 13 0 nil 0) (14 0 13 1 nil 0) (18 0 13 2 nil 0) (12 0 14 0 nil 0) (15 0 14 1 nil 0) (5 0 17 0 nil 0) (16 0 17 1 nil 0) (21 0 20 1 nil 0) (13 0 20 2 nil 0) (23 0 21 0 nil 0) (19 0 21 1 nil 0) (22 0 23 0 nil 0) (8 0 23 1 nil 0))) nil 6.1))