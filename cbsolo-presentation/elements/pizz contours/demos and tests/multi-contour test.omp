; OM File Header - Saved 2015/06/19 18:08:55
; (6.1 :patc (om-make-point 10 110) (om-make-point 82 330) (om-make-point 1976 1088) "" 183 0 "2015/06/19 16:26:14" "2015/06/19 18:08:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../simple evaluation.omp\"" "#P\"../multi-contour.omp\"") (list (quote :sound) "#P\"../../../../../../../projects/cbsolo-ws/out-files/easy-out-7.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "multi-contour test" (quote ((let ((box (om-load-boxcall (quote abstraction) "tsig-variety" (om-load-lisp-abspatch "tsig-variety" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"tsig-variety\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (let ((tsigs (d::get-arr-property arr :time-sig)))$    (om* 10000$       (- (length tsigs)$          (length (remove-duplicates tsigs :test 'equalp))))))$          $          ") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 797 388) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 252 100) (om-make-point 62 30) (list 34 50) "(34 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-7.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1455 885) (om-make-point 199 108) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "projects" "cbsolo-ws" "out-files")) :device nil :host nil :name "easy-out-7" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-7.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 1418 606) (om-make-point 196 43) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Contrabass" "pizzicato-l-vib")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1478 709) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 1302 709) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLER" (quote om-sampler) (quote ((om-load-inputfun (quote input-funbox) "" "OBJ" nil) (om-load-inputfun (quote input-funbox) "" "SOUND-LISTS" nil))) (om-make-point 1363 791) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 686 362) (om-make-point 59 30) 1.0E-4 "0.0001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST 2" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 699 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 561 161) (om-make-point 68 30) (list 400 nil) "(400 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 473 110) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 509 278) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1085 183) (om-make-point 76 30) (list 100 300) "(100 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1015 185) (om-make-point 39 30) (quote :dx) ":dx" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1026 247) (om-make-point 116 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 915 600) (om-make-point 103 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 1082 374) (om-make-point 115 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 802 157) (om-make-point 86 30) (list -700 -600) "(-700 -600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 889 207) (om-make-point 38 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 641 76) (om-make-point 111 30) (quote :signed-melodic) ":signed-melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 747 269) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVALUATE" (quote evaluate) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil))) (om-make-point 626 567) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first-notes" (om-load-patch-abs1 "first-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 220 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first pitch" (om-load-patch-abs1 "first pitch" (quote ((let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 187 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 90 350) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 130 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 139 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 103 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.1 nil "" (om-make-point 141 221) (om-make-point 416 562)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 168 171) (om-make-point 118 67) nil "l" "first pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 299 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 469 119) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 2 0 nil 0))) 6.1 nil "" (om-make-point 688 274) (om-make-point 584 542)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1170 260) (om-make-point 111 67) (list nil) "l" "first-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 141 376) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 219 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 95 160) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 528 533)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 880 379) nil (list nil) "l" "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 842 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1135 494) nil nil "l" (list (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 140 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 378 116) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 335 282) (om-make-point 119 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "simple evaluation" (quote ("elements" "pizz contours" "simple evaluation")) (quote ((om-load-inputfun (quote input-funbox) "" "lmidic" (list 7100 6500 7000 5800)))) (om-make-point 296 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 112 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 262 468) (om-make-point 140 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 360 642) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 226 582) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 5 0 nil 0) (3 0 6 0 nil 0) (6 1 7 0 nil 0) (6 0 8 0 nil 0))) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "finalize for display" (om-load-patch-abs1 "finalize for display" (quote ((let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 86 285) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 188 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 50 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 174 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 313 410)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 149 221/2) nil nil nil "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 98 353) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 123 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 0 nil 0))) 6.1 nil "" (om-make-point 208 536) (om-make-point 500 443)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 340 174) nil (list nil) "l" "finalize for display"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 109 753) (om-make-point 1059 170) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 65 46 233 227 219 116 9 159 175 217 252 252 92 23 153 67 146 150 215 25 114 228 129 95 138 199 119 69 64 147 153 155 133 81 1 93 22 163 112 121 140 183 238 87 144 193 28 174 77 47 125 214 217 218 220 181 58 228 56 138 174 17 42 103 181 234 179 169 90 95 66 229 8 150 74 189 93 59 63 3 91 125 204 65 170 197 236 6 237 18 193 255 209 189 113 191 134 161 79 30 87 239 82 140 250 162 28 134 161 161 66 209 74 77 175 226 231 216 118 114 86 250 122 182 51 55 148 146 238 217 227 220 226 71 46 201 25 240 140 174 198 124 95 104 187 123 135 240 170 85 26 143) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 65 46 233 227 219 116 9 159 175 217 252 252 92 23 153 67 146 150 215 25 114 228 129 95 138 199 119 69 64 147 153 155 133 81 1 93 22 163 112 121 140 183 238 87 144 193 28 174 77 47 125 214 217 218 220 181 58 228 56 138 174 17 42 103 181 234 179 169 90 95 66 229 8 150 74 189 93 59 63 3 91 125 204 65 170 197 236 6 237 18 193 255 209 189 113 191 134 161 79 30 87 239 82 140 250 162 28 134 161 161 66 209 74 77 175 226 231 216 118 114 86 250 122 182 51 55 148 146 238 217 227 220 226 71 46 201 25 240 140 174 198 124 95 104 187 123 135 240 170 85 26 143)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 1.0229035 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 226 77 87 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 226 77 87 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1.033692 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 122 237 6 206 80 247 171 231 89 45 73 7 33 125 96 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 122 237 6 206 80 247 171 231 89 45 73 7 33 125 96 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1.0548394 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 150 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 150 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1.0583644 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 7 72 89 26 38 127 237 6 206 80 247 73 231 89 45 171 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 171 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 7 72 89 26 38 127 237 6 206 80 247 73 231 89 45 171 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 171 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1.0657384 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 125 142 148 226 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1.0692749 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 228 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 225 8 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 228 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 225 8 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1.0796721 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 1.0906497 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 196 15 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 189 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 1.1016604 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 225 8 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 218 104 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 226 142 148 125 181 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 124 116 246 250 165 115 60 19 250 100 28 162 28 66 42 225 8 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 28 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 218 104 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 226 142 148 125 181 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 1.1121503 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 176 170 56) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 50 180 8 42 107 217 132 203 89 26 38 127 237 6 206 80 247 171 231 89 45 73 7 96 125 33 28 249 135 74 73 237 79 225 250 116 246 124 250 115 60 19 165 100 28 162 28 66 42 222 11 219 177 9 31 3 235 38 225 207 0 112 1 35 57 121 81 36 26 196 252 139 183 4 2 160 128 129 18 12 66 218 88 74 185 238 114 247 117 199 26 240 107 14 199 38 254 17 26 180 157 196 236 108 231 49 252 15 196 124 7 155 168 123 195 221 101 5 185 255 135 237 85 87 77 226 126 97 212 173 232 1 192 131 244 217 210 37 39 57 69 48 250 253 42 70 148 125 176 170 56)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 36) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (95/16 (((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1)) ((11 16) (3 3 2 3)) ((13 16) (2 2 3 2 2 2)) ((5 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((2 4) ((1 (1 1)) (1 (1 1)))) ((9 16) (2 3 2 2)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((3 4) ((1 (3 1)) (1 (1.0 1)) (1 (1.0 3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 2186 389) (om-make-point 357 347) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ff)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "finalizer" (quote :finalizer) nil nil))) (om-make-point 278 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 150 53) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "multi-contour" (quote ("elements" "pizz contours" "multi-contour")) (quote ((om-load-inputfun (quote input-funbox) "" "num-contours" 3) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 180 236) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (3 0 4 0 nil 0) (27 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (11 0 8 0 nil 0) (7 0 8 1 nil 0) (20 0 8 2 nil 0) (0 0 8 3 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (24 0 15 0 nil 0) (16 0 15 1 nil 0) (25 0 15 2 nil 0) (14 0 16 0 nil 0) (22 0 16 1 nil 0) (19 0 20 1 nil 0) (17 0 20 2 nil 0) (18 0 20 3 nil 0) (28 0 21 0 nil 0) (24 0 21 1 nil 0) (8 0 24 0 nil 0) (23 0 24 1 nil 0) (28 0 27 1 nil 0) (15 0 27 2 nil 0) (30 0 28 0 nil 0) (26 0 28 1 nil 0) (29 0 30 0 nil 0) (1 0 30 1 nil 0))) nil 6.1))
