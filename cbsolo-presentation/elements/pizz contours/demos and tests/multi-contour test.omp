; OM File Header - Saved 2015/06/19 20:07:54
; (6.1 :patc (om-make-point 10 110) (om-make-point 842 169) (om-make-point 1726 1124) "" 183 0 "2015/06/19 16:26:14" "2015/06/19 20:07:52")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../multi-contour.omp\"") (list (quote :sound) "#P\"../../../../../../../projects/cbsolo-ws/out-files/easy-out-31.aiff\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "multi-contour test" (quote ((let ((box (om-load-boxcall (quote abstraction) "best-pheno" (om-load-patch-abs1 "best-pheno" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 275 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 89 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 151 962) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 41 253 142 137 108 61 189 206 35 164 120 131 147 36 121 2 15 180 30 195 169 1 238 140 12 14 92 102 45 244 80 173 81 5 71 185 7 148 132 107 116 113 121 215 87 149 138 13 129 92 135 224 88 81 238 214 145 251 12 9 80 206 79) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 253 142 137 108 61 189 206 35 164 120 131 147 36 121 2 15 180 30 195 169 1 238 140 12 14 92 102 45 244 80 173 81 5 71 185 7 148 132 107 116 113 121 215 87 149 138 13 129 92 135 224 88 81 238 214 145 251 12 9 80 206 79)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "best-pheno"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVALUATE" (quote evaluate) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil))) (om-make-point 367 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "ascent 2" (let ((copy (make-instance (quote ominstance) :name "ascent 2" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (173/16 (((13 16) (2 2 2 2 2 3)) ((19 16) (3 3 3 3 3 4)) ((4 4) ((1 (3 1)) (1 (1.0 2 1)) (1 (1.0 1)) 1)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (3 1)) (1 (1.0 3)))) ((15 16) (3 2 2 3 2 3)) ((15 16) (2 2 3 2 2 4)) ((15 16) (2 2 3 3 2 3)) ((17 16) (3 2 3 3 3 3)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 2)) ((15 16) (2 2 2 3 3 3)) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote ("2015/06/19 19:10:08" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 77 465) "ascent 2" (om-make-point 109 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "length" (om-load-patch-abs1 "length" (quote ((let ((box (om-load-boxcall (quote abstraction) "best-pheno" (om-load-patch-abs1 "best-pheno" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 275 298) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 89 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 166 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 295 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 420 423)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 103 160) nil nil nil "best-pheno"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 314) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 0) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 275 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 370 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 1463 477)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 70 864) nil (list 88) nil "length"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "ascent 1" (let ((copy (make-instance (quote ominstance) :name "ascent 1" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (25/4 (((3 4) ((1 (1 1)) (1 (1.0 3)) 1)) ((15 16) (2 3 2 2 3 3)) ((9 16) (2 2 2 3)) ((11 16) (3 2 3 3)) ((5 8) (1 1 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((13 16) (3 3 3 4)) ((7 8) (1 1 1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff)) 24 2))) (setf (create-info copy) (quote ("2015/06/19 18:44:14" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 43 377) "ascent 1" (om-make-point 124 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 191 871) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "with output arrangement" (om-load-patch-abs1 "with output arrangement" (quote ((let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" 0) (om-load-inputfun (quote input-funbox) "" "CS" 0))) (om-make-point 1090 673) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 1221 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "list" (let ((copy (make-instance (quote omlistinstance) :name "list" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 13 16) (list 19 16) (list 17 16) (list 4 4) (list 15 16) (list 15 16) (list 15 16) (list 15 16) (list 9 8) (list 4 4) (list 7 8))) (list 0 1/8 1 4200) (list 1/8 1/8 1 3500) (list 1/4 1/8 1 2800) (list 3/8 1/8 1 3600) (list 1/2 1/8 1 3100) (list 5/8 3/16 1 3900) (list 13/16 3/16 1 4400) (list 1 3/16 1 3400) (list 19/16 3/16 1 3000) (list 11/8 3/16 1 3500) (list 25/16 3/16 1 3100) (list 7/4 1/4 1 3600) (list 2 3/16 1 4700) (list 35/16 1/8 1 4300) (list 37/16 3/16 1 4000) (list 5/2 3/16 1 3800) (list 43/16 1/8 1 3600) (list 45/16 1/4 1 3200) (list 49/16 1/8 1 4900) (list 51/16 3/16 1 4200) (list 27/8 3/16 1 3300) (list 57/16 3/16 1 4300) (list 15/4 1/8 1 3800) (list 31/8 3/16 1 4600) (list 65/16 1/8 1 5100) (list 67/16 3/16 1 4200) (list 35/8 1/8 1 3600) (list 9/2 3/16 1 4400) (list 75/16 1/8 1 3700) (list 77/16 3/16 1 5000) (list 5 1/8 1 5400) (list 41/8 1/8 1 4800) (list 21/4 3/16 1 4400) (list 87/16 1/8 1 4900) (list 89/16 1/8 1 4500) (list 91/16 1/4 1 5200) (list 95/16 1/8 1 5600) (list 97/16 1/8 1 4700) (list 99/16 3/16 1 4100) (list 51/8 3/16 1 4900) (list 105/16 1/8 1 4200) (list 107/16 3/16 1 5200) (list 55/8 3/16 1 5900) (list 113/16 1/8 1 5100) (list 115/16 1/8 1 4500) (list 117/16 1/8 1 5200) (list 119/16 3/16 1 4600) (list 61/8 3/16 1 5500) (list 125/16 3/16 1 6100) (list 8 3/16 1 5000) (list 131/16 3/16 1 4500) (list 67/8 1/8 1 5200) (list 17/2 3/16 1 4700) (list 139/16 1/4 1 5400) (list 143/16 1/8 1 6400) (list 145/16 3/16 1 5400) (list 37/4 1/8 1 5000) (list 75/8 3/16 1 5500) (list 153/16 3/16 1 5100) (list 39/4 3/16 1 6000) (list 159/16 1/8 1 6500) (list 161/16 1/8 1 5600) (list 163/16 3/16 1 5200) (list 83/8 1/8 1 5900) (list 21/2 1/8 1 5400) (list 85/8 3/16 1 6300))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/19 19:30:16" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 1172 270) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "accelerating" (om-load-lisp-abspatch "accelerating" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"long enough\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (loop for sub on (mapcar #'d::region-len (d::arr-regions arr))$        while (>= (length sub) 5)$$        for goal in (interpolation 0.1875 0.11 (- (length arr) 4) 0.0)$$        sum (d::offby (average (first-n sub  5) nil) goal)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 861 524) nil (list (list 1/2 19/16 2 43/16 27/8 65/16 75/16 21/4 95/16 105/16 115/16 125/16 17/2 37/4 159/16 21/2)) "l" "accelerating"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 966 147) (om-make-point 45 30) 0.55 "0.55" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 820 186) (om-make-point 96 30) (list (quote :set) 2 4 7 9) "(:set 2 4 7 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 729 132) (om-make-point 85 30) (quote :pitch-class) ":pitch-class" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 746 279) (om-make-point 229 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "long enough" (om-load-lisp-abspatch "long enough" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"long enough\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (* (d::offby $      (length (d::arr-regions arr))$      '(65 nil)) 10000))$") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 539 185) nil nil "l" "long enough"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 966 749) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 466 150) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tsig-variety" (om-load-lisp-abspatch "tsig-variety" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"tsig-variety\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (let ((tsigs (d::get-arr-property arr :time-sig)))$    (om* 10000$       (- (length tsigs)$          (length (remove-duplicates tsigs :test 'equalp))))))$          $          ") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 415 292) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST 2" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 266 538) (om-make-point 360 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 379 100) (om-make-point 86 30) (list -700 -600) "(-700 -600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 310 383) (om-make-point 59 30) 1.0E-4 "0.0001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 138 104) (om-make-point 68 30) (list 400 nil) "(400 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 50 53) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 86 221) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 288 50) (om-make-point 111 30) (quote :signed-melodic) ":signed-melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 324 212) (om-make-point 154 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 1 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (4 0 7 3 nil 0) (0 0 9 0 nil 0) (17 0 12 0 nil 0) (14 0 12 1 nil 0) (19 0 12 2 nil 0) (11 0 12 3 nil 0) (8 0 12 4 nil 0) (7 0 12 5 nil 0) (3 0 12 6 nil 0) (16 0 17 1 nil 0) (15 0 17 2 nil 0) (18 0 19 1 nil 0) (13 0 19 2 nil 0) (10 0 19 3 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 1450 900)) (quote nil) (om-make-point 481 198) nil (list nil) nil "with output arrangement"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 304 953) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "->audio" (om-load-patch-abs1 "->audio" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 117 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 47 86) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 111 37) (om-make-point 196 43) (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "Contrabass" "pizzicato-l-vib")) :device :unspecific :host :unspecific :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLER" (quote om-sampler) (quote ((om-load-inputfun (quote input-funbox) "" "OBJ" nil) (om-load-inputfun (quote input-funbox) "" "SOUND-LISTS" nil))) (om-make-point 172 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 4 0 nil 0) (2 0 4 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 391 414)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 507 845) nil (list "/Users/holbrook/Data/projects/cbsolo-ws/out-files/easy-out-32.aiff") nil "->audio"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "duration-blocks" (om-load-lisp-abspatch "duration-blocks" 6.1 "") (quote nil) (om-make-point 813 63) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 252 100) (om-make-point 62 30) (list 34 50) "(34 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-31.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 704 870) (om-make-point 199 108) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "projects" "cbsolo-ws" "out-files")) :device nil :host nil :name "easy-out-31" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-31.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 799 148) (om-make-point 1661 434) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 856 190) (om-make-point 76 30) (list 100 300) "(100 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 733 178) (om-make-point 81 30) (quote :signed-dx) ":signed-dx" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 797 254) (om-make-point 116 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 693 558) (om-make-point 103 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 853 381) (om-make-point 115 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first-notes" (om-load-patch-abs1 "first-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 220 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first pitch" (om-load-patch-abs1 "first pitch" (quote ((let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 187 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 90 350) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 130 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 139 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 103 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.1 nil "" (om-make-point 141 221) (om-make-point 416 562)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 168 171) (om-make-point 118 67) nil "l" "first pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 299 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 469 119) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 2 0 nil 0))) 6.1 nil "" (om-make-point 688 274) (om-make-point 584 542)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 944 265) (om-make-point 111 67) (list nil) "l" "first-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 141 376) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 219 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 95 160) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 528 533)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 622 291) nil (list nil) "l" "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 560 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1032 384) nil nil "l" (list (let ((box (om-load-boxcall (quote abstraction) "dupli penalty" (om-load-lisp-abspatch "dupli penalty" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"dupli penalty\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (lmidic)$  (let ((pcs (mapcar #'(lambda (midic)$                         (mod (/ midic 100) 12))$                     lmidic)))$    (if (< (length (remove-duplicates pcs))$         (length pcs))$      1000$    0)))") (quote ((om-load-inputfun (quote input-funbox) "" "LMIDIC" nil))) (om-make-point 267 386) (om-make-point 133 67) nil nil "dupli penalty"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 193 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 378 116) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 254 304) (om-make-point 119 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 185 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 261 487) (om-make-point 140 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 359 661) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 225 601) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (5 0 1 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (4 0 5 0 nil 0) (0 0 6 0 nil 0) (6 1 7 0 nil 0) (6 0 8 0 nil 0))) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "finalize for display" (om-load-patch-abs1 "finalize for display" (quote ((let ((box (om-load-boxcall (quote abstraction) "concatenate" (om-load-patch-abs1 "concatenate" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 86 285) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 188 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 50 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 174 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 313 410)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 149 221/2) nil nil nil "concatenate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 98 353) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 225 10) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 123 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 0 nil 0))) 6.1 nil "" (om-make-point 208 536) (om-make-point 500 443)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 311 172) nil (list nil) "l" "finalize for display"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 84 687) (om-make-point 1599 139) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 224 246 195 184 69 194 14 117 238 253 178 154 197 252 241 217 117 168 79 23 60 194 138 51 237 200 119 159 109 26 52 219 41 250 163 79 75 203 49 241 228 203 122 204 94 243 14 90 210 27 241 80 201 189 189 31 191 91 148 13 217 168 225 225 127 20 147 92 228 233 209 124 108 8 140 141 71 240 14 137 212 53 124 245 220 188 10 123 183 226 167 175 28 196 96 57 130 90 237 58 0 106 93 241 40 204 192 153 121 43 60 20 120 180 138 196 165 67 186 152 237 73 30 233 61 219 93 48 88 79 226 107 57 197 232 175 48 129 160 97 77 53 81 209 240 207 5 1 61 152 180 178 60 28 107 165 36 217 215 252 65 57 220 122 113 101 75 166 91 201 166 128 82 76 161 133 60 86 226 255 56 9 86 144 29 73 179 56 77 252 216 220 105 9 207 135 159 114 117 13 91 227 60 208 191 10 204 59 182 90 92 40 213 212 29 164 229 73 250 4 191 27 104 36 137 188 34 13 171 81 119) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 246 195 184 69 194 14 117 238 253 178 154 197 252 241 217 117 168 79 23 60 194 138 51 237 200 119 159 109 26 52 219 41 250 163 79 75 203 49 241 228 203 122 204 94 243 14 90 210 27 241 80 201 189 189 31 191 91 148 13 217 168 225 225 127 20 147 92 228 233 209 124 108 8 140 141 71 240 14 137 212 53 124 245 220 188 10 123 183 226 167 175 28 196 96 57 130 90 237 58 0 106 93 241 40 204 192 153 121 43 60 20 120 180 138 196 165 67 186 152 237 73 30 233 61 219 93 48 88 79 226 107 57 197 232 175 48 129 160 97 77 53 81 209 240 207 5 1 61 152 180 178 60 28 107 165 36 217 215 252 65 57 220 122 113 101 75 166 91 201 166 128 82 76 161 133 60 86 226 255 56 9 86 144 29 73 179 56 77 252 216 220 105 9 207 135 159 114 117 13 91 227 60 208 191 10 204 59 182 90 92 40 213 212 29 164 229 73 250 4 191 27 104 36 137 188 34 13 171 81 119)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.9088888 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 173 190 62 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 25 110 166 152 43 149 203 10 253 202 8 71 111 66 13 30 28 47 125 23 17 253 217 108 26 41 24 173 112 170 144 246 12 105 233 49 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 173 190 62 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 25 110 166 152 43 149 203 10 253 202 8 71 111 66 13 30 28 47 125 23 17 253 217 108 26 41 24 173 112 170 144 246 12 105 233 49 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.93662704 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 44 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 44 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.9572619 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 56 55 97 246 253 213 103 221 234 177 49 107 37 249 114 186 236 129 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 234 12 105 233 246 66 123 123 98 223 91 185 159 76 231 105 77 100 255 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 56 55 97 246 253 213 103 221 234 177 49 107 37 249 114 186 236 129 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 234 12 105 233 246 66 123 123 98 223 91 185 159 76 231 105 77 100 255 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.9643651 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.96543646 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 45 173 221 134 221 97 151 59 56 55 100 246 253 213 103 221 234 177 49 114 37 249 129 186 104 239 191 120 178 64 74 143 121 15 140 242 116 99 122 119 64 130 194 26 93 15 224 124 180 84 160 143 45 24 246 188 33 76 253 232 218 16 25 110 166 152 43 149 203 10 253 202 8 71 111 66 13 30 28 51 121 23 17 253 217 108 26 41 24 173 112 170 144 246 12 105 233 49 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 45 173 221 134 221 97 151 59 56 55 100 246 253 213 103 221 234 177 49 114 37 249 129 186 104 239 191 120 178 64 74 143 121 15 140 242 116 99 122 119 64 130 194 26 93 15 224 124 180 84 160 143 45 24 246 188 33 76 253 232 218 16 25 110 166 152 43 149 203 10 253 202 8 71 111 66 13 30 28 51 121 23 17 253 217 108 26 41 24 173 112 170 144 246 12 105 233 49 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.97138894 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 173 190 62 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 173 190 62 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.975 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 98 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 17 191 238 150 6 106 231 120 154 254 100 149 69 124 240 62 190 184 210 131 224 97 151 59 56 55 100 246 253 213 103 221 234 177 49 114 37 249 129 186 104 239 191 3 39 64 143 74 120 15 140 242 116 99 122 119 64 130 194 26 93 230 224 64 185 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 10 152 43 149 203 25 253 11 202 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 147 46 12 105 233 246 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 98 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 17 191 238 150 6 106 231 120 154 254 100 149 69 124 240 62 190 184 210 131 224 97 151 59 56 55 100 246 253 213 103 221 234 177 49 114 37 249 129 186 104 239 191 3 39 64 143 74 120 15 140 242 116 99 122 119 64 130 194 26 93 230 224 64 185 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 10 152 43 149 203 25 253 11 202 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 147 46 12 105 233 246 66 123 123 98 223 91 185 159 76 231 105 77 100 1 14 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.9771826 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 17 191 238 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 152 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 10 72 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 231 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 21 206 87 202 117 207 102 141 120 237 75 190 65 123 28 36 164 76 52 45 254 153 94 101 137 17 191 238 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 152 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 10 72 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 231 42 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.9809921 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 105 143 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 105 143 115 237 75 190 65 123 28 36 164 117 11 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 15 224 69 180 84 143 160 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.98269845 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 55 20 219 34 87 199 70 95 165 75 221 176 149 236 87 41 174 19 203 129 87 196 206 87 202 117 207 102 146 115 237 75 190 65 123 28 36 164 76 52 45 254 148 94 101 137 38 217 191 150 6 106 231 120 154 254 100 149 69 124 240 62 190 173 221 131 224 100 151 59 59 52 97 246 253 213 103 221 234 177 49 114 37 249 129 186 236 107 191 3 39 121 74 143 64 15 140 242 116 99 122 119 64 130 194 26 93 230 224 69 180 84 160 143 45 24 246 188 33 76 253 232 218 16 166 110 25 152 43 149 10 203 253 202 11 71 111 66 13 30 28 51 121 23 17 253 217 112 26 36 29 173 112 170 144 49 12 105 233 246 66 123 123 98 223 91 185 159 76 14 105 77 100 1 122 151 80 42 228 102 199 203 125 181 35 207 62 49 241 30 61 26 106 18 115 52 233 40 29 102 72 84 151 73 79 199 155 112 109 175 54 100 16 227 192 96 204 242 10 125 104 78 230 61 240 177 175 82 241 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 246) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (85/8 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 2)) ((17 16) (2 3 3 2 3 4)) ((4 4) ((1 (1 1)) (1 (1.0 2 1)) (1 (1.0 1)) 1)) ((15 16) (2 3 2 3 2 3)) ((4 4) ((1 (3 1)) (1 (1.0 3)) (1 (3 1)) (1 (1.0 3)))) ((15 16) (2 2 3 2 3 3)) ((17 16) (2 3 3 3 2 4)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) 1)) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((13 16) (2 2 2 2 2 3)) ((13 16) (2 2 2 2 2 3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 2186 389) (om-make-point 357 347) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ff)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "finalizer" (quote :finalizer) nil nil))) (om-make-point 244 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 52) (om-make-point 34 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "multi-contour" (quote ("elements" "pizz contours" "multi-contour")) (quote ((om-load-inputfun (quote input-funbox) "" "num-contours" 3) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 180 236) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 0 0 nil 0) (0 0 1 0 nil 0) (19 0 1 1 nil 0) (22 0 3 0 nil 0) (22 0 5 0 nil 0) (22 0 7 0 nil 0) (15 0 7 1 nil 0) (5 0 8 0 nil 0) (8 0 11 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (19 0 15 0 nil 0) (16 0 15 1 nil 0) (20 0 15 2 nil 0) (14 0 16 0 nil 0) (17 0 16 1 nil 0) (6 0 19 0 nil 0) (18 0 19 1 nil 0) (23 0 22 1 nil 0) (19 0 22 2 nil 0) (25 0 23 0 nil 0) (21 0 23 1 nil 0) (24 0 25 0 nil 0) (10 0 25 1 nil 0))) nil 6.1))
