; OM File Header - Saved 2015/06/19 18:08:55
; (6.1 :patc (om-make-point 226 60) (om-make-point 733 672) (om-make-point 852 746) "" 183 0 "2015/06/19 16:23:23" "2015/06/19 18:08:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"single-rhythmic-contour.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "multi-contour" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 586 299) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 444 394) (om-make-point 180 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 547 191) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 413 205) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 467 152) (om-make-point 34 30) 14 "14" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 14) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 433 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" 0) (om-load-inputfun (quote input-funbox) "LIST" "LIST" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 219 509) (om-make-point 110 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-TRANSPOSE" (quote om-darwin::arr-transpose) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "DELTA" "DELTA" nil))) (om-make-point 58 321) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "range" 1 (om-make-point 308 25) "" "range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-contours" 0 (om-make-point 78 56) "" "num-contours" 3 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 332 619) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 160 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "single-rhythmic-contour" (quote ("elements" "pizz contours" "single-rhythmic-contour")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 266 123) nil (list (list (list 0 1/4 1 7000) (list 1/4 3/16 1 5800) (list 7/16 1/8 1 6300) (list 9/16 1/8 1 5700) (list 11/16 1/8 1 5800) (list 13/16 1/8 1 5100))) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (7 0 6 0 nil 0) (11 0 6 1 nil 0) (1 0 6 2 nil 0) (6 0 10 0 nil 0) (12 0 11 0 nil 0) (9 0 11 1 nil 0) (8 0 12 0 nil 0))) nil 6.1))
