; OM File Header - Saved 2015/06/12 15:23:51
; (6.1 :patc (om-make-point 226 10) (om-make-point 1056 149) (om-make-point 1009 1035) "" 183 0 "2015/06/10 14:58:23" "2015/06/12 15:23:51")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"aiff->fundamental.omp\"" "#P\"analyze sample.omp\"") (list (quote :sound) "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.11.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "make analysis db" (quote ((let ((box (om-load-boxinstance "9" (let ((copy (make-instance (quote ominstance) :name "9" :icon 287))) (setf (instance copy) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.11" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.11.aif") (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil))) (setf (create-info copy) (quote ("2015/06/12 15:14:25" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 0 0) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "9" (let ((copy (make-instance (quote ominstance) :name "9" :icon 287))) (setf (instance copy) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.11" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.11.aif") (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil))) (setf (create-info copy) (quote ("2015/06/12 15:14:25" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 0 0) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 365 542) (om-make-point 120 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 234 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "aiff->fundamental 2" (quote ("elements" "prepared-piano arrangement" "aiff->fundamental")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 503 168) nil (list nil) "l" "aiff->fundamental" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 79 201) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 168 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 122 92) nil (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "projects" "cbsolo-ws" "in-files" "Prepared Pianos")) :device :unspecific :host nil :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 495 372) (om-make-point 120 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "analyze sample" (quote ("elements" "prepared-piano arrangement" "analyze sample")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 375 96) nil (list nil) "l" "analyze sample" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 3 0 nil 0) (6 0 3 1 nil 0) (7 0 6 0 nil 0) (9 0 8 0 nil 0))) nil 6.1))