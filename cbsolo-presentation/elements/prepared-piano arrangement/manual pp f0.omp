; OM File Header - Saved 2015/06/12 16:16:36
; (6.1 :patc (om-make-point 10 60) (om-make-point 58 50) (om-make-point 916 895) "" 183 0 "2015/06/12 15:02:50" "2015/06/12 16:16:36")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.02.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.03.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.04.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.05.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.06.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.07.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.08.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.09.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.10.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.11.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.12.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.13.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.14.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.15.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.16.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.17.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.18.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.19.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.20.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.21.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.22.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.23.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.24.aif\"" "#P\"../../in-files/Prepared Pianos/PR.P.10_RUBBER_STACC/PR.P.10.25.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "manual pp f0" (quote ((let ((box (om-load-boxinstance "list" (let ((copy (make-instance (quote omlistinstance) :name "list" :icon 129))) (setf (instance copy) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.02" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.02.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.03" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.03.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.04" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.04.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.05" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.05.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.06" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.06.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.07" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.07.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.08" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.08.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.09" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.09.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.10" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.10.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.11" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.11.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.12" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.12.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.13" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.13.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.14" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.14.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.15" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.15.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.16" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.16.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.17" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.17.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.18" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.18.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.19" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.19.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.20" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.20.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.21" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.21.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.22" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.22.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.23" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.23.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.24" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.24.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "Prepared Pianos" "PR.P.10_RUBBER_STACC")) :device :unspecific :host :unspecific :name "PR.P.10.25" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PR.P.10.25.aif") (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2015/06/12 15:14:24" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 451 673) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 248 344) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 134 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 50 188) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 373 469)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 207 413) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 413 391) (om-make-point 125 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 405 569) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-DIRECTORY-DIALOG" (quote om-choose-directory-dialog) (quote nil) (om-make-point 179 48) nil (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "projects" "cbsolo-ws" "in-files" "Prepared Pianos")) :device :unspecific :host nil :name nil :type nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 225 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-DIRECTORY" (quote om-directory) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil))) (om-make-point 136 157) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 291 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 2 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0))) nil 6.1))