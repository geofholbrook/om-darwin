; OM File Header - Saved 2015/06/08 15:47:47
; (6.050102 :patc (om-make-point 108 109) (om-make-point 256 0) (om-make-point 842 756) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "../out-files/snd6232230.aiff" "../../../sounds/sounds-hebus/voices/spoken/FemVoice.aif") (list (quote :abstraction) "f0->binary-bpf.oml" "f0-estimate.oml"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "filter-for-confidence" (quote ((om-load-boxcomment "comment" (om-make-point 252 57) (quote "concatenate all the good f0 zones of a sound file, return the sound with markers") "" (om-make-point 151 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 416 663) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil))) (om-make-point 84 534) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 200 584) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "f0->binary-bpf 2" (quote ("elements" "f0->binary-bpf")) (quote ((om-load-inputfun (quote input-funbox) "" "F0-SDIF" nil) (om-load-inputfun (quote input-funbox) "" "Y-THRESH" nil))) (om-make-point 260 204) nil nil nil "f0->binary-bpf" 1) (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 384 476) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 307 439) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 526) (om-make-point 74 43) nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "begin time (ms)" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time (ms)" "END" 1000))) (om-make-point 19 427) (om-make-point 228 51) nil "l" nil 1) (om-load-editor-box1 "snd6232230.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 270 623) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snd6232230" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote (0 0.48700002 0.78900004 1.102 1.59 2.1009999 2.6239999 3.1109999 3.495 4.133 4.737 5.3529997 5.957 6.6299996 7.187 7.4309993 7.627999 7.8249993 8.046 8.231999 8.313 8.429 8.545 8.603)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snd6232230.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 836 533) (om-make-point 82 14) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 525 485) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 533 552) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 616 498) (om-make-point 78 35) nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 489 374) (om-make-point 81 59) nil nil nil 2))) (setf (numouts box) 2) box) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 384 349) nil nil nil nil 1) (om-load-boxin "minimum-length" 4 (om-make-point 509 252) "" "minimum-length" 0.05 nil) (om-load-boxin "threshold" 3 (om-make-point 581 141) "" "threshold" 0.9 nil) (om-load-boxin "max-freq" 2 (om-make-point 554 21) "" "max-freq" 300 nil) (om-load-boxcall (quote patch-box) "f0-estimate" (quote ("elements" "f0-estimate")) (quote ((om-load-inputfun (quote input-funbox) "" "SND" nil) (om-load-inputfun (quote input-funbox) "" "MIN" nil) (om-load-inputfun (quote input-funbox) "" "MAX" nil))) (om-make-point 355 113) nil nil nil nil 1) (om-load-boxin "min-freq" 1 (om-make-point 421 0) "" "min-freq" 150 nil) (om-load-boxin "sound-file" 0 (om-make-point 80 18) "" "sound-file" (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "geofholbrook" "Data" "sounds" "sounds-hebus" "voices" "spoken")) :device nil :host nil :name "FemVoice" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "FemVoice.aif") (set-tonalite newobj nil) newobj) nil) (om-load-boxcall (quote abstraction) "good-zones" (om-load-lisp-abspatch "good-zones" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"zones\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (bpf01 min-length)$  ;; bpf with values of 0 and 1$  ;; extract zones with value 1$$  (let (result start)$    (loop for x in (x-points bpf01)$          for y in (y-points bpf01)$          $          do$          (if (and (= y 1) (null start))$              (setf start x)$            (when (and (= y 0) start)$              (when (>= (- x start) min-length)$                (push (list start x) result))$              (setf start nil))))$    (nreverse result)))") (quote ((om-load-inputfun (quote input-funbox) "" "BPF01" nil) (om-load-inputfun (quote input-funbox) "" "MIN-LENGTH" nil))) (om-make-point 231 305) (om-make-point 108 67) nil nil "good-zones") (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 121 197) (om-make-point 129 67) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.012 0.023 0.035 0.046 0.058 0.07 0.081 0.093 0.105 0.116 0.128 0.139 0.151 0.163 0.174 0.186 0.197 0.209 0.221 0.232 0.244 0.255 0.267 0.279 0.29 0.302 0.313 0.325 0.337 0.348 0.36 0.372 0.383 0.395 0.406 0.418 0.43 0.441 0.453 0.464 0.476 0.488 0.499 0.511 0.522 0.534 0.546 0.557 0.569 0.581 0.592 0.604 0.615 0.627 0.639 0.65 0.662 0.673 0.685 0.697 0.708 0.72 0.731 0.743 0.755 0.766 0.778 0.789 0.801 0.813 0.824 0.836 0.848 0.859 0.871 0.882 0.894 0.906 0.917 0.929 0.94 0.952 0.964 0.975 0.987 0.998 1.01 1.022 1.033 1.045 1.057 1.068 1.08 1.091 1.103 1.115 1.126 1.138 1.149 1.161 1.173 1.184 1.196 1.207 1.219 1.231 1.242 1.254 1.265 1.277 1.289 1.3 1.312 1.324 1.335 1.347 1.358 1.37 1.382 1.393 1.405 1.416 1.428 1.44 1.451 1.463 1.474 1.486 1.498 1.509 1.521 1.533 1.544 1.556 1.567 1.579 1.591 1.602 1.614 1.625 1.637 1.649 1.66 1.672 1.683 1.695 1.707 1.718 1.73 1.742 1.753 1.765 1.776 1.788 1.8 1.811 1.823 1.834 1.846 1.858 1.869 1.881 1.892 1.904 1.916 1.927 1.939 1.95 1.962 1.974 1.985 1.997 2.009 2.02 2.032 2.043 2.055 2.067 2.078 2.09 2.101 2.113 2.125 2.136 2.148 2.159 2.171 2.183 2.194 2.206 2.218 2.229 2.241 2.252 2.264 2.276 2.287 2.299 2.31 2.322 2.334 2.345 2.357 2.368 2.38 2.392 2.403 2.415 2.426 2.438 2.45 2.461 2.473 2.485 2.496 2.508 2.519 2.531 2.543 2.554 2.566 2.577 2.589 2.601 2.612 2.624 2.635 2.647 2.659 2.67 2.682 2.694 2.705 2.717 2.728 2.74 2.752 2.763 2.775 2.786 2.798 2.81 2.821 2.833 2.844 2.856 2.868 2.879 2.891 2.903 2.914 2.926 2.937 2.949 2.961 2.972 2.984 2.995 3.007 3.019 3.03 3.042 3.053 3.065 3.077 3.088 3.1 3.111 3.123 3.135 3.146 3.158 3.17 3.181 3.193 3.204 3.216 3.228 3.239 3.251 3.262 3.274 3.286 3.297 3.309 3.32 3.332 3.344 3.355 3.367 3.379 3.39 3.402 3.413 3.425 3.437 3.448 3.46 3.471 3.483 3.495 3.506 3.518 3.529 3.541 3.553 3.564 3.576 3.587 3.599 3.611 3.622 3.634 3.646 3.657 3.669 3.68 3.692 3.704 3.715 3.727 3.738 3.75 3.762 3.773 3.785 3.796 3.808 3.82 3.831 3.843 3.855 3.866 3.878 3.889 3.901 3.913 3.924 3.936 3.947 3.959 3.971 3.982 3.994 4.005 4.017 4.029 4.04 4.052 4.064 4.075 4.087 4.098 4.11 4.122 4.133 4.145 4.156 4.168 4.18 4.191 4.203 4.214 4.226 4.238 4.249 4.261 4.272 4.284 4.296 4.307 4.319 4.331 4.342 4.354 4.365 4.377 4.389 4.4 4.412 4.423 4.435 4.447 4.458 4.47 4.481 4.493 4.505 4.516 4.528 4.54 4.551 4.563 4.574 4.586 4.598 4.609 4.621 4.632 4.644 4.656 4.667 4.679 4.69 4.702 4.714 4.725 4.737 4.748 4.76 4.772 4.783 4.795 4.807 4.818 4.83 4.841 4.853 4.865 4.876 4.888 4.899 4.911 4.923 4.934 4.946 4.957 4.969 4.981 4.992 5.004 5.016 5.027 5.039 5.05 5.062 5.074 5.085 5.097 5.108 5.12 5.132 5.143 5.155 5.166 5.178 5.19 5.201 5.213 5.225 5.236 5.248 5.259 5.271 5.283 5.294 5.306 5.317 5.329 5.341 5.352 5.364 5.375 5.387 5.399 5.41 5.422 5.433 5.445 5.457 5.468 5.48 5.492 5.503 5.515 5.526 5.538 5.55 5.561 5.573 5.584 5.596 5.608 5.619 5.631 5.642 5.654 5.666 5.677 5.689 5.701 5.712 5.724 5.735 5.747 5.759 5.77 5.782 5.793 5.805 5.817 5.828 5.84 5.851 5.863 5.875 5.886 5.898 5.909 5.921 5.933 5.944 5.956 5.968 5.979 5.991 6.002 6.014 6.026 6.037 6.049 6.06 6.072 6.084 6.095 6.107 6.118 6.13 6.142 6.153 6.165 6.177 6.188 6.2 6.211 6.223 6.235 6.246 6.258 6.269 6.281 6.293 6.304 6.316 6.327 6.339 6.351 6.362 6.374 6.385 6.397 6.409 6.42 6.432 6.444 6.455 6.467 6.478 6.49 6.502 6.513 6.525 6.536 6.548 6.56 6.571 6.583 6.594 6.606 6.618 6.629 6.641 6.653 6.664 6.676 6.687 6.699 6.711 6.722 6.734 6.745 6.757 6.769 6.78 6.792 6.803 6.815 6.827 6.838 6.85 6.862 6.873 6.885 6.896 6.908 6.92 6.931 6.943 6.954 6.966 6.978 6.989 7.001 7.012 7.024 7.036 7.047 7.059 7.07 7.082 7.094 7.105 7.117 7.129 7.14 7.152 7.163 7.175 7.187 7.198 7.21 7.221 7.233 7.245 7.256 7.268 7.279 7.291 7.303 7.314 7.326 7.338 7.349 7.361 7.372 7.384 7.396 7.407 7.419 7.43 7.442 7.454 7.465 7.477 7.488 7.5 7.512 7.523 7.535 7.546 7.558 7.57 7.581 7.593 7.605 7.616 7.628 7.639 7.651 7.663 7.674 7.686 7.697 7.709 7.721 7.732 7.744 7.755 7.767 7.779 7.79 7.802 7.814 7.825 7.837 7.848 7.86 7.872 7.883 7.895 7.906 7.918 7.93 7.941 7.953 7.964 7.976 7.988 7.999 8.011 8.023 8.034 8.046 8.057 8.069 8.081 8.092 8.104 8.115 8.127 8.139 8.15 8.162 8.173 8.185 8.197 8.208 8.22 8.231 8.243 8.255 8.266 8.278 8.29 8.301 8.313 8.324 8.336 8.348 8.359 8.371 8.382 8.394 8.406 8.417 8.429 8.44 8.452 8.464 8.475 8.487 8.499 8.51 8.522 8.533 8.545 8.557 8.568 8.58 8.591 8.603 8.615 8.626 8.638 8.649 8.661 8.673 8.684 8.696 8.707 8.719 8.731 8.742 8.754 8.766 8.777 8.789 8.8 8.812 8.824 8.835 8.847 8.858 8.87 8.882 8.893 8.905 8.916 8.928 8.94 8.951 8.963 8.975 8.986 8.998 9.009 9.021 9.033 9.044 9.056 9.067 9.079 9.091 9.102 9.114 9.125 9.137 9.149 9.16 9.172 9.184 9.195 9.207 9.218 9.23 9.242 9.253 9.265 9.276 9.288 9.3 9.311 9.323 9.334 9.346 9.358 9.369 9.381 9.392 9.404 9.416 9.427 9.439 9.451 9.462 9.474 9.485 9.497 9.509 9.52 9.532 9.543 9.555 9.567 9.578 9.59 9.601 9.613 9.625 9.636 9.648 9.66 9.671 9.683 9.694 9.706 9.718 9.729 9.741 9.752 9.764 9.776 9.787 9.799 9.81 9.822 9.834 9.845 9.857 9.868 9.88 9.892 9.903 9.915 9.927 9.938 9.95 9.961 9.973 9.985 9.996 10.008 10.019 10.031 10.043 10.054 10.066 10.077 10.089 10.101 10.112 10.124 10.136 10.147 10.159 10.17 10.182 10.194 10.205 10.217 10.228 10.24 10.252 10.263 10.275 10.286 10.298 10.31 10.321 10.333 10.345 10.356 10.368 10.379 10.391 10.403 10.414 10.426 10.437 10.449 10.461 10.472 10.484 10.495 10.507 10.519 10.53 10.542 10.553 10.565 10.577 10.588 10.6 10.612 10.623 10.635 10.646 10.658 10.67 10.681 10.693 10.704 10.716 10.728 10.739 10.751 10.762 10.774 10.786 10.797 10.809 10.821 10.832 10.844 10.855 10.867 10.879 10.89 10.902 10.913 10.925 10.937 10.948 10.96 10.971 10.983 10.995 11.006 11.018 11.029 11.041 11.053 11.064 11.076 11.088 11.099 11.111 11.122 11.134 11.146 11.157 11.169 11.18 11.192 11.204 11.215 11.227 11.238 11.25 11.262 11.273 11.285 11.297 11.308 11.32 11.331 11.343 11.355 11.366 11.378 11.389 11.401 11.413 11.424 11.436 11.447 11.459 11.471 11.482 11.494 11.505 11.517 11.529 11.54 11.552 11.564 11.575 11.587 11.598 11.61 11.622 11.633 11.645 11.656 11.668 11.68 11.691 11.703 11.714 11.726 11.738 11.749 11.761 11.773 11.784 11.796 11.807 11.819 11.831 11.842 11.854 11.865 11.877 11.889 11.9 11.912 11.923 11.935 11.947 11.958 11.97 11.982 11.993 12.005 12.016 12.028 12.04 12.051 12.063 12.074 12.086 12.098 12.109 12.121 12.132 12.144 12.156 12.167 12.179 12.19 12.202 12.214 12.225 12.237 12.249 12.26 12.272 12.283 12.295 12.307 12.318 12.33 12.341 12.353 12.365 12.376 12.388 12.399 12.411 12.423 12.434 12.446 12.458 12.469 12.481 12.492 12.504 12.516 12.527 12.539 12.55 12.562 12.574 12.585 12.597 12.608 12.62 12.632 12.643 12.655 12.666 12.678 12.69 12.701 12.713 12.725 12.736 12.748 12.759 12.771 12.783 12.794 12.806 12.817 12.829 12.841 12.852 12.864 12.875 12.887 12.899 12.91 12.922 12.934 12.945 12.957 12.968 12.98 12.992 13.003 13.015 13.026 13.038 13.05 13.061 13.073 13.084 13.096 13.108 13.119 13.131 13.143 13.154 13.166 13.177 13.189 13.201 13.212 13.224 13.235 13.247 13.259 13.27 13.282 13.293 13.305 13.317 13.328 13.34 13.351 13.363 13.375 13.386 13.398 13.41 13.421 13.433 13.444 13.456 13.468 13.479 13.491 13.502 13.514 13.526 13.537 13.549 13.56 13.572 13.584 13.595 13.607 13.619 13.63 13.642 13.653 13.665 13.677 13.688 13.7 13.711 13.723 13.735 13.746 13.758 13.769 13.781 13.793 13.804 13.816 13.827 13.839 13.851 13.862 13.874 13.886 13.897 13.909 13.92 13.932 13.944 13.955 13.967 13.978 13.99 14.002 14.013 14.025 14.036 14.048 14.06 14.071 14.083 14.095 14.106 14.118 14.129 14.141 14.153 14.164 14.176 14.187 14.199 14.211 14.222 14.234 14.245 14.257 14.269 14.28 14.292 14.304 14.315 14.327 14.338 14.35 14.362 14.373 14.385 14.396 14.408 14.42 14.431 14.443 14.454 14.466 14.478 14.489 14.501 14.512 14.524 14.536 14.547 14.559 14.571 14.582 14.594 14.605 14.617 14.629 14.64 14.652 14.663 14.675 14.687 14.698 14.71 14.721 14.733 14.745 14.756 14.768 14.78 14.791 14.803 14.814 14.826 14.838 14.849 14.861 14.872 14.884 14.896 14.907 14.919 14.93 14.942 14.954 14.965 14.977 14.988 15.0 15.012 15.023 15.035 15.047 15.058 15.07 15.081 15.093 15.105 15.116 15.128 15.139 15.151 15.163 15.174 15.186 15.197 15.209 15.221 15.232 15.244 15.256 15.267 15.279 15.29 15.302 15.314 15.325 15.337 15.348 15.36 15.372 15.383 15.395 15.406 15.418 15.43 15.441 15.453 15.465 15.476 15.488 15.499 15.511 15.523 15.534 15.546 15.557 15.569 15.581 15.592 15.604 15.615 15.627 15.639 15.65 15.662 15.673 15.685 15.697 15.708 15.72 15.732 15.743 15.755 15.766 15.778 15.79 15.801 15.813 15.824 15.836 15.848 15.859 15.871 15.882 15.894 15.906 15.917 15.929 15.941 15.952 15.964 15.975 15.987 15.999 16.01 16.022 16.033 16.045 16.057 16.068 16.08 16.091 16.103 16.115 16.126 16.138 16.149 16.161 16.173 16.184 16.196 16.208 16.219 16.231 16.242 16.254 16.266 16.277 16.289 16.3 16.312 16.324 16.335 16.347 16.358 16.37 16.382 16.393 16.405 16.417 16.428 16.44 16.451 16.463 16.475 16.486 16.498 16.509 16.521 16.533 16.544 16.556 16.567)) (quote (0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 967 433) (om-make-point 645 558) nil)) t nil nil nil))) (quote ((9 0 1 0 nil 0) (2 0 3 0 nil 0) (7 0 3 1 nil 0) (18 0 4 0 nil 0) (16 0 4 1 nil 0) (13 1 5 0 nil 1) (13 0 6 0 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (20 0 8 0 nil 0) (3 0 9 0 nil 0) (11 0 9 2 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (13 1 12 0 nil 1) (13 0 12 1 nil 0) (14 0 13 0 nil 0) (21 0 14 0 nil 0) (20 0 18 0 nil 0) (19 0 18 1 nil 0) (17 0 18 2 nil 0) (4 0 21 0 nil 0) (15 0 21 1 nil 0))) nil 6.050102))
