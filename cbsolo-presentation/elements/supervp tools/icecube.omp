; OM File Header - Saved 2015/06/08 16:42:06
; (6.1 :patc (om-make-point 24 24) (om-make-point 934 102) (om-make-point 1168 885) "" 183 0 nil "2015/06/08 16:42:06")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/out.aiff\"" "#P\"../../../../../Desktop/unpitched/natural-harmonics-glissandi/Cb-nat-harm-gl-fst-dsc-3c.aif\""))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "icecube" (quote ((let ((box (om-load-boxcall (quote lispfun) "ROUND" (quote round) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 545 387) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ROUND" (quote round) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 442 382) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 221 57) (quote "freeze 'sound' at 'place', output sound of length 'length'") "" (om-make-point 431 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 350 389) (om-make-point 18 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "out.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 139 533) (om-make-point 141 118) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "out" :type "aiff") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "out.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 541 323) (om-make-point 100 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 610 155) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 449 295) (om-make-point 42 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1000) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 387 325) (om-make-point 100 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 460 185) (om-make-point 107 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "begin time (ms)" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time (ms)" "END" 1000))) (om-make-point 443 483) (om-make-point 130 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 175 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 349 154) (om-make-point 45 30) 0.05 "0.05" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length" 2 (om-make-point 296 0) "" "length" 0.8 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "SHAPE-INVARIANT" nil (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "out.aiff"))) (om-make-point 123 419) (om-make-point 269 63) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERVP-FREEZE" (quote supervp-freeze) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 153 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "place" 1 (om-make-point 214 2) "" "place" 0.3 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sound" 0 (om-make-point 41 139) "" "sound" (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "unpitched" "natural-harmonics-glissandi")) :device nil :host nil :name "Cb-nat-harm-gl-fst-dsc-3c" :type "aif") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb-nat-harm-gl-fst-dsc-3c.aif") (set-tonalite newobj nil) newobj) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 489 630) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (8 0 1 0 nil 0) (15 0 4 0 nil 0) (9 0 5 0 nil 0) (6 0 5 1 nil 0) (17 0 8 0 nil 0) (7 0 8 1 nil 0) (17 0 9 0 nil 0) (14 0 9 1 nil 0) (4 0 10 0 nil 0) (1 0 10 1 nil 0) (0 0 10 2 nil 0) (13 0 11 0 nil 0) (17 0 13 0 nil 0) (14 0 13 1 nil 0) (12 0 13 2 nil 0) (18 0 15 0 nil 0) (16 0 15 1 nil 0) (3 0 15 10 nil 0) (11 0 16 0 nil 0) (10 0 19 0 nil 0))) nil 6.1))
