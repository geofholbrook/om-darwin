; OM File Header - Saved 2015/06/08 15:47:47
; (6.050102 :patc (om-make-point 109 351) (om-make-point 358 141) (om-make-point 971 980) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OM-pm2")))(setf *om-current-persistent* (om-load-patch1 "sound-to-TRC.SDIF" (quote ((om-load-boxin "end-t" 5 (om-make-point 704 475) "" "end-t" nil nil) (om-load-boxin "begin-t" 4 (om-make-point 606 472) "" "begin-t" nil nil) (om-load-boxcomment "comment" (om-make-point 464 171) (quote "- analysis-params : parameters for tracking $- for inharmonic partial tracking : $- Relative frequency derivation (mc) (default 20)$- Constant frequency derivation (Hz) (default 0.0)$- Relative amplitude derivation (%) (default 50)$- Source partial neighbors (default 1)$- target partial neighbors (>= source partial neighbors) (default 3)$- time gap to connect over (s) (default 0.017)$- frequency gap to connect over (mc) (default 50)$- minimum partial length (s) (default 0.009)") "" (om-make-point 411 136) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "pathname!" (om-load-patch-abs1 "pathname!" (quote ((om-load-boxcall (quote lispfun) "SOUND-PATH 2" (quote sound-path) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 422 422) nil nil nil nil 1) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 410 332) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 261 515) (om-make-point 178 57) nil nil nil 1) (om-load-boxcall (quote lispfun) "EQUALP" (quote equalp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" (quote (quote sound))))) (om-make-point 241 313) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 375 170) (om-make-point 78 30) (quote sound-data) "sound-data" nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 74 605) (om-make-point 178 57) nil nil nil 1) (om-load-boxcall (quote lispfun) "TYPE-OF" (quote type-of) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 43 184) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "EQUALP" (quote equalp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" (quote (quote sound))))) (om-make-point 57 344) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 281) (om-make-point 48 30) (quote sound) "sound" nil) (om-load-boxcall (quote lispfun) "SOUND-PATH 2" (quote sound-path) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 130 451) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 200 41) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 137 715) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (10 0 2 2 nil 0) (6 0 3 0 nil 0) (4 0 3 1 nil 0) (7 0 5 0 nil 0) (9 0 5 1 nil 0) (2 0 5 2 nil 0) (10 0 6 0 nil 0) (6 0 7 0 nil 0) (8 0 7 1 nil 0) (10 0 9 0 nil 0) (5 0 11 0 nil 0))) 6.050102 nil "" (om-make-point 87 0) (om-make-point 581 828)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 71 195) nil nil nil "pathname!") (om-load-boxin "max-simultaneous-partials" 3 (om-make-point 506 336) "" "max-simultaneous-partials" 100 nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 344 131) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 221 40) (om-make-point 154 30) (list 20 0.0 50 1 3 0.017 50) "(20 0.0 50 1 3 0.017 50)" nil) (om-load-boxin "amp-threshold" 2 (om-make-point 403 337) "" "amp-threshold" -40 nil) (om-load-boxin "minimum-partial-length" 1 (om-make-point 348 40) "" "minimum-partial-length" 0.009 nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 458 518) (om-make-point 64 30) (list 0.1 0.1) "(0.1 0.1)" nil) (om-load-boxcall (quote genfun) "PARTIAL-TRACKING" (quote partial-tracking) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "" "max-partials" (quote :max-partials) 12 nil) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "partials.sdif" nil) (om-load-inputkeyword (quote input-keyword) "" "analysis-type" (quote :analysis-type) "inharmonic" (list (list "Harmonic" "harmonic") (list "Inharmonic" "inharmonic"))) (om-load-inputkeyword (quote input-keyword) "" "analysis-params" (quote :analysis-params) (list 20 0.0 50 1 3 0.017 50 0.009) nil) (om-load-inputkeyword (quote input-keyword) "" "amp-treshold" (quote :amp-treshold) -40 nil) (om-load-inputkeyword (quote input-keyword) "" "smoothing-enveloppe" (quote :smoothing-enveloppe) (list 0.0 0.0) nil) (om-load-inputkeyword (quote input-keyword) "" "begin-t" (quote :begin-t) nil nil) (om-load-inputkeyword (quote input-keyword) "" "end-t" (quote :end-t) nil nil))) (om-make-point 144 643) (om-make-point 351 67) nil nil nil 1) (om-load-boxcall (quote abstraction) "trc-pathname" (om-load-lisp-abspatch "trc-pathname" 6.050102 "$$(lambda (sndpath) $$  (make-pathname :directory (pathname-directory sndpath) $                 :name (string+ (pathname-name sndpath) \"-trc\") $                 :type \"sdif\")$)") (quote ((om-load-inputfun (quote input-funbox) "" "SNDPATH" nil))) (om-make-point 201 346) nil nil nil "trc-pathname") (om-load-boxin "sound-path" 0 (om-make-point 94 74) "" "sound-path" nil nil) (om-load-boxout "output" 0 (om-make-point 215 761) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((12 0 3 0 nil 0) (6 0 5 0 nil 0) (8 0 5 1 nil 0) (3 0 10 0 nil 0) (4 0 10 1 nil 0) (11 0 10 2 nil 0) (5 0 10 4 nil 0) (7 0 10 5 nil 0) (9 0 10 6 nil 0) (1 0 10 7 nil 0) (0 0 10 8 nil 0) (3 0 11 0 nil 0) (10 0 13 0 nil 0))) nil 6.050102))
