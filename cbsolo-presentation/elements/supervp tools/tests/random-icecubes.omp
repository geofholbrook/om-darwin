; OM File Header - Saved 2015/06/08 16:42:06
; (6.1 :patc (om-make-point 15 108) (om-make-point 391 286) (om-make-point 813 906) "" 183 0 nil "2015/06/08 16:42:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/happy_birthday_batman\"" "#P\"../../../../../lib/OM-libraries/OM-SuperVP 2.8/resources/pict/superVP\"") (list (quote :abstraction) "#P\"../icecube.omp\"") (list (quote :sound) "#P\"../../../out-files/snd52981.aiff\"" "#P\"../../../../../../Desktop/unpitched/natural-harmonics-glissandi/Cb-nat-harm-gl-fst-dsc-3c.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "random-icecubes" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 473 99) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 184 450) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "snd52981.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 213 683) (om-make-point 327 178) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snd52981" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snd52981.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :libaudiostream) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "icecube 2" (quote ("elements" "supervp tools" "icecube")) (quote ((om-load-inputfun (quote input-funbox) "" "sound" nil) (om-load-inputfun (quote input-funbox) "" "place" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 137 332) (om-make-point 169 67) (list nil) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 493 219) (om-make-point 32 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0.25))) (om-make-point 439 290) (om-make-point 51 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 10))) (om-make-point 86 480) (om-make-point 134 46) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 260 567) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 490 376) (om-make-point 28 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 569 434) nil (list (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 696 125) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 644 148) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.3) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0.6))) (om-make-point 650 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 413 83) (om-make-point 32 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 391 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 335 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "pict" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 924 40) (om-make-point 138 139) (make-instance (quote picture) :name "happy_birthday_batman" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "happy_birthday_batman" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Cb-nat-harm-gl-fst-dsc-3c.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 50 123) (om-make-point 144 83) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Desktop" "unpitched" "natural-harmonics-glissandi")) :device nil :host nil :name "Cb-nat-harm-gl-fst-dsc-3c" :type "aif") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb-nat-harm-gl-fst-dsc-3c.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 36) (quote "10. Freeze") "" (om-make-point 90 37) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 2 0 nil 0) (17 0 3 0 nil 0) (14 0 3 1 nil 0) (5 0 3 2 nil 0) (12 0 5 0 nil 0) (4 0 5 1 nil 0) (1 0 6 2 nil 0) (6 0 7 0 nil 0) (9 0 7 1 nil 0) (3 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (13 0 14 0 nil 0) (0 0 14 1 nil 0) (17 0 15 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "superVP" :source (quote |OM-SuperVP|) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "superVP" (quote |OM-SuperVP|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 22 42)) (setf (pict-size newpict) (om-make-point 63 57)) newpict)) 6.1))
