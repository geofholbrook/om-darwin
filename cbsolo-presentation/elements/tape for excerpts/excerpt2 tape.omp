; OM File Header - Saved 2015/06/21 16:07:46
; (6.1 :patc (om-make-point 10 10) (om-make-point 1065 93) (om-make-point 1279 1237) "" 183 0 "2015/06/21 14:25:43" "2015/06/21 16:07:46")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/easy-out-16.aiff\"") (list (quote :instance) "#P\"../../globals/pp first file midic.omi\"" "#P\"../../globals/2D PP CSEQ ANALYSIS.omi\"" "#P\"../../globals/2d pp path list.omi\"") (list (quote :abstraction) "#P\"../more csound/convolve.omp\""))
(in-package :om)(load-lib-for (quote ("om-geof" "om-darwin")))(setf *om-current-persistent* (om-load-patch1 "excerpt2 tape" (quote ((let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 534 1257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map-pc" (om-load-lisp-abspatch "map-pc" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"map-register\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr cb-arr)$  (let ((pcs (mapcar #'(lambda (region)$                           (mod (/ (d::region-pitch region) 100)$                                12))$                     (d::arr-regions cb-arr))))$    (loop for pc in pcs$          for chord in (d::demix (d::arr-regions arr) #'d::region-start)$          sum (loop for reg in chord$                    sum (d::offby (mod (/ (d::region-pitch reg) 100) 12)$                                  pc)))))$                        ") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil) (om-load-inputfun (quote input-funbox) "" "CB-ARR" nil))) (om-make-point 667 399) (om-make-point 128 67) (list nil) "l" "map-pc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1083 1096) (om-make-point 38 30) 0.4 "0.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-CHOOSE-FILE-DIALOG" (quote om-choose-file-dialog) (quote nil) (om-make-point 962 1014) nil (list (om-make-pathname :directory (quote (:absolute "Users" "holbrook" "Data" "samples" "SPACE ECHO IR")) :device :unspecific :host :unspecific :name "Mode10" :type "aif")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "convolve" (quote ("elements" "more csound" "convolve")) (quote ((om-load-inputfun (quote input-funbox) "" "sound" nil) (om-load-inputfun (quote input-funbox) "" "impulse" nil) (om-load-inputfun (quote input-funbox) "" "mix" nil))) (om-make-point 960 1135) nil (list "/Users/holbrook/Data/lib/OM-libraries/om-darwin/cbsolo-presentation/out-files/easy-out-19.aiff") nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1120 664) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1044 694) (om-make-point 140 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 2)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 1)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (3 1)) (1 (1.0 3)))) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((3 4) ((1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (562)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (562)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (562)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (562)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (562)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (188)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 80) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1047 564) (om-make-point 140 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 2)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 1)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (3 1)) (1 (1.0 3)))) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((3 4) ((1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 1063 479) (om-make-point 26 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "excerpt2-arr-fix" (let ((copy (make-instance (quote omlistinstance) :name "excerpt2-arr-fix" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 9 8) (list 9 8) (list 4 4) (list 7 8) (list 4 4) (list 7 8) (list 3 4))) (list 0 3/16 1 4200) (list 3/16 3/16 1 3900) (list 3/8 3/16 1 3600) (list 9/16 3/16 1 3300) (list 3/4 3/16 1 3100) (list 15/16 3/16 1 2800) (list 9/8 3/16 1 4600) (list 21/16 3/16 1 4000) (list 3/2 3/16 1 3500) (list 27/16 3/16 1 4300) (list 15/8 1/8 1 3800) (list 2 1/4 1 4500) (list 9/4 1/8 1 5000) (list 19/8 3/16 1 4000) (list 41/16 3/16 1 3600) (list 11/4 1/8 1 4200) (list 23/8 3/16 1 3700) (list 49/16 3/16 1 4300) (list 13/4 1/8 1 5300) (list 27/8 3/16 1 4300) (list 57/16 1/8 1 3800) (list 59/16 3/16 1 4500) (list 31/8 1/8 1 4000) (list 4 1/8 1 4900) (list 33/8 3/16 1 5600) (list 69/16 3/16 1 4600) (list 9/2 1/8 1 4200) (list 37/8 3/16 1 5000) (list 77/16 1/8 1 4300) (list 79/16 3/16 1 5200) (list 41/8 1/8 1 5900) (list 21/4 1/8 1 5700) (list 43/8 3/16 1 5500) (list 89/16 1/8 1 5200) (list 91/16 1/8 1 4900) (list 93/16 3/16 1 4600) (list 6 1/8 1 6200) (list 49/8 1/8 1 5600) (list 25/4 1/8 1 5200) (list 51/8 1/8 1 5700) (list 13/2 1/8 1 5300) (list 53/8 1/8 1 5900))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2015/06/21 15:52:15" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 523 198) "excerpt2-arr-fix" (om-make-point 161 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 71 21) (om-make-point 712 121) (list (quote :header) (list (quote :time-sig) (list (list 9 8) (list 9 8) (list 4 4) (list 7 8) (list 4 4) (list 7 8) (list 3 4))) (list 0 3/16 1 4200) (list 3/16 3/16 1 3900) (list 3/8 3/16 1 3600) (list 9/16 3/16 1 3300) (list 3/4 3/16 1 3100) (list 15/16 3/16 1 2800) (list 9/8 3/16 1 4600) (list 21/16 3/16 1 4000) (list 3/2 3/16 1 3500) (list 27/16 3/16 1 4300) (list 15/8 1/8 1 3800) (list 2 1/4 1 4500) (list 9/4 1/8 1 5000) (list 19/8 3/16 1 4000) (list 41/16 3/16 1 3600) (list 11/4 1/8 1 4200) (list 23/8 3/16 1 3700) (list 49/16 3/16 1 4300) (list 13/4 1/8 1 5300) (list 27/8 3/16 1 4300) (list 57/16 1/8 1 3800) (list 59/16 3/16 1 4500) (list 31/8 1/8 1 4000) (list 4 1/8 1 4900) (list 33/8 3/16 1 5600) (list 69/16 3/16 1 4600) (list 9/2 1/8 1 4200) (list 37/8 3/16 1 5000) (list 77/16 1/8 1 4300) (list 79/16 3/16 1 5200) (list 41/8 1/8 1 5900) (list 21/4 1/8 1 5700) (list 43/8 3/16 1 5500) (list 89/16 1/8 1 5200) (list 91/16 1/8 1 4900) (list 93/16 3/16 1 4600) (list 6 1/8 1 6200) (list 49/8 1/8 1 5600) (list 25/4 1/8 1 5200) (list 51/8 1/8 1 5700) (list 13/2 1/8 1 5300) (list 53/8 1/8 1 5900)) "(:header (:time-sig ((9 8) (9 8) (4 4) (7 8) (4 4) (7 8) (3 4)))$ (0 3/16 1 4200) (3/16 3/16 1 3900) (3/8 3/16 1 3600) (9/16 3/16 1 3300) (3/4 3/16 1 3100) (15/16 3/16 1 2800)$ (9/8 3/16 1 4600) (21/16 3/16 1 4000) (3/2 3/16 1 3500) (27/16 3/16 1 4300) (15/8 1/8 1 3800) (2 1/4 1 4500) $(9/4 1/8 1 5000) (19/8 3/16 1 4000) (41/16 3/16 1 3600) (11/4 1/8 1 4200) (23/8 3/16 1 3700) (49/16 3/16 1 4300) $(13/4 1/8 1 5300) (27/8 3/16 1 4300) (57/16 1/8 1 3800) (59/16 3/16 1 4500) (31/8 1/8 1 4000) (4 1/8 1 4900) $(33/8 3/16 1 5600) (69/16 3/16 1 4600) (9/2 2/16 1 4200) (74/16 3/16 1 5000) (77/16 1/8 1 4300) (79/16 3/16 1 5200) $(41/8 1/8 1 5900) (21/4 1/8 1 5700) (86/16 3/16 1 5500) (89/16 1/8 1 5200) (91/16 1/8 1 4900) (93/16 3/16 1 4600) $(6 1/8 1 6200) (49/8 1/8 1 5600) (25/4 1/8 1 5200) (51/8 1/8 1 5700) (13/2 1/8 1 5300) (53/8 1/8 1 5900))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY 2" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 318 602) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TREE2RATIO" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "a rythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 960 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TREE" (quote tree) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 885 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 851 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "ascent 2" (let ((copy (make-instance (quote ominstance) :name "ascent 2" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) 1.0)) ((9 8) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) 2)) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 3)))) ((7 8) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) 1)) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 3)))) ((7 8) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) 1.0)) ((3 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2))) (setf (create-info copy) (quote ("2015/06/21 15:41:47" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 716 57) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "VOICES" (quote voices) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 719 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 986 397) (om-make-point 130 65) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 2)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 1)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (3 1)) (1 (1.0 3)))) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((3 4) ((1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 1873 323) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "map-register" (om-load-lisp-abspatch "map-register" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"map-register\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr cb-arr)$  (let ((ranges (mapcar #'(lambda (centre)$                            (list (- centre 500)$                                  (+ centre 500)))$                        (om::om-scale (mapcar 'd::region-pitch (d::arr-regions cb-arr))$                                      2600 8000))))$    (loop for range in ranges$          for chord in (d::demix (d::arr-regions arr) #'d::region-start)$          sum (loop for reg in chord$                    sum (d::offby (d::region-pitch reg)$                                  range)))))$                        ") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil) (om-load-inputfun (quote input-funbox) "" "CB-ARR" nil))) (om-make-point 517 456) (om-make-point 128 67) (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 759 495) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 160 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 213 28) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 246 319) (om-make-point 750 791)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 827 417) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 459 279) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-SET-CHANNEL" (quote om-darwin::arr-set-channel) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 427 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "ARR-HEADER" (quote om-darwin::arr-header) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 318 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND 2" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 355 484) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 571 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 426 511) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 486 631) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 627 76) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 427 36) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pheno" 0 (om-make-point 159 18) "" "pheno" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 426 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 526 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-PROCESS-PITCHES" (quote om-darwin::arr-process-pitches) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "FUN" "FUN" nil))) (om-make-point 307 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "manual def->pitch" (om-load-patch-abs1 "manual def->pitch" (quote ((let ((box (om-load-boxcall (quote abstraction) "get-interval" (om-load-lisp-abspatch "get-interval" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"get-interval\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (folder-index)$  (if (or (= folder-index 11)$          (= folder-index 12))$      100$    300))") (quote ((om-load-inputfun (quote input-funbox) "" "FOLDER-INDEX" nil))) (om-make-point 584 362) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 424 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 395 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 431 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 300))) (om-make-point 342 500) (om-make-point 65 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 78 368) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pp first file midic" (get-inst-from-globals "pp first file midic") (quote nil) (om-make-point 29 129) nil (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 155 230) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 155 573) (om-make-point 386 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 218 132) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 463 55) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 143 15) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 241 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 2) (8 1 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (11 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (0 0 5 1 nil 2) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (10 1 9 2 nil 0) (12 0 10 0 nil 0) (9 0 13 0 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 893 830)) (quote ((om-load-inputfun (quote input-funbox) "" "def" nil) (om-load-inputfun (quote input-funbox) "" "db" nil))) (om-make-point 412 152) nil (list nil) "l" "manual def->pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (0 0 1 0 nil 0) (9 0 1 1 nil 0) (5 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0) (10 0 8 0 nil 0) (8 0 9 0 nil 0) (2 0 9 1 nil 0) (7 0 10 0 nil 0) (11 0 10 1 nil 0) (6 0 11 1 nil 0))) 6.1 nil "" (om-make-point 132 197) (om-make-point 907 779)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 370 525) (om-make-point 108 67) (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WITH-PHENO" (quote with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil))) (om-make-point 572 601) (om-make-point 180 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 845 593) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sample id and detune" (om-load-patch-abs1 "sample id and detune" (quote ((let ((box (om-load-boxinstance "excerpt2-arr-fix" (let ((copy (make-instance (quote omlistinstance) :name "excerpt2-arr-fix" :icon 129))) (setf (instance copy) (list (quote :header) (list (quote :time-sig) (list (list 9 8) (list 9 8) (list 4 4) (list 7 8) (list 4 4) (list 7 8) (list 3 4))) (list 0 3/16 1 4200) (list 3/16 3/16 1 3900) (list 3/8 3/16 1 3600) (list 9/16 3/16 1 3300) (list 3/4 3/16 1 3100) (list 15/16 3/16 1 2800) (list 9/8 3/16 1 4600) (list 21/16 3/16 1 4000) (list 3/2 3/16 1 3500) (list 27/16 3/16 1 4300) (list 15/8 1/8 1 3800) (list 2 1/4 1 4500) (list 9/4 1/8 1 5000) (list 19/8 3/16 1 4000) (list 41/16 3/16 1 3600) (list 11/4 1/8 1 4200) (list 23/8 3/16 1 3700) (list 49/16 3/16 1 4300) (list 13/4 1/8 1 5300) (list 27/8 3/16 1 4300) (list 57/16 1/8 1 3800) (list 59/16 3/16 1 4500) (list 31/8 1/8 1 4000) (list 4 1/8 1 4900) (list 33/8 3/16 1 5600) (list 69/16 3/16 1 4600) (list 9/2 1/8 1 4200) (list 37/8 3/16 1 5000) (list 77/16 1/8 1 4300) (list 79/16 3/16 1 5200) (list 41/8 1/8 1 5900) (list 21/4 1/8 1 5700) (list 43/8 3/16 1 5500) (list 89/16 1/8 1 5200) (list 91/16 1/8 1 4900) (list 93/16 3/16 1 4600) (list 6 1/8 1 6200) (list 49/8 1/8 1 5600) (list 25/4 1/8 1 5200) (list 51/8 1/8 1 5700) (list 13/2 1/8 1 5300) (list 53/8 1/8 1 5900))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 693 315) nil (om-make-point 192 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 466 695) (om-make-point 109 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINE-RHYTHMS-AND-PITCHES" (quote om-darwin::combine-rhythms-and-pitches) (quote ((om-load-inputfun (quote input-funbox) "RHYTHM-ARR" "RHYTHM-ARR" nil) (om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil))) (om-make-point 696 688) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 620 887) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PILE-ARRANGEMENTS" (quote om-darwin::pile-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil))) (om-make-point 486 810) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 676 791) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 607 636) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 456 603) (om-make-point 109 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 524 512) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "sample identifier") "" (om-make-point 148 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 261 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 292 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 257) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 263) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 156 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 125 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max-folder-length" 1 (om-make-point 358 33) "" "max-folder-length" 16 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 75 44) (quote "detune in midicents") "" (om-make-point 512 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 548 240) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 10) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 353) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 513 154) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 408 159) (om-make-point 32 30) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 430 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 787 905) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "num-folders" 0 (om-make-point 108 29) "" "num-folders" 255 (om-make-point 107 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 372 506) (om-make-point 84 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (6 0 1 1 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 5 0 nil 0) (1 0 5 1 nil 0) (26 0 7 0 nil 0) (8 0 7 1 nil 0) (0 0 8 0 nil 0) (16 0 10 0 nil 0) (11 0 10 1 nil 0) (13 0 11 0 nil 0) (12 0 11 1 nil 0) (17 0 12 0 nil 0) (25 0 15 0 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (3 0 24 0 nil 0) (10 0 26 0 nil 0) (20 0 26 1 nil 0))) 6.1 nil "" (om-make-point 253 166) (om-make-point 1053 1011)) (quote ((om-load-inputfun (quote input-funbox) "" "num-folders" nil) (om-load-inputfun (quote input-funbox) "" "max-folder-length" nil))) (om-make-point 114 553) (om-make-point 163 67) (list nil) "l" "sample id and detune"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "finalizer" (quote :finalizer) nil nil))) (om-make-point 257 677) (om-make-point 237 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DETUNED SAMPLE ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 88 790) (om-make-point 699 289) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 95 84 191 56 146 226 163 72 186 225 225 165 27 122 26 64 140 38 139 136 112 151 248 180 105 252 144 123 117 5 235 226 110 119 102 63 54 147 104 139 157 255 24 93 201 183 33 13 53 93 58 229 196 45 65 196 56 160 211 26 56 178 69 128 224 191 120 69 211 97 153 91 232 196 87 93 37 247 45 54 50 80 143 61 159 39 238 89 37 185 123 104 203 38 250 231 222 180 38 222 24 60 107 143 138 118 1 204 106 178 145 197 140 149 160 125 107 122 201 157 46 107 177 121 213 198 119 80 207 96 243 97 225 199 247 220 38 221 30 148 106 34 194 231 230 27 68 251 194 96 46 133 134 209 123 29 50 134 104 156 224 234 0 28 181 135 117 125 187 195 104 60 41 203 179 243 132 244 244 250 255 184 109 64 221 99 253 126 128 83 163 152 225 254 166 77 143 154 219 159 58 241 188 95 232 242 200 176 222 28 178 6 187 65 122 205 254 196 24 88 253 250 181 187 212 172 117 186 99 128 152 100 253 244 224 89 162 215 68 65 150 211 14 1 106 102 95 162 132 92 65 223 50 158 33 64 110 173 89 102 219 94 82 240 47 11 92 100 242 20 71 65 144 21 239 224 167 152 238 42 89 188 41 91 246 184 239 35 237 181 8 201 90 138 217 101 37 242 76 13 247 146 176 181 253 8 143 150 217 47 147 154 14 110 164 184 222 201 148 48 78 176 1 13 219 241 71 20 249 111 61 113 31 189 243 202 151 1 176 150 184 183 29 5 184 202 103 101 202 172 57 237 187 76 104 177 109 170 201 161 144 70 111 233 74 185 19 40 112 33 69 147 64 107 59 109 77 119 140 94 241 221 156 1 133 224 8 9 174 223 193 115 209 219 77 247 138 64 39 25 222 243 42 159 22 137 190 209 74 185 118 88 170 100 5 25 74 54 67 67 85 81 139 1 56 191 223 131 198 45 32 193 69 214 75 135 0 8 158 44 62 76 241 54 18 254 212 19 12 216 13 8 86 57 161 58 0 234 159 139 198 113 120 249 196 75 224 118 5 237 95 68 29 82 95 167 196 164 114 191 203 34 81 245 145 59 64 156 150 105 118 13 141 141 132 105 67 149 185 196 120 133 205 165 49 89 75 202 222 122 158 130 8 3 211 254 7 125 47 142 117 47 201 103 230 19 194 131) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 95 84 191 56 146 226 163 72 186 225 225 165 27 122 26 64 140 38 139 136 112 151 248 180 105 252 144 123 117 5 235 226 110 119 102 63 54 147 104 139 157 255 24 93 201 183 33 13 53 93 58 229 196 45 65 196 56 160 211 26 56 178 69 128 224 191 120 69 211 97 153 91 232 196 87 93 37 247 45 54 50 80 143 61 159 39 238 89 37 185 123 104 203 38 250 231 222 180 38 222 24 60 107 143 138 118 1 204 106 178 145 197 140 149 160 125 107 122 201 157 46 107 177 121 213 198 119 80 207 96 243 97 225 199 247 220 38 221 30 148 106 34 194 231 230 27 68 251 194 96 46 133 134 209 123 29 50 134 104 156 224 234 0 28 181 135 117 125 187 195 104 60 41 203 179 243 132 244 244 250 255 184 109 64 221 99 253 126 128 83 163 152 225 254 166 77 143 154 219 159 58 241 188 95 232 242 200 176 222 28 178 6 187 65 122 205 254 196 24 88 253 250 181 187 212 172 117 186 99 128 152 100 253 244 224 89 162 215 68 65 150 211 14 1 106 102 95 162 132 92 65 223 50 158 33 64 110 173 89 102 219 94 82 240 47 11 92 100 242 20 71 65 144 21 239 224 167 152 238 42 89 188 41 91 246 184 239 35 237 181 8 201 90 138 217 101 37 242 76 13 247 146 176 181 253 8 143 150 217 47 147 154 14 110 164 184 222 201 148 48 78 176 1 13 219 241 71 20 249 111 61 113 31 189 243 202 151 1 176 150 184 183 29 5 184 202 103 101 202 172 57 237 187 76 104 177 109 170 201 161 144 70 111 233 74 185 19 40 112 33 69 147 64 107 59 109 77 119 140 94 241 221 156 1 133 224 8 9 174 223 193 115 209 219 77 247 138 64 39 25 222 243 42 159 22 137 190 209 74 185 118 88 170 100 5 25 74 54 67 67 85 81 139 1 56 191 223 131 198 45 32 193 69 214 75 135 0 8 158 44 62 76 241 54 18 254 212 19 12 216 13 8 86 57 161 58 0 234 159 139 198 113 120 249 196 75 224 118 5 237 95 68 29 82 95 167 196 164 114 191 203 34 81 245 145 59 64 156 150 105 118 13 141 141 132 105 67 149 185 196 120 133 205 165 49 89 75 202 222 122 158 130 8 3 211 254 7 125 47 142 117 47 201 103 230 19 194 131)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 155 171 113 1 100 138 185 218 167 208 129 115 174 15 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 17 32 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 132 132 219 155 90 180 14 240 137 0 227 24 172 52 160 187 144 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 42 13 103 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 155 171 113 1 100 138 185 218 167 208 129 115 174 15 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 17 32 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 132 132 219 155 90 180 14 240 137 0 227 24 172 52 160 187 144 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 42 13 103 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 395) (list 2.9411764 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 48 251 227 250 130 236 99 132 15 131 33 41 252 32 9 161 38 155 171 113 156 100 138 185 218 167 208 129 115 174 15 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 161 3 45 160 87 7 100 227 105 106 125 188 73 245 211 138 198 38 114 114 50 190 238 244 136 179 113 7 156 131 88 90 37 71 212 135 182 117 231 205 199 174 16 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 173 162 86 33 29 247 15 232 126 128 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 180 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 89 94 142 219 221 80 170 199 21 25 253 123 151 175 101 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 231 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 151 76 34 4 89 53 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 173 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 117 107 82 252 94 153 166 69 255 15 169 72 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 12 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 172 227 24 0 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 48 251 227 250 130 236 99 132 15 131 33 41 252 32 9 161 38 155 171 113 156 100 138 185 218 167 208 129 115 174 15 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 161 3 45 160 87 7 100 227 105 106 125 188 73 245 211 138 198 38 114 114 50 190 238 244 136 179 113 7 156 131 88 90 37 71 212 135 182 117 231 205 199 174 16 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 173 162 86 33 29 247 15 232 126 128 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 180 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 89 94 142 219 221 80 170 199 21 25 253 123 151 175 101 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 231 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 151 76 34 4 89 53 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 173 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 117 107 82 252 94 153 166 69 255 15 169 72 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 12 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 172 227 24 0 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 5.882353 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 83 95 150 151 33 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 30 16 161 38 155 171 113 66 100 140 183 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 135 180 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 251 134 128 39 149 201 164 162 84 86 30 29 247 240 232 133 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 239 135 161 242 216 182 98 160 78 75 10 140 99 156 140 78 63 7 219 94 78 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 18 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 207 207 211 237 252 209 213 203 195 127 221 53 211 252 186 125 35 219 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 156 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 164 157 84 90 152 6 68 9 135 63 130 63 91 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 173 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 160 196 67 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 223 53 3 2 3 107 157 220 44 110 250 28 159 194 8 229 52 155 136 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 17 32 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 132 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 42 13 103 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 83 95 150 151 33 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 30 16 161 38 155 171 113 66 100 140 183 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 135 180 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 251 134 128 39 149 201 164 162 84 86 30 29 247 240 232 133 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 239 135 161 242 216 182 98 160 78 75 10 140 99 156 140 78 63 7 219 94 78 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 18 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 207 207 211 237 252 209 213 203 195 127 221 53 211 252 186 125 35 219 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 156 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 164 157 84 90 152 6 68 9 135 63 130 63 91 88 56 243 163 197 68 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 173 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 160 196 67 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 223 53 3 2 3 107 157 220 44 110 250 28 159 194 8 229 52 155 136 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 161 210 113 17 32 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 132 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 42 13 103 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 8.823529 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 227 236 251 184 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 129 115 175 14 23 220 50 27 83 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 74 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 182 203 155 67 78 44 225 21 78 137 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 204 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 90 221 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 198 68 90 210 215 249 42 59 113 24 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 16 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 227 236 251 184 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 129 115 175 14 23 220 50 27 83 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 74 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 182 203 155 67 78 44 225 21 78 137 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 204 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 90 221 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 198 68 90 210 215 249 42 59 113 24 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 16 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 11.764706 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 184 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 175 115 129 14 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 212 182 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 237 207 211 252 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 214 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 250 25 55 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 53 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 15 36 50 100 38 180 94 73 233 135 255 194 204 132 88 113 174 59 107 13 165 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 184 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 175 115 129 14 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 212 182 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 237 207 211 252 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 214 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 250 25 55 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 53 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 15 36 50 100 38 180 94 73 233 135 255 194 204 132 88 113 174 59 107 13 165 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 14.705882 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 83 95 150 151 38 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 30 16 161 38 155 171 113 66 100 140 183 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 131 88 195 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 137 21 78 225 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 251 134 128 39 149 201 164 162 84 86 33 29 247 240 232 133 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 182 98 160 78 75 10 140 99 156 140 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 207 207 211 237 252 209 213 203 195 127 221 53 211 252 219 125 35 186 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 40 61 113 24 126 248 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 48 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 35 135 236 194 204 132 88 109 178 59 103 13 42 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 83 95 150 151 38 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 30 16 161 38 155 171 113 66 100 140 183 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 131 88 195 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 137 21 78 225 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 251 134 128 39 149 201 164 162 84 86 33 29 247 240 232 133 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 182 98 160 78 75 10 140 99 156 140 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 207 207 211 237 252 209 213 203 195 127 221 53 211 252 219 125 35 186 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 88 56 243 163 197 68 90 210 215 249 40 61 113 24 126 248 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 48 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 35 135 236 194 204 132 88 109 178 59 103 13 42 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 17.647059 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 112 115 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 250 131 48 99 132 15 130 33 41 252 32 14 161 39 155 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 49 63 239 197 65 250 234 29 84 63 0 167 214 112 174 6 21 162 136 28 45 160 87 7 100 227 104 106 125 188 69 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 132 87 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 76 46 45 54 201 137 215 43 51 225 205 61 228 89 206 2 206 21 206 207 3 151 151 15 28 191 58 208 236 35 84 192 12 229 134 86 209 249 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 251 180 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 7 171 173 135 90 64 243 120 235 214 131 195 218 137 180 157 30 23 202 75 207 211 237 207 209 213 203 195 127 221 53 210 252 219 125 168 53 246 248 138 170 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 224 174 157 158 158 1 210 138 190 71 194 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 41 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 246 30 50 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 224 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 196 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 59 132 88 113 174 204 103 13 42 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 112 115 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 250 131 48 99 132 15 130 33 41 252 32 14 161 39 155 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 49 63 239 197 65 250 234 29 84 63 0 167 214 112 174 6 21 162 136 28 45 160 87 7 100 227 104 106 125 188 69 245 211 138 198 38 180 114 50 190 238 244 136 179 113 7 156 132 87 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 76 46 45 54 201 137 215 43 51 225 205 61 228 89 206 2 206 21 206 207 3 151 151 15 28 191 58 208 236 35 84 192 12 229 134 86 209 249 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 84 178 8 11 101 251 180 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 7 171 173 135 90 64 243 120 235 214 131 195 218 137 180 157 30 23 202 75 207 211 237 207 209 213 203 195 127 221 53 210 252 219 125 168 53 246 248 138 170 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 224 174 157 158 158 1 210 138 190 71 194 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 210 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 41 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 246 30 50 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 224 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 196 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 59 132 88 113 174 204 103 13 42 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 20.588236 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 155 15 161 38 31 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 127 188 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 84 7 100 227 104 106 125 188 73 245 211 138 198 39 180 114 50 190 238 244 136 179 113 7 156 131 88 95 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 133 124 222 254 190 211 159 124 34 58 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 246 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 1 202 211 237 207 209 213 101 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 235 89 151 4 43 107 233 1 228 178 157 158 138 1 210 158 190 71 84 163 141 40 157 164 90 152 6 68 9 91 63 130 63 135 88 59 243 163 197 68 90 210 215 249 42 59 113 21 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 19 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 214 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 95 150 83 51 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 155 15 161 38 31 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 127 188 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 84 7 100 227 104 106 125 188 73 245 211 138 198 39 180 114 50 190 238 244 136 179 113 7 156 131 88 95 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 133 124 222 254 190 211 159 124 34 58 66 88 4 84 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 246 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 198 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 1 202 211 237 207 209 213 101 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 235 89 151 4 43 107 233 1 228 178 157 158 138 1 210 158 190 71 84 163 141 40 157 164 90 152 6 68 9 91 63 130 63 135 88 59 243 163 197 68 90 210 215 249 42 59 113 21 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 19 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 214 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 23.529412 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 186 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 129 115 175 14 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 137 225 21 78 44 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 174 14 201 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 75 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 84 94 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 214 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 246 25 55 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 227 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 170 115 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 51 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 145 151 212 33 83 51 86 246 186 236 251 227 250 130 48 99 132 15 131 33 41 252 32 14 161 38 157 171 113 156 100 138 184 218 167 208 129 115 175 14 23 50 83 27 220 104 90 49 63 74 197 65 250 235 29 84 63 0 167 168 112 174 6 21 162 161 3 45 160 87 7 100 227 104 106 125 188 73 245 211 138 198 38 180 114 50 223 238 244 136 179 113 7 156 131 88 90 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 137 225 21 78 44 215 43 51 201 187 79 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 174 14 201 164 173 162 86 33 29 247 15 232 130 124 222 254 190 211 159 124 34 178 66 88 4 75 178 8 11 101 249 182 128 135 161 242 216 78 98 160 182 75 10 140 99 156 140 78 63 7 219 94 142 89 221 80 170 199 21 25 253 123 151 175 90 0 237 198 37 249 131 23 221 117 84 94 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 252 207 211 237 207 209 213 203 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 4 89 151 235 43 49 233 1 220 178 157 158 138 1 210 158 190 71 164 163 141 40 157 84 90 152 6 68 9 91 63 130 63 135 68 163 243 56 197 88 90 214 215 249 42 59 113 22 248 126 205 211 11 213 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 70 87 89 188 76 244 103 196 63 229 60 246 25 55 246 210 143 114 25 84 116 55 95 238 200 194 179 121 247 161 85 27 220 53 3 2 3 107 157 220 44 110 250 30 157 194 8 227 52 155 8 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 74 111 136 177 157 205 67 211 99 114 210 161 136 32 158 11 182 17 18 170 115 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 0 227 24 172 52 160 144 187 61 200 180 36 51 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 26.470589 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 151 49 126 141 115 112 201 186 28 150 151 95 150 83 51 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 31 15 161 38 155 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 84 7 100 227 104 106 125 188 73 245 211 138 198 39 180 114 50 190 238 244 136 179 113 7 156 131 88 95 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 133 124 222 254 190 211 159 124 34 16 66 88 4 84 178 8 11 101 249 226 128 135 161 242 216 78 98 160 182 75 10 140 99 156 246 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 195 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 1 202 211 237 207 209 213 101 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 235 89 151 4 43 49 233 1 228 178 157 158 138 1 210 158 190 71 164 163 141 40 157 88 90 152 6 68 9 91 63 130 63 135 88 59 243 163 197 68 90 210 215 249 42 59 113 24 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 92 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 19 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 172 227 24 0 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 120) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 49 126 141 115 112 201 186 28 150 151 95 150 83 51 86 246 184 236 251 227 251 129 48 99 132 15 131 33 41 252 31 15 161 38 155 171 113 66 100 138 185 218 167 203 134 115 174 15 23 50 83 27 220 104 90 190 178 74 197 65 250 235 29 84 63 0 167 214 112 174 6 21 162 159 5 45 160 84 7 100 227 104 106 125 188 73 245 211 138 198 39 180 114 50 190 238 244 136 179 113 7 156 131 88 95 37 182 212 135 71 117 231 205 199 176 12 53 18 147 76 12 94 203 155 67 78 44 225 21 78 137 215 43 51 201 205 61 228 89 119 2 206 21 206 207 3 151 151 15 28 191 58 208 236 226 84 3 201 229 134 86 207 251 83 234 87 42 128 39 149 201 164 162 173 86 33 29 247 15 232 133 124 222 254 190 211 159 124 34 16 66 88 4 84 178 8 11 101 249 226 128 135 161 242 216 78 98 160 182 75 10 140 99 156 246 78 63 7 219 94 142 93 217 80 170 199 21 25 253 123 151 175 90 0 237 195 249 37 131 23 221 117 7 171 173 135 90 64 243 121 234 214 131 195 218 137 104 161 30 23 137 1 202 211 237 207 209 213 101 195 127 221 53 211 252 219 125 168 53 246 248 138 169 142 128 252 21 79 235 44 113 23 125 156 126 119 53 76 34 235 89 151 4 43 49 233 1 228 178 157 158 138 1 210 158 190 71 164 163 141 40 157 88 90 152 6 68 9 91 63 130 63 135 88 59 243 163 197 68 90 210 215 249 42 59 113 24 248 126 205 211 11 76 148 157 73 239 14 36 226 254 82 252 94 153 166 69 255 15 169 67 49 52 39 73 252 172 73 87 89 188 76 244 103 196 63 229 60 246 25 55 246 251 143 114 25 84 116 55 92 238 200 194 179 121 247 161 85 27 173 53 3 2 3 107 157 220 44 110 250 30 157 194 8 229 52 155 19 127 249 206 211 172 97 100 173 17 208 234 213 94 1 116 108 3 104 119 198 97 13 52 40 167 197 163 177 111 74 131 157 205 67 211 99 161 210 113 15 34 158 12 182 193 18 115 170 13 255 99 77 14 72 133 53 135 132 219 155 90 180 14 240 137 172 227 24 0 52 160 144 187 61 200 180 36 50 100 38 15 94 73 233 135 255 194 204 132 88 113 174 59 103 13 42 66 151 120)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9))) (setf (om-darwin::generation om-darwin::ga) 713) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 2)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 1)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (3 1)) (1 (1.0 3)))) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((3 4) ((1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5150 4750 4850 4950)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750 4400 3950 4450)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150 4150 4150 3950)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650 3150 3850 3250)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150 2800 3550 2900)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850 3100 2200 3050)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5250 5550 5200)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450 4150 4550 4400)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100 3900 4150 4000)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350 5450 4750 5400)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350 3850 3750 4500)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5550 5650 5100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6450 6450 5850)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 4200 4650 4200)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 4200 3600 3600)) :ldur (quote (500 500 500 500)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850 5100 5150 4450)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100 4100 4250 3950)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5300 5400 5350)) :ldur (quote (500 500 500 500)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450 6100 6800 6700)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4700 4850 5050)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350 4450 3750 3700)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350 5450 5550 5450)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350 4050 4850 4800)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150 6350 5950 6300)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 6600 7200 6950)) :ldur (quote (500 500 500 500)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650 5850 5250 5150)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150 5050 4950 4650)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6450 6500 5900)) :ldur (quote (500 500 500 500)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5350 4950 4650)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6650 6600 6850)) :ldur (quote (500 500 500 500)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7900 7500 7500)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 7650 7000 7650)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6450 6600 6950)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 6350 6750 6750)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450 5750 6100 6200)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 5300 5750 5350)) :ldur (quote (167 167 167 167)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8000 7650 8400)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250 7100 6750 7000)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6600 6500 6750)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450 7000 6950 7100)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6750 6750 6850)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050 7250 7800 7300)) :ldur (quote (333 333 333 333)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (27/4 (((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0)) ((9 8) (1 (1 (1.0 1)) 1.0 1 (1 (1.0 1)) 1.0 1 2)) ((4 4) ((1 (1 1)) (1 (1.0 3)) (1 (1 1)) (1 (1.0 3)))) ((7 8) (1 1 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 1)) ((4 4) ((1 (3 1)) (1 (1.0 1)) (1 (3 1)) (1 (1.0 3)))) ((7 8) (1 1 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((3 4) ((1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gff) (quote gff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 24) nil nil (quote :midi-player) 19/25 nil 1000 0 (om-make-point 370 280) (om-make-point 724 74) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 268 452) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "easy-out-16.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 848 1228) (om-make-point 209 92) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "easy-out-16" :type "aiff") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "easy-out-16.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 89 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "defs->sound" (om-load-patch-abs1 "defs->sound" (quote ((let ((box (om-load-boxcall (quote abstraction) "jitter" (om-load-lisp-abspatch "jitter" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"jitter\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (times)$  (loop for time in times$        collect (+ time (* (om-random -20 20) .001))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "TIMES" nil))) (om-make-point 278 385) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get values of best specimen" (om-load-patch-abs1 "get values of best specimen" (quote ((let ((box (om-load-boxcall (quote lispfun) "ARR-CHANNEL-FILTER" (quote om-darwin::arr-channel-filter) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 202 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 374 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 91 662) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 52 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADAR" (quote cadar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 114 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 72 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 95 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 534) (om-make-point 108 59) nil nil nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 50 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-REGIONS" (quote om-darwin::arr-regions) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 64 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 3 1 0 nil 0) (7 0 2 0 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (4 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (6 0 9 0 nil 0))) 6.1 nil "" (om-make-point 617 165) (om-make-point 721 730)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 195 116) nil nil nil "get values of best specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "def->soundpath" (om-load-patch-abs1 "def->soundpath" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 107 840) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 380 187) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "def" 0 (om-make-point 100 73) "" "def" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 95 727) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 57 290) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 232 609) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 259 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 76 474) (om-make-point 67 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 4 0 nil 0) (4 1 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.1 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 60 288) nil nil "l" "def->soundpath"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 290 213) (om-make-point 34 30) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ratios-to-ms" (om-load-lisp-abspatch "ratios-to-ms" 6.1 ";;; Edit a valid LAMBDA EXPRESSION for \"ratios-to-ms\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ratios tempo)$  (om* ratios (* (/ 60 tempo) 4)))") (quote ((om-load-inputfun (quote input-funbox) "" "RATIOS" nil) (om-load-inputfun (quote input-funbox) "" "TEMPO" nil))) (om-make-point 212 271) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 389 372) (om-make-point 132 59) nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 439 279) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 607) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "db" 1 (om-make-point 126 212) "" "db" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "engine" 0 (om-make-point 188 28) "" "engine" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLACE-SOUNDS" (quote place-sounds) (quote ((om-load-inputfun (quote input-funbox) "" "SOUNDS" nil) (om-load-inputfun (quote input-funbox) "" "TIMES-1" nil) (om-load-inputfun (quote input-funbox) "" "DETUNES" nil))) (om-make-point 215 508) (om-make-point 114 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 94 418) (om-make-point 81 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (9 0 1 0 nil 0) (8 0 2 1 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 5 0 nil 0) (1 1 6 0 nil 0) (10 0 7 0 nil 0) (11 0 10 0 nil 0) (0 0 10 1 nil 0) (5 1 10 2 nil 0) (2 0 11 0 nil 0) (5 0 11 1 nil 0))) 6.1 nil "" (om-make-point 753 210) (om-make-point 1115 862)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 656 1138) nil (list "/Users/holbrook/Data/lib/OM-libraries/om-darwin/cbsolo-presentation/out-files/easy-out-16.aiff") "x" "defs->sound"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "biggest-folder" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 159 435) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 173 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "max" (quote maxi) (quote ((om-load-inputfun (quote input-funbox) "numbers" "VALUE" nil))) (om-make-point 154 344) (om-make-point 133 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 154 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 164 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 239 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 139 471) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "biggest-folder" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2D PP CSEQ ANALYSIS" (get-inst-from-globals "2D PP CSEQ ANALYSIS") (quote nil) (om-make-point 202 215) nil (om-make-point 128 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "2d pp path list" (get-inst-from-globals "2d pp path list") (quote nil) (om-make-point 1001 844) nil (om-make-point 113 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IDENTITY" (quote identity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 1053 231) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((30 0 0 0 nil 0) (9 0 1 1 nil 0) (32 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (7 1 6 1 nil 0) (7 2 6 2 nil 0) (5 0 6 3 nil 0) (8 0 7 0 nil 0) (17 1 8 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (16 0 14 0 nil 0) (15 0 16 0 nil 0) (9 0 17 0 nil 0) (9 0 18 1 nil 0) (20 0 19 1 nil 0) (34 0 20 1 nil 0) (9 0 22 0 nil 0) (21 0 22 1 nil 0) (34 0 23 1 nil 0) (22 0 23 2 nil 0) (18 0 24 0 nil 0) (19 0 24 1 nil 0) (31 0 26 0 nil 0) (33 0 26 1 nil 0) (26 0 27 0 nil 0) (23 0 27 1 nil 0) (27 0 28 1 nil 0) (24 0 28 2 nil 0) (32 0 30 0 nil 0) (34 0 31 0 nil 3) (28 0 32 0 nil 0) (35 0 32 1 nil 0) (34 0 33 0 nil 3))) nil 6.1))