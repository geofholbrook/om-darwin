(in-package om);;;  July 29, 1998;;;;;;  Main function is 'acoustic-dissonance.'  See documentation for the;;;  function for examples of use.  Don't forget that in MCL the command;;;  "control - x -d" will open a documentation window. This program is a;;;  port of Richard Parncutt's C program, 'roughness,' which is itself;;;  based on the work of Hutchinson & Knopoff (1978).;;;;;;					-Sean Ferguson;;;					 McGill University;;;					 Montreal, Canada(defun round-off (number-of-places floating-point-number)  "Rounds off a floating-point number to the given number of places.(round-off 2 3.234264) -> 3.23(round-off 4 3.234264) -> 3.2343"   (declare (type fixnum number-of-places)            (type float floating-point-number))   (let ((x (expt 10 number-of-places)))     (float (/ (round (* x floating-point-number)) x))))(defun midi->pitcat (midi-pitch)  "Converts MIDI pitch numbers (middle c = 60) to Parncutt's pitchcategories (middle c = 48)"  (declare (type fixnum midi-pitch))  (- midi-pitch 12));;Taken from Parncutt...(defun pitch->Hz (midi-pitch)  "Translates a MIDI pitch number (middle c = 60) into a frequencygiven in Hz. So (pitch->Hz 69) returns 440 Hz."  (declare (type fixnum midi-pitch))  (float (* 440 (expt 2 (/ (- (midi->pitcat midi-pitch) 57) 12)))))(defun mean-freq (f1 f2)  "Returns the mean frequency of two pure tones in Hz.  Equals 1/2(f1 + f2)."  (float (/ (+ f1 f2) 2)))(defun critical-bandwidth (f)  "Returns the critical bandwidth in Hz for the given frequency,also in Hz (a4 = 69 = 440 Hz)."  (declare (type float f))  (* 1.72 (expt f .65)))(defun cbw-interval (f1 f2)  "Gives the interval between two partials in units of the critical bandwidth. Frequencies should be givenin Hz."  (declare (type float f1 f2))  (float (/ (abs (- f2 f1))     (critical-bandwidth (the float (mean-freq f1 f2)))))) (defun standard-curve (cbw-int)  "Parncutt's function for g(y) of H&K (p. 4). Gives the dissonanceweighting factor of the frequency difference of two pure tones in units of the critical bandwidth."  (declare (type float cbw-int))  (if (> cbw-int 1.2) ;if critical bandwidth interval > 1.2, *no* roughness    0    (let ((ratio (float (/ (the float cbw-int) .25)))) ;.25 is interval for max roughness      (expt (* (* 2.7182818 (the float ratio)) (exp (* -1 (the float ratio)))) 2))))(defun pure-tone-dissonance (f1 f2)  "Gives the pure tone dissonance of two partials given in Hz without considering amplitude. That is, amp for both f1 and f2 = 1."  (declare (type float f1 f2))  (float (standard-curve (the float (cbw-interval f1 f2)))))#|(defun harm-series (fund-pitch &optional (no-of-harms 10) (freq nil))  "Gives the harmonic series in Hz for a given fundamentalpitch (given as a MIDI pitch number).  Default is 10 harmonics.If freq is set to t, then accepts frequency in Hz."  (labels ((rec1 (cnt max result)             (cond ((> cnt max) (reverse result))                   (t (rec1 (+ cnt 1)                            max                            (cons (* cnt (if freq                                           fund-pitch                                           (pitch->Hz fund-pitch)))                             result))))))    (rec1 1 no-of-harms nil)))|#(defun harmonic-interval (harmonic-number)  "Gives the interval in semitones between fundamental and harmonic."  (declare (type fixnum harmonic-number))  (floor (+ (/ (* 12 (log harmonic-number)) (log 2)) .5)));(memoize 'harmonic-interval)(defun harmonic-series-pitch (fundamental-pitch &optional (no-of-harms 10))  "Give harmonic series rounded off to chromatic pitches."  (declare (optimize (speed 3) (safety 0)) (type fixnum fundamental-pitch no-of-harms))  (loop for x from 1 to no-of-harms        collect (+ (harmonic-interval x) fundamental-pitch)));(memoize 'harmonic-series-pitch)(defun harmonic-series-frequency (fundamental-pitch &optional (no-of-harms 10))  "Gives the harmonic series in frequency rounded off to chromatic pitches.Fundamental pitch is given as MIDI note number (middle c = 60)."  (mapcar #'pitch->Hz (harmonic-series-pitch fundamental-pitch no-of-harms)))(defun sum-amplitudes (amp1 amp2)  "Returns the summed amplitudes of arguments.  Amplitudes are given as fractions of harmonic numbers (1/n). For example, the amplitude of harmonic 3 is 1/3."  (float (sqrt (+ (* amp1 amp1) (* amp2 amp2)))))(defun get-harm-amps (harm-series)  (loop for harm in harm-series        for x = 1 then (+ x 1)        collect (cons harm (/ 1 x))))(defun get-amps-of-overlaps (overlaps spect1+amps spect2+amps)  "To be called by merge-spectrums only."  (let ((result nil))    (dolist (x overlaps result)      (push (cons x (the float (sum-amplitudes                     (rest (assoc x spect1+amps))                     (rest (assoc x spect2+amps)))))            result))))(defun remove-overlaps (orig final pool)  (cond ((null orig) final)        ((member (caar orig) pool)         (remove-overlaps (rest orig) final pool))        (t (remove-overlaps (rest orig)                                (push (first orig) final)                                pool))));;This isn't that efficient, but it isn't really called very often.(defun merge-spectrums (fund-pitch1 &optional (pitches nil))  "Returns a list of dotted pairs with car = pitch of spectralcomponent (in MIDI numbers) and cdr = relative amplitude.Components which occur more than once have their amplitudesscaled appropriately."  (let ((result (get-harm-amps (harmonic-series-pitch fund-pitch1))))    (if (null pitches) result        (labels ((rec1 (final current pchs)                   (let* ((spect+amps (get-harm-amps (harmonic-series-pitch current)))                          (overlaps (mapcar #' car                                             (intersection final spect+amps :key #'car)))                          (overlap+amps (get-amps-of-overlaps overlaps final spect+amps))                          (merged-spects+amps (nconc final spect+amps))                          (gapped-spects+amps (remove-overlaps merged-spects+amps                                                               nil                                                               overlaps))                          (re-merged (sort (nconc overlap+amps                                                  gapped-spects+amps)                                          #'< :key #'car)))                     (cond ((null pchs) re-merged)                           (t (rec1 re-merged                                    (first pchs)                                    (rest pchs)))))))          (rec1 result (first pitches) (rest pitches))))))                          (defun not-too-big-p (x y)  "Tests to see if two MIDI pitches are small enough tobother testing for pure-tone-dissonance.  A time-saving function for 'acoustic-dissonance.'"  (let ((diff (abs (- x y)))        (lower (min x y)))    (or (and (< lower 24) (< diff 11))         (and (< lower 36) (< diff 10))        (and (< lower 48) (< diff 8))        (and (< lower 60) (< diff 7))        (and (< lower 72) (< diff 5))        (and (< lower 86) (< diff 4))        (and (< lower 106) (< diff 3))        (and (> lower 105) (< diff 2)))))                              (defun diss-numerator (pch-amp1 pch-amp2)  "Pitches must be given as MIDI notes."  (declare (type fixnum pch1 pch2))  (let ((pch1 (first pch-amp1))        (pch2 (first pch-amp2))        (amp1 (rest pch-amp1))        (amp2 (rest pch-amp2)))    ;;This conditional statement increases speed by up to 5 times or more!    (if (not (not-too-big-p pch1 pch2)) ;Check to see if worth computing,      0 				;if not, then return 0.      (* (* amp1 amp2) ;Numerator 	;Otherwise, calculate numerator         (the float (pure-tone-dissonance (pitch->Hz pch1)                                          (pitch->Hz pch2))))))) ;Numerator(defun acoustic-dissonance (pitches)   "Given a list of one or more midi pitches, returns theacoustic-dissonance, or 'roughness.' For example:? (acoustic-dissonance '(60 61 62 73))0.7287? (acoustic-dissonance '(60))0.0012? (acoustic-dissonance '(47 49 53))0.3846? (acoustic-dissonance '(62 67 72 77 82))0.1592"  (let* ((combined-spectrum (merge-spectrums (first pitches) (rest pitches)))         (denominator (float          ;denominator is total amplitude of spectrum                       (reduce #'+                                (mapcar #'(lambda (x) (* x x))                                        (mapcar #'cdr combined-spectrum))))))    (do* ((comb-spect combined-spectrum (rest comb-spect))          (lowest (first combined-spectrum) (first comb-spect))          (higher (rest combined-spectrum) (rest comb-spect))          (interim-list (mapcar #'(lambda (x) (diss-numerator lowest x))                                higher)                        (mapcar #'(lambda (x) (diss-numerator lowest x))                                higher))          (result interim-list (append interim-list result)))         ((null (rest comb-spect))          (round-off 4 (/ (reduce #'+ result)    ;add up all numerators and                          denominator)))))) ;then divide 