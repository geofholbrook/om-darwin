; OM File Header - Saved 2012/12/31 0:44:19
; (6.050102 :patc (om-make-point 10 10) (om-make-point 414 462) (om-make-point 1074 1048) "" 183 0 "2012/12/29 21:40:12" "2012/12/31 0:44:19")
; End File Header
; External resources 
; (list (list (quote :abstraction) "range-env->two-envs.oml"))
(in-package :om)(load-lib-for (quote ("om-darwin" "om-geof" "om-enved")))(setf *om-current-persistent* (om-load-patch1 "test" (quote ((om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 283 305) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 223 305) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 237 366) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote genfun) "INSPECT-THIS-PATCH" (quote inspect-this-patch) (quote nil) (om-make-point 188 276) nil nil nil nil 1))) (quote nil) 6.050102 nil "" (om-make-point 2072 112) (om-make-point 400 500)) (quote nil) (om-make-point 123 573) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 867 301) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 431 295) (om-make-point 42 31) (list 3 5) "(3 5)" nil) (om-load-boxwithed1 (quote box-with-win) "no reps" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "specimen" nil))) (om-make-point 765 382) nil nil "l" (list (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" 0) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 1))) (om-make-point 181 567) (om-make-point 102 57) nil nil nil 1) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 291 360) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 229 512) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 265 437) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 163 444) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 3))) (om-make-point 183 286) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CDDR" (quote cddr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 417 224) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 106 109) nil nil nil nil 1) (om-load-boxin "specimen" 0 (om-make-point 137 54) "" "specimen" nil nil) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 203 665) (om-make-point 146 59) nil nil nil 3) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 488 278) nil nil nil nil 0) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 137) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 336 776) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 204 773) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (5 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 3 0 nil 0) (5 0 4 0 nil 0) (11 0 5 0 nil 0) (11 0 6 0 nil 0) (8 0 7 0 nil 0) (0 0 9 0 nil 0) (6 0 10 0 nil 0) (7 0 11 0 nil 0) (9 1 12 0 nil 0) (9 0 13 0 nil 0))) 1 "no reps" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 614 726) (om-make-point 56 30) (list 0 250) "(0 250)" nil) (om-load-boxwithed1 (quote box-with-win) "melodic range" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "range" nil))) (om-make-point 341 373) nil nil "l" (list (om-load-boxin "range" 1 (om-make-point 520 78) "" "range" nil nil) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 122 124) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 85 38) "" nil nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 118 279) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 203 280) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 146 356) (om-make-point 62 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 147 433) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 227 515) nil nil nil nil 1) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 233 590) (om-make-point 146 59) nil nil nil 3) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 409 209) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 488 278) nil nil nil nil 0) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 226 140) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 399 691) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 206 699) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (11 0 3 0 nil 0) (11 0 4 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (6 0 7 0 nil 0) (0 0 7 1 nil 0) (7 0 8 0 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (1 0 11 0 nil 0) (8 1 12 0 nil 0) (8 0 13 0 nil 0))) 1 "melodic range" nil) (om-load-boxcall (quote abstraction) "melodic" (om-load-patch-abs1 "melodic" (quote ((om-load-boxwithed1 (quote box-with-win) "melodic range" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 162 374) nil nil nil (list (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 79 201) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 164 202) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 107 278) (om-make-point 62 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 108 355) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 265 310) (om-make-point 42 30) (list 3 4) "(3 4)" nil) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 188 437) nil nil nil nil 1) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 194 512) (om-make-point 146 59) nil nil nil 3) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 370 131) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 449 200) nil nil nil nil 0) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 78) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 360 613) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 167 621) nil nil nil 0)) (quote ((10 0 1 0 nil 0) (10 0 2 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (4 0 6 0 nil 0) (5 0 6 1 nil 0) (6 0 7 0 nil 0) (10 0 8 0 nil 0) (8 0 9 0 nil 0) (0 0 10 0 nil 0) (7 1 11 0 nil 0) (7 0 12 0 nil 0))) 1 "melodic range" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 286 212) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 123 141) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 12) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 311 596) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 4 0 nil 0))) 6.050102 nil "" (om-make-point 902 187) (om-make-point 727 840)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 495 126) nil nil "l" "melodic") (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 537 737) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 434 685) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 442 805) (om-make-point 434 170) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5200) (5700) (6000) (6400) (6100) (6600) (6100) (6500) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1049 513) (om-make-point 480 292) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 865 115) (om-make-point 154 30) (list (list 0 (list 48 58)) (list 1 (list 62 72))) "((0 (48 58)) (1 (62 72)))" nil) (om-load-boxcall (quote abstraction) "dynamic-range" (om-load-patch-abs1 "dynamic-range" (quote ((om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 247 328) (om-make-point 86 43) nil nil nil 1) (om-load-boxcall (quote genfun) "X-TRANSFER" (quote x-transfer) (quote ((om-load-inputfun (quote input-funbox) "a list or BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0S0 0.0S0 0.0S0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "X value" "X-VAL" (list 0 100)))) (om-make-point 306 214) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-TRANSFER" (quote x-transfer) (quote ((om-load-inputfun (quote input-funbox) "a list or BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0S0 0.0S0 0.0S0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "X value" "X-VAL" (list 0 100)))) (om-make-point 409 213) nil nil nil nil 1) (om-load-boxin "max-bpf" 3 (om-make-point 421 68) "" "max-bpf" nil nil) (om-load-boxin "min-bpf" 2 (om-make-point 300 72) "" "min-bpf" nil nil) (om-load-boxin "position" 1 (om-make-point 189 66) "" "position" nil nil) (om-load-boxin "note" 0 (om-make-point 73 64) "" "note" nil nil) (om-load-boxout "output" 0 (om-make-point 136 412) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 0 2 nil 0) (4 0 1 0 nil 0) (5 0 1 1 nil 1) (3 0 2 0 nil 0) (5 0 2 1 nil 1) (0 0 7 0 nil 0))) 6.050102 nil "" (om-make-point 1038 120) (om-make-point 669 630)) (quote ((om-load-inputfun (quote input-funbox) "" "note" nil) (om-load-inputfun (quote input-funbox) "" "position" nil) (om-load-inputfun (quote input-funbox) "" "min-bpf" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 500 342) nil nil "l" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 317 311) (om-make-point 98 36) nil nil nil 1) (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 397 120) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 281 157) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 327 79) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 303 221) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 539 229) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-boxcall (quote patch-box) "range-env->two-envs 2" (quote ("elements" "range-env->two-envs")) (quote ((om-load-inputfun (quote input-funbox) "" "RANGE-ENV" nil))) (om-make-point 585 128) nil nil nil "range-env->two-envs" 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 597 54) (om-make-point 191 32) (list (list 0 (list 60 66)) (list 1 (list 66 72))) "((0 (60 66)) (1 (66 72)))" nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 284 428) (om-make-point 89 43) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 138 382) (om-make-point 23 30) (quote +) "+" nil) (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 207 506) (om-make-point 79 43) nil nil nil 1) (om-load-boxin "range" 1 (om-make-point 474 22) "" "range" nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 138 134) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 131 75) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 12) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 287 577) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((6 0 0 2 nil 0) (6 1 0 3 nil 0) (5 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (13 0 4 0 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0) (7 0 6 0 nil 0) (12 0 7 0 nil 0) (0 0 9 0 nil 0) (13 0 9 1 nil 0) (1 0 9 2 nil 0) (10 0 11 0 nil 0) (9 0 11 1 nil 0) (14 0 13 0 nil 0) (15 0 14 0 nil 0) (11 0 16 0 nil 0))) 6.050102 nil "" (om-make-point 189 88) (om-make-point 995 816)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 623 253) (om-make-point 94 67) nil "l" "dynamic-range") (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 670 55) (om-make-point 56 30) (list 60 66) "(60 66)" nil) (om-load-boxcall (quote abstraction) "constrain-range" (om-load-patch-abs1 "constrain-range" (quote ((om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 288 377) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 188 307) (om-make-point 86 43) nil "l" nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 162 417) (om-make-point 23 30) (quote +) "+" nil) (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 200 485) (om-make-point 79 43) nil nil nil 1) (om-load-boxin "range" 1 (om-make-point 386 47) "" "range" nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 332 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 145 109) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 12) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 287 577) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (5 0 0 1 nil 0) (4 0 1 1 nil 0) (2 0 3 0 nil 0) (0 0 3 1 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (3 0 8 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 557 719)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 580 146) nil nil "l" "constrain-range") (om-load-boxcall (quote genfun) "ADD" (quote om-darwin::add) (quote ((om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "CRITERIA" nil))) (om-make-point 407 484) (om-make-point 174 59) nil nil nil 1) (om-load-boxcall (quote abstraction) "whole-tone" (om-load-patch-abs1 "whole-tone" (quote ((om-load-boxcall (quote lispfun) "ODDP" (quote oddp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 138 319) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "COUNT-IF" (quote count-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 146 429) (om-make-point 166 43) nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 286 212) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 145 109) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 199 12) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 311 596) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (1 0 5 0 nil 0))) 6.050102 nil "" (om-make-point 1022 16) (om-make-point 444 700)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 413 192) nil nil "l" "whole-tone") (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 638 528) (om-make-point 42 30) 1000 "1000" nil) (om-load-boxcall (quote abstraction) "just print the genotype" (om-load-patch-abs1 "just print the genotype" (quote ((om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" 0) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" 0))) (om-make-point 196 423) nil nil nil 2) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 184 303) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GENO" (quote om-darwin::geno) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 136 141) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 182 43) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 214 518) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0))) 6.050102 nil "" (om-make-point 307 124) (om-make-point 581 715)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 269 180) nil nil "l" "just print the genotype") (om-load-boxcall (quote abstraction) "how should it work" (om-load-patch-abs1 "how should it work" (quote ((om-load-boxcall (quote lispfun) "EVALUATE" (quote om-darwin::evaluate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "CRIT" "CRIT" nil))) (om-make-point 408 506) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "pitches" (om-load-lisp-abspatch "pitches" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 655 167) nil nil nil "pitches") (om-load-boxcomment "comment" (om-make-point 100 60) (quote "becomes this --->") "" (om-make-point 338 390) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "C-LIST" (quote om-darwin::c-list) (quote ((om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil))) (om-make-point 617 543) (om-make-point 233 67) nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 746 427) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fun2" (om-load-patch-abs1 "fun2" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 757 289) nil nil "l" "fun2") (om-load-boxcall (quote abstraction) "fun1" (om-load-patch-abs1 "fun1" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 599 324) nil nil "l" "fun1") (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 621 423) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fun2" (om-load-patch-abs1 "fun2" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 181 361) nil nil nil "fun2") (om-load-boxcall (quote abstraction) "fun1" (om-load-patch-abs1 "fun1" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 66 370) nil nil nil "fun1") (om-load-boxcall (quote abstraction) "each-pitch" (om-load-lisp-abspatch "each-pitch" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 170 184) nil nil nil "each-pitch") (om-load-boxin "index" 2 (om-make-point 640 31) "" "index" nil nil) (om-load-boxcall (quote genfun) "C-LIST" (quote om-darwin::c-list) (quote ((om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil))) (om-make-point 62 564) (om-make-point 233 67) nil nil nil 1) (om-load-boxin "genotype" 1 (om-make-point 495 17) "" "genotype" nil nil) (om-load-boxin "phenotype" 0 (om-make-point 91 38) "" "phenotype" nil (om-make-point 104 59)) (om-load-boxout "output" 0 (om-make-point 176 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((14 0 1 0 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (5 0 4 0 nil 0) (1 0 4 1 nil 0) (6 0 7 0 nil 0) (1 0 7 1 nil 0) (10 0 8 0 nil 0) (10 0 9 0 nil 0) (14 0 10 0 nil 0) (9 0 12 0 nil 0) (8 0 12 1 nil 0) (12 0 15 0 nil 0))) 6.050102 nil "" (om-make-point 800 76) (om-make-point 1074 956)) (quote ((om-load-inputfun (quote input-funbox) "" "phenotype" nil) (om-load-inputfun (quote input-funbox) "" "genotype" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 143 44) nil nil nil "how should it work") (om-load-boxcall (quote abstraction) "how should it work 2" (om-load-patch-abs1 "how should it work 2" (quote ((om-load-boxcall (quote abstraction) "fun2" (om-load-patch-abs1 "fun2" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 534 501) nil nil nil "fun2") (om-load-boxcall (quote abstraction) "fun1" (om-load-patch-abs1 "fun1" (quote ((om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 441 502) nil nil nil "fun1") (om-load-boxcall (quote abstraction) "each-chord" (om-load-lisp-abspatch "each-chord" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 713 454) nil nil nil "each-chord") (om-load-boxcall (quote abstraction) "each-pitch" (om-load-lisp-abspatch "each-pitch" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 473 386) nil nil nil "each-pitch") (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 475 207) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "post phenotype" (om-load-lisp-abspatch "post phenotype" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 353 77) nil nil nil "post phenotype") (om-load-boxcall (quote abstraction) "alternate phenotype" (om-load-lisp-abspatch "alternate phenotype" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 550 155) nil nil nil "alternate phenotype") (om-load-boxcall (quote abstraction) "pitchclasses" (om-load-lisp-abspatch "pitchclasses" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 164 258) nil nil nil "pitchclasses") (om-load-editor-box1 "OM-ENVED" (quote om-enved) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "enved-xy" nil) (om-load-inputfun (quote input-funbox) "" "x-points" nil) (om-load-inputfun (quote input-funbox) "" "y-points" nil))) (om-make-point 862 214) (om-make-point 156 78) (let ((newobj (mki (quote om-enved) :enved-xy (quote ((0.0 3.7604792 0.006666667 3.761412 0.013333334 3.7641738 0.02 3.768711 0.026666668 3.7749698 0.033333335 3.7828963 0.04 3.7924362 0.046666667 3.8035357 0.053333335 3.8161412 0.06 3.8301983 0.06666667 3.8456536 0.07333333 3.8624525 0.08 3.8805418 0.086666666 3.899867 0.093333334 3.9203747 0.1 3.9420104 0.10666667 3.9647205 0.11333334 3.9884513 0.12 4.0131483 0.12666667 4.038758 0.13333334 4.0652266 0.14 4.0924997 0.14666666 4.1205235 0.15333334 4.1492443 0.16 4.178608 0.16666667 4.208561 0.17333333 4.239049 0.18 4.270018 0.18666667 4.3014145 0.19333333 4.3331843 0.2 4.3652735 0.20666667 4.3976283 0.21333334 4.4301944 0.22 4.4629183 0.22666668 4.495746 0.23333334 4.5296664 0.24 4.5667987 0.24666667 4.6069183 0.25333333 4.649715 0.26 4.69488 0.26666668 4.7421026 0.27333334 4.791074 0.28 4.8414836 0.28666666 4.893022 0.29333332 4.9453797 0.3 4.9982467 0.30666667 5.0513134 0.31333333 5.1042695 0.32 5.156806 0.32666665 5.208613 0.33333334 5.2593804 0.34 5.308799 0.34666666 5.356558 0.35333332 5.4023485 0.36 5.4458614 0.36666667 5.4867854 0.37333334 5.5248118 0.38 5.5596304 0.38666666 5.5909314 0.39333335 5.618406 0.4 5.641743 0.40666667 5.660634 0.41333333 5.6747685 0.42 5.683712 0.42666668 5.687216 0.43333334 5.685478 0.44 5.678708 0.44666666 5.6671114 0.45333335 5.6508956 0.46 5.630268 0.46666667 5.6054363 0.47333333 5.576607 0.48 5.5439878 0.48666668 5.5077853 0.49333334 5.4682074 0.5 5.4254613 0.50666667 5.3797536 0.5133333 5.331292 0.52 5.2802835 0.52666665 5.2269354 0.53333337 5.171455 0.54 5.114049 0.5466667 5.0549255 0.55333335 4.9942913 0.56 4.932353 0.56666667 4.869319 0.5733333 4.8053956 0.58 4.740791 0.58666665 4.6757107 0.5933333 4.6103635 0.6 4.5449553 0.6066667 4.4796944 0.61333335 4.414788 0.62 4.350443 0.62666667 4.286866 0.6333333 4.2242656 0.64 4.1628475 0.64666665 4.10282 0.6533333 4.04439 0.66 3.9877644 0.6666667 3.9331506 0.67333335 3.8807562 0.68 3.8307882 0.68666667 3.7834535 0.6933333 3.7389596 0.7 3.6975134 0.70666665 3.6593228 0.7133333 3.6245942 0.72 3.5935347 0.7266667 3.5663529 0.73333335 3.5432546 0.74 3.5244475 0.74666667 3.5095363 0.75333333 3.4972382 0.76 3.4873934 0.76666666 3.4798858 0.7733333 3.474599 0.78 3.4714158 0.7866667 3.4702206 0.79333336 3.4708963 0.8 3.4733267 0.8066667 3.4773953 0.81333334 3.4829855 0.82 3.489981 0.82666666 3.4982653 0.8333333 3.5077217 0.84 3.518234 0.8466667 3.5296858 0.85333336 3.5419603 0.86 3.5549412 0.8666667 3.5685118 0.87333334 3.582556 0.88 3.596957 0.88666666 3.6115985 0.8933333 3.626364 0.9 3.6411372 0.9066667 3.6558013 0.91333336 3.67024 0.92 3.6843367 0.9266667 3.6979752 0.93333334 3.7110384 0.94 3.7234106 0.94666666 3.7349749 0.9533333 3.745615 0.96 3.7552142 0.96666664 3.7636562 0.97333336 3.7708245 0.98 3.7766025 0.9866667 3.780874 0.99333334 3.7835222 1.0 3.784431) (0.0 6.035928 0.006666667 6.0372954 0.013333334 6.041345 0.02 6.0479984 0.026666668 6.0571766 0.033333335 6.0688005 0.04 6.0827923 0.046666667 6.0990725 0.053333335 6.1175623 0.06 6.138183 0.06666667 6.1608567 0.07333333 6.185504 0.08 6.2120457 0.086666666 6.2404037 0.093333334 6.2704988 0.1 6.302253 0.10666667 6.3355866 0.11333334 6.3704214 0.12 6.4066787 0.12666667 6.444279 0.13333334 6.483145 0.14 6.5231967 0.14666666 6.564356 0.15333334 6.6065436 0.16 6.649681 0.16666667 6.69369 0.17333333 6.738491 0.18 6.784006 0.18666667 6.8301554 0.19333333 6.876861 0.2 6.924044 0.20666667 6.971626 0.21333334 7.0195274 0.22 7.0676704 0.22666668 7.1159754 0.23333334 7.1643643 0.24 7.212758 0.24666667 7.261078 0.25333333 7.309245 0.26 7.3571806 0.26666668 7.4048157 0.27333334 7.453806 0.28 7.5053287 0.28666666 7.5592446 0.29333332 7.615414 0.3 7.6736975 0.30666667 7.7339544 0.31333333 7.7960463 0.32 7.8598323 0.32666665 7.9251738 0.33333334 7.991931 0.34 8.059963 0.34666666 8.129132 0.35333332 8.199297 0.36 8.270319 0.36666667 8.342058 0.37333334 8.414375 0.38 8.48713 0.38666666 8.560183 0.39333335 8.633394 0.4 8.706624 0.40666667 8.779734 0.41333333 8.852582 0.42 8.925031 0.42666668 8.996941 0.43333334 9.06817 0.44 9.13858 0.44666666 9.208032 0.45333335 9.276386 0.46 9.343501 0.46666667 9.409239 0.47333333 9.473459 0.48 9.536022 0.48666668 9.596789 0.49333334 9.65562 0.5 9.712374 0.50666667 9.766913 0.5133333 9.819097 0.52 9.868785 0.52666665 9.915839 0.53333337 9.960119 0.54 10.001485 0.5466667 10.039798 0.55333335 10.074917 0.56 10.106793 0.56666667 10.135635 0.5733333 10.1615305 0.58 10.184555 0.58666665 10.204788 0.5933333 10.222306 0.6 10.237189 0.6066667 10.249512 0.61333335 10.259355 0.62 10.266793 0.62666667 10.271907 0.6333333 10.274773 0.64 10.275468 0.64666665 10.274071 0.6533333 10.270659 0.66 10.265311 0.6666667 10.258104 0.67333335 10.249115 0.68 10.238423 0.68666667 10.226105 0.6933333 10.212238 0.7 10.196902 0.70666665 10.180173 0.7133333 10.162128 0.72 10.142847 0.7266667 10.122406 0.73333335 10.100884 0.74 10.078358 0.74666667 10.054905 0.75333333 10.030604 0.76 10.005532 0.76666666 9.979768 0.7733333 9.953388 0.78 9.926471 0.7866667 9.899094 0.79333336 9.871335 0.8 9.843271 0.8066667 9.814981 0.81333334 9.786544 0.82 9.758034 0.82666666 9.729531 0.8333333 9.701113 0.84 9.672857 0.8466667 9.64484 0.85333336 9.617142 0.86 9.589839 0.8666667 9.563009 0.87333334 9.536731 0.88 9.511081 0.88666666 9.486136 0.8933333 9.461977 0.9 9.43868 0.9066667 9.416322 0.91333336 9.39498 0.92 9.374735 0.9266667 9.355662 0.93333334 9.337841 0.94 9.321347 0.94666666 9.306259 0.9533333 9.292656 0.96 9.280614 0.96666664 9.270211 0.97333336 9.261525 0.98 9.254635 0.9866667 9.249617 0.99333334 9.246549 1.0 9.245508))) :x-points (quote ((0.0 0.006666667 0.013333334 0.02 0.026666668 0.033333335 0.04 0.046666667 0.053333335 0.06 0.06666667 0.07333333 0.08 0.086666666 0.093333334 0.1 0.10666667 0.11333334 0.12 0.12666667 0.13333334 0.14 0.14666666 0.15333334 0.16 0.16666667 0.17333333 0.18 0.18666667 0.19333333 0.2 0.20666667 0.21333334 0.22 0.22666668 0.23333334 0.24 0.24666667 0.25333333 0.26 0.26666668 0.27333334 0.28 0.28666666 0.29333332 0.3 0.30666667 0.31333333 0.32 0.32666665 0.33333334 0.34 0.34666666 0.35333332 0.36 0.36666667 0.37333334 0.38 0.38666666 0.39333335 0.4 0.40666667 0.41333333 0.42 0.42666668 0.43333334 0.44 0.44666666 0.45333335 0.46 0.46666667 0.47333333 0.48 0.48666668 0.49333334 0.5 0.50666667 0.5133333 0.52 0.52666665 0.53333337 0.54 0.5466667 0.55333335 0.56 0.56666667 0.5733333 0.58 0.58666665 0.5933333 0.6 0.6066667 0.61333335 0.62 0.62666667 0.6333333 0.64 0.64666665 0.6533333 0.66 0.6666667 0.67333335 0.68 0.68666667 0.6933333 0.7 0.70666665 0.7133333 0.72 0.7266667 0.73333335 0.74 0.74666667 0.75333333 0.76 0.76666666 0.7733333 0.78 0.7866667 0.79333336 0.8 0.8066667 0.81333334 0.82 0.82666666 0.8333333 0.84 0.8466667 0.85333336 0.86 0.8666667 0.87333334 0.88 0.88666666 0.8933333 0.9 0.9066667 0.91333336 0.92 0.9266667 0.93333334 0.94 0.94666666 0.9533333 0.96 0.96666664 0.97333336 0.98 0.9866667 0.99333334 1.0) (0.0 0.006666667 0.013333334 0.02 0.026666668 0.033333335 0.04 0.046666667 0.053333335 0.06 0.06666667 0.07333333 0.08 0.086666666 0.093333334 0.1 0.10666667 0.11333334 0.12 0.12666667 0.13333334 0.14 0.14666666 0.15333334 0.16 0.16666667 0.17333333 0.18 0.18666667 0.19333333 0.2 0.20666667 0.21333334 0.22 0.22666668 0.23333334 0.24 0.24666667 0.25333333 0.26 0.26666668 0.27333334 0.28 0.28666666 0.29333332 0.3 0.30666667 0.31333333 0.32 0.32666665 0.33333334 0.34 0.34666666 0.35333332 0.36 0.36666667 0.37333334 0.38 0.38666666 0.39333335 0.4 0.40666667 0.41333333 0.42 0.42666668 0.43333334 0.44 0.44666666 0.45333335 0.46 0.46666667 0.47333333 0.48 0.48666668 0.49333334 0.5 0.50666667 0.5133333 0.52 0.52666665 0.53333337 0.54 0.5466667 0.55333335 0.56 0.56666667 0.5733333 0.58 0.58666665 0.5933333 0.6 0.6066667 0.61333335 0.62 0.62666667 0.6333333 0.64 0.64666665 0.6533333 0.66 0.6666667 0.67333335 0.68 0.68666667 0.6933333 0.7 0.70666665 0.7133333 0.72 0.7266667 0.73333335 0.74 0.74666667 0.75333333 0.76 0.76666666 0.7733333 0.78 0.7866667 0.79333336 0.8 0.8066667 0.81333334 0.82 0.82666666 0.8333333 0.84 0.8466667 0.85333336 0.86 0.8666667 0.87333334 0.88 0.88666666 0.8933333 0.9 0.9066667 0.91333336 0.92 0.9266667 0.93333334 0.94 0.94666666 0.9533333 0.96 0.96666664 0.97333336 0.98 0.9866667 0.99333334 1.0))) :y-points (quote ((3.7604792 3.761412 3.7641738 3.768711 3.7749698 3.7828963 3.7924362 3.8035357 3.8161412 3.8301983 3.8456536 3.8624525 3.8805418 3.899867 3.9203747 3.9420104 3.9647205 3.9884513 4.0131483 4.038758 4.0652266 4.0924997 4.1205235 4.1492443 4.178608 4.208561 4.239049 4.270018 4.3014145 4.3331843 4.3652735 4.3976283 4.4301944 4.4629183 4.495746 4.5296664 4.5667987 4.6069183 4.649715 4.69488 4.7421026 4.791074 4.8414836 4.893022 4.9453797 4.9982467 5.0513134 5.1042695 5.156806 5.208613 5.2593804 5.308799 5.356558 5.4023485 5.4458614 5.4867854 5.5248118 5.5596304 5.5909314 5.618406 5.641743 5.660634 5.6747685 5.683712 5.687216 5.685478 5.678708 5.6671114 5.6508956 5.630268 5.6054363 5.576607 5.5439878 5.5077853 5.4682074 5.4254613 5.3797536 5.331292 5.2802835 5.2269354 5.171455 5.114049 5.0549255 4.9942913 4.932353 4.869319 4.8053956 4.740791 4.6757107 4.6103635 4.5449553 4.4796944 4.414788 4.350443 4.286866 4.2242656 4.1628475 4.10282 4.04439 3.9877644 3.9331506 3.8807562 3.8307882 3.7834535 3.7389596 3.6975134 3.6593228 3.6245942 3.5935347 3.5663529 3.5432546 3.5244475 3.5095363 3.4972382 3.4873934 3.4798858 3.474599 3.4714158 3.4702206 3.4708963 3.4733267 3.4773953 3.4829855 3.489981 3.4982653 3.5077217 3.518234 3.5296858 3.5419603 3.5549412 3.5685118 3.582556 3.596957 3.6115985 3.626364 3.6411372 3.6558013 3.67024 3.6843367 3.6979752 3.7110384 3.7234106 3.7349749 3.745615 3.7552142 3.7636562 3.7708245 3.7766025 3.780874 3.7835222 3.784431) (6.035928 6.0372954 6.041345 6.0479984 6.0571766 6.0688005 6.0827923 6.0990725 6.1175623 6.138183 6.1608567 6.185504 6.2120457 6.2404037 6.2704988 6.302253 6.3355866 6.3704214 6.4066787 6.444279 6.483145 6.5231967 6.564356 6.6065436 6.649681 6.69369 6.738491 6.784006 6.8301554 6.876861 6.924044 6.971626 7.0195274 7.0676704 7.1159754 7.1643643 7.212758 7.261078 7.309245 7.3571806 7.4048157 7.453806 7.5053287 7.5592446 7.615414 7.6736975 7.7339544 7.7960463 7.8598323 7.9251738 7.991931 8.059963 8.129132 8.199297 8.270319 8.342058 8.414375 8.48713 8.560183 8.633394 8.706624 8.779734 8.852582 8.925031 8.996941 9.06817 9.13858 9.208032 9.276386 9.343501 9.409239 9.473459 9.536022 9.596789 9.65562 9.712374 9.766913 9.819097 9.868785 9.915839 9.960119 10.001485 10.039798 10.074917 10.106793 10.135635 10.1615305 10.184555 10.204788 10.222306 10.237189 10.249512 10.259355 10.266793 10.271907 10.274773 10.275468 10.274071 10.270659 10.265311 10.258104 10.249115 10.238423 10.226105 10.212238 10.196902 10.180173 10.162128 10.142847 10.122406 10.100884 10.078358 10.054905 10.030604 10.005532 9.979768 9.953388 9.926471 9.899094 9.871335 9.843271 9.814981 9.786544 9.758034 9.729531 9.701113 9.672857 9.64484 9.617142 9.589839 9.563009 9.536731 9.511081 9.486136 9.461977 9.43868 9.416322 9.39498 9.374735 9.355662 9.337841 9.321347 9.306259 9.292656 9.280614 9.270211 9.261525 9.254635 9.249617 9.246549 9.245508))) :plots (list (list (quote "Plot-1") (quote ((0.0 . 3.7604792) (0.22813688 . 4.502994) (0.41444868 . 5.6766467) (0.7414449 . 3.520958) (1.0 . 3.784431))) (om-make-color 0 0 1) (quote (:numeric 0.0 1 0.25 5 2 nil 1 ("0.0" "0.25" "0.5" "0.75" "1.0"))) (quote (:numeric 0.0 12 1 5 2 nil 1 ("0.0" "1.0" "2.0" "3.0" "4.0" "5.0" "6.0" "7.0" "8.0" "9.0" "10.0" "11.0" "12.0"))) (quote :xy) (quote ((0.0 . 3.7604792) (0.006666667 . 3.761412) (0.013333334 . 3.7641738) (0.02 . 3.768711) (0.026666668 . 3.7749698) (0.033333335 . 3.7828963) (0.04 . 3.7924362) (0.046666667 . 3.8035357) (0.053333335 . 3.8161412) (0.06 . 3.8301983) (0.06666667 . 3.8456536) (0.07333333 . 3.8624525) (0.08 . 3.8805418) (0.086666666 . 3.899867) (0.093333334 . 3.9203747) (0.1 . 3.9420104) (0.10666667 . 3.9647205) (0.11333334 . 3.9884513) (0.12 . 4.0131483) (0.12666667 . 4.038758) (0.13333334 . 4.0652266) (0.14 . 4.0924997) (0.14666666 . 4.1205235) (0.15333334 . 4.1492443) (0.16 . 4.178608) (0.16666667 . 4.208561) (0.17333333 . 4.239049) (0.18 . 4.270018) (0.18666667 . 4.3014145) (0.19333333 . 4.3331843) (0.2 . 4.3652735) (0.20666667 . 4.3976283) (0.21333334 . 4.4301944) (0.22 . 4.4629183) (0.22666668 . 4.495746) (0.23333334 . 4.5296664) (0.24 . 4.5667987) (0.24666667 . 4.6069183) (0.25333333 . 4.649715) (0.26 . 4.69488) (0.26666668 . 4.7421026) (0.27333334 . 4.791074) (0.28 . 4.8414836) (0.28666666 . 4.893022) (0.29333332 . 4.9453797) (0.3 . 4.9982467) (0.30666667 . 5.0513134) (0.31333333 . 5.1042695) (0.32 . 5.156806) (0.32666665 . 5.208613) (0.33333334 . 5.2593804) (0.34 . 5.308799) (0.34666666 . 5.356558) (0.35333332 . 5.4023485) (0.36 . 5.4458614) (0.36666667 . 5.4867854) (0.37333334 . 5.5248118) (0.38 . 5.5596304) (0.38666666 . 5.5909314) (0.39333335 . 5.618406) (0.4 . 5.641743) (0.40666667 . 5.660634) (0.41333333 . 5.6747685) (0.42 . 5.683712) (0.42666668 . 5.687216) (0.43333334 . 5.685478) (0.44 . 5.678708) (0.44666666 . 5.6671114) (0.45333335 . 5.6508956) (0.46 . 5.630268) (0.46666667 . 5.6054363) (0.47333333 . 5.576607) (0.48 . 5.5439878) (0.48666668 . 5.5077853) (0.49333334 . 5.4682074) (0.5 . 5.4254613) (0.50666667 . 5.3797536) (0.5133333 . 5.331292) (0.52 . 5.2802835) (0.52666665 . 5.2269354) (0.53333337 . 5.171455) (0.54 . 5.114049) (0.5466667 . 5.0549255) (0.55333335 . 4.9942913) (0.56 . 4.932353) (0.56666667 . 4.869319) (0.5733333 . 4.8053956) (0.58 . 4.740791) (0.58666665 . 4.6757107) (0.5933333 . 4.6103635) (0.6 . 4.5449553) (0.6066667 . 4.4796944) (0.61333335 . 4.414788) (0.62 . 4.350443) (0.62666667 . 4.286866) (0.6333333 . 4.2242656) (0.64 . 4.1628475) (0.64666665 . 4.10282) (0.6533333 . 4.04439) (0.66 . 3.9877644) (0.6666667 . 3.9331506) (0.67333335 . 3.8807562) (0.68 . 3.8307882) (0.68666667 . 3.7834535) (0.6933333 . 3.7389596) (0.7 . 3.6975134) (0.70666665 . 3.6593228) (0.7133333 . 3.6245942) (0.72 . 3.5935347) (0.7266667 . 3.5663529) (0.73333335 . 3.5432546) (0.74 . 3.5244475) (0.74666667 . 3.5095363) (0.75333333 . 3.4972382) (0.76 . 3.4873934) (0.76666666 . 3.4798858) (0.7733333 . 3.474599) (0.78 . 3.4714158) (0.7866667 . 3.4702206) (0.79333336 . 3.4708963) (0.8 . 3.4733267) (0.8066667 . 3.4773953) (0.81333334 . 3.4829855) (0.82 . 3.489981) (0.82666666 . 3.4982653) (0.8333333 . 3.5077217) (0.84 . 3.518234) (0.8466667 . 3.5296858) (0.85333336 . 3.5419603) (0.86 . 3.5549412) (0.8666667 . 3.5685118) (0.87333334 . 3.582556) (0.88 . 3.596957) (0.88666666 . 3.6115985) (0.8933333 . 3.626364) (0.9 . 3.6411372) (0.9066667 . 3.6558013) (0.91333336 . 3.67024) (0.92 . 3.6843367) (0.9266667 . 3.6979752) (0.93333334 . 3.7110384) (0.94 . 3.7234106) (0.94666666 . 3.7349749) (0.9533333 . 3.745615) (0.96 . 3.7552142) (0.96666664 . 3.7636562) (0.97333336 . 3.7708245) (0.98 . 3.7766025) (0.9866667 . 3.780874) (0.99333334 . 3.7835222) (1.0 . 3.784431))) (quote nil)) (list (quote "Plot-2") (quote ((0.0 . 6.035928) (0.26615968 . 7.4011974) (0.5551331 . 10.083832) (1.0 . 9.245508))) (om-make-color 1 0 0) (quote (:numeric 0.0 1 0.25 5 2 nil 1 ("0.0" "0.25" "0.5" "0.75" "1.0"))) (quote (:numeric 0.0 12 1 5 2 nil 1 ("0.0" "1.0" "2.0" "3.0" "4.0" "5.0" "6.0" "7.0" "8.0" "9.0" "10.0" "11.0" "12.0"))) (quote :xy) (quote ((0.0 . 6.035928) (0.006666667 . 6.0372954) (0.013333334 . 6.041345) (0.02 . 6.0479984) (0.026666668 . 6.0571766) (0.033333335 . 6.0688005) (0.04 . 6.0827923) (0.046666667 . 6.0990725) (0.053333335 . 6.1175623) (0.06 . 6.138183) (0.06666667 . 6.1608567) (0.07333333 . 6.185504) (0.08 . 6.2120457) (0.086666666 . 6.2404037) (0.093333334 . 6.2704988) (0.1 . 6.302253) (0.10666667 . 6.3355866) (0.11333334 . 6.3704214) (0.12 . 6.4066787) (0.12666667 . 6.444279) (0.13333334 . 6.483145) (0.14 . 6.5231967) (0.14666666 . 6.564356) (0.15333334 . 6.6065436) (0.16 . 6.649681) (0.16666667 . 6.69369) (0.17333333 . 6.738491) (0.18 . 6.784006) (0.18666667 . 6.8301554) (0.19333333 . 6.876861) (0.2 . 6.924044) (0.20666667 . 6.971626) (0.21333334 . 7.0195274) (0.22 . 7.0676704) (0.22666668 . 7.1159754) (0.23333334 . 7.1643643) (0.24 . 7.212758) (0.24666667 . 7.261078) (0.25333333 . 7.309245) (0.26 . 7.3571806) (0.26666668 . 7.4048157) (0.27333334 . 7.453806) (0.28 . 7.5053287) (0.28666666 . 7.5592446) (0.29333332 . 7.615414) (0.3 . 7.6736975) (0.30666667 . 7.7339544) (0.31333333 . 7.7960463) (0.32 . 7.8598323) (0.32666665 . 7.9251738) (0.33333334 . 7.991931) (0.34 . 8.059963) (0.34666666 . 8.129132) (0.35333332 . 8.199297) (0.36 . 8.270319) (0.36666667 . 8.342058) (0.37333334 . 8.414375) (0.38 . 8.48713) (0.38666666 . 8.560183) (0.39333335 . 8.633394) (0.4 . 8.706624) (0.40666667 . 8.779734) (0.41333333 . 8.852582) (0.42 . 8.925031) (0.42666668 . 8.996941) (0.43333334 . 9.06817) (0.44 . 9.13858) (0.44666666 . 9.208032) (0.45333335 . 9.276386) (0.46 . 9.343501) (0.46666667 . 9.409239) (0.47333333 . 9.473459) (0.48 . 9.536022) (0.48666668 . 9.596789) (0.49333334 . 9.65562) (0.5 . 9.712374) (0.50666667 . 9.766913) (0.5133333 . 9.819097) (0.52 . 9.868785) (0.52666665 . 9.915839) (0.53333337 . 9.960119) (0.54 . 10.001485) (0.5466667 . 10.039798) (0.55333335 . 10.074917) (0.56 . 10.106793) (0.56666667 . 10.135635) (0.5733333 . 10.1615305) (0.58 . 10.184555) (0.58666665 . 10.204788) (0.5933333 . 10.222306) (0.6 . 10.237189) (0.6066667 . 10.249512) (0.61333335 . 10.259355) (0.62 . 10.266793) (0.62666667 . 10.271907) (0.6333333 . 10.274773) (0.64 . 10.275468) (0.64666665 . 10.274071) (0.6533333 . 10.270659) (0.66 . 10.265311) (0.6666667 . 10.258104) (0.67333335 . 10.249115) (0.68 . 10.238423) (0.68666667 . 10.226105) (0.6933333 . 10.212238) (0.7 . 10.196902) (0.70666665 . 10.180173) (0.7133333 . 10.162128) (0.72 . 10.142847) (0.7266667 . 10.122406) (0.73333335 . 10.100884) (0.74 . 10.078358) (0.74666667 . 10.054905) (0.75333333 . 10.030604) (0.76 . 10.005532) (0.76666666 . 9.979768) (0.7733333 . 9.953388) (0.78 . 9.926471) (0.7866667 . 9.899094) (0.79333336 . 9.871335) (0.8 . 9.843271) (0.8066667 . 9.814981) (0.81333334 . 9.786544) (0.82 . 9.758034) (0.82666666 . 9.729531) (0.8333333 . 9.701113) (0.84 . 9.672857) (0.8466667 . 9.64484) (0.85333336 . 9.617142) (0.86 . 9.589839) (0.8666667 . 9.563009) (0.87333334 . 9.536731) (0.88 . 9.511081) (0.88666666 . 9.486136) (0.8933333 . 9.461977) (0.9 . 9.43868) (0.9066667 . 9.416322) (0.91333336 . 9.39498) (0.92 . 9.374735) (0.9266667 . 9.355662) (0.93333334 . 9.337841) (0.94 . 9.321347) (0.94666666 . 9.306259) (0.9533333 . 9.292656) (0.96 . 9.280614) (0.96666664 . 9.270211) (0.97333336 . 9.261525) (0.98 . 9.254635) (0.9866667 . 9.249617) (0.99333334 . 9.246549) (1.0 . 9.245508))) (quote nil))) :focus (quote "Plot-2") :view-params (mki (quote parameters) :names (quote (:multi :grid :guide :line-size :point-size :free-size :point-shape)) :values (quote (t t t 1 3 5 circle)))))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 600 600) (om-make-point 249 268) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 251 424) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 195 377) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 110 511) (om-make-point 101 59) nil nil nil 1) (om-load-boxin "index" 2 (om-make-point 640 31) "" "index" nil nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 883 125) nil nil nil nil 4))) (setf (numouts box) 4) box) (om-load-boxcall (quote genfun) "C-LIST" (quote om-darwin::c-list) (quote ((om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil))) (om-make-point 85 665) (om-make-point 233 67) nil nil nil 1) (om-load-boxcall (quote lispfun) "OM-INSPECT" (quote om-inspect) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 427 784) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "EVENP" (quote evenp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 110 217) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 173 93) (om-make-point 64 30) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxout "output" 0 (om-make-point 198 343) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 391 637) nil nil "o" nil) (om-load-boxcomment "comment" (om-make-point 121 37) (quote "implicit mapcars?") "" (om-make-point 703 128) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "each-specimen" (om-load-lisp-abspatch "each-specimen" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 24 262) nil nil nil "each-specimen") (om-load-boxin "genotype" 1 (om-make-point 495 17) "" "genotype" nil nil) (om-load-boxcall (quote abstraction) "each-pitchclass" (om-load-lisp-abspatch "each-pitchclass" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 36 439) nil nil nil "each-pitchclass") (om-load-boxcall (quote abstraction) "d::among" (om-load-lisp-abspatch "d::among" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (a b c))") (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 298 366) nil nil nil "d::among") (om-load-boxcall (quote abstraction) "d::within" (om-load-lisp-abspatch "d::within" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (a b c))") (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 789 382) (om-make-point 108 67) nil nil "d::within") (om-load-boxcall (quote abstraction) "pitches" (om-load-lisp-abspatch "pitches" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"pitches\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 366 178) nil nil nil nil) (om-load-boxin "phenotype" 0 (om-make-point 91 38) "" "phenotype" nil (om-make-point 104 59)) (om-load-boxout "output" 0 (om-make-point 142 902) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((3 0 0 0 nil 0) (3 0 1 0 nil 0) (24 0 3 0 nil 0) (19 0 4 0 nil 0) (24 0 5 0 nil 0) (19 0 6 0 nil 0) (24 0 7 0 nil 0) (24 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (16 0 15 0 nil 0) (24 0 18 0 nil 0) (18 0 20 0 nil 0) (7 0 21 0 nil 0) (23 0 22 1 nil 0) (8 0 22 2 nil 0) (24 0 23 0 nil 0))) 6.050102 nil "" (om-make-point 159 3) (om-make-point 1101 1134)) (quote ((om-load-inputfun (quote input-funbox) "" "phenotype" nil) (om-load-inputfun (quote input-funbox) "" "genotype" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 304 45) nil nil nil "how should it work 2") (om-load-boxcall (quote lispfun) "CONTENTS" (quote om-darwin::contents) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 291 725) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 147 151) (om-make-point 56 30) (list 48 72) "(48 72)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 40 179) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote genfun) "S-MELODY" (quote om-darwin::s-melody) (quote ((om-load-inputfun (quote input-funbox) "" "LEN" 10) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 58 274) (om-make-point 99 67) nil nil nil 1) (om-load-boxcall (quote genfun) "EVOLUTE" (quote om-darwin::evolute) (quote ((om-load-inputfun (quote input-funbox) "" "MODEL" (let ((om-darwin::new (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :approx 2 :from-file t)))) (setf (om-darwin::geno om-darwin::new) (quote (71 66 62 70 66 62 72 62 62 71))) (setf (om-darwin::phenotyper om-darwin::new) (quote nil)) (setf (om-darwin::pheno-args om-darwin::new) (quote nil)) (setf (om-darwin::pheno om-darwin::new) (quote nil)) om-darwin::new)) (om-load-inputfun (quote input-funbox) "" "CRIT" nil) (om-load-inputfun (quote input-funbox) "" "GENERATIONS" 1000))) (om-make-point 284 591) (om-make-point 330 67) nil nil nil 1))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 6 0 nil 0) (5 0 8 1 nil 0) (11 0 10 0 nil 0) (27 0 11 0 nil 0) (10 0 12 1 nil 0) (7 0 12 2 nil 0) (13 0 14 1 nil 0) (15 0 16 1 nil 0) (8 0 17 0 nil 0) (14 0 17 1 nil 0) (6 0 17 2 nil 0) (27 0 23 0 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0) (26 0 27 0 nil 0) (17 0 27 1 nil 0) (19 0 27 2 nil 0))) nil 6.050102))
