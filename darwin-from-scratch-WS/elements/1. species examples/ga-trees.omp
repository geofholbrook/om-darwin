; OM File Header - Saved 2015/02/27 15:03:53
; (6.090014 :patc (om-make-point 10 110) (om-make-point 50 22) (om-make-point 973 731) "" 183 0 "2015/02/25 19:31:33" "2015/02/27 15:03:53")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-trees" (quote ((let ((box (om-load-boxcall (quote abstraction) "asdf" (om-load-lisp-abspatch "asdf" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec) (loop for region in (d::phenotype spec)$                                  sum (d::within-M (d::region-pitch region) '(60 60))))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 696 50) nil (list nil) "l" "asdf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 248 37) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 579 591) (om-make-point 292 101) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 621 230) (om-make-point 139 70) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FINALIZE" (quote om-darwin::finalize) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 546 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "best-specimen" (om-load-lisp-abspatch "best-specimen" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"best-fitness\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ga)$  (second (first (d::population ga))))") (quote ((om-load-inputfun (quote input-funbox) "" "GA" nil))) (om-make-point 429 464) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 182 143 234 91 104 156) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "best-specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "best-fitness" (om-load-lisp-abspatch "best-fitness" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"best-fitness\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ga)$  (first (first (d::population ga))))") (quote ((om-load-inputfun (quote input-funbox) "" "GA" nil))) (om-make-point 414 587) nil (list 0) nil "best-fitness"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "INSPECT" (quote inspect) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 54 525) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVALUATE" (quote om-darwin::evaluate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "CRIT" "CRIT" nil))) (om-make-point 638 503) (om-make-point 166 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 611 38) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 489 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 169 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 657 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 352 23) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 153 543) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REINIT" (quote om-darwin::reinit) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 323 557) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 245 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 326 155) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 27 314) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 121 209 114 250 113 76 243 13 111 243 199 198 162 70 21 234 209 216 49 140 134 174 52 69) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 121 209 114 250 113 76 243 13) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 209 114 250 113 76 243 13)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 111 243 199 198 162 70 21 234) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 111 243 199 198 162 70 21 234)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 209 216 49 140 134 174 52 69) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 209 216 49 140 134 174 52 69)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 209 114 250 113 76 243 13 111 243 199 198 162 70 21 234 209 216 49 140 134 174 52 69)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 182 143 234 91 104 156) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 104 117 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 117 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 117 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 79 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 79 156 195 26 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 79 156 195 144 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 79 156 195 144 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 79 105 195 144 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 79 105 195 144 157 26 39 26 182 143 221 104 117 156 91 65 92 143 234 91 104 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 117 156 195 144 157 26 39 26 182 237 221 104 117 156 91 65 92 143 234 91 104 195) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 117 156 195 144 157 26 39 26 182 237 221 104 117 156 91 65 92 143 234 91 104 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 79 156 195 144 157 26 39 26 182 237 221 104 117 156 91 65 92 143 234 91 234 65) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 79 156 195 144 157 26 39 26 182 237 221 104 117 156 91 65 92 143 234 91 234 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 13 14 79 156 195 144 157 26 39 26 182 237 40 104 117 156 91 65 92 143 234 91 234 65) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 13 104 117 156 195 26 117 26) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 104 117 156 195 26 117 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 39 26 182 143 221 104 117 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 39 26 182 143 221 104 117 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 60) (list 1/16 1/16 1 60) (list 1/8 1/16 1 60) (list 3/16 1/16 1 60) (list 1/4 1/16 1 60) (list 5/16 1/16 1 60) (list 3/8 1/16 1 60) (list 7/16 1/16 1 60)) :raw-genotype (list 91 65 182 143 234 91 104 156) :decoder (list (list 60 72)) :num-operons 8 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 65 182 143 234 91 104 156)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 14 79 156 195 144 157 26 39 26 182 237 40 104 117 156 91 65 92 143 234 91 234 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 175) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 95 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (4 0 3 0 nil 0) (17 0 4 0 nil 0) (17 0 5 0 nil 0) (17 0 6 0 nil 0) (4 0 7 0 nil 0) (0 0 7 1 nil 0) (1 0 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 0 nil 0) (17 0 11 0 nil 0) (16 0 11 1 nil 0) (17 0 13 0 nil 0) (17 0 14 0 nil 0) (17 0 15 0 nil 0) (12 0 16 1 nil 0) (10 0 17 1 nil 0) (0 0 17 2 nil 0) (20 0 21 0 nil 0) (18 0 21 1 nil 0) (19 0 21 2 nil 0))) nil 6.090014))