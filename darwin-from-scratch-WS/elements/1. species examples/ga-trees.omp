; OM File Header - Saved 2015/03/04 10:45:58
; (6.090014 :patc (om-make-point 10 110) (om-make-point 154 22) (om-make-point 911 569) "" 183 0 "2015/02/25 19:31:33" "2015/03/03 23:03:45")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-trees" (quote ((let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 482 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 272 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 357 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 236 98 78 31 234 21 43 66 140 144 106 4 38 93 62 33 192 225 143 39 65 22 88 38 239 107 15 15 38 236 21 126 62 46 210 215 206 199 172 170 200 239 230 47 71 82 203 234 208 215 15 41 44 77 106 160 124 241 195 229 242 238 56 88 91 234 85 166 146 236 170 177 102 56 108 66 165 144 145 233 2 210 13 224 3 182 152 137 190 46 118 89 154 86 121 87 30 155 139 249 93 123 185 217 227 54 12 80 34 58 7 177 241 91 77 136 144 211 178 10 240 51 139 75 39 106 65 27 162 80 247 180 203 242 179 197 104 47 141 70 109 61 202 30 171 230 229 127 229 152 59 61 221 240 19 72 173 142 168 160 59 223 106 167 68 123 17 6 51 111 15 184 74 71 47 18 123 94 111 25 209 197 68 141 214 30 116 56 48 214 112 98 254 87 37 137 17 79 189 99 0 131 108 198 51 188 229 192 128 18 159 221 193 206 205 140 96 197 152 182 255 184 181 73 178 126 67 145 45 254 145 69 86 46 179 225 66 7 190 56 55 252 180 88 221 62 90 3 59 166 216 29 252 252 71 217 154 123 20 254 236 126 184 73 157 147 27 171 13 232 99 2 64 144 30 180 179 144 141 26 192 167 43 234 17 253 161 203 70 252 239 20 166 155 57 60 70 118 147 243 234 144 87 104 129 74 230 15 68 122 103 195 18 237 0 38 83 132 217 217 145 64 0 212 245 89 168 19 104 156 194 212 9 131 131 187 26 236 57 82 37 166 33 143 47 22 124 146 146 228 89 224 47 181 192 153 218 235 62 100 212 72 152 161 15 230 163 30 24 162 231 22 191 52 113 113 183 148 144 51 147 81 206 112 10 108 170 146 105 96 56 4 221 57 61 103 85 2 160 205 46 69 108 86 158 158 216 37 209 222 118 61 165 190 231 180 9 223 58 224 31 18 120 194 213 161 235 241 108 74 49 63 136 8 166 7 248 235 145 68 28 161 55 35 180 69 212 249 106 102 157 26 235 242 109 207 118 252 165 150 197 184 23 250 23 116 202 114 44 136 4 73 160 127 59 255 106 49 164 23 231 150 2 15 233 86 132 33 28 209 108 25 25 72 103 67 182 94 179 177 5 157 131 79 53 28 252 221 197 83 151 26 120 2 224 211 97 99 92 44 40 39 223 141 163 204 239 180 87 251 73 248 249 176 3 14 4 241 190 185 231 125 74 251 147 250 168 237 51 50 108 183 176 250 253 152 51 82 69 34 237 155 126 60 22 100 115 149 218 125 78 152 142 154 225 215 219 140 59 1 65 249 123 234 228 120 55 198 103 131 155 203 59 7 127 13 228 220 108 213) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 236 98 78 31 234 21 43 66 140 144 106 4 38 93 62 33 192 225 143 39 65 22 88 38 239 107 15 15 38 236 21 126 62 46 210 215 206 199 172 170 200 239 230 47 71 82 203 234 208 215 15 41 44 77 106 160 124 241 195 229 242 238 56 88 91 234 85 166 146 236 170 177 102 56 108 66 165 144 145 233 2 210 13 224 3 182 152 137 190 46 118 89 154 86 121 87 30 155 139 249 93 123 185 217 227 54 12 80 34 58 7 177 241 91 77 136 144 211 178 10 240 51 139 75 39 106 65 27 162 80 247 180 203 242 179 197 104 47 141 70 109 61 202 30 171 230 229 127 229 152 59 61 221 240 19 72 173 142 168 160 59 223 106 167 68 123 17 6 51 111 15 184 74 71 47 18 123 94 111 25 209 197 68 141 214 30 116 56 48 214 112 98 254 87 37 137 17 79 189 99) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 98 78 31 234 21 43 66 140 144 106 4 38 93 62 33 192 225 143 39 65 22 88 38 239 107 15 15 38 236 21 126 62 46 210 215 206 199 172 170 200 239 230 47 71 82 203 234 208 215 15 41 44 77 106 160 124 241 195 229 242 238 56 88 91 234 85 166 146 236 170 177 102 56 108 66 165 144 145 233 2 210 13 224 3 182 152 137 190 46 118 89 154 86 121 87 30 155 139 249 93 123 185 217 227 54 12 80 34 58 7 177 241 91 77 136 144 211 178 10 240 51 139 75 39 106 65 27 162 80 247 180 203 242 179 197 104 47 141 70 109 61 202 30 171 230 229 127 229 152 59 61 221 240 19 72 173 142 168 160 59 223 106 167 68 123 17 6 51 111 15 184 74 71 47 18 123 94 111 25 209 197 68 141 214 30 116 56 48 214 112 98 254 87 37 137 17 79 189 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 0 131 108 198 51 188 229 192 128 18 159 221 193 206 205 140 96 197 152 182 255 184 181 73 178 126 67 145 45 254 145 69 86 46 179 225 66 7 190 56 55 252 180 88 221 62 90 3 59 166 216 29 252 252 71 217 154 123 20 254 236 126 184 73 157 147 27 171 13 232 99 2 64 144 30 180 179 144 141 26 192 167 43 234 17 253 161 203 70 252 239 20 166 155 57 60 70 118 147 243 234 144 87 104 129 74 230 15 68 122 103 195 18 237 0 38 83 132 217 217 145 64 0 212 245 89 168 19 104 156 194 212 9 131 131 187 26 236 57 82 37 166 33 143 47 22 124 146 146 228 89 224 47 181 192 153 218 235 62 100 212 72 152 161 15 230 163 30 24 162 231 22 191 52 113 113 183 148 144 51 147 81 206 112 10 108 170 146 105 96 56 4 221 57 61 103 85 2 160 205) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 0 131 108 198 51 188 229 192 128 18 159 221 193 206 205 140 96 197 152 182 255 184 181 73 178 126 67 145 45 254 145 69 86 46 179 225 66 7 190 56 55 252 180 88 221 62 90 3 59 166 216 29 252 252 71 217 154 123 20 254 236 126 184 73 157 147 27 171 13 232 99 2 64 144 30 180 179 144 141 26 192 167 43 234 17 253 161 203 70 252 239 20 166 155 57 60 70 118 147 243 234 144 87 104 129 74 230 15 68 122 103 195 18 237 0 38 83 132 217 217 145 64 0 212 245 89 168 19 104 156 194 212 9 131 131 187 26 236 57 82 37 166 33 143 47 22 124 146 146 228 89 224 47 181 192 153 218 235 62 100 212 72 152 161 15 230 163 30 24 162 231 22 191 52 113 113 183 148 144 51 147 81 206 112 10 108 170 146 105 96 56 4 221 57 61 103 85 2 160 205)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 46 69 108 86 158 158 216 37 209 222 118 61 165 190 231 180 9 223 58 224 31 18 120 194 213 161 235 241 108 74 49 63 136 8 166 7 248 235 145 68 28 161 55 35 180 69 212 249 106 102 157 26 235 242 109 207 118 252 165 150 197 184 23 250 23 116 202 114 44 136 4 73 160 127 59 255 106 49 164 23 231 150 2 15 233 86 132 33 28 209 108 25 25 72 103 67 182 94 179 177 5 157 131 79 53 28 252 221 197 83 151 26 120 2 224 211 97 99 92 44 40 39 223 141 163 204 239 180 87 251 73 248 249 176 3 14 4 241 190 185 231 125 74 251 147 250 168 237 51 50 108 183 176 250 253 152 51 82 69 34 237 155 126 60 22 100 115 149 218 125 78 152 142 154 225 215 219 140 59 1 65 249 123 234 228 120 55 198 103 131 155 203 59 7 127 13 228 220 108 213) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 46 69 108 86 158 158 216 37 209 222 118 61 165 190 231 180 9 223 58 224 31 18 120 194 213 161 235 241 108 74 49 63 136 8 166 7 248 235 145 68 28 161 55 35 180 69 212 249 106 102 157 26 235 242 109 207 118 252 165 150 197 184 23 250 23 116 202 114 44 136 4 73 160 127 59 255 106 49 164 23 231 150 2 15 233 86 132 33 28 209 108 25 25 72 103 67 182 94 179 177 5 157 131 79 53 28 252 221 197 83 151 26 120 2 224 211 97 99 92 44 40 39 223 141 163 204 239 180 87 251 73 248 249 176 3 14 4 241 190 185 231 125 74 251 147 250 168 237 51 50 108 183 176 250 253 152 51 82 69 34 237 155 126 60 22 100 115 149 218 125 78 152 142 154 225 215 219 140 59 1 65 249 123 234 228 120 55 198 103 131 155 203 59 7 127 13 228 220 108 213)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 98 78 31 234 21 43 66 140 144 106 4 38 93 62 33 192 225 143 39 65 22 88 38 239 107 15 15 38 236 21 126 62 46 210 215 206 199 172 170 200 239 230 47 71 82 203 234 208 215 15 41 44 77 106 160 124 241 195 229 242 238 56 88 91 234 85 166 146 236 170 177 102 56 108 66 165 144 145 233 2 210 13 224 3 182 152 137 190 46 118 89 154 86 121 87 30 155 139 249 93 123 185 217 227 54 12 80 34 58 7 177 241 91 77 136 144 211 178 10 240 51 139 75 39 106 65 27 162 80 247 180 203 242 179 197 104 47 141 70 109 61 202 30 171 230 229 127 229 152 59 61 221 240 19 72 173 142 168 160 59 223 106 167 68 123 17 6 51 111 15 184 74 71 47 18 123 94 111 25 209 197 68 141 214 30 116 56 48 214 112 98 254 87 37 137 17 79 189 99 0 131 108 198 51 188 229 192 128 18 159 221 193 206 205 140 96 197 152 182 255 184 181 73 178 126 67 145 45 254 145 69 86 46 179 225 66 7 190 56 55 252 180 88 221 62 90 3 59 166 216 29 252 252 71 217 154 123 20 254 236 126 184 73 157 147 27 171 13 232 99 2 64 144 30 180 179 144 141 26 192 167 43 234 17 253 161 203 70 252 239 20 166 155 57 60 70 118 147 243 234 144 87 104 129 74 230 15 68 122 103 195 18 237 0 38 83 132 217 217 145 64 0 212 245 89 168 19 104 156 194 212 9 131 131 187 26 236 57 82 37 166 33 143 47 22 124 146 146 228 89 224 47 181 192 153 218 235 62 100 212 72 152 161 15 230 163 30 24 162 231 22 191 52 113 113 183 148 144 51 147 81 206 112 10 108 170 146 105 96 56 4 221 57 61 103 85 2 160 205 46 69 108 86 158 158 216 37 209 222 118 61 165 190 231 180 9 223 58 224 31 18 120 194 213 161 235 241 108 74 49 63 136 8 166 7 248 235 145 68 28 161 55 35 180 69 212 249 106 102 157 26 235 242 109 207 118 252 165 150 197 184 23 250 23 116 202 114 44 136 4 73 160 127 59 255 106 49 164 23 231 150 2 15 233 86 132 33 28 209 108 25 25 72 103 67 182 94 179 177 5 157 131 79 53 28 252 221 197 83 151 26 120 2 224 211 97 99 92 44 40 39 223 141 163 204 239 180 87 251 73 248 249 176 3 14 4 241 190 185 231 125 74 251 147 250 168 237 51 50 108 183 176 250 253 152 51 82 69 34 237 155 126 60 22 100 115 149 218 125 78 152 142 154 225 215 219 140 59 1 65 249 123 234 228 120 55 198 103 131 155 203 59 7 127 13 228 220 108 213)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 89 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 53 177 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 108 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 50 55 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 50 55 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2 1 1)) (list 2 (list 3)))))) :raw-genotype (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 186 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 186 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 89 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 53 177 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 108 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 250 234 17 153 205 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 2)) (list 2 (list 1 3 1)))))) :raw-genotype (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 23 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 23 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2 1 1)) (list 2 (list 3)))))) :raw-genotype (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 250 234 17 153 205 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 89 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 143 135 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 143 135 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2 1 1)) (list 2 (list 3)))))) :raw-genotype (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 89 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 108 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 207 252 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 207 252 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2 1 1)) (list 2 (list 3)))))) :raw-genotype (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 31 87 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 31 87 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 108 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2)) (list 2 (list 1 3 1)))))) :raw-genotype (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 131 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 90 42 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 169 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 166 232 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 223 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 223 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 163 225 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 178 93 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 20 15 225 93 204 177 99 230 32 56 177 218 165 235 73 44 14 236 34 222 166 124 200 39 172 240 25 231 6 232 20 198 25 171 138 15 127 79 250 130 240 169 172 49 245 74 107 9 245 5 78 68 110 165 220 40 142 233 219 48 180 226 164 40 90 134 216 224 149 151 23 227 41 46 236 236 111 5 214 126 2 196 54 156 248 106 65 5 18 233 95 230 147 155 211 210 218 31 225 185 114 223 117 9 18 124 12 159 72 107 147 251 196 145 154 119 63 251 44 98 249 195 80 11 248 88 52 66 104 248 14 77 65 19 255 136 199 54 113 169 60 51 116 226 36 54 158 147 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 17 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 17 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 250 234 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 1 3 2)) (list 2 (list 1 3 1)))))) :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 74 238 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 74 238 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 148 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 95 17 77 186 232 228 84 71 212 66 132 32 174 200 70 3 39 98 202 97 151 24 104 160 204 80 165 178 8 23 151 90 46 182 168 145 109 249 70 120 108 211 168 91 169 255 88 53 60 121 155 59 156 46 185 65 3 98 123 81 77 141 76 174 87 202 9 115 69 93 92 160 69)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 1 3 2)) (list 2 (list 1 3 1)))))) :raw-genotype (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1)))))) :raw-genotype (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 2 1 1)) (list 1 (list 1 1 2 1 1)) (list 1 (list 3)))))) :raw-genotype (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 224 57 35 142 87 182 35 128 4 113 115 17 158 200 240 180 230 54 52 226 216 128 22 250 167 250 36 232 158 203 189 14 234 103 83 240 120 85 118 108 27 60 83 244 111 157 144 127 163 214 194 140 102 113 240 35 140 225 73 46 122 25 77 142 177 102 146 55 141 68 103 219 12 164 102 230 135 236 204 134 5 51 206 69 216 93 120 26 185 132 175 228 188 211 246 72 249 90 85 38 124 75 41 221 245 90 173 73 77 191 65 168 132 49 143 149 252 119 80 217 33 62 112 232 176 92 115 107 153 21 39 138 4 196 126 148 98 153 199 136 110 11 141 202 210 116 183 97 195 236 167 198 124 173 249 28 226 47 25 46 139 68 162 47 78 53 80 5 3 78 95 58 62 130 233 186 29 227 204 62 164 134 201 160 109 46 51 18 181 228 103 156 21 231 170 73 15 179 142 145 154 45 3 146 45 145 28 26 41 18 246 228 255 182 8 89 139 217 153 68 3 147 150 232 142 63 208 177 122 216 55 12 29 54 136 135 96 201 200 187 14 171 251 233 252 52 253 119 233 27 192 47 102 202 166 76 57 28 182 241 231 226 228 95 163 223 234 147 91 88 2 196 180 6 50 251 96 144 218 122 236 103 107 191 27 240 124 217 105 113 245 38 32 189 212 97 1 29 249 148 143 81 99 9 39 156 39 229 152 202 20 135 39 232 13 4 163 53 4 226 7 142 241 233 85 41 191 47 206 34 71 40 164 142 115 142 83 204 31 147 179 221 77 122 131 25 9 20 255 32 48 237 29 219 185 247 243 126 183 241 245 6 43 125 241 212 161 107 38 15 183 54 36 20 246 171 206 162 76 30 61 230 191 23 77 83 35 129 73 49 192 244 46 76 233 3 99 112 46 231 173 98 29 93 24 174 52 42 14 26 116 199 232 177 233 54 119 104 246 55 17 155 15 188 27 83 131 44 164 225 250 176 104 146 4 206 114 2 133 204 139 119 130 66 93 3 236 103 62 134 143 211 29 79 203 38 145 48 6 138 160 237 52 245 84 51 180 200 199 136 6 85 164 77 235 219 64 143 168 143 99 227 39 15 145 33 176 104 180 245 132 11 105 87 219 246 6 246 50 141 155 97 128 207 21 252 46 224 238 214 251 230 253 14 171 88 139 208 74 59 170 250 86 35 105 215 115 100 233 11 34 127 128 140 75 224 53 186 233 174 130 180 241 161 128 97 142 192 178 105 106 223 63 175 26 225 12 26 247 51 234 203 156 90 175 215 158 142 12 230 75 132 181 167 139 59 5 61 76 227 141 91 28 245 237 29 218 59 34 128 197 200 209 251 6 105 152 46 187 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 181) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (2 1 1 1 1)) (1 (1 1 1 1)) (2 (2 2)) (2 (1 3 1)))))) ((4 4) ((4 ((2 (2)) (1 (1 2 1 1)) (1 (1 1 1)) (2 (1 1)))))) ((4 4) ((4 ((1 (1 1 1 1 2)) (1 (2 1 1 1 1)) (2 (1 1 2 1 1)) (1 (1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 560 85) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 95 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (10 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 5 1 nil 0) (3 0 6 1 nil 0) (5 0 6 2 nil 0) (9 0 10 0 nil 0) (7 0 10 1 nil 0) (8 0 10 2 nil 0))) nil 6.090014))
