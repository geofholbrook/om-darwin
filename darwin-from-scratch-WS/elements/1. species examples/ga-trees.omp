; OM File Header - Saved 2015/02/26 22:17:28
; (6.090014 :patc (om-make-point 10 110) (om-make-point 246 47) (om-make-point 973 731) "" 183 0 "2015/02/25 19:31:33" "2015/02/26 22:17:20")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-trees" (quote ((let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 612 592) (om-make-point 198 117) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 (3 1)))) ((4 4) ((4 (3 2)))) ((4 4) ((1 (3 3)) (1 (2 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1600)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 139 70) (om-make-point 621 230) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FINALIZE" (quote om-darwin::finalize) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 538 595) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "best-specimen" (om-load-lisp-abspatch "best-specimen" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"best-fitness\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ga)$  (second (first (d::population ga))))") (quote ((om-load-inputfun (quote input-funbox) "" "GA" nil))) (om-make-point 437 485) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3)) (list 2 (list 1 2 1 1 1)))))) :raw-genotype (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 4 (list 1 1 1 1)))))) :raw-genotype (list 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3)) (list 1 (list 3 1)) (list 1 (list 3 1 1 1)) (list 1 (list 1 2 2 1)) (list 1 (list 3)))))) :raw-genotype (list 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "best-specimen"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "best-fitness" (om-load-lisp-abspatch "best-fitness" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"best-fitness\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (ga)$  (first (first (d::population ga))))") (quote ((om-load-inputfun (quote input-funbox) "" "GA" nil))) (om-make-point 399 603) nil (list 18) nil "best-fitness"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "INSPECT" (quote inspect) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 54 525) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVALUATE" (quote om-darwin::evaluate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "CRIT" "CRIT" nil))) (om-make-point 705 515) (om-make-point 166 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 611 38) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 489 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 206 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 663 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 360 28) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 132 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REINIT" (quote om-darwin::reinit) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 323 557) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 242 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"most-notes\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 308 154) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 25 322) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 86 41 241 94 162 37 80 128 6 57 14 68 213 20 114 229 55 182 43 185 6 250 234 254 133 81 198 15 218 52 104 250 21 187 97 76 230 154 211 109 102 222 238 26 99 196 0 85 67 59 33 7 95 17 82 62 174 193 238 13 236 83 117 161 238 50 241 119 56 229 142 251 102 220 15 91 251 82 195 255 135 255 233 32 187 113 182 169 149 61 95 210 184 253 99 68 204 43 190 191 82 26 68 196 32 240 129 206 197 244 89 88 45 108 190 13 114 4 52 254 28 55 247 57 168 63 42 252 1 220 201 23 185 88 225 44 85 224 200 227 186 221 149 91 150 203 241 167 162 112 202 46 156 138 107 211 156 165 78 71 97 152 170 174 56 239 136 2 139 254 25 166 164 202 74 211 131 164 125 221 209 76 74 63 97 195 103 144 208 182 89 107 200 254 98 131 95 165 105 80 185 13 70 80 234 13 195 109 121 77 32 229 198 72 93 61 139 108 65 105 23 192 105 223 142 137 104 98 232 176 155 181 125 149 233 102 22 191 231 155 41 143 152 134 157 0 30 183 112 72 38 152 34 111 110 138 221 59 82 35 130 86 20 118 175 125 76 229 93 93 66 222 137 143 175 226 218 77 24 102 163 182 11 50 241 203 243 70 104 178 251 30 70 223 7 26 41 55 129 218 109 207 216 237 220 163 84 98 57 127 35 163 4 30 160 156 245 127 203 166 131 102 57 202 19 182 120 109 84 56 60 136 151 139 72 186 43 212 143 192 114 19 14 53 97 87 16 242 191 146 150 139 185 22 245 104 99 53 152 208 42 241 251 243 54 179 59 129 247 174 231 62 95 62 16 33 79 193 125 27 173 5 38 100 45 131 140 195 251 247 174 205 61 169 178 114 78 71 130 168 157 179 29 69 122 246 40 50 145 128 247 46 164 165 168 1 130 5 161 127 88 24 160 219 195 64 150 59 115 67 223 152 166 91 91 41 49 109 254 123 179 110 190 1 202 18 41 10 194 62 14 228 31 34 53 91 122 162 163 39 149 48 14 51 101 236 167 113 188 44 142 201 223 143 62 55 194 18 32 186 56 224 156 216 17 166 219 194 73 208 162 41 42 11 124 77 77 65 3 214 61 44 126 118 240 128 247 51 221 54 60 235 117 203 190 90 25 177 180 59 232 118 146 105 186 71 85 127 190 48 247 239 86 248 35 87 103 152 109 193 140 118 132 186 24 187 147 199 197 164 206 1 53 205 46 132 118 155 71 233 145 160 158 196 180 111 49 229 123 239 226 118 88 9 233 171 95 151 64 191 240 200 169 193 151 143 28 172 148 136 78 19 92 163 4 208 141 163 197 28) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 86 41 241 94 162 37 80 128 6 57 14 68 213 20 114 229 55 182 43 185 6 250 234 254 133 81 198 15 218 52 104 250 21 187 97 76 230 154 211 109 102 222 238 26 99 196 0 85 67 59 33 7 95 17 82 62 174 193 238 13 236 83 117 161 238 50 241 119 56 229 142 251 102 220 15 91 251 82 195 255 135 255 233 32 187 113 182 169 149 61 95 210 184 253 99 68 204 43 190 191 82 26 68 196 32 240 129 206 197 244 89 88 45 108 190 13 114 4 52 254 28 55 247 57 168 63 42 252 1 220 201 23 185 88 225 44 85 224 200 227 186 221 149 91 150 203 241 167 162 112 202 46 156 138 107 211 156 165 78 71 97 152 170 174 56 239 136 2 139 254 25 166 164 202 74 211 131 164 125 221 209 76 74 63 97 195 103 144 208 182 89 107 200 254 98 131 95 165 105 80) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 86 41 241 94 162 37 80 128 6 57 14 68 213 20 114 229 55 182 43 185 6 250 234 254 133 81 198 15 218 52 104 250 21 187 97 76 230 154 211 109 102 222 238 26 99 196 0 85 67 59 33 7 95 17 82 62 174 193 238 13 236 83 117 161 238 50 241 119 56 229 142 251 102 220 15 91 251 82 195 255 135 255 233 32 187 113 182 169 149 61 95 210 184 253 99 68 204 43 190 191 82 26 68 196 32 240 129 206 197 244 89 88 45 108 190 13 114 4 52 254 28 55 247 57 168 63 42 252 1 220 201 23 185 88 225 44 85 224 200 227 186 221 149 91 150 203 241 167 162 112 202 46 156 138 107 211 156 165 78 71 97 152 170 174 56 239 136 2 139 254 25 166 164 202 74 211 131 164 125 221 209 76 74 63 97 195 103 144 208 182 89 107 200 254 98 131 95 165 105 80)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 185 13 70 80 234 13 195 109 121 77 32 229 198 72 93 61 139 108 65 105 23 192 105 223 142 137 104 98 232 176 155 181 125 149 233 102 22 191 231 155 41 143 152 134 157 0 30 183 112 72 38 152 34 111 110 138 221 59 82 35 130 86 20 118 175 125 76 229 93 93 66 222 137 143 175 226 218 77 24 102 163 182 11 50 241 203 243 70 104 178 251 30 70 223 7 26 41 55 129 218 109 207 216 237 220 163 84 98 57 127 35 163 4 30 160 156 245 127 203 166 131 102 57 202 19 182 120 109 84 56 60 136 151 139 72 186 43 212 143 192 114 19 14 53 97 87 16 242 191 146 150 139 185 22 245 104 99 53 152 208 42 241 251 243 54 179 59 129 247 174 231 62 95 62 16 33 79 193 125 27 173 5 38 100 45 131 140 195 251 247 174 205 61 169 178 114 78 71 130 168) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 13 70 80 234 13 195 109 121 77 32 229 198 72 93 61 139 108 65 105 23 192 105 223 142 137 104 98 232 176 155 181 125 149 233 102 22 191 231 155 41 143 152 134 157 0 30 183 112 72 38 152 34 111 110 138 221 59 82 35 130 86 20 118 175 125 76 229 93 93 66 222 137 143 175 226 218 77 24 102 163 182 11 50 241 203 243 70 104 178 251 30 70 223 7 26 41 55 129 218 109 207 216 237 220 163 84 98 57 127 35 163 4 30 160 156 245 127 203 166 131 102 57 202 19 182 120 109 84 56 60 136 151 139 72 186 43 212 143 192 114 19 14 53 97 87 16 242 191 146 150 139 185 22 245 104 99 53 152 208 42 241 251 243 54 179 59 129 247 174 231 62 95 62 16 33 79 193 125 27 173 5 38 100 45 131 140 195 251 247 174 205 61 169 178 114 78 71 130 168)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 157 179 29 69 122 246 40 50 145 128 247 46 164 165 168 1 130 5 161 127 88 24 160 219 195 64 150 59 115 67 223 152 166 91 91 41 49 109 254 123 179 110 190 1 202 18 41 10 194 62 14 228 31 34 53 91 122 162 163 39 149 48 14 51 101 236 167 113 188 44 142 201 223 143 62 55 194 18 32 186 56 224 156 216 17 166 219 194 73 208 162 41 42 11 124 77 77 65 3 214 61 44 126 118 240 128 247 51 221 54 60 235 117 203 190 90 25 177 180 59 232 118 146 105 186 71 85 127 190 48 247 239 86 248 35 87 103 152 109 193 140 118 132 186 24 187 147 199 197 164 206 1 53 205 46 132 118 155 71 233 145 160 158 196 180 111 49 229 123 239 226 118 88 9 233 171 95 151 64 191 240 200 169 193 151 143 28 172 148 136 78 19 92 163 4 208 141 163 197 28) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 157 179 29 69 122 246 40 50 145 128 247 46 164 165 168 1 130 5 161 127 88 24 160 219 195 64 150 59 115 67 223 152 166 91 91 41 49 109 254 123 179 110 190 1 202 18 41 10 194 62 14 228 31 34 53 91 122 162 163 39 149 48 14 51 101 236 167 113 188 44 142 201 223 143 62 55 194 18 32 186 56 224 156 216 17 166 219 194 73 208 162 41 42 11 124 77 77 65 3 214 61 44 126 118 240 128 247 51 221 54 60 235 117 203 190 90 25 177 180 59 232 118 146 105 186 71 85 127 190 48 247 239 86 248 35 87 103 152 109 193 140 118 132 186 24 187 147 199 197 164 206 1 53 205 46 132 118 155 71 233 145 160 158 196 180 111 49 229 123 239 226 118 88 9 233 171 95 151 64 191 240 200 169 193 151 143 28 172 148 136 78 19 92 163 4 208 141 163 197 28)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 86 41 241 94 162 37 80 128 6 57 14 68 213 20 114 229 55 182 43 185 6 250 234 254 133 81 198 15 218 52 104 250 21 187 97 76 230 154 211 109 102 222 238 26 99 196 0 85 67 59 33 7 95 17 82 62 174 193 238 13 236 83 117 161 238 50 241 119 56 229 142 251 102 220 15 91 251 82 195 255 135 255 233 32 187 113 182 169 149 61 95 210 184 253 99 68 204 43 190 191 82 26 68 196 32 240 129 206 197 244 89 88 45 108 190 13 114 4 52 254 28 55 247 57 168 63 42 252 1 220 201 23 185 88 225 44 85 224 200 227 186 221 149 91 150 203 241 167 162 112 202 46 156 138 107 211 156 165 78 71 97 152 170 174 56 239 136 2 139 254 25 166 164 202 74 211 131 164 125 221 209 76 74 63 97 195 103 144 208 182 89 107 200 254 98 131 95 165 105 80 185 13 70 80 234 13 195 109 121 77 32 229 198 72 93 61 139 108 65 105 23 192 105 223 142 137 104 98 232 176 155 181 125 149 233 102 22 191 231 155 41 143 152 134 157 0 30 183 112 72 38 152 34 111 110 138 221 59 82 35 130 86 20 118 175 125 76 229 93 93 66 222 137 143 175 226 218 77 24 102 163 182 11 50 241 203 243 70 104 178 251 30 70 223 7 26 41 55 129 218 109 207 216 237 220 163 84 98 57 127 35 163 4 30 160 156 245 127 203 166 131 102 57 202 19 182 120 109 84 56 60 136 151 139 72 186 43 212 143 192 114 19 14 53 97 87 16 242 191 146 150 139 185 22 245 104 99 53 152 208 42 241 251 243 54 179 59 129 247 174 231 62 95 62 16 33 79 193 125 27 173 5 38 100 45 131 140 195 251 247 174 205 61 169 178 114 78 71 130 168 157 179 29 69 122 246 40 50 145 128 247 46 164 165 168 1 130 5 161 127 88 24 160 219 195 64 150 59 115 67 223 152 166 91 91 41 49 109 254 123 179 110 190 1 202 18 41 10 194 62 14 228 31 34 53 91 122 162 163 39 149 48 14 51 101 236 167 113 188 44 142 201 223 143 62 55 194 18 32 186 56 224 156 216 17 166 219 194 73 208 162 41 42 11 124 77 77 65 3 214 61 44 126 118 240 128 247 51 221 54 60 235 117 203 190 90 25 177 180 59 232 118 146 105 186 71 85 127 190 48 247 239 86 248 35 87 103 152 109 193 140 118 132 186 24 187 147 199 197 164 206 1 53 205 46 132 118 155 71 233 145 160 158 196 180 111 49 229 123 239 226 118 88 9 233 171 95 151 64 191 240 200 169 193 151 143 28 172 148 136 78 19 92 163 4 208 141 163 197 28)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 18 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3)) (list 2 (list 1 2 1 1 1)))))) :raw-genotype (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 4 (list 1 1 1 1)))))) :raw-genotype (list 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3)) (list 1 (list 3 1)) (list 1 (list 3 1 1 1)) (list 1 (list 1 2 2 1)) (list 1 (list 3)))))) :raw-genotype (list 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 77 20 161 219 20 161 35 32 118 239 214 166 212 167 248 201 22 82 81 206 195 127 91 174 142 18 10 249 207 130 144 68 88 170 202 190 99 50 64 169 93 134 153 252 87 135 76 56 163 148 149 135 60 228 145 108 75 165 212 6 87 98 31 76 94 65 210 254 127 21 80 245 229 101 74 189 63 65 252 95 175 205 213 217 242 101 166 8 11 144 99 177 85 251 82 109 254 72 20 198 141 52 2 69 100 92 23 214 246 20 85 178 100 105 10 183 26 160 205 63 26 20 71 164 134 249 42 201 168 212 23 57 16 180 99 49 62 227 171 127 70 213 76 170 119 248 251 129 75 153 201 242 234 223 200 70 184 168 151 154 250 131 119 90 44 254 16 224 2 180 157 237 102 10 12 254 38 108 204 177 212 98 68 208 156 178 108 226 99 67 30 231 95 28 53 61 86 184 119 32 103 77 254 111 43 54 186 123 122 178 154 11 218 186 227 228 149 143 107 86 200 89 36 27 234 235 213 55 66 186 163 232 128 77 225 60 254 179 128 71 251 77 185 13 121 11 124 8 32 20 141 252 49 195 81 207 75 80 105 54 111 251 195 175 233 198 231 51 240 96 159 177 127 229 198 140 231 108 185 56 37 160 122 41 158 171 47 54 167 37 51 165 224 232 174 206 160 211 5 244 234 195 90 59 47 118 92 99 252 254 129 247 144 107 20 221 171 95 183 102 188 58 230 74 98 11 188 22 62 232 74 106 185 187 30 48 229 63 125 88 144 237 15 225 111 139 44 74 187 138 182 17 237 64 86 126 21 89 97 91 155 224 86 144 112 6 113 218 161 9 247 26 67 30 205 39 38 162 226 34 23 119 153 131 44 192 73 45 38 163 191 224 134 79 170 50 45 176 150 179 206 46 223 163 47 172 112 108 24 201 66 129 6 28 123 104 167 60 164 53 35 114 84 217 37 249 230 79 121 153 148 186 171 102 152 127 181 254 148 105 133 209 91 198 49 54 97 118 165 26 126 43 49 73 136 217 69 61 174 99 112 2 129 80 21 222 204 77 177 201 29 227 190 179 78 163 157 99 254 64 37 253 222 11 152 59 251 123 118 77 4 177 95 134 104 145 16 20 214 211 196 118 231 63 123 9 60 225 197 212 192 179 251 103 35 97 7 186 166 238 226 37 134 141 147 202 255 48 87 225 128 40 212 0 216 250 71 46 251 68 181 33 102 49 41 55 238 27 52 144 66 109 185 85 236 74 233 25 119 80 108 220 9 137 227 27 44 146 90 79 36 238 56 50 81 222 219 123 223 179 26 169 169 77 92 49 95 229 245 40 217 138 74 104 163 91 152 130 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 7 51 222 205 56 216 77 182 237 219 52 3 251 78 53 194 205 31 44 37 50 144 191 82 6 245 223 75 239 119 130 151 15 46 55 148 10 185 97 109 154 93 30 72 249 32 62 245 147 191 47 225 46 158 160 66 14 6 204 228 8 25 92 119 147 33 69 73 87 2 194 180 237 86 19 190 93 244 74 3 229 25 211 127 155 245 134 193 90 217 83 16 99 49 80 76 116 93 185 127 50 63 152 166 72 182 175 59 149 202 207 98 167 57 24 126 141 199 223 151 162 2 216 52 3 78 147 160 203 109 152 137 20 212 73 192 14 153 27 130 79 160 243 125 87 234 153 52 158 223 22 40 40 25 187 85 108 239 10 196 72 86 25 25 111 85 38 146 2 23 195 103 192 173 204 42 241 241 88 186 132 172 145 183 240 162 47 67 158 230 160 157 52 69 182 96 160 75 131 219 138 140 90 101 194 187 223 9 95 132 177 143 242 102 231 138 96 207 209 247 113 21 223 163 79 193 37 111 135 11 252 80 222 109 19 158 247 158 124 2 0 22 151 89 181 126 217 150 121 133 17 212 142 217 220 106 201 120 96 178 127 135 99 134 201 38 77 29 101 99 246 74 88 10 71 163 186 129 187 140 157 209 59 138 131 181 100 54 59 237 20 5 223 250 74 110 161 162 90 56 90 83 5 36 228 15 24 94 145 208 255 181 79 198 132 104 95 208 55 201 239 119 157 191 75 79 126 238 86 189 24 20 139 141 84 32 1 14 235 20 52 111 6 220 139 164 160 71 155 236 143 248 23 82 112 224 146 122 6 18 38 75 167 6 112 187 45 83 40 8 166 109 37 90 233 144 241 49 45 227 248 244 106 229 101 187 145 253 15 79 84 54 245 186 161 150 96 199 27 149 211 116 126 228 133 100 252 183 45 115 145 137 85 102 94 66 97 167 6 29 244 110 189 221 26 235 11 223 77 140 168 96 160 116 129 73 210 67 167 30 58 5 44 67 196 245 212 214 142 161 65 20 169 63 51 22 244 103 208 54 65 94 77 175 152 183 152 44 85 22 55 55 169 94 10 25 252 18 48 225 116 177 131 207 8 173 81 14 58 227 254 152 189 87 115 176 140 77 221 243 230 8 113 23 242 153 120 71 226 103 2 163 181 52 219 29 164 36 72 69 231 11 72 252 63 170 192 82 165 147 69 244 153 229 23 102 185 170 39 81 117 86 127 204 11 226 187 152 29 114 222 242 112 58 218 161 86 46 90 84 36 112 51 220 90 34 129 65 189 218 60 67 188 37 219 125 130 216 226 0 240 172 249 183 183 41 117 65 59 231 250 103 3 143 184 20 164 167 136 100) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 2)) (list 3 (list 1 3)))))) :raw-genotype (list 7 51 222 205 56 216 77 182 237 219 52 3 251 78 53 194 205 31 44 37 50 144 191 82 6 245 223 75 239 119 130 151 15 46 55 148 10 185 97 109 154 93 30 72 249 32 62 245 147 191 47 225 46 158 160 66 14 6 204 228 8 25 92 119 147 33 69 73 87 2 194 180 237 86 19 190 93 244 74 3 229 25 211 127 155 245 134 193 90 217 83 16 99 49 80 76 116 93 185 127 50 63 152 166 72 182 175 59 149 202 207 98 167 57 24 126 141 199 223 151 162 2 216 52 3 78 147 160 203 109 152 137 20 212 73 192 14 153 27 130 79 160 243 125 87 234 153 52 158 223 22 40 40 25 187 85 108 239 10 196 72 86 25 25 111 85 38 146 2 23 195 103 192 173 204 42 241 241 88 186 132 172 145 183 240 162 47 67 158 230 160 157 52 69 182 96 160 75 131 219) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 7 51 222 205 56 216 77 182 237 219 52 3 251 78 53 194 205 31 44 37 50 144 191 82 6 245 223 75 239 119 130 151 15 46 55 148 10 185 97 109 154 93 30 72 249 32 62 245 147 191 47 225 46 158 160 66 14 6 204 228 8 25 92 119 147 33 69 73 87 2 194 180 237 86 19 190 93 244 74 3 229 25 211 127 155 245 134 193 90 217 83 16 99 49 80 76 116 93 185 127 50 63 152 166 72 182 175 59 149 202 207 98 167 57 24 126 141 199 223 151 162 2 216 52 3 78 147 160 203 109 152 137 20 212 73 192 14 153 27 130 79 160 243 125 87 234 153 52 158 223 22 40 40 25 187 85 108 239 10 196 72 86 25 25 111 85 38 146 2 23 195 103 192 173 204 42 241 241 88 186 132 172 145 183 240 162 47 67 158 230 160 157 52 69 182 96 160 75 131 219)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 1 2 2)) (list 2 (list 1 1 1)) (list 1 (list 2 3)))))) :raw-genotype (list 138 140 90 101 194 187 223 9 95 132 177 143 242 102 231 138 96 207 209 247 113 21 223 163 79 193 37 111 135 11 252 80 222 109 19 158 247 158 124 2 0 22 151 89 181 126 217 150 121 133 17 212 142 217 220 106 201 120 96 178 127 135 99 134 201 38 77 29 101 99 246 74 88 10 71 163 186 129 187 140 157 209 59 138 131 181 100 54 59 237 20 5 223 250 74 110 161 162 90 56 90 83 5 36 228 15 24 94 145 208 255 181 79 198 132 104 95 208 55 201 239 119 157 191 75 79 126 238 86 189 24 20 139 141 84 32 1 14 235 20 52 111 6 220 139 164 160 71 155 236 143 248 23 82 112 224 146 122 6 18 38 75 167 6 112 187 45 83 40 8 166 109 37 90 233 144 241 49 45 227 248 244 106 229 101 187 145 253 15 79 84 54 245 186 161 150 96 199 27 149) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 140 90 101 194 187 223 9 95 132 177 143 242 102 231 138 96 207 209 247 113 21 223 163 79 193 37 111 135 11 252 80 222 109 19 158 247 158 124 2 0 22 151 89 181 126 217 150 121 133 17 212 142 217 220 106 201 120 96 178 127 135 99 134 201 38 77 29 101 99 246 74 88 10 71 163 186 129 187 140 157 209 59 138 131 181 100 54 59 237 20 5 223 250 74 110 161 162 90 56 90 83 5 36 228 15 24 94 145 208 255 181 79 198 132 104 95 208 55 201 239 119 157 191 75 79 126 238 86 189 24 20 139 141 84 32 1 14 235 20 52 111 6 220 139 164 160 71 155 236 143 248 23 82 112 224 146 122 6 18 38 75 167 6 112 187 45 83 40 8 166 109 37 90 233 144 241 49 45 227 248 244 106 229 101 187 145 253 15 79 84 54 245 186 161 150 96 199 27 149)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2 1)) (list 1 (list 2)))))) :raw-genotype (list 211 116 126 228 133 100 252 183 45 115 145 137 85 102 94 66 97 167 6 29 244 110 189 221 26 235 11 223 77 140 168 96 160 116 129 73 210 67 167 30 58 5 44 67 196 245 212 214 142 161 65 20 169 63 51 22 244 103 208 54 65 94 77 175 152 183 152 44 85 22 55 55 169 94 10 25 252 18 48 225 116 177 131 207 8 173 81 14 58 227 254 152 189 87 115 176 140 77 221 243 230 8 113 23 242 153 120 71 226 103 2 163 181 52 219 29 164 36 72 69 231 11 72 252 63 170 192 82 165 147 69 244 153 229 23 102 185 170 39 81 117 86 127 204 11 226 187 152 29 114 222 242 112 58 218 161 86 46 90 84 36 112 51 220 90 34 129 65 189 218 60 67 188 37 219 125 130 216 226 0 240 172 249 183 183 41 117 65 59 231 250 103 3 143 184 20 164 167 136 100) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 211 116 126 228 133 100 252 183 45 115 145 137 85 102 94 66 97 167 6 29 244 110 189 221 26 235 11 223 77 140 168 96 160 116 129 73 210 67 167 30 58 5 44 67 196 245 212 214 142 161 65 20 169 63 51 22 244 103 208 54 65 94 77 175 152 183 152 44 85 22 55 55 169 94 10 25 252 18 48 225 116 177 131 207 8 173 81 14 58 227 254 152 189 87 115 176 140 77 221 243 230 8 113 23 242 153 120 71 226 103 2 163 181 52 219 29 164 36 72 69 231 11 72 252 63 170 192 82 165 147 69 244 153 229 23 102 185 170 39 81 117 86 127 204 11 226 187 152 29 114 222 242 112 58 218 161 86 46 90 84 36 112 51 220 90 34 129 65 189 218 60 67 188 37 219 125 130 216 226 0 240 172 249 183 183 41 117 65 59 231 250 103 3 143 184 20 164 167 136 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 7 51 222 205 56 216 77 182 237 219 52 3 251 78 53 194 205 31 44 37 50 144 191 82 6 245 223 75 239 119 130 151 15 46 55 148 10 185 97 109 154 93 30 72 249 32 62 245 147 191 47 225 46 158 160 66 14 6 204 228 8 25 92 119 147 33 69 73 87 2 194 180 237 86 19 190 93 244 74 3 229 25 211 127 155 245 134 193 90 217 83 16 99 49 80 76 116 93 185 127 50 63 152 166 72 182 175 59 149 202 207 98 167 57 24 126 141 199 223 151 162 2 216 52 3 78 147 160 203 109 152 137 20 212 73 192 14 153 27 130 79 160 243 125 87 234 153 52 158 223 22 40 40 25 187 85 108 239 10 196 72 86 25 25 111 85 38 146 2 23 195 103 192 173 204 42 241 241 88 186 132 172 145 183 240 162 47 67 158 230 160 157 52 69 182 96 160 75 131 219 138 140 90 101 194 187 223 9 95 132 177 143 242 102 231 138 96 207 209 247 113 21 223 163 79 193 37 111 135 11 252 80 222 109 19 158 247 158 124 2 0 22 151 89 181 126 217 150 121 133 17 212 142 217 220 106 201 120 96 178 127 135 99 134 201 38 77 29 101 99 246 74 88 10 71 163 186 129 187 140 157 209 59 138 131 181 100 54 59 237 20 5 223 250 74 110 161 162 90 56 90 83 5 36 228 15 24 94 145 208 255 181 79 198 132 104 95 208 55 201 239 119 157 191 75 79 126 238 86 189 24 20 139 141 84 32 1 14 235 20 52 111 6 220 139 164 160 71 155 236 143 248 23 82 112 224 146 122 6 18 38 75 167 6 112 187 45 83 40 8 166 109 37 90 233 144 241 49 45 227 248 244 106 229 101 187 145 253 15 79 84 54 245 186 161 150 96 199 27 149 211 116 126 228 133 100 252 183 45 115 145 137 85 102 94 66 97 167 6 29 244 110 189 221 26 235 11 223 77 140 168 96 160 116 129 73 210 67 167 30 58 5 44 67 196 245 212 214 142 161 65 20 169 63 51 22 244 103 208 54 65 94 77 175 152 183 152 44 85 22 55 55 169 94 10 25 252 18 48 225 116 177 131 207 8 173 81 14 58 227 254 152 189 87 115 176 140 77 221 243 230 8 113 23 242 153 120 71 226 103 2 163 181 52 219 29 164 36 72 69 231 11 72 252 63 170 192 82 165 147 69 244 153 229 23 102 185 170 39 81 117 86 127 204 11 226 187 152 29 114 222 242 112 58 218 161 86 46 90 84 36 112 51 220 90 34 129 65 189 218 60 67 188 37 219 125 130 216 226 0 240 172 249 183 183 41 117 65 59 231 250 103 3 143 184 20 164 167 136 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 20 214 42 251 251 48 112 13 52 164 200 70 33 159 105 41 74 209 96 58 69 85 152 163 6 171 71 178 45 238 41 17 27 126 85 241 69 232 105 65 124 209 27 11 143 129 29 196 71 152 182 93 183 81 37 243 170 80 236 119 90 118 117 34 155 97 44 48 234 72 16 26 248 242 164 14 233 202 249 87 153 158 164 72 161 136 61 25 182 29 117 212 177 81 152 203 13 175 157 106 231 189 158 49 86 3 1 244 175 48 197 8 11 236 46 41 200 186 102 110 221 205 86 49 205 186 43 72 167 15 221 121 41 30 161 171 144 120 204 82 247 129 38 252 66 42 228 32 82 246 85 88 172 73 98 232 190 212 1 147 121 192 1 39 70 46 7 46 90 15 234 12 92 197 53 121 159 147 183 120 1 73 60 138 159 124 82 102 209 178 192 212 219 60 3 223 235 49 189 203 121 217 202 247 158 148 54 232 222 60 36 165 179 85 77 155 61 44 37 27 58 237 39 136 195 214 85 101 203 177 137 115 245 156 166 252 145 217 60 187 128 141 236 236 173 251 99 255 219 52 80 254 112 86 238 206 102 159 156 39 17 36 155 190 177 145 161 4 74 0 62 9 91 107 56 93 125 118 145 62 246 3 242 194 175 14 179 77 57 159 149 35 60 249 137 232 89 38 12 122 219 146 25 44 83 240 50 5 254 129 181 216 59 188 52 98 148 71 155 234 199 16 196 221 208 36 135 192 42 145 130 116 20 245 208 62 176 248 17 164 252 234 35 102 165 233 27 203 173 113 25 80 157 252 81 168 16 252 147 162 44 22 162 127 159 253 163 99 31 125 97 246 14 5 23 173 194 46 120 52 133 85 204 191 154 24 147 150 205 227 19 23 144 5 242 248 42 125 84 171 75 69 225 246 112 28 92 152 105 61 166 203 118 181 69 166 169 113 153 41 32 183 202 200 166 217 4 117 53 11 90 153 183 218 80 205 131 4 66 195 6 47 248 3 204 227 90 173 203 254 161 178 95 7 228 252 189 72 63 159 98 220 46 67 213 195 123 131 42 0 86 62 151 202 212 24 211 174 162 150 78 182 212 111 54 199 250 177 19 74 6 48 68 25 68 198 194 217 230 184 8 79 99 76 87 136 208 63 173 248 112 93 137 165 146 32 71 137 157 135 86 105 226 10 167 161 227 35 94 232 18 93 154 6 171 63 123 1 88 16 133 78 154 160 113 18 80 194 231 169 229 55 208 202 101 235 107 247 150 5 209 151 191 125 190 247 41 24 166 112 9 112 70 108 141 59 174 113 148 14 218 185 99 187 171 28 25 198 164 106 147 169 202 27 247 150 8 47 172 192) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3)) (list 1 (list 1 2 1)))))) :raw-genotype (list 20 214 42 251 251 48 112 13 52 164 200 70 33 159 105 41 74 209 96 58 69 85 152 163 6 171 71 178 45 238 41 17 27 126 85 241 69 232 105 65 124 209 27 11 143 129 29 196 71 152 182 93 183 81 37 243 170 80 236 119 90 118 117 34 155 97 44 48 234 72 16 26 248 242 164 14 233 202 249 87 153 158 164 72 161 136 61 25 182 29 117 212 177 81 152 203 13 175 157 106 231 189 158 49 86 3 1 244 175 48 197 8 11 236 46 41 200 186 102 110 221 205 86 49 205 186 43 72 167 15 221 121 41 30 161 171 144 120 204 82 247 129 38 252 66 42 228 32 82 246 85 88 172 73 98 232 190 212 1 147 121 192 1 39 70 46 7 46 90 15 234 12 92 197 53 121 159 147 183 120 1 73 60 138 159 124 82 102 209 178 192 212 219 60 3 223 235 49 189 203) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 20 214 42 251 251 48 112 13 52 164 200 70 33 159 105 41 74 209 96 58 69 85 152 163 6 171 71 178 45 238 41 17 27 126 85 241 69 232 105 65 124 209 27 11 143 129 29 196 71 152 182 93 183 81 37 243 170 80 236 119 90 118 117 34 155 97 44 48 234 72 16 26 248 242 164 14 233 202 249 87 153 158 164 72 161 136 61 25 182 29 117 212 177 81 152 203 13 175 157 106 231 189 158 49 86 3 1 244 175 48 197 8 11 236 46 41 200 186 102 110 221 205 86 49 205 186 43 72 167 15 221 121 41 30 161 171 144 120 204 82 247 129 38 252 66 42 228 32 82 246 85 88 172 73 98 232 190 212 1 147 121 192 1 39 70 46 7 46 90 15 234 12 92 197 53 121 159 147 183 120 1 73 60 138 159 124 82 102 209 178 192 212 219 60 3 223 235 49 189 203)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 4)) (list 2 (list 2 3 1)))))) :raw-genotype (list 121 217 202 247 158 148 54 232 222 60 36 165 179 85 77 155 61 44 37 27 58 237 39 136 195 214 85 101 203 177 137 115 245 156 166 252 145 217 60 187 128 141 236 236 173 251 99 255 219 52 80 254 112 86 238 206 102 159 156 39 17 36 155 190 177 145 161 4 74 0 62 9 91 107 56 93 125 118 145 62 246 3 242 194 175 14 179 77 57 159 149 35 60 249 137 232 89 38 12 122 219 146 25 44 83 240 50 5 254 129 181 216 59 188 52 98 148 71 155 234 199 16 196 221 208 36 135 192 42 145 130 116 20 245 208 62 176 248 17 164 252 234 35 102 165 233 27 203 173 113 25 80 157 252 81 168 16 252 147 162 44 22 162 127 159 253 163 99 31 125 97 246 14 5 23 173 194 46 120 52 133 85 204 191 154 24 147 150 205 227 19 23 144 5 242 248 42 125 84 171) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 217 202 247 158 148 54 232 222 60 36 165 179 85 77 155 61 44 37 27 58 237 39 136 195 214 85 101 203 177 137 115 245 156 166 252 145 217 60 187 128 141 236 236 173 251 99 255 219 52 80 254 112 86 238 206 102 159 156 39 17 36 155 190 177 145 161 4 74 0 62 9 91 107 56 93 125 118 145 62 246 3 242 194 175 14 179 77 57 159 149 35 60 249 137 232 89 38 12 122 219 146 25 44 83 240 50 5 254 129 181 216 59 188 52 98 148 71 155 234 199 16 196 221 208 36 135 192 42 145 130 116 20 245 208 62 176 248 17 164 252 234 35 102 165 233 27 203 173 113 25 80 157 252 81 168 16 252 147 162 44 22 162 127 159 253 163 99 31 125 97 246 14 5 23 173 194 46 120 52 133 85 204 191 154 24 147 150 205 227 19 23 144 5 242 248 42 125 84 171)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 1 1)))))) :raw-genotype (list 75 69 225 246 112 28 92 152 105 61 166 203 118 181 69 166 169 113 153 41 32 183 202 200 166 217 4 117 53 11 90 153 183 218 80 205 131 4 66 195 6 47 248 3 204 227 90 173 203 254 161 178 95 7 228 252 189 72 63 159 98 220 46 67 213 195 123 131 42 0 86 62 151 202 212 24 211 174 162 150 78 182 212 111 54 199 250 177 19 74 6 48 68 25 68 198 194 217 230 184 8 79 99 76 87 136 208 63 173 248 112 93 137 165 146 32 71 137 157 135 86 105 226 10 167 161 227 35 94 232 18 93 154 6 171 63 123 1 88 16 133 78 154 160 113 18 80 194 231 169 229 55 208 202 101 235 107 247 150 5 209 151 191 125 190 247 41 24 166 112 9 112 70 108 141 59 174 113 148 14 218 185 99 187 171 28 25 198 164 106 147 169 202 27 247 150 8 47 172 192) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 69 225 246 112 28 92 152 105 61 166 203 118 181 69 166 169 113 153 41 32 183 202 200 166 217 4 117 53 11 90 153 183 218 80 205 131 4 66 195 6 47 248 3 204 227 90 173 203 254 161 178 95 7 228 252 189 72 63 159 98 220 46 67 213 195 123 131 42 0 86 62 151 202 212 24 211 174 162 150 78 182 212 111 54 199 250 177 19 74 6 48 68 25 68 198 194 217 230 184 8 79 99 76 87 136 208 63 173 248 112 93 137 165 146 32 71 137 157 135 86 105 226 10 167 161 227 35 94 232 18 93 154 6 171 63 123 1 88 16 133 78 154 160 113 18 80 194 231 169 229 55 208 202 101 235 107 247 150 5 209 151 191 125 190 247 41 24 166 112 9 112 70 108 141 59 174 113 148 14 218 185 99 187 171 28 25 198 164 106 147 169 202 27 247 150 8 47 172 192)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 20 214 42 251 251 48 112 13 52 164 200 70 33 159 105 41 74 209 96 58 69 85 152 163 6 171 71 178 45 238 41 17 27 126 85 241 69 232 105 65 124 209 27 11 143 129 29 196 71 152 182 93 183 81 37 243 170 80 236 119 90 118 117 34 155 97 44 48 234 72 16 26 248 242 164 14 233 202 249 87 153 158 164 72 161 136 61 25 182 29 117 212 177 81 152 203 13 175 157 106 231 189 158 49 86 3 1 244 175 48 197 8 11 236 46 41 200 186 102 110 221 205 86 49 205 186 43 72 167 15 221 121 41 30 161 171 144 120 204 82 247 129 38 252 66 42 228 32 82 246 85 88 172 73 98 232 190 212 1 147 121 192 1 39 70 46 7 46 90 15 234 12 92 197 53 121 159 147 183 120 1 73 60 138 159 124 82 102 209 178 192 212 219 60 3 223 235 49 189 203 121 217 202 247 158 148 54 232 222 60 36 165 179 85 77 155 61 44 37 27 58 237 39 136 195 214 85 101 203 177 137 115 245 156 166 252 145 217 60 187 128 141 236 236 173 251 99 255 219 52 80 254 112 86 238 206 102 159 156 39 17 36 155 190 177 145 161 4 74 0 62 9 91 107 56 93 125 118 145 62 246 3 242 194 175 14 179 77 57 159 149 35 60 249 137 232 89 38 12 122 219 146 25 44 83 240 50 5 254 129 181 216 59 188 52 98 148 71 155 234 199 16 196 221 208 36 135 192 42 145 130 116 20 245 208 62 176 248 17 164 252 234 35 102 165 233 27 203 173 113 25 80 157 252 81 168 16 252 147 162 44 22 162 127 159 253 163 99 31 125 97 246 14 5 23 173 194 46 120 52 133 85 204 191 154 24 147 150 205 227 19 23 144 5 242 248 42 125 84 171 75 69 225 246 112 28 92 152 105 61 166 203 118 181 69 166 169 113 153 41 32 183 202 200 166 217 4 117 53 11 90 153 183 218 80 205 131 4 66 195 6 47 248 3 204 227 90 173 203 254 161 178 95 7 228 252 189 72 63 159 98 220 46 67 213 195 123 131 42 0 86 62 151 202 212 24 211 174 162 150 78 182 212 111 54 199 250 177 19 74 6 48 68 25 68 198 194 217 230 184 8 79 99 76 87 136 208 63 173 248 112 93 137 165 146 32 71 137 157 135 86 105 226 10 167 161 227 35 94 232 18 93 154 6 171 63 123 1 88 16 133 78 154 160 113 18 80 194 231 169 229 55 208 202 101 235 107 247 150 5 209 151 191 125 190 247 41 24 166 112 9 112 70 108 141 59 174 113 148 14 218 185 99 187 171 28 25 198 164 106 147 169 202 27 247 150 8 47 172 192)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 20 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 41 38 148 64 76 183 96 92 222 208 60 105 155 249 199 39 7 81 34 14 243 245 233 6 163 4 64 180 19 172 4 251 175 90 43 27 85 40 218 224 37 82 194 233 49 18 69 227 177 156 25 72 29 155 38 215 238 107 103 14 136 54 190 245 142 45 132 42 217 110 236 4 190 41 61 18 132 44 122 244 171 27 35 54 58 187 166 234 88 161 129 3 72 204 41 18 237 38 67 152 115 95 165 71 54 107 83 215 225 125 218 197 8 145 139 128 140 32 162 26 170 111 113 225 77 169 7 95 170 101 91 15 249 206 112 37 180 193 188 71 198 140 116 75 242 118 43 25 210 27 78 208 170 245 130 90 115 185 91 33 20 147 42 69 104 57 85 131 1 171 167 242 189 106 124 27 102 101 167 30 194 188 203 123 240 57 64 54 171 122 55 196 105 240 186 75 222 201 13 222 144 194 240 221 10 155 37 229 187 154 171 102 215 90 218 254 26 255 179 25 30 144 223 61 107 228 156 116 25 64 77 34 67 201 40 147 37 85 238 83 63 235 198 154 201 165 168 91 160 231 84 226 79 43 180 7 187 7 159 194 124 211 16 219 150 44 115 35 127 166 117 159 156 111 2 225 12 243 114 161 163 21 219 190 34 50 32 97 86 6 72 212 148 202 224 135 55 158 170 177 155 205 65 140 107 191 13 79 232 39 28 95 167 12 80 105 218 189 31 101 17 207 48 65 68 226 40 218 195 238 91 219 155 191 2 188 233 14 141 14 223 128 187 25 23 4 215 14 196 175 17 99 152 12 118 106 0 142 39 168 27 220 246 8 158 26 192 37 86 66 232 129 208 120 116 103 60 185 174 226 182 3 109 11 55 211 163 95 30 126 14 100 207 248 98 82 51 143 128 66 144 188 166 103 22 208 165 69 73 13 95 172 165 184 129 171 240 106 242 79 81 167 154 212 166 41 57 142 70 14 131 4 187 67 100 170 37 142 228 195 13 81 109 207 181 254 163 158 139 139 195 213 144 197 150 121 235 205 192 245 51 41 14 28 178 27 118 109 129 80 142 245 125 18 38 55 95 106 31 22 6 78 61 65 172 18 217 245 129 32 148 15 52 83 4 206 129 247 238 95 13 189 161 145 17 18 209 115 170 82 224 80 226 139 66 93 97 34 128 158 109 91 226 95 77 152 16 37 58 10 212 20 115 246 88 48 200 133 11 117 251 119 33 143 241 241 147 162 158 224 168 49 248 51 35 48 153 233 67 218 88 126 31 79 89 113 113 126 53 242 5 192 98 70 158 85 23 130 127 51 251 106 20 98 82 53 194 81 201 163 70 188 253 124 189 217 105 47 70 8) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 4 1)) (list 1 (list 3 1)) (list 1 (list 2 4)))))) :raw-genotype (list 41 38 148 64 76 183 96 92 222 208 60 105 155 249 199 39 7 81 34 14 243 245 233 6 163 4 64 180 19 172 4 251 175 90 43 27 85 40 218 224 37 82 194 233 49 18 69 227 177 156 25 72 29 155 38 215 238 107 103 14 136 54 190 245 142 45 132 42 217 110 236 4 190 41 61 18 132 44 122 244 171 27 35 54 58 187 166 234 88 161 129 3 72 204 41 18 237 38 67 152 115 95 165 71 54 107 83 215 225 125 218 197 8 145 139 128 140 32 162 26 170 111 113 225 77 169 7 95 170 101 91 15 249 206 112 37 180 193 188 71 198 140 116 75 242 118 43 25 210 27 78 208 170 245 130 90 115 185 91 33 20 147 42 69 104 57 85 131 1 171 167 242 189 106 124 27 102 101 167 30 194 188 203 123 240 57 64 54 171 122 55 196 105 240 186 75 222 201 13 222) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 38 148 64 76 183 96 92 222 208 60 105 155 249 199 39 7 81 34 14 243 245 233 6 163 4 64 180 19 172 4 251 175 90 43 27 85 40 218 224 37 82 194 233 49 18 69 227 177 156 25 72 29 155 38 215 238 107 103 14 136 54 190 245 142 45 132 42 217 110 236 4 190 41 61 18 132 44 122 244 171 27 35 54 58 187 166 234 88 161 129 3 72 204 41 18 237 38 67 152 115 95 165 71 54 107 83 215 225 125 218 197 8 145 139 128 140 32 162 26 170 111 113 225 77 169 7 95 170 101 91 15 249 206 112 37 180 193 188 71 198 140 116 75 242 118 43 25 210 27 78 208 170 245 130 90 115 185 91 33 20 147 42 69 104 57 85 131 1 171 167 242 189 106 124 27 102 101 167 30 194 188 203 123 240 57 64 54 171 122 55 196 105 240 186 75 222 201 13 222)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 4 (list 2)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 144 194 240 221 10 155 37 229 187 154 171 102 215 90 218 254 26 255 179 25 30 144 223 61 107 228 156 116 25 64 77 34 67 201 40 147 37 85 238 83 63 235 198 154 201 165 168 91 160 231 84 226 79 43 180 7 187 7 159 194 124 211 16 219 150 44 115 35 127 166 117 159 156 111 2 225 12 243 114 161 163 21 219 190 34 50 32 97 86 6 72 212 148 202 224 135 55 158 170 177 155 205 65 140 107 191 13 79 232 39 28 95 167 12 80 105 218 189 31 101 17 207 48 65 68 226 40 218 195 238 91 219 155 191 2 188 233 14 141 14 223 128 187 25 23 4 215 14 196 175 17 99 152 12 118 106 0 142 39 168 27 220 246 8 158 26 192 37 86 66 232 129 208 120 116 103 60 185 174 226 182 3 109 11 55 211 163 95 30 126 14 100 207 248 98 82 51 143 128 66) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 194 240 221 10 155 37 229 187 154 171 102 215 90 218 254 26 255 179 25 30 144 223 61 107 228 156 116 25 64 77 34 67 201 40 147 37 85 238 83 63 235 198 154 201 165 168 91 160 231 84 226 79 43 180 7 187 7 159 194 124 211 16 219 150 44 115 35 127 166 117 159 156 111 2 225 12 243 114 161 163 21 219 190 34 50 32 97 86 6 72 212 148 202 224 135 55 158 170 177 155 205 65 140 107 191 13 79 232 39 28 95 167 12 80 105 218 189 31 101 17 207 48 65 68 226 40 218 195 238 91 219 155 191 2 188 233 14 141 14 223 128 187 25 23 4 215 14 196 175 17 99 152 12 118 106 0 142 39 168 27 220 246 8 158 26 192 37 86 66 232 129 208 120 116 103 60 185 174 226 182 3 109 11 55 211 163 95 30 126 14 100 207 248 98 82 51 143 128 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3)) (list 1 (list 2)) (list 1 (list 1 1)) (list 2 (list 1 1)) (list 1 (list 1 2 2 1)))))) :raw-genotype (list 144 188 166 103 22 208 165 69 73 13 95 172 165 184 129 171 240 106 242 79 81 167 154 212 166 41 57 142 70 14 131 4 187 67 100 170 37 142 228 195 13 81 109 207 181 254 163 158 139 139 195 213 144 197 150 121 235 205 192 245 51 41 14 28 178 27 118 109 129 80 142 245 125 18 38 55 95 106 31 22 6 78 61 65 172 18 217 245 129 32 148 15 52 83 4 206 129 247 238 95 13 189 161 145 17 18 209 115 170 82 224 80 226 139 66 93 97 34 128 158 109 91 226 95 77 152 16 37 58 10 212 20 115 246 88 48 200 133 11 117 251 119 33 143 241 241 147 162 158 224 168 49 248 51 35 48 153 233 67 218 88 126 31 79 89 113 113 126 53 242 5 192 98 70 158 85 23 130 127 51 251 106 20 98 82 53 194 81 201 163 70 188 253 124 189 217 105 47 70 8) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 188 166 103 22 208 165 69 73 13 95 172 165 184 129 171 240 106 242 79 81 167 154 212 166 41 57 142 70 14 131 4 187 67 100 170 37 142 228 195 13 81 109 207 181 254 163 158 139 139 195 213 144 197 150 121 235 205 192 245 51 41 14 28 178 27 118 109 129 80 142 245 125 18 38 55 95 106 31 22 6 78 61 65 172 18 217 245 129 32 148 15 52 83 4 206 129 247 238 95 13 189 161 145 17 18 209 115 170 82 224 80 226 139 66 93 97 34 128 158 109 91 226 95 77 152 16 37 58 10 212 20 115 246 88 48 200 133 11 117 251 119 33 143 241 241 147 162 158 224 168 49 248 51 35 48 153 233 67 218 88 126 31 79 89 113 113 126 53 242 5 192 98 70 158 85 23 130 127 51 251 106 20 98 82 53 194 81 201 163 70 188 253 124 189 217 105 47 70 8)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 38 148 64 76 183 96 92 222 208 60 105 155 249 199 39 7 81 34 14 243 245 233 6 163 4 64 180 19 172 4 251 175 90 43 27 85 40 218 224 37 82 194 233 49 18 69 227 177 156 25 72 29 155 38 215 238 107 103 14 136 54 190 245 142 45 132 42 217 110 236 4 190 41 61 18 132 44 122 244 171 27 35 54 58 187 166 234 88 161 129 3 72 204 41 18 237 38 67 152 115 95 165 71 54 107 83 215 225 125 218 197 8 145 139 128 140 32 162 26 170 111 113 225 77 169 7 95 170 101 91 15 249 206 112 37 180 193 188 71 198 140 116 75 242 118 43 25 210 27 78 208 170 245 130 90 115 185 91 33 20 147 42 69 104 57 85 131 1 171 167 242 189 106 124 27 102 101 167 30 194 188 203 123 240 57 64 54 171 122 55 196 105 240 186 75 222 201 13 222 144 194 240 221 10 155 37 229 187 154 171 102 215 90 218 254 26 255 179 25 30 144 223 61 107 228 156 116 25 64 77 34 67 201 40 147 37 85 238 83 63 235 198 154 201 165 168 91 160 231 84 226 79 43 180 7 187 7 159 194 124 211 16 219 150 44 115 35 127 166 117 159 156 111 2 225 12 243 114 161 163 21 219 190 34 50 32 97 86 6 72 212 148 202 224 135 55 158 170 177 155 205 65 140 107 191 13 79 232 39 28 95 167 12 80 105 218 189 31 101 17 207 48 65 68 226 40 218 195 238 91 219 155 191 2 188 233 14 141 14 223 128 187 25 23 4 215 14 196 175 17 99 152 12 118 106 0 142 39 168 27 220 246 8 158 26 192 37 86 66 232 129 208 120 116 103 60 185 174 226 182 3 109 11 55 211 163 95 30 126 14 100 207 248 98 82 51 143 128 66 144 188 166 103 22 208 165 69 73 13 95 172 165 184 129 171 240 106 242 79 81 167 154 212 166 41 57 142 70 14 131 4 187 67 100 170 37 142 228 195 13 81 109 207 181 254 163 158 139 139 195 213 144 197 150 121 235 205 192 245 51 41 14 28 178 27 118 109 129 80 142 245 125 18 38 55 95 106 31 22 6 78 61 65 172 18 217 245 129 32 148 15 52 83 4 206 129 247 238 95 13 189 161 145 17 18 209 115 170 82 224 80 226 139 66 93 97 34 128 158 109 91 226 95 77 152 16 37 58 10 212 20 115 246 88 48 200 133 11 117 251 119 33 143 241 241 147 162 158 224 168 49 248 51 35 48 153 233 67 218 88 126 31 79 89 113 113 126 53 242 5 192 98 70 158 85 23 130 127 51 251 106 20 98 82 53 194 81 201 163 70 188 253 124 189 217 105 47 70 8)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 93 172 142 217 170 6 247 214 160 119 88 141 111 239 240 106 31 183 221 119 192 60 212 172 55 98 223 35 151 166 13 86 78 73 214 212 83 140 89 76 121 203 171 78 61 60 76 192 46 185 211 182 168 185 181 250 215 175 128 89 131 49 236 240 37 58 191 44 44 182 223 229 150 76 118 230 143 97 51 59 144 163 240 41 62 68 62 112 16 147 127 184 15 43 94 99 247 198 35 205 173 243 105 73 120 168 211 249 249 58 73 193 21 216 61 64 25 80 136 49 133 81 249 99 212 80 225 196 32 185 136 92 109 132 81 186 202 102 128 95 144 250 65 26 208 179 116 255 176 70 187 230 222 87 9 98 239 156 50 114 59 121 88 202 67 2 47 170 240 182 26 0 208 236 109 49 82 110 54 65 127 248 146 246 3 180 57 201 85 235 116 88 54 121 144 202 47 135 3 5 228 55 241 197 181 120 212 90 191 155 186 243 31 232 147 177 211 92 13 51 184 173 247 154 81 243 151 163 229 7 172 47 209 251 114 23 122 137 180 137 151 214 138 165 35 81 210 204 133 97 210 110 10 179 19 10 236 57 204 244 95 14 72 52 144 125 196 11 230 131 159 225 112 7 40 185 172 175 91 223 208 111 219 104 188 121 7 141 241 219 135 113 57 42 122 70 145 205 220 255 129 41 100 51 67 73 114 113 140 17 123 42 169 123 210 73 116 174 216 14 145 233 229 6 202 71 163 74 115 43 29 59 110 90 252 26 86 58 5 237 181 101 255 110 114 86 63 244 195 235 219 64 9 28 190 151 192 47 93 161 172 118 121 198 224 43 23 239 40 136 104 113 197 235 211 244 3 196 97 9 212 167 20 217 149 180 54 60 41 49 69 100 143 85 40 44 236 67 102 91 5 85 206 191 132 86 228 179 116 205 254 90 144 232 16 7 208 240 14 25 92 87 131 143 191 65 134 113 43 216 182 56 46 9 46 57 254 235 156 134 38 74 66 143 156 233 32 20 105 178 95 110 64 17 63 133 215 239 191 86 207 79 250 245 74 156 31 134 251 39 230 91 192 120 202 151 150 208 68 26 117 48 129 169 5 52 35 85 202 88 134 230 195 108 131 12 186 91 53 127 240 90 131 39 143 241 235 22 115 170 46 187 23 220 183 20 102 120 86 86 122 189 122 25 64 224 233 7 189 132 174 69 238 72 48 73 95 98 25 154 157 171 34 212 67 98 222 172 99 245 195 24 187 45 55 74 203 89 218 82 77 49 15 71 217 221 237 33 25 242 20 219 75 27 146 122 169 80 138 173 66 227 15 211 225 84 55 35 15 56 130 123 13 174 120 248 61 104 189 11) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 2)) (list 2 (list 3)) (list 1 (list 3)))))) :raw-genotype (list 93 172 142 217 170 6 247 214 160 119 88 141 111 239 240 106 31 183 221 119 192 60 212 172 55 98 223 35 151 166 13 86 78 73 214 212 83 140 89 76 121 203 171 78 61 60 76 192 46 185 211 182 168 185 181 250 215 175 128 89 131 49 236 240 37 58 191 44 44 182 223 229 150 76 118 230 143 97 51 59 144 163 240 41 62 68 62 112 16 147 127 184 15 43 94 99 247 198 35 205 173 243 105 73 120 168 211 249 249 58 73 193 21 216 61 64 25 80 136 49 133 81 249 99 212 80 225 196 32 185 136 92 109 132 81 186 202 102 128 95 144 250 65 26 208 179 116 255 176 70 187 230 222 87 9 98 239 156 50 114 59 121 88 202 67 2 47 170 240 182 26 0 208 236 109 49 82 110 54 65 127 248 146 246 3 180 57 201 85 235 116 88 54 121 144 202 47 135 3 5) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 172 142 217 170 6 247 214 160 119 88 141 111 239 240 106 31 183 221 119 192 60 212 172 55 98 223 35 151 166 13 86 78 73 214 212 83 140 89 76 121 203 171 78 61 60 76 192 46 185 211 182 168 185 181 250 215 175 128 89 131 49 236 240 37 58 191 44 44 182 223 229 150 76 118 230 143 97 51 59 144 163 240 41 62 68 62 112 16 147 127 184 15 43 94 99 247 198 35 205 173 243 105 73 120 168 211 249 249 58 73 193 21 216 61 64 25 80 136 49 133 81 249 99 212 80 225 196 32 185 136 92 109 132 81 186 202 102 128 95 144 250 65 26 208 179 116 255 176 70 187 230 222 87 9 98 239 156 50 114 59 121 88 202 67 2 47 170 240 182 26 0 208 236 109 49 82 110 54 65 127 248 146 246 3 180 57 201 85 235 116 88 54 121 144 202 47 135 3 5)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 2)) (list 4 (list 3)))))) :raw-genotype (list 228 55 241 197 181 120 212 90 191 155 186 243 31 232 147 177 211 92 13 51 184 173 247 154 81 243 151 163 229 7 172 47 209 251 114 23 122 137 180 137 151 214 138 165 35 81 210 204 133 97 210 110 10 179 19 10 236 57 204 244 95 14 72 52 144 125 196 11 230 131 159 225 112 7 40 185 172 175 91 223 208 111 219 104 188 121 7 141 241 219 135 113 57 42 122 70 145 205 220 255 129 41 100 51 67 73 114 113 140 17 123 42 169 123 210 73 116 174 216 14 145 233 229 6 202 71 163 74 115 43 29 59 110 90 252 26 86 58 5 237 181 101 255 110 114 86 63 244 195 235 219 64 9 28 190 151 192 47 93 161 172 118 121 198 224 43 23 239 40 136 104 113 197 235 211 244 3 196 97 9 212 167 20 217 149 180 54 60 41 49 69 100 143 85 40 44 236 67 102 91) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 228 55 241 197 181 120 212 90 191 155 186 243 31 232 147 177 211 92 13 51 184 173 247 154 81 243 151 163 229 7 172 47 209 251 114 23 122 137 180 137 151 214 138 165 35 81 210 204 133 97 210 110 10 179 19 10 236 57 204 244 95 14 72 52 144 125 196 11 230 131 159 225 112 7 40 185 172 175 91 223 208 111 219 104 188 121 7 141 241 219 135 113 57 42 122 70 145 205 220 255 129 41 100 51 67 73 114 113 140 17 123 42 169 123 210 73 116 174 216 14 145 233 229 6 202 71 163 74 115 43 29 59 110 90 252 26 86 58 5 237 181 101 255 110 114 86 63 244 195 235 219 64 9 28 190 151 192 47 93 161 172 118 121 198 224 43 23 239 40 136 104 113 197 235 211 244 3 196 97 9 212 167 20 217 149 180 54 60 41 49 69 100 143 85 40 44 236 67 102 91)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3)))))) :raw-genotype (list 5 85 206 191 132 86 228 179 116 205 254 90 144 232 16 7 208 240 14 25 92 87 131 143 191 65 134 113 43 216 182 56 46 9 46 57 254 235 156 134 38 74 66 143 156 233 32 20 105 178 95 110 64 17 63 133 215 239 191 86 207 79 250 245 74 156 31 134 251 39 230 91 192 120 202 151 150 208 68 26 117 48 129 169 5 52 35 85 202 88 134 230 195 108 131 12 186 91 53 127 240 90 131 39 143 241 235 22 115 170 46 187 23 220 183 20 102 120 86 86 122 189 122 25 64 224 233 7 189 132 174 69 238 72 48 73 95 98 25 154 157 171 34 212 67 98 222 172 99 245 195 24 187 45 55 74 203 89 218 82 77 49 15 71 217 221 237 33 25 242 20 219 75 27 146 122 169 80 138 173 66 227 15 211 225 84 55 35 15 56 130 123 13 174 120 248 61 104 189 11) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 85 206 191 132 86 228 179 116 205 254 90 144 232 16 7 208 240 14 25 92 87 131 143 191 65 134 113 43 216 182 56 46 9 46 57 254 235 156 134 38 74 66 143 156 233 32 20 105 178 95 110 64 17 63 133 215 239 191 86 207 79 250 245 74 156 31 134 251 39 230 91 192 120 202 151 150 208 68 26 117 48 129 169 5 52 35 85 202 88 134 230 195 108 131 12 186 91 53 127 240 90 131 39 143 241 235 22 115 170 46 187 23 220 183 20 102 120 86 86 122 189 122 25 64 224 233 7 189 132 174 69 238 72 48 73 95 98 25 154 157 171 34 212 67 98 222 172 99 245 195 24 187 45 55 74 203 89 218 82 77 49 15 71 217 221 237 33 25 242 20 219 75 27 146 122 169 80 138 173 66 227 15 211 225 84 55 35 15 56 130 123 13 174 120 248 61 104 189 11)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 172 142 217 170 6 247 214 160 119 88 141 111 239 240 106 31 183 221 119 192 60 212 172 55 98 223 35 151 166 13 86 78 73 214 212 83 140 89 76 121 203 171 78 61 60 76 192 46 185 211 182 168 185 181 250 215 175 128 89 131 49 236 240 37 58 191 44 44 182 223 229 150 76 118 230 143 97 51 59 144 163 240 41 62 68 62 112 16 147 127 184 15 43 94 99 247 198 35 205 173 243 105 73 120 168 211 249 249 58 73 193 21 216 61 64 25 80 136 49 133 81 249 99 212 80 225 196 32 185 136 92 109 132 81 186 202 102 128 95 144 250 65 26 208 179 116 255 176 70 187 230 222 87 9 98 239 156 50 114 59 121 88 202 67 2 47 170 240 182 26 0 208 236 109 49 82 110 54 65 127 248 146 246 3 180 57 201 85 235 116 88 54 121 144 202 47 135 3 5 228 55 241 197 181 120 212 90 191 155 186 243 31 232 147 177 211 92 13 51 184 173 247 154 81 243 151 163 229 7 172 47 209 251 114 23 122 137 180 137 151 214 138 165 35 81 210 204 133 97 210 110 10 179 19 10 236 57 204 244 95 14 72 52 144 125 196 11 230 131 159 225 112 7 40 185 172 175 91 223 208 111 219 104 188 121 7 141 241 219 135 113 57 42 122 70 145 205 220 255 129 41 100 51 67 73 114 113 140 17 123 42 169 123 210 73 116 174 216 14 145 233 229 6 202 71 163 74 115 43 29 59 110 90 252 26 86 58 5 237 181 101 255 110 114 86 63 244 195 235 219 64 9 28 190 151 192 47 93 161 172 118 121 198 224 43 23 239 40 136 104 113 197 235 211 244 3 196 97 9 212 167 20 217 149 180 54 60 41 49 69 100 143 85 40 44 236 67 102 91 5 85 206 191 132 86 228 179 116 205 254 90 144 232 16 7 208 240 14 25 92 87 131 143 191 65 134 113 43 216 182 56 46 9 46 57 254 235 156 134 38 74 66 143 156 233 32 20 105 178 95 110 64 17 63 133 215 239 191 86 207 79 250 245 74 156 31 134 251 39 230 91 192 120 202 151 150 208 68 26 117 48 129 169 5 52 35 85 202 88 134 230 195 108 131 12 186 91 53 127 240 90 131 39 143 241 235 22 115 170 46 187 23 220 183 20 102 120 86 86 122 189 122 25 64 224 233 7 189 132 174 69 238 72 48 73 95 98 25 154 157 171 34 212 67 98 222 172 99 245 195 24 187 45 55 74 203 89 218 82 77 49 15 71 217 221 237 33 25 242 20 219 75 27 146 122 169 80 138 173 66 227 15 211 225 84 55 35 15 56 130 123 13 174 120 248 61 104 189 11)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 24 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 58 19 159 227 190 35 60 206 69 140 210 102 42 178 219 132 201 221 251 76 253 61 159 208 236 61 31 6 3 230 26 151 151 5 77 13 235 243 145 173 202 80 68 32 108 80 54 236 91 21 98 101 149 121 211 172 166 48 203 16 47 95 242 88 36 172 74 30 45 186 181 58 18 176 98 212 26 165 152 227 81 211 21 23 123 139 241 41 249 89 11 32 77 100 4 98 246 130 64 106 219 134 64 104 55 122 174 244 94 157 207 43 36 29 81 174 86 92 134 162 206 94 153 151 59 124 122 231 220 130 14 5 53 180 124 249 50 106 41 227 77 177 157 39 105 185 228 159 128 222 223 94 194 122 224 189 246 230 48 172 24 31 67 234 128 200 77 134 12 148 247 222 102 131 46 34 19 119 250 114 98 25 136 156 47 72 33 54 68 70 184 118 189 220 45 23 32 85 141 206 93 155 244 64 250 232 96 171 40 224 44 42 120 102 144 222 31 25 153 232 162 19 218 241 146 210 166 125 24 132 192 161 218 160 142 147 240 46 13 103 60 207 46 232 205 82 176 112 1 191 157 109 17 142 0 117 148 206 141 218 142 184 145 28 253 90 98 53 228 142 143 26 88 135 15 38 106 241 9 104 118 12 242 18 120 52 246 157 232 245 37 20 155 248 86 41 181 249 245 190 161 121 105 53 169 95 37 8 52 107 51 182 130 255 162 85 139 114 38 15 93 42 164 49 8 131 143 50 112 75 116 37 116 155 46 142 241 182 207 191 104 197 247 82 79 184 206 2 219 186 231 107 64 52 200 237 6 101 57 82 219 217 243 213 248 175 214 80 92 35 141 79 224 248 200 106 216 249 247 139 244 109 194 40 77 26 73 149 221 102 67 20 244 76 185 167 241 26 187 144 199 249 102 174 84 47 104 129 226 56 157 66 159 151 241 205 63 142 161 162 242 13 238 236 134 181 144 78 247 212 91 221 47 40 56 14 89 25 28 91 217 56 127 88 80 2 226 212 110 57 63 19 145 235 166 42 144 232 98 138 131 159 61 17 213 195 247 233 243 175 19 254 218 225 5 158 217 148 176 71 122 178 129 87 250 28 66 255 253 5 68 12 205 112 215 18 98 93 240 221 118 132 183 179 243 148 234 231 194 110 143 229 105 206 145 108 175 234 233 39 86 217 208 39 153 183 141 212 155 136 192 86 30 216 95 29 79 234 102 203 46 232 38 93 29 222 244 9 142 161 56 248 122 157 206 164 145 20 16 229 212 77 143 156 121 11 200 235 111 98 186 122 138 95 78 85 111 245 63 72 161 230 128 94 15 231 188 81 108 229 60 89 202 133 170 114 133 171 114 77) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 3 3)) (list 3 (list 2 1 2 1)))))) :raw-genotype (list 58 19 159 227 190 35 60 206 69 140 210 102 42 178 219 132 201 221 251 76 253 61 159 208 236 61 31 6 3 230 26 151 151 5 77 13 235 243 145 173 202 80 68 32 108 80 54 236 91 21 98 101 149 121 211 172 166 48 203 16 47 95 242 88 36 172 74 30 45 186 181 58 18 176 98 212 26 165 152 227 81 211 21 23 123 139 241 41 249 89 11 32 77 100 4 98 246 130 64 106 219 134 64 104 55 122 174 244 94 157 207 43 36 29 81 174 86 92 134 162 206 94 153 151 59 124 122 231 220 130 14 5 53 180 124 249 50 106 41 227 77 177 157 39 105 185 228 159 128 222 223 94 194 122 224 189 246 230 48 172 24 31 67 234 128 200 77 134 12 148 247 222 102 131 46 34 19 119 250 114 98 25 136 156 47 72 33 54 68 70 184 118 189 220 45 23 32 85 141 206) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 58 19 159 227 190 35 60 206 69 140 210 102 42 178 219 132 201 221 251 76 253 61 159 208 236 61 31 6 3 230 26 151 151 5 77 13 235 243 145 173 202 80 68 32 108 80 54 236 91 21 98 101 149 121 211 172 166 48 203 16 47 95 242 88 36 172 74 30 45 186 181 58 18 176 98 212 26 165 152 227 81 211 21 23 123 139 241 41 249 89 11 32 77 100 4 98 246 130 64 106 219 134 64 104 55 122 174 244 94 157 207 43 36 29 81 174 86 92 134 162 206 94 153 151 59 124 122 231 220 130 14 5 53 180 124 249 50 106 41 227 77 177 157 39 105 185 228 159 128 222 223 94 194 122 224 189 246 230 48 172 24 31 67 234 128 200 77 134 12 148 247 222 102 131 46 34 19 119 250 114 98 25 136 156 47 72 33 54 68 70 184 118 189 220 45 23 32 85 141 206)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 5 1)) (list 1 (list 1 1)) (list 3 (list 1 1 1 1 1 1)))))) :raw-genotype (list 93 155 244 64 250 232 96 171 40 224 44 42 120 102 144 222 31 25 153 232 162 19 218 241 146 210 166 125 24 132 192 161 218 160 142 147 240 46 13 103 60 207 46 232 205 82 176 112 1 191 157 109 17 142 0 117 148 206 141 218 142 184 145 28 253 90 98 53 228 142 143 26 88 135 15 38 106 241 9 104 118 12 242 18 120 52 246 157 232 245 37 20 155 248 86 41 181 249 245 190 161 121 105 53 169 95 37 8 52 107 51 182 130 255 162 85 139 114 38 15 93 42 164 49 8 131 143 50 112 75 116 37 116 155 46 142 241 182 207 191 104 197 247 82 79 184 206 2 219 186 231 107 64 52 200 237 6 101 57 82 219 217 243 213 248 175 214 80 92 35 141 79 224 248 200 106 216 249 247 139 244 109 194 40 77 26 73 149 221 102 67 20 244 76 185 167 241 26 187 144) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 155 244 64 250 232 96 171 40 224 44 42 120 102 144 222 31 25 153 232 162 19 218 241 146 210 166 125 24 132 192 161 218 160 142 147 240 46 13 103 60 207 46 232 205 82 176 112 1 191 157 109 17 142 0 117 148 206 141 218 142 184 145 28 253 90 98 53 228 142 143 26 88 135 15 38 106 241 9 104 118 12 242 18 120 52 246 157 232 245 37 20 155 248 86 41 181 249 245 190 161 121 105 53 169 95 37 8 52 107 51 182 130 255 162 85 139 114 38 15 93 42 164 49 8 131 143 50 112 75 116 37 116 155 46 142 241 182 207 191 104 197 247 82 79 184 206 2 219 186 231 107 64 52 200 237 6 101 57 82 219 217 243 213 248 175 214 80 92 35 141 79 224 248 200 106 216 249 247 139 244 109 194 40 77 26 73 149 221 102 67 20 244 76 185 167 241 26 187 144)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1 1)) (list 1 (list 1 1 4)) (list 2 (list 1 1 2)) (list 2 (list 1 2 1)))))) :raw-genotype (list 199 249 102 174 84 47 104 129 226 56 157 66 159 151 241 205 63 142 161 162 242 13 238 236 134 181 144 78 247 212 91 221 47 40 56 14 89 25 28 91 217 56 127 88 80 2 226 212 110 57 63 19 145 235 166 42 144 232 98 138 131 159 61 17 213 195 247 233 243 175 19 254 218 225 5 158 217 148 176 71 122 178 129 87 250 28 66 255 253 5 68 12 205 112 215 18 98 93 240 221 118 132 183 179 243 148 234 231 194 110 143 229 105 206 145 108 175 234 233 39 86 217 208 39 153 183 141 212 155 136 192 86 30 216 95 29 79 234 102 203 46 232 38 93 29 222 244 9 142 161 56 248 122 157 206 164 145 20 16 229 212 77 143 156 121 11 200 235 111 98 186 122 138 95 78 85 111 245 63 72 161 230 128 94 15 231 188 81 108 229 60 89 202 133 170 114 133 171 114 77) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 199 249 102 174 84 47 104 129 226 56 157 66 159 151 241 205 63 142 161 162 242 13 238 236 134 181 144 78 247 212 91 221 47 40 56 14 89 25 28 91 217 56 127 88 80 2 226 212 110 57 63 19 145 235 166 42 144 232 98 138 131 159 61 17 213 195 247 233 243 175 19 254 218 225 5 158 217 148 176 71 122 178 129 87 250 28 66 255 253 5 68 12 205 112 215 18 98 93 240 221 118 132 183 179 243 148 234 231 194 110 143 229 105 206 145 108 175 234 233 39 86 217 208 39 153 183 141 212 155 136 192 86 30 216 95 29 79 234 102 203 46 232 38 93 29 222 244 9 142 161 56 248 122 157 206 164 145 20 16 229 212 77 143 156 121 11 200 235 111 98 186 122 138 95 78 85 111 245 63 72 161 230 128 94 15 231 188 81 108 229 60 89 202 133 170 114 133 171 114 77)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 58 19 159 227 190 35 60 206 69 140 210 102 42 178 219 132 201 221 251 76 253 61 159 208 236 61 31 6 3 230 26 151 151 5 77 13 235 243 145 173 202 80 68 32 108 80 54 236 91 21 98 101 149 121 211 172 166 48 203 16 47 95 242 88 36 172 74 30 45 186 181 58 18 176 98 212 26 165 152 227 81 211 21 23 123 139 241 41 249 89 11 32 77 100 4 98 246 130 64 106 219 134 64 104 55 122 174 244 94 157 207 43 36 29 81 174 86 92 134 162 206 94 153 151 59 124 122 231 220 130 14 5 53 180 124 249 50 106 41 227 77 177 157 39 105 185 228 159 128 222 223 94 194 122 224 189 246 230 48 172 24 31 67 234 128 200 77 134 12 148 247 222 102 131 46 34 19 119 250 114 98 25 136 156 47 72 33 54 68 70 184 118 189 220 45 23 32 85 141 206 93 155 244 64 250 232 96 171 40 224 44 42 120 102 144 222 31 25 153 232 162 19 218 241 146 210 166 125 24 132 192 161 218 160 142 147 240 46 13 103 60 207 46 232 205 82 176 112 1 191 157 109 17 142 0 117 148 206 141 218 142 184 145 28 253 90 98 53 228 142 143 26 88 135 15 38 106 241 9 104 118 12 242 18 120 52 246 157 232 245 37 20 155 248 86 41 181 249 245 190 161 121 105 53 169 95 37 8 52 107 51 182 130 255 162 85 139 114 38 15 93 42 164 49 8 131 143 50 112 75 116 37 116 155 46 142 241 182 207 191 104 197 247 82 79 184 206 2 219 186 231 107 64 52 200 237 6 101 57 82 219 217 243 213 248 175 214 80 92 35 141 79 224 248 200 106 216 249 247 139 244 109 194 40 77 26 73 149 221 102 67 20 244 76 185 167 241 26 187 144 199 249 102 174 84 47 104 129 226 56 157 66 159 151 241 205 63 142 161 162 242 13 238 236 134 181 144 78 247 212 91 221 47 40 56 14 89 25 28 91 217 56 127 88 80 2 226 212 110 57 63 19 145 235 166 42 144 232 98 138 131 159 61 17 213 195 247 233 243 175 19 254 218 225 5 158 217 148 176 71 122 178 129 87 250 28 66 255 253 5 68 12 205 112 215 18 98 93 240 221 118 132 183 179 243 148 234 231 194 110 143 229 105 206 145 108 175 234 233 39 86 217 208 39 153 183 141 212 155 136 192 86 30 216 95 29 79 234 102 203 46 232 38 93 29 222 244 9 142 161 56 248 122 157 206 164 145 20 16 229 212 77 143 156 121 11 200 235 111 98 186 122 138 95 78 85 111 245 63 72 161 230 128 94 15 231 188 81 108 229 60 89 202 133 170 114 133 171 114 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 18 79 251 172 109 48 226 102 185 43 162 179 123 245 156 126 23 78 220 67 202 230 78 178 222 34 45 215 235 153 28 65 242 61 54 249 252 227 187 139 24 179 113 186 150 237 178 233 77 33 109 245 203 5 85 65 58 228 104 46 199 35 68 69 87 36 53 139 137 50 0 155 253 178 191 177 85 7 33 94 19 63 27 98 63 133 55 150 92 46 137 110 237 141 181 176 37 123 71 66 187 10 173 52 174 16 45 70 220 122 208 66 150 183 53 18 209 250 9 75 176 212 205 237 12 74 51 98 209 224 155 227 155 48 87 215 212 151 81 88 51 159 169 222 93 59 220 153 255 229 135 76 41 223 160 167 221 139 133 230 196 153 52 173 113 235 118 22 112 238 106 251 238 210 254 253 172 141 181 39 190 231 185 166 54 25 72 161 66 79 234 9 65 196 46 141 123 222 90 231 107 78 40 165 112 7 207 21 185 239 126 207 212 210 207 220 248 219 254 104 86 112 89 89 186 35 147 66 5 204 195 70 166 167 143 189 139 117 18 17 37 161 170 165 92 98 156 126 81 34 191 227 40 170 177 244 207 52 45 146 68 41 202 22 31 123 121 46 49 120 120 46 34 41 57 154 3 12 176 242 199 113 153 18 236 18 188 200 10 56 185 168 138 137 83 195 211 224 248 103 168 48 69 235 50 124 60 152 197 176 151 62 103 77 236 181 83 105 228 80 89 38 152 32 168 117 13 91 183 214 155 209 98 139 7 216 230 0 161 103 37 172 90 147 225 64 172 51 202 208 48 151 206 2 123 148 210 242 12 100 60 57 44 215 67 154 250 48 46 97 136 51 180 128 242 246 156 157 62 71 1 105 29 20 214 255 59 208 163 212 22 48 4 239 90 96 220 135 217 222 75 113 17 209 153 182 228 218 124 207 162 151 226 124 110 61 27 51 165 118 129 9 12 172 249 70 135 27 170 220 118 25 13 235 152 75 153 132 21 28 110 117 27 87 33 60 178 232 162 233 247 49 181 86 100 128 254 105 228 79 104 239 152 63 25 178 57 157 172 241 5 213 142 111 180 192 98 18 121 70 240 255 251 70 103 179 78 4 74 132 54 48 6 35 69 5 138 13 225 160 196 99 232 217 248 44 253 189 25 206 4 181 106 135 154 247 187 134 32 62 70 126 78 181 104 191 105 103 226 189 33 43 73 74 167 105 130 224 94 112 212 38 136 204 182 126 189 139 6 112 241 239 160 195 241 172 52 130 99 176 221 29 137 164 42 63 54 61 24 180 72 140 144 49 53 30 17 168 20 245 235 202 146 154 64 182 237 116 230 161 193 248 20 186 98 182 185 1 214 145) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 5 (list 2 1)))))) :raw-genotype (list 18 79 251 172 109 48 226 102 185 43 162 179 123 245 156 126 23 78 220 67 202 230 78 178 222 34 45 215 235 153 28 65 242 61 54 249 252 227 187 139 24 179 113 186 150 237 178 233 77 33 109 245 203 5 85 65 58 228 104 46 199 35 68 69 87 36 53 139 137 50 0 155 253 178 191 177 85 7 33 94 19 63 27 98 63 133 55 150 92 46 137 110 237 141 181 176 37 123 71 66 187 10 173 52 174 16 45 70 220 122 208 66 150 183 53 18 209 250 9 75 176 212 205 237 12 74 51 98 209 224 155 227 155 48 87 215 212 151 81 88 51 159 169 222 93 59 220 153 255 229 135 76 41 223 160 167 221 139 133 230 196 153 52 173 113 235 118 22 112 238 106 251 238 210 254 253 172 141 181 39 190 231 185 166 54 25 72 161 66 79 234 9 65 196 46 141 123 222 90 231) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 79 251 172 109 48 226 102 185 43 162 179 123 245 156 126 23 78 220 67 202 230 78 178 222 34 45 215 235 153 28 65 242 61 54 249 252 227 187 139 24 179 113 186 150 237 178 233 77 33 109 245 203 5 85 65 58 228 104 46 199 35 68 69 87 36 53 139 137 50 0 155 253 178 191 177 85 7 33 94 19 63 27 98 63 133 55 150 92 46 137 110 237 141 181 176 37 123 71 66 187 10 173 52 174 16 45 70 220 122 208 66 150 183 53 18 209 250 9 75 176 212 205 237 12 74 51 98 209 224 155 227 155 48 87 215 212 151 81 88 51 159 169 222 93 59 220 153 255 229 135 76 41 223 160 167 221 139 133 230 196 153 52 173 113 235 118 22 112 238 106 251 238 210 254 253 172 141 181 39 190 231 185 166 54 25 72 161 66 79 234 9 65 196 46 141 123 222 90 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 1 1 2)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 2)))))) :raw-genotype (list 107 78 40 165 112 7 207 21 185 239 126 207 212 210 207 220 248 219 254 104 86 112 89 89 186 35 147 66 5 204 195 70 166 167 143 189 139 117 18 17 37 161 170 165 92 98 156 126 81 34 191 227 40 170 177 244 207 52 45 146 68 41 202 22 31 123 121 46 49 120 120 46 34 41 57 154 3 12 176 242 199 113 153 18 236 18 188 200 10 56 185 168 138 137 83 195 211 224 248 103 168 48 69 235 50 124 60 152 197 176 151 62 103 77 236 181 83 105 228 80 89 38 152 32 168 117 13 91 183 214 155 209 98 139 7 216 230 0 161 103 37 172 90 147 225 64 172 51 202 208 48 151 206 2 123 148 210 242 12 100 60 57 44 215 67 154 250 48 46 97 136 51 180 128 242 246 156 157 62 71 1 105 29 20 214 255 59 208 163 212 22 48 4 239 90 96 220 135 217 222) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 107 78 40 165 112 7 207 21 185 239 126 207 212 210 207 220 248 219 254 104 86 112 89 89 186 35 147 66 5 204 195 70 166 167 143 189 139 117 18 17 37 161 170 165 92 98 156 126 81 34 191 227 40 170 177 244 207 52 45 146 68 41 202 22 31 123 121 46 49 120 120 46 34 41 57 154 3 12 176 242 199 113 153 18 236 18 188 200 10 56 185 168 138 137 83 195 211 224 248 103 168 48 69 235 50 124 60 152 197 176 151 62 103 77 236 181 83 105 228 80 89 38 152 32 168 117 13 91 183 214 155 209 98 139 7 216 230 0 161 103 37 172 90 147 225 64 172 51 202 208 48 151 206 2 123 148 210 242 12 100 60 57 44 215 67 154 250 48 46 97 136 51 180 128 242 246 156 157 62 71 1 105 29 20 214 255 59 208 163 212 22 48 4 239 90 96 220 135 217 222)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2 2)))))) :raw-genotype (list 75 113 17 209 153 182 228 218 124 207 162 151 226 124 110 61 27 51 165 118 129 9 12 172 249 70 135 27 170 220 118 25 13 235 152 75 153 132 21 28 110 117 27 87 33 60 178 232 162 233 247 49 181 86 100 128 254 105 228 79 104 239 152 63 25 178 57 157 172 241 5 213 142 111 180 192 98 18 121 70 240 255 251 70 103 179 78 4 74 132 54 48 6 35 69 5 138 13 225 160 196 99 232 217 248 44 253 189 25 206 4 181 106 135 154 247 187 134 32 62 70 126 78 181 104 191 105 103 226 189 33 43 73 74 167 105 130 224 94 112 212 38 136 204 182 126 189 139 6 112 241 239 160 195 241 172 52 130 99 176 221 29 137 164 42 63 54 61 24 180 72 140 144 49 53 30 17 168 20 245 235 202 146 154 64 182 237 116 230 161 193 248 20 186 98 182 185 1 214 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 113 17 209 153 182 228 218 124 207 162 151 226 124 110 61 27 51 165 118 129 9 12 172 249 70 135 27 170 220 118 25 13 235 152 75 153 132 21 28 110 117 27 87 33 60 178 232 162 233 247 49 181 86 100 128 254 105 228 79 104 239 152 63 25 178 57 157 172 241 5 213 142 111 180 192 98 18 121 70 240 255 251 70 103 179 78 4 74 132 54 48 6 35 69 5 138 13 225 160 196 99 232 217 248 44 253 189 25 206 4 181 106 135 154 247 187 134 32 62 70 126 78 181 104 191 105 103 226 189 33 43 73 74 167 105 130 224 94 112 212 38 136 204 182 126 189 139 6 112 241 239 160 195 241 172 52 130 99 176 221 29 137 164 42 63 54 61 24 180 72 140 144 49 53 30 17 168 20 245 235 202 146 154 64 182 237 116 230 161 193 248 20 186 98 182 185 1 214 145)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 79 251 172 109 48 226 102 185 43 162 179 123 245 156 126 23 78 220 67 202 230 78 178 222 34 45 215 235 153 28 65 242 61 54 249 252 227 187 139 24 179 113 186 150 237 178 233 77 33 109 245 203 5 85 65 58 228 104 46 199 35 68 69 87 36 53 139 137 50 0 155 253 178 191 177 85 7 33 94 19 63 27 98 63 133 55 150 92 46 137 110 237 141 181 176 37 123 71 66 187 10 173 52 174 16 45 70 220 122 208 66 150 183 53 18 209 250 9 75 176 212 205 237 12 74 51 98 209 224 155 227 155 48 87 215 212 151 81 88 51 159 169 222 93 59 220 153 255 229 135 76 41 223 160 167 221 139 133 230 196 153 52 173 113 235 118 22 112 238 106 251 238 210 254 253 172 141 181 39 190 231 185 166 54 25 72 161 66 79 234 9 65 196 46 141 123 222 90 231 107 78 40 165 112 7 207 21 185 239 126 207 212 210 207 220 248 219 254 104 86 112 89 89 186 35 147 66 5 204 195 70 166 167 143 189 139 117 18 17 37 161 170 165 92 98 156 126 81 34 191 227 40 170 177 244 207 52 45 146 68 41 202 22 31 123 121 46 49 120 120 46 34 41 57 154 3 12 176 242 199 113 153 18 236 18 188 200 10 56 185 168 138 137 83 195 211 224 248 103 168 48 69 235 50 124 60 152 197 176 151 62 103 77 236 181 83 105 228 80 89 38 152 32 168 117 13 91 183 214 155 209 98 139 7 216 230 0 161 103 37 172 90 147 225 64 172 51 202 208 48 151 206 2 123 148 210 242 12 100 60 57 44 215 67 154 250 48 46 97 136 51 180 128 242 246 156 157 62 71 1 105 29 20 214 255 59 208 163 212 22 48 4 239 90 96 220 135 217 222 75 113 17 209 153 182 228 218 124 207 162 151 226 124 110 61 27 51 165 118 129 9 12 172 249 70 135 27 170 220 118 25 13 235 152 75 153 132 21 28 110 117 27 87 33 60 178 232 162 233 247 49 181 86 100 128 254 105 228 79 104 239 152 63 25 178 57 157 172 241 5 213 142 111 180 192 98 18 121 70 240 255 251 70 103 179 78 4 74 132 54 48 6 35 69 5 138 13 225 160 196 99 232 217 248 44 253 189 25 206 4 181 106 135 154 247 187 134 32 62 70 126 78 181 104 191 105 103 226 189 33 43 73 74 167 105 130 224 94 112 212 38 136 204 182 126 189 139 6 112 241 239 160 195 241 172 52 130 99 176 221 29 137 164 42 63 54 61 24 180 72 140 144 49 53 30 17 168 20 245 235 202 146 154 64 182 237 116 230 161 193 248 20 186 98 182 185 1 214 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 18 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 138 32 189 37 130 245 72 107 85 75 17 42 209 132 158 36 117 63 212 11 119 159 98 83 236 172 69 11 189 151 5 68 168 175 158 117 21 241 212 53 243 158 181 255 105 116 171 187 191 128 49 74 158 60 208 200 110 197 249 12 59 65 140 64 175 225 210 237 18 209 50 254 86 62 195 63 160 35 182 26 10 4 201 210 72 210 232 96 127 71 4 5 165 103 243 244 243 194 168 20 208 115 219 140 53 19 114 132 162 178 206 68 64 16 64 230 243 51 165 214 150 151 40 161 165 219 226 115 214 177 36 197 104 234 80 70 217 18 46 197 27 7 85 223 157 45 70 14 206 216 104 154 91 58 149 221 199 220 125 238 134 180 105 205 215 153 33 173 111 46 1 1 125 62 50 244 98 56 130 162 190 242 198 55 216 46 55 193 233 105 136 131 92 200 30 132 149 17 145 145 126 146 114 150 92 98 148 20 197 20 136 199 230 118 9 18 49 237 91 48 52 62 0 172 149 117 21 154 148 136 118 253 152 44 135 216 60 66 236 97 36 30 27 157 198 131 10 93 147 155 49 167 25 7 125 42 158 31 52 158 214 0 40 58 168 226 131 62 140 28 144 130 248 97 219 89 9 43 191 19 52 208 52 94 118 39 212 212 105 93 122 206 8 243 166 22 124 120 33 140 53 30 168 207 1 219 119 127 164 254 114 136 147 26 166 8 27 226 190 96 253 95 26 83 174 42 199 100 184 210 138 207 191 135 190 101 80 4 128 66 182 148 201 90 219 234 91 163 210 223 224 48 243 22 6 223 47 141 102 43 125 1 232 182 8 83 237 247 144 101 190 180 159 64 45 82 50 89 143 91 86 204 227 79 139 185 117 143 17 82 71 148 231 2 108 51 11 137 47 30 182 50 45 55 172 21 66 163 193 84 192 160 186 114 19 234 236 34 59 94 120 38 174 29 240 227 214 238 66 150 215 28 229 27 248 136 87 98 119 165 153 204 113 204 109 68 4 244 81 11 251 205 199 245 210 23 74 49 54 108 166 26 104 239 142 19 136 225 89 240 224 115 72 91 69 237 165 241 9 47 7 36 176 62 243 132 212 171 13 16 56 187 103 135 14 22 204 17 90 235 247 253 128 20 31 125 5 232 88 235 245 62 70 166 99 131 239 253 164 225 153 59 68 231 221 245 94 122 196 242 141 73 244 38 71 108 86 163 118 117 211 79 238 169 117 255 80 102 3 116 72 213 78 120 64 243 166 91 141 213 168 96 205 190 70 44 241 27 100 211 87 2 24 41 110 139 190 41 208 157 185 7 153 156 239 24 180 108 115 93 115 7 73 204 213 105 25 25 0 191) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 4 (list 3 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 138 32 189 37 130 245 72 107 85 75 17 42 209 132 158 36 117 63 212 11 119 159 98 83 236 172 69 11 189 151 5 68 168 175 158 117 21 241 212 53 243 158 181 255 105 116 171 187 191 128 49 74 158 60 208 200 110 197 249 12 59 65 140 64 175 225 210 237 18 209 50 254 86 62 195 63 160 35 182 26 10 4 201 210 72 210 232 96 127 71 4 5 165 103 243 244 243 194 168 20 208 115 219 140 53 19 114 132 162 178 206 68 64 16 64 230 243 51 165 214 150 151 40 161 165 219 226 115 214 177 36 197 104 234 80 70 217 18 46 197 27 7 85 223 157 45 70 14 206 216 104 154 91 58 149 221 199 220 125 238 134 180 105 205 215 153 33 173 111 46 1 1 125 62 50 244 98 56 130 162 190 242 198 55 216 46 55 193 233 105 136 131 92 200 30 132 149 17 145 145) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 32 189 37 130 245 72 107 85 75 17 42 209 132 158 36 117 63 212 11 119 159 98 83 236 172 69 11 189 151 5 68 168 175 158 117 21 241 212 53 243 158 181 255 105 116 171 187 191 128 49 74 158 60 208 200 110 197 249 12 59 65 140 64 175 225 210 237 18 209 50 254 86 62 195 63 160 35 182 26 10 4 201 210 72 210 232 96 127 71 4 5 165 103 243 244 243 194 168 20 208 115 219 140 53 19 114 132 162 178 206 68 64 16 64 230 243 51 165 214 150 151 40 161 165 219 226 115 214 177 36 197 104 234 80 70 217 18 46 197 27 7 85 223 157 45 70 14 206 216 104 154 91 58 149 221 199 220 125 238 134 180 105 205 215 153 33 173 111 46 1 1 125 62 50 244 98 56 130 162 190 242 198 55 216 46 55 193 233 105 136 131 92 200 30 132 149 17 145 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 2 1 1 1)) (list 1 (list 1 3 1 1)) (list 1 (list 1 2 1 2)))))) :raw-genotype (list 126 146 114 150 92 98 148 20 197 20 136 199 230 118 9 18 49 237 91 48 52 62 0 172 149 117 21 154 148 136 118 253 152 44 135 216 60 66 236 97 36 30 27 157 198 131 10 93 147 155 49 167 25 7 125 42 158 31 52 158 214 0 40 58 168 226 131 62 140 28 144 130 248 97 219 89 9 43 191 19 52 208 52 94 118 39 212 212 105 93 122 206 8 243 166 22 124 120 33 140 53 30 168 207 1 219 119 127 164 254 114 136 147 26 166 8 27 226 190 96 253 95 26 83 174 42 199 100 184 210 138 207 191 135 190 101 80 4 128 66 182 148 201 90 219 234 91 163 210 223 224 48 243 22 6 223 47 141 102 43 125 1 232 182 8 83 237 247 144 101 190 180 159 64 45 82 50 89 143 91 86 204 227 79 139 185 117 143 17 82 71 148 231 2 108 51 11 137 47 30) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 126 146 114 150 92 98 148 20 197 20 136 199 230 118 9 18 49 237 91 48 52 62 0 172 149 117 21 154 148 136 118 253 152 44 135 216 60 66 236 97 36 30 27 157 198 131 10 93 147 155 49 167 25 7 125 42 158 31 52 158 214 0 40 58 168 226 131 62 140 28 144 130 248 97 219 89 9 43 191 19 52 208 52 94 118 39 212 212 105 93 122 206 8 243 166 22 124 120 33 140 53 30 168 207 1 219 119 127 164 254 114 136 147 26 166 8 27 226 190 96 253 95 26 83 174 42 199 100 184 210 138 207 191 135 190 101 80 4 128 66 182 148 201 90 219 234 91 163 210 223 224 48 243 22 6 223 47 141 102 43 125 1 232 182 8 83 237 247 144 101 190 180 159 64 45 82 50 89 143 91 86 204 227 79 139 185 117 143 17 82 71 148 231 2 108 51 11 137 47 30)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2)) (list 1 (list 3)) (list 1 (list 3 1)))))) :raw-genotype (list 182 50 45 55 172 21 66 163 193 84 192 160 186 114 19 234 236 34 59 94 120 38 174 29 240 227 214 238 66 150 215 28 229 27 248 136 87 98 119 165 153 204 113 204 109 68 4 244 81 11 251 205 199 245 210 23 74 49 54 108 166 26 104 239 142 19 136 225 89 240 224 115 72 91 69 237 165 241 9 47 7 36 176 62 243 132 212 171 13 16 56 187 103 135 14 22 204 17 90 235 247 253 128 20 31 125 5 232 88 235 245 62 70 166 99 131 239 253 164 225 153 59 68 231 221 245 94 122 196 242 141 73 244 38 71 108 86 163 118 117 211 79 238 169 117 255 80 102 3 116 72 213 78 120 64 243 166 91 141 213 168 96 205 190 70 44 241 27 100 211 87 2 24 41 110 139 190 41 208 157 185 7 153 156 239 24 180 108 115 93 115 7 73 204 213 105 25 25 0 191) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 50 45 55 172 21 66 163 193 84 192 160 186 114 19 234 236 34 59 94 120 38 174 29 240 227 214 238 66 150 215 28 229 27 248 136 87 98 119 165 153 204 113 204 109 68 4 244 81 11 251 205 199 245 210 23 74 49 54 108 166 26 104 239 142 19 136 225 89 240 224 115 72 91 69 237 165 241 9 47 7 36 176 62 243 132 212 171 13 16 56 187 103 135 14 22 204 17 90 235 247 253 128 20 31 125 5 232 88 235 245 62 70 166 99 131 239 253 164 225 153 59 68 231 221 245 94 122 196 242 141 73 244 38 71 108 86 163 118 117 211 79 238 169 117 255 80 102 3 116 72 213 78 120 64 243 166 91 141 213 168 96 205 190 70 44 241 27 100 211 87 2 24 41 110 139 190 41 208 157 185 7 153 156 239 24 180 108 115 93 115 7 73 204 213 105 25 25 0 191)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 32 189 37 130 245 72 107 85 75 17 42 209 132 158 36 117 63 212 11 119 159 98 83 236 172 69 11 189 151 5 68 168 175 158 117 21 241 212 53 243 158 181 255 105 116 171 187 191 128 49 74 158 60 208 200 110 197 249 12 59 65 140 64 175 225 210 237 18 209 50 254 86 62 195 63 160 35 182 26 10 4 201 210 72 210 232 96 127 71 4 5 165 103 243 244 243 194 168 20 208 115 219 140 53 19 114 132 162 178 206 68 64 16 64 230 243 51 165 214 150 151 40 161 165 219 226 115 214 177 36 197 104 234 80 70 217 18 46 197 27 7 85 223 157 45 70 14 206 216 104 154 91 58 149 221 199 220 125 238 134 180 105 205 215 153 33 173 111 46 1 1 125 62 50 244 98 56 130 162 190 242 198 55 216 46 55 193 233 105 136 131 92 200 30 132 149 17 145 145 126 146 114 150 92 98 148 20 197 20 136 199 230 118 9 18 49 237 91 48 52 62 0 172 149 117 21 154 148 136 118 253 152 44 135 216 60 66 236 97 36 30 27 157 198 131 10 93 147 155 49 167 25 7 125 42 158 31 52 158 214 0 40 58 168 226 131 62 140 28 144 130 248 97 219 89 9 43 191 19 52 208 52 94 118 39 212 212 105 93 122 206 8 243 166 22 124 120 33 140 53 30 168 207 1 219 119 127 164 254 114 136 147 26 166 8 27 226 190 96 253 95 26 83 174 42 199 100 184 210 138 207 191 135 190 101 80 4 128 66 182 148 201 90 219 234 91 163 210 223 224 48 243 22 6 223 47 141 102 43 125 1 232 182 8 83 237 247 144 101 190 180 159 64 45 82 50 89 143 91 86 204 227 79 139 185 117 143 17 82 71 148 231 2 108 51 11 137 47 30 182 50 45 55 172 21 66 163 193 84 192 160 186 114 19 234 236 34 59 94 120 38 174 29 240 227 214 238 66 150 215 28 229 27 248 136 87 98 119 165 153 204 113 204 109 68 4 244 81 11 251 205 199 245 210 23 74 49 54 108 166 26 104 239 142 19 136 225 89 240 224 115 72 91 69 237 165 241 9 47 7 36 176 62 243 132 212 171 13 16 56 187 103 135 14 22 204 17 90 235 247 253 128 20 31 125 5 232 88 235 245 62 70 166 99 131 239 253 164 225 153 59 68 231 221 245 94 122 196 242 141 73 244 38 71 108 86 163 118 117 211 79 238 169 117 255 80 102 3 116 72 213 78 120 64 243 166 91 141 213 168 96 205 190 70 44 241 27 100 211 87 2 24 41 110 139 190 41 208 157 185 7 153 156 239 24 180 108 115 93 115 7 73 204 213 105 25 25 0 191)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 18 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 113 250 8 216 121 157 5 152 217 92 37 8 171 228 120 200 164 14 168 47 4 135 4 62 226 72 147 16 129 51 82 230 118 168 131 188 170 232 129 83 248 133 109 151 171 247 80 183 150 200 182 237 255 110 89 114 178 91 55 73 239 27 46 84 172 119 68 143 111 24 91 164 112 229 243 136 114 153 84 252 240 71 202 34 111 20 204 86 250 0 59 87 155 174 158 247 84 140 51 107 233 11 146 184 253 185 35 221 109 62 8 87 57 132 72 182 220 244 163 203 208 194 218 3 104 56 42 228 172 171 79 8 148 6 73 128 78 106 39 240 192 249 199 210 255 51 158 22 214 35 56 58 222 186 243 161 152 1 127 9 143 4 95 254 3 30 11 131 123 86 242 202 198 5 10 162 150 246 9 208 45 99 183 58 85 103 148 9 103 139 211 231 125 226 140 193 204 222 161 201 150 31 168 80 157 241 26 17 92 53 163 106 12 220 118 131 67 140 198 236 235 38 70 238 17 116 24 162 253 190 167 82 62 117 151 111 147 178 216 172 32 209 83 120 251 45 109 245 0 219 112 219 97 114 232 93 29 233 14 134 204 235 8 85 118 191 132 217 163 240 56 140 161 92 198 135 184 216 110 145 1 178 131 140 148 90 147 235 86 243 110 85 202 228 172 116 177 62 130 231 69 101 147 220 34 96 237 8 68 242 10 63 3 244 35 181 236 3 234 112 194 91 138 53 157 33 127 126 38 116 194 28 98 157 66 181 121 175 75 72 150 215 200 183 201 225 1 131 207 245 47 102 248 169 99 199 48 32 215 217 156 83 142 136 225 9 186 191 4 182 113 210 223 159 42 85 53 152 100 81 159 87 1 18 21 172 236 126 75 113 56 181 1 185 106 184 103 225 32 22 153 231 34 150 134 103 10 190 15 179 176 107 72 17 81 86 73 244 153 114 157 223 28 81 88 244 117 39 147 97 243 169 23 3 12 159 20 101 107 245 224 25 189 14 23 209 84 19 94 47 144 118 129 11 66 0 37 162 39 125 111 43 6 147 201 42 88 42 36 170 94 84 200 2 21 96 41 149 90 27 25 78 16 210 32 175 170 204 54 249 62 137 21 85 52 225 191 37 121 250 233 111 123 72 222 134 83 43 243 172 243 218 32 187 250 66 91 201 172 233 125 163 32 149 205 207 18 224 155 179 84 136 6 14 243 112 203 204 98 10 117 122 33 120 225 169 172 34 5 243 161 194 44 80 115 117 137 61 78 83 31 143 253 33 109 253 154 158 163 238 125 206 161 140 63 209 112 10 68 88 79 48 240 212 229 135 39 123 240 10 107 113 82 137 67 27 175 185 180 27) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3 1)) (list 2 (list 3 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 1 2 3)))))) :raw-genotype (list 113 250 8 216 121 157 5 152 217 92 37 8 171 228 120 200 164 14 168 47 4 135 4 62 226 72 147 16 129 51 82 230 118 168 131 188 170 232 129 83 248 133 109 151 171 247 80 183 150 200 182 237 255 110 89 114 178 91 55 73 239 27 46 84 172 119 68 143 111 24 91 164 112 229 243 136 114 153 84 252 240 71 202 34 111 20 204 86 250 0 59 87 155 174 158 247 84 140 51 107 233 11 146 184 253 185 35 221 109 62 8 87 57 132 72 182 220 244 163 203 208 194 218 3 104 56 42 228 172 171 79 8 148 6 73 128 78 106 39 240 192 249 199 210 255 51 158 22 214 35 56 58 222 186 243 161 152 1 127 9 143 4 95 254 3 30 11 131 123 86 242 202 198 5 10 162 150 246 9 208 45 99 183 58 85 103 148 9 103 139 211 231 125 226 140 193 204 222 161 201) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 113 250 8 216 121 157 5 152 217 92 37 8 171 228 120 200 164 14 168 47 4 135 4 62 226 72 147 16 129 51 82 230 118 168 131 188 170 232 129 83 248 133 109 151 171 247 80 183 150 200 182 237 255 110 89 114 178 91 55 73 239 27 46 84 172 119 68 143 111 24 91 164 112 229 243 136 114 153 84 252 240 71 202 34 111 20 204 86 250 0 59 87 155 174 158 247 84 140 51 107 233 11 146 184 253 185 35 221 109 62 8 87 57 132 72 182 220 244 163 203 208 194 218 3 104 56 42 228 172 171 79 8 148 6 73 128 78 106 39 240 192 249 199 210 255 51 158 22 214 35 56 58 222 186 243 161 152 1 127 9 143 4 95 254 3 30 11 131 123 86 242 202 198 5 10 162 150 246 9 208 45 99 183 58 85 103 148 9 103 139 211 231 125 226 140 193 204 222 161 201)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 4 1)))))) :raw-genotype (list 150 31 168 80 157 241 26 17 92 53 163 106 12 220 118 131 67 140 198 236 235 38 70 238 17 116 24 162 253 190 167 82 62 117 151 111 147 178 216 172 32 209 83 120 251 45 109 245 0 219 112 219 97 114 232 93 29 233 14 134 204 235 8 85 118 191 132 217 163 240 56 140 161 92 198 135 184 216 110 145 1 178 131 140 148 90 147 235 86 243 110 85 202 228 172 116 177 62 130 231 69 101 147 220 34 96 237 8 68 242 10 63 3 244 35 181 236 3 234 112 194 91 138 53 157 33 127 126 38 116 194 28 98 157 66 181 121 175 75 72 150 215 200 183 201 225 1 131 207 245 47 102 248 169 99 199 48 32 215 217 156 83 142 136 225 9 186 191 4 182 113 210 223 159 42 85 53 152 100 81 159 87 1 18 21 172 236 126 75 113 56 181 1 185 106 184 103 225 32 22) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 31 168 80 157 241 26 17 92 53 163 106 12 220 118 131 67 140 198 236 235 38 70 238 17 116 24 162 253 190 167 82 62 117 151 111 147 178 216 172 32 209 83 120 251 45 109 245 0 219 112 219 97 114 232 93 29 233 14 134 204 235 8 85 118 191 132 217 163 240 56 140 161 92 198 135 184 216 110 145 1 178 131 140 148 90 147 235 86 243 110 85 202 228 172 116 177 62 130 231 69 101 147 220 34 96 237 8 68 242 10 63 3 244 35 181 236 3 234 112 194 91 138 53 157 33 127 126 38 116 194 28 98 157 66 181 121 175 75 72 150 215 200 183 201 225 1 131 207 245 47 102 248 169 99 199 48 32 215 217 156 83 142 136 225 9 186 191 4 182 113 210 223 159 42 85 53 152 100 81 159 87 1 18 21 172 236 126 75 113 56 181 1 185 106 184 103 225 32 22)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 2 1 1 1)) (list 4 (list 1 1 1)))))) :raw-genotype (list 153 231 34 150 134 103 10 190 15 179 176 107 72 17 81 86 73 244 153 114 157 223 28 81 88 244 117 39 147 97 243 169 23 3 12 159 20 101 107 245 224 25 189 14 23 209 84 19 94 47 144 118 129 11 66 0 37 162 39 125 111 43 6 147 201 42 88 42 36 170 94 84 200 2 21 96 41 149 90 27 25 78 16 210 32 175 170 204 54 249 62 137 21 85 52 225 191 37 121 250 233 111 123 72 222 134 83 43 243 172 243 218 32 187 250 66 91 201 172 233 125 163 32 149 205 207 18 224 155 179 84 136 6 14 243 112 203 204 98 10 117 122 33 120 225 169 172 34 5 243 161 194 44 80 115 117 137 61 78 83 31 143 253 33 109 253 154 158 163 238 125 206 161 140 63 209 112 10 68 88 79 48 240 212 229 135 39 123 240 10 107 113 82 137 67 27 175 185 180 27) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 231 34 150 134 103 10 190 15 179 176 107 72 17 81 86 73 244 153 114 157 223 28 81 88 244 117 39 147 97 243 169 23 3 12 159 20 101 107 245 224 25 189 14 23 209 84 19 94 47 144 118 129 11 66 0 37 162 39 125 111 43 6 147 201 42 88 42 36 170 94 84 200 2 21 96 41 149 90 27 25 78 16 210 32 175 170 204 54 249 62 137 21 85 52 225 191 37 121 250 233 111 123 72 222 134 83 43 243 172 243 218 32 187 250 66 91 201 172 233 125 163 32 149 205 207 18 224 155 179 84 136 6 14 243 112 203 204 98 10 117 122 33 120 225 169 172 34 5 243 161 194 44 80 115 117 137 61 78 83 31 143 253 33 109 253 154 158 163 238 125 206 161 140 63 209 112 10 68 88 79 48 240 212 229 135 39 123 240 10 107 113 82 137 67 27 175 185 180 27)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 113 250 8 216 121 157 5 152 217 92 37 8 171 228 120 200 164 14 168 47 4 135 4 62 226 72 147 16 129 51 82 230 118 168 131 188 170 232 129 83 248 133 109 151 171 247 80 183 150 200 182 237 255 110 89 114 178 91 55 73 239 27 46 84 172 119 68 143 111 24 91 164 112 229 243 136 114 153 84 252 240 71 202 34 111 20 204 86 250 0 59 87 155 174 158 247 84 140 51 107 233 11 146 184 253 185 35 221 109 62 8 87 57 132 72 182 220 244 163 203 208 194 218 3 104 56 42 228 172 171 79 8 148 6 73 128 78 106 39 240 192 249 199 210 255 51 158 22 214 35 56 58 222 186 243 161 152 1 127 9 143 4 95 254 3 30 11 131 123 86 242 202 198 5 10 162 150 246 9 208 45 99 183 58 85 103 148 9 103 139 211 231 125 226 140 193 204 222 161 201 150 31 168 80 157 241 26 17 92 53 163 106 12 220 118 131 67 140 198 236 235 38 70 238 17 116 24 162 253 190 167 82 62 117 151 111 147 178 216 172 32 209 83 120 251 45 109 245 0 219 112 219 97 114 232 93 29 233 14 134 204 235 8 85 118 191 132 217 163 240 56 140 161 92 198 135 184 216 110 145 1 178 131 140 148 90 147 235 86 243 110 85 202 228 172 116 177 62 130 231 69 101 147 220 34 96 237 8 68 242 10 63 3 244 35 181 236 3 234 112 194 91 138 53 157 33 127 126 38 116 194 28 98 157 66 181 121 175 75 72 150 215 200 183 201 225 1 131 207 245 47 102 248 169 99 199 48 32 215 217 156 83 142 136 225 9 186 191 4 182 113 210 223 159 42 85 53 152 100 81 159 87 1 18 21 172 236 126 75 113 56 181 1 185 106 184 103 225 32 22 153 231 34 150 134 103 10 190 15 179 176 107 72 17 81 86 73 244 153 114 157 223 28 81 88 244 117 39 147 97 243 169 23 3 12 159 20 101 107 245 224 25 189 14 23 209 84 19 94 47 144 118 129 11 66 0 37 162 39 125 111 43 6 147 201 42 88 42 36 170 94 84 200 2 21 96 41 149 90 27 25 78 16 210 32 175 170 204 54 249 62 137 21 85 52 225 191 37 121 250 233 111 123 72 222 134 83 43 243 172 243 218 32 187 250 66 91 201 172 233 125 163 32 149 205 207 18 224 155 179 84 136 6 14 243 112 203 204 98 10 117 122 33 120 225 169 172 34 5 243 161 194 44 80 115 117 137 61 78 83 31 143 253 33 109 253 154 158 163 238 125 206 161 140 63 209 112 10 68 88 79 48 240 212 229 135 39 123 240 10 107 113 82 137 67 27 175 185 180 27)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 252 90 51 160 99 98 20 207 25 246 4 234 71 77 61 237 118 122 247 120 114 188 25 92 208 91 144 96 114 224 68 162 138 249 178 204 161 1 240 69 216 128 68 250 99 161 234 224 41 69 158 243 156 33 158 230 46 84 49 3 23 191 96 206 132 48 65 178 224 217 88 165 60 24 101 88 60 252 182 137 228 147 119 249 5 4 90 127 226 15 83 227 203 157 125 190 94 97 189 221 232 152 180 43 51 106 149 40 164 64 173 56 66 88 252 140 255 75 66 142 162 111 191 195 240 89 105 75 209 239 100 162 248 56 28 215 207 245 147 5 167 193 112 177 196 162 142 143 214 39 171 50 174 67 138 144 236 71 10 59 140 187 169 231 110 168 245 28 160 28 144 35 105 57 214 31 2 79 130 69 176 87 14 125 31 75 223 168 198 204 237 149 175 149 204 44 171 137 227 166 223 17 29 217 2 66 43 98 215 113 148 15 214 40 35 106 62 179 154 83 126 255 70 251 163 66 66 61 24 74 102 38 243 219 191 47 56 160 139 137 148 68 27 74 236 219 170 56 14 110 232 163 47 12 7 6 250 152 51 122 205 239 98 7 216 42 34 22 0 22 120 195 10 59 33 48 82 2 169 60 220 112 148 23 85 136 252 181 235 81 78 160 161 1 89 78 88 107 30 47 174 227 76 76 88 55 72 97 145 2 177 133 134 202 109 144 101 96 40 130 143 52 47 196 91 15 86 149 88 120 181 149 173 237 97 246 94 134 229 239 92 223 109 224 132 207 101 94 104 166 237 197 150 230 67 146 57 173 78 149 206 72 128 96 144 242 102 78 62 247 195 202 208 113 84 204 21 7 239 74 5 229 239 72 255 21 15 127 85 94 172 196 222 178 38 175 222 54 80 230 110 77 178 173 210 180 222 229 88 163 184 4 174 67 148 38 52 136 63 210 158 158 38 101 18 124 125 69 10 170 252 97 146 4 11 147 50 220 39 73 153 190 41 252 76 234 67 198 164 46 37 64 252 226 209 225 184 184 101 232 186 12 163 60 120 47 170 143 128 107 250 46 109 247 222 154 8 54 243 52 55 170 242 102 8 6 206 126 58 61 195 92 146 69 201 45 34 220 230 244 123 185 218 101 209 52 98 236 215 175 54 244 164 171 24 160 232 5 167 81 134 119 116 232 181 10 212 200 18 254 246 15 164 108 43 80 159 126 170 238 213 37 141 197 58 208 124 250 211 3 236 240 230 234 140 95 72 144 33 211 226 150 199 134 93 131 105 231 232 28 226 218 170 63 118 93 96 116 20 82 102 235 231 224 140 214 42 201 174 187 136 104 200 210 177 209 206 59 153 48) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 2 1)) (list 1 (list 1 1)) (list 1 (list 1 2)))))) :raw-genotype (list 252 90 51 160 99 98 20 207 25 246 4 234 71 77 61 237 118 122 247 120 114 188 25 92 208 91 144 96 114 224 68 162 138 249 178 204 161 1 240 69 216 128 68 250 99 161 234 224 41 69 158 243 156 33 158 230 46 84 49 3 23 191 96 206 132 48 65 178 224 217 88 165 60 24 101 88 60 252 182 137 228 147 119 249 5 4 90 127 226 15 83 227 203 157 125 190 94 97 189 221 232 152 180 43 51 106 149 40 164 64 173 56 66 88 252 140 255 75 66 142 162 111 191 195 240 89 105 75 209 239 100 162 248 56 28 215 207 245 147 5 167 193 112 177 196 162 142 143 214 39 171 50 174 67 138 144 236 71 10 59 140 187 169 231 110 168 245 28 160 28 144 35 105 57 214 31 2 79 130 69 176 87 14 125 31 75 223 168 198 204 237 149 175 149 204 44 171 137 227 166) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 90 51 160 99 98 20 207 25 246 4 234 71 77 61 237 118 122 247 120 114 188 25 92 208 91 144 96 114 224 68 162 138 249 178 204 161 1 240 69 216 128 68 250 99 161 234 224 41 69 158 243 156 33 158 230 46 84 49 3 23 191 96 206 132 48 65 178 224 217 88 165 60 24 101 88 60 252 182 137 228 147 119 249 5 4 90 127 226 15 83 227 203 157 125 190 94 97 189 221 232 152 180 43 51 106 149 40 164 64 173 56 66 88 252 140 255 75 66 142 162 111 191 195 240 89 105 75 209 239 100 162 248 56 28 215 207 245 147 5 167 193 112 177 196 162 142 143 214 39 171 50 174 67 138 144 236 71 10 59 140 187 169 231 110 168 245 28 160 28 144 35 105 57 214 31 2 79 130 69 176 87 14 125 31 75 223 168 198 204 237 149 175 149 204 44 171 137 227 166)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 1 2 2)) (list 2 (list 2 3 1)))))) :raw-genotype (list 223 17 29 217 2 66 43 98 215 113 148 15 214 40 35 106 62 179 154 83 126 255 70 251 163 66 66 61 24 74 102 38 243 219 191 47 56 160 139 137 148 68 27 74 236 219 170 56 14 110 232 163 47 12 7 6 250 152 51 122 205 239 98 7 216 42 34 22 0 22 120 195 10 59 33 48 82 2 169 60 220 112 148 23 85 136 252 181 235 81 78 160 161 1 89 78 88 107 30 47 174 227 76 76 88 55 72 97 145 2 177 133 134 202 109 144 101 96 40 130 143 52 47 196 91 15 86 149 88 120 181 149 173 237 97 246 94 134 229 239 92 223 109 224 132 207 101 94 104 166 237 197 150 230 67 146 57 173 78 149 206 72 128 96 144 242 102 78 62 247 195 202 208 113 84 204 21 7 239 74 5 229 239 72 255 21 15 127 85 94 172 196 222 178 38 175 222 54 80 230) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 223 17 29 217 2 66 43 98 215 113 148 15 214 40 35 106 62 179 154 83 126 255 70 251 163 66 66 61 24 74 102 38 243 219 191 47 56 160 139 137 148 68 27 74 236 219 170 56 14 110 232 163 47 12 7 6 250 152 51 122 205 239 98 7 216 42 34 22 0 22 120 195 10 59 33 48 82 2 169 60 220 112 148 23 85 136 252 181 235 81 78 160 161 1 89 78 88 107 30 47 174 227 76 76 88 55 72 97 145 2 177 133 134 202 109 144 101 96 40 130 143 52 47 196 91 15 86 149 88 120 181 149 173 237 97 246 94 134 229 239 92 223 109 224 132 207 101 94 104 166 237 197 150 230 67 146 57 173 78 149 206 72 128 96 144 242 102 78 62 247 195 202 208 113 84 204 21 7 239 74 5 229 239 72 255 21 15 127 85 94 172 196 222 178 38 175 222 54 80 230)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 2 (list 1 1 1 2)))))) :raw-genotype (list 110 77 178 173 210 180 222 229 88 163 184 4 174 67 148 38 52 136 63 210 158 158 38 101 18 124 125 69 10 170 252 97 146 4 11 147 50 220 39 73 153 190 41 252 76 234 67 198 164 46 37 64 252 226 209 225 184 184 101 232 186 12 163 60 120 47 170 143 128 107 250 46 109 247 222 154 8 54 243 52 55 170 242 102 8 6 206 126 58 61 195 92 146 69 201 45 34 220 230 244 123 185 218 101 209 52 98 236 215 175 54 244 164 171 24 160 232 5 167 81 134 119 116 232 181 10 212 200 18 254 246 15 164 108 43 80 159 126 170 238 213 37 141 197 58 208 124 250 211 3 236 240 230 234 140 95 72 144 33 211 226 150 199 134 93 131 105 231 232 28 226 218 170 63 118 93 96 116 20 82 102 235 231 224 140 214 42 201 174 187 136 104 200 210 177 209 206 59 153 48) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 110 77 178 173 210 180 222 229 88 163 184 4 174 67 148 38 52 136 63 210 158 158 38 101 18 124 125 69 10 170 252 97 146 4 11 147 50 220 39 73 153 190 41 252 76 234 67 198 164 46 37 64 252 226 209 225 184 184 101 232 186 12 163 60 120 47 170 143 128 107 250 46 109 247 222 154 8 54 243 52 55 170 242 102 8 6 206 126 58 61 195 92 146 69 201 45 34 220 230 244 123 185 218 101 209 52 98 236 215 175 54 244 164 171 24 160 232 5 167 81 134 119 116 232 181 10 212 200 18 254 246 15 164 108 43 80 159 126 170 238 213 37 141 197 58 208 124 250 211 3 236 240 230 234 140 95 72 144 33 211 226 150 199 134 93 131 105 231 232 28 226 218 170 63 118 93 96 116 20 82 102 235 231 224 140 214 42 201 174 187 136 104 200 210 177 209 206 59 153 48)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 90 51 160 99 98 20 207 25 246 4 234 71 77 61 237 118 122 247 120 114 188 25 92 208 91 144 96 114 224 68 162 138 249 178 204 161 1 240 69 216 128 68 250 99 161 234 224 41 69 158 243 156 33 158 230 46 84 49 3 23 191 96 206 132 48 65 178 224 217 88 165 60 24 101 88 60 252 182 137 228 147 119 249 5 4 90 127 226 15 83 227 203 157 125 190 94 97 189 221 232 152 180 43 51 106 149 40 164 64 173 56 66 88 252 140 255 75 66 142 162 111 191 195 240 89 105 75 209 239 100 162 248 56 28 215 207 245 147 5 167 193 112 177 196 162 142 143 214 39 171 50 174 67 138 144 236 71 10 59 140 187 169 231 110 168 245 28 160 28 144 35 105 57 214 31 2 79 130 69 176 87 14 125 31 75 223 168 198 204 237 149 175 149 204 44 171 137 227 166 223 17 29 217 2 66 43 98 215 113 148 15 214 40 35 106 62 179 154 83 126 255 70 251 163 66 66 61 24 74 102 38 243 219 191 47 56 160 139 137 148 68 27 74 236 219 170 56 14 110 232 163 47 12 7 6 250 152 51 122 205 239 98 7 216 42 34 22 0 22 120 195 10 59 33 48 82 2 169 60 220 112 148 23 85 136 252 181 235 81 78 160 161 1 89 78 88 107 30 47 174 227 76 76 88 55 72 97 145 2 177 133 134 202 109 144 101 96 40 130 143 52 47 196 91 15 86 149 88 120 181 149 173 237 97 246 94 134 229 239 92 223 109 224 132 207 101 94 104 166 237 197 150 230 67 146 57 173 78 149 206 72 128 96 144 242 102 78 62 247 195 202 208 113 84 204 21 7 239 74 5 229 239 72 255 21 15 127 85 94 172 196 222 178 38 175 222 54 80 230 110 77 178 173 210 180 222 229 88 163 184 4 174 67 148 38 52 136 63 210 158 158 38 101 18 124 125 69 10 170 252 97 146 4 11 147 50 220 39 73 153 190 41 252 76 234 67 198 164 46 37 64 252 226 209 225 184 184 101 232 186 12 163 60 120 47 170 143 128 107 250 46 109 247 222 154 8 54 243 52 55 170 242 102 8 6 206 126 58 61 195 92 146 69 201 45 34 220 230 244 123 185 218 101 209 52 98 236 215 175 54 244 164 171 24 160 232 5 167 81 134 119 116 232 181 10 212 200 18 254 246 15 164 108 43 80 159 126 170 238 213 37 141 197 58 208 124 250 211 3 236 240 230 234 140 95 72 144 33 211 226 150 199 134 93 131 105 231 232 28 226 218 170 63 118 93 96 116 20 82 102 235 231 224 140 214 42 201 174 187 136 104 200 210 177 209 206 59 153 48)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 16) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1)) (1 (1)) (2 (1 2 1 1 1)))) ((4 4) ((4 (1 1 1 1)))) ((4 4) ((4 ((2 (2)) (1 (3 1)) (1 (3 1 1 1)) (1 (1 2 2 1)) (1 (1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 95 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (15 0 2 0 nil 0) (15 0 3 0 nil 0) (15 0 4 0 nil 0) (2 0 5 0 nil 0) (14 0 5 1 nil 0) (19 0 7 0 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (15 0 9 0 nil 0) (14 0 9 1 nil 0) (15 0 11 0 nil 0) (15 0 12 0 nil 0) (15 0 13 0 nil 0) (10 0 14 1 nil 0) (8 0 15 1 nil 0) (14 0 15 2 nil 0) (18 0 19 0 nil 0) (16 0 19 1 nil 0) (17 0 19 2 nil 0))) nil 6.090014))
