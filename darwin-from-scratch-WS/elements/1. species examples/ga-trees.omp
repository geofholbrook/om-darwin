; OM File Header - Saved 2015/02/27 16:19:22
; (6.090014 :patc (om-make-point 10 110) (om-make-point 50 22) (om-make-point 949 512) "" 183 0 "2015/02/25 19:31:33" "2015/02/27 16:18:07")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-trees" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 272 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 357 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 523 196) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 15 99 104 123 32 141 2 99 235 90 247 225 237 99 174 238 125 52 93 34 134 173 176 157 217 26 90 3 179 233 200 2 49 238 231 144 56 132 175 101 3 218 10 241 68 122 184 36 200 80 81 72 215 116 19 150 88 100 176 199 136 18 82 93 211 235 222 167 42 166 163 254 175 115 206 132 38 178 113 116 192 179 122 113 220 84 144 195 212 110 225 176 85 8 1 139 127 191 200 162 108 151 62 16 4 194 72 82 105 40 29 56 32 168 56 105 90 96 96 106 159 113 204 18 58 60 193 121 146 204 122 29 155 145 248 213 34 169 69 176 242 35 62 15 82 124 105 68 63 78 248 83 150 28 137 50 207 10 219 230 243 153 27 26 66 120 47 252 182 212 160 159 174 100 242 7 234 157 110 13 205 84 122 193 19 58 183 211 114 4 30 97 27 82 145 211 164 1 91 104 8 178 76 27 78 205 87 49 195 235 164 126 223 6 84 180 111 173 21 28 50 87 30 220 84 237 203 178 193 96 27 98 89 177 75 53 128 23 199 169 100 234 144 54 119 127 249 166 126 158 86 196 187 133 106 13 255 104 131 77 112 250 110 79 142 14 23 125 213 173 21 45 179 116 246 18 163 72 97 236 51 55 16 208 23 208 170 65 91 76 253 236 118 192 147 157 4 46 139 36 65 9 108 211 143 212 141 156 60 183 66 195 209 76 92 112 48 228 45 20 69 8 249 240 30 153 136 5 204 161 65 134 26 46 248 8 94 46 135 2 142 112 111 145 7 231 102 224 46 39 9 250 44 101 199 35 156 203 153 50 187 37 62 69 178 50 98 85 67 216 16 18 84 31 65 52 96 183 67 55 83 158 0 92 102 198 95 226 44 108 179 115 95 18 160 196 142 210 61 73 31 35 101 122 167 250 136 205 141 132 126 247 5 229 46 134 82 231 120 194 54 146 142 247 53 119 206 200 59 190 47 70 199 183 74 163 231 138 236 24 72 90 238 164 69 1 88 71 23 148 86 15 251 120 103 234 28 196 76 225 20 187 167 204 218 229 171 44 47 222 155 0 12 26 71 143 6 94 31 149 148 20 30 210 234 239 147 145 49 80 19 187 204 179 72 104 8 237 214 7 184 104 172 42 108 47 207 100 86 125 173 245 158 246 207 135 92 20 66 239 152 4 56 150 3 174 56 134 118 94 106 180 158 66 139 180 22 163 115 75 169 211 32 232 25 243 100 184 246 160 144 99 52 115 108 8 240 183 32 69 114 215 161 40 128 23 134 15 196 235 20 12 226 129 253 58 171 4 11 158 239 168 189 210 65 87 198 196 164 58 37 103 94 95 181 181 163 229 83 160) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 15 99 104 123 32 141 2 99 235 90 247 225 237 99 174 238 125 52 93 34 134 173 176 157 217 26 90 3 179 233 200 2 49 238 231 144 56 132 175 101 3 218 10 241 68 122 184 36 200 80 81 72 215 116 19 150 88 100 176 199 136 18 82 93 211 235 222 167 42 166 163 254 175 115 206 132 38 178 113 116 192 179 122 113 220 84 144 195 212 110 225 176 85 8 1 139 127 191 200 162 108 151 62 16 4 194 72 82 105 40 29 56 32 168 56 105 90 96 96 106 159 113 204 18 58 60 193 121 146 204 122 29 155 145 248 213 34 169 69 176 242 35 62 15 82 124 105 68 63 78 248 83 150 28 137 50 207 10 219 230 243 153 27 26 66 120 47 252 182 212 160 159 174 100 242 7 234 157 110 13 205 84 122 193 19 58 183 211 114 4 30 97 27 82 145 211 164 1 91 104) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 99 104 123 32 141 2 99 235 90 247 225 237 99 174 238 125 52 93 34 134 173 176 157 217 26 90 3 179 233 200 2 49 238 231 144 56 132 175 101 3 218 10 241 68 122 184 36 200 80 81 72 215 116 19 150 88 100 176 199 136 18 82 93 211 235 222 167 42 166 163 254 175 115 206 132 38 178 113 116 192 179 122 113 220 84 144 195 212 110 225 176 85 8 1 139 127 191 200 162 108 151 62 16 4 194 72 82 105 40 29 56 32 168 56 105 90 96 96 106 159 113 204 18 58 60 193 121 146 204 122 29 155 145 248 213 34 169 69 176 242 35 62 15 82 124 105 68 63 78 248 83 150 28 137 50 207 10 219 230 243 153 27 26 66 120 47 252 182 212 160 159 174 100 242 7 234 157 110 13 205 84 122 193 19 58 183 211 114 4 30 97 27 82 145 211 164 1 91 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 8 178 76 27 78 205 87 49 195 235 164 126 223 6 84 180 111 173 21 28 50 87 30 220 84 237 203 178 193 96 27 98 89 177 75 53 128 23 199 169 100 234 144 54 119 127 249 166 126 158 86 196 187 133 106 13 255 104 131 77 112 250 110 79 142 14 23 125 213 173 21 45 179 116 246 18 163 72 97 236 51 55 16 208 23 208 170 65 91 76 253 236 118 192 147 157 4 46 139 36 65 9 108 211 143 212 141 156 60 183 66 195 209 76 92 112 48 228 45 20 69 8 249 240 30 153 136 5 204 161 65 134 26 46 248 8 94 46 135 2 142 112 111 145 7 231 102 224 46 39 9 250 44 101 199 35 156 203 153 50 187 37 62 69 178 50 98 85 67 216 16 18 84 31 65 52 96 183 67 55 83 158 0 92 102 198 95 226 44 108 179 115 95 18 160 196 142 210 61 73) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 8 178 76 27 78 205 87 49 195 235 164 126 223 6 84 180 111 173 21 28 50 87 30 220 84 237 203 178 193 96 27 98 89 177 75 53 128 23 199 169 100 234 144 54 119 127 249 166 126 158 86 196 187 133 106 13 255 104 131 77 112 250 110 79 142 14 23 125 213 173 21 45 179 116 246 18 163 72 97 236 51 55 16 208 23 208 170 65 91 76 253 236 118 192 147 157 4 46 139 36 65 9 108 211 143 212 141 156 60 183 66 195 209 76 92 112 48 228 45 20 69 8 249 240 30 153 136 5 204 161 65 134 26 46 248 8 94 46 135 2 142 112 111 145 7 231 102 224 46 39 9 250 44 101 199 35 156 203 153 50 187 37 62 69 178 50 98 85 67 216 16 18 84 31 65 52 96 183 67 55 83 158 0 92 102 198 95 226 44 108 179 115 95 18 160 196 142 210 61 73)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 31 35 101 122 167 250 136 205 141 132 126 247 5 229 46 134 82 231 120 194 54 146 142 247 53 119 206 200 59 190 47 70 199 183 74 163 231 138 236 24 72 90 238 164 69 1 88 71 23 148 86 15 251 120 103 234 28 196 76 225 20 187 167 204 218 229 171 44 47 222 155 0 12 26 71 143 6 94 31 149 148 20 30 210 234 239 147 145 49 80 19 187 204 179 72 104 8 237 214 7 184 104 172 42 108 47 207 100 86 125 173 245 158 246 207 135 92 20 66 239 152 4 56 150 3 174 56 134 118 94 106 180 158 66 139 180 22 163 115 75 169 211 32 232 25 243 100 184 246 160 144 99 52 115 108 8 240 183 32 69 114 215 161 40 128 23 134 15 196 235 20 12 226 129 253 58 171 4 11 158 239 168 189 210 65 87 198 196 164 58 37 103 94 95 181 181 163 229 83 160) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 31 35 101 122 167 250 136 205 141 132 126 247 5 229 46 134 82 231 120 194 54 146 142 247 53 119 206 200 59 190 47 70 199 183 74 163 231 138 236 24 72 90 238 164 69 1 88 71 23 148 86 15 251 120 103 234 28 196 76 225 20 187 167 204 218 229 171 44 47 222 155 0 12 26 71 143 6 94 31 149 148 20 30 210 234 239 147 145 49 80 19 187 204 179 72 104 8 237 214 7 184 104 172 42 108 47 207 100 86 125 173 245 158 246 207 135 92 20 66 239 152 4 56 150 3 174 56 134 118 94 106 180 158 66 139 180 22 163 115 75 169 211 32 232 25 243 100 184 246 160 144 99 52 115 108 8 240 183 32 69 114 215 161 40 128 23 134 15 196 235 20 12 226 129 253 58 171 4 11 158 239 168 189 210 65 87 198 196 164 58 37 103 94 95 181 181 163 229 83 160)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 99 104 123 32 141 2 99 235 90 247 225 237 99 174 238 125 52 93 34 134 173 176 157 217 26 90 3 179 233 200 2 49 238 231 144 56 132 175 101 3 218 10 241 68 122 184 36 200 80 81 72 215 116 19 150 88 100 176 199 136 18 82 93 211 235 222 167 42 166 163 254 175 115 206 132 38 178 113 116 192 179 122 113 220 84 144 195 212 110 225 176 85 8 1 139 127 191 200 162 108 151 62 16 4 194 72 82 105 40 29 56 32 168 56 105 90 96 96 106 159 113 204 18 58 60 193 121 146 204 122 29 155 145 248 213 34 169 69 176 242 35 62 15 82 124 105 68 63 78 248 83 150 28 137 50 207 10 219 230 243 153 27 26 66 120 47 252 182 212 160 159 174 100 242 7 234 157 110 13 205 84 122 193 19 58 183 211 114 4 30 97 27 82 145 211 164 1 91 104 8 178 76 27 78 205 87 49 195 235 164 126 223 6 84 180 111 173 21 28 50 87 30 220 84 237 203 178 193 96 27 98 89 177 75 53 128 23 199 169 100 234 144 54 119 127 249 166 126 158 86 196 187 133 106 13 255 104 131 77 112 250 110 79 142 14 23 125 213 173 21 45 179 116 246 18 163 72 97 236 51 55 16 208 23 208 170 65 91 76 253 236 118 192 147 157 4 46 139 36 65 9 108 211 143 212 141 156 60 183 66 195 209 76 92 112 48 228 45 20 69 8 249 240 30 153 136 5 204 161 65 134 26 46 248 8 94 46 135 2 142 112 111 145 7 231 102 224 46 39 9 250 44 101 199 35 156 203 153 50 187 37 62 69 178 50 98 85 67 216 16 18 84 31 65 52 96 183 67 55 83 158 0 92 102 198 95 226 44 108 179 115 95 18 160 196 142 210 61 73 31 35 101 122 167 250 136 205 141 132 126 247 5 229 46 134 82 231 120 194 54 146 142 247 53 119 206 200 59 190 47 70 199 183 74 163 231 138 236 24 72 90 238 164 69 1 88 71 23 148 86 15 251 120 103 234 28 196 76 225 20 187 167 204 218 229 171 44 47 222 155 0 12 26 71 143 6 94 31 149 148 20 30 210 234 239 147 145 49 80 19 187 204 179 72 104 8 237 214 7 184 104 172 42 108 47 207 100 86 125 173 245 158 246 207 135 92 20 66 239 152 4 56 150 3 174 56 134 118 94 106 180 158 66 139 180 22 163 115 75 169 211 32 232 25 243 100 184 246 160 144 99 52 115 108 8 240 183 32 69 114 215 161 40 128 23 134 15 196 235 20 12 226 129 253 58 171 4 11 158 239 168 189 210 65 87 198 196 164 58 37 103 94 95 181 181 163 229 83 160)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3)) (list 3 (list 2 1 1 1)) (list 1 (list 1 3 1 1)) (list 1 (list 2 4)))))) :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3 1)) (list 1 (list 1 4)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)) (list 2 (list 3 1 1 1)))))) :raw-genotype (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 112 189 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 52 113 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3)) (list 3 (list 2 1 1 1)) (list 1 (list 1 3 1 1)) (list 1 (list 2 4)))))) :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3 1)) (list 1 (list 1 4)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)) (list 2 (list 3 1 1 1)))))) :raw-genotype (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 112 189 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 52 113 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 150 131 135 82 172 233 7 239 200 39 36 56 247 157 245 129 120 241 68 124 30 62 5 91 122 56 167 49 32 176 120 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3)) (list 3 (list 2 1 1 1)) (list 1 (list 1 3 1 1)) (list 1 (list 2 4)))))) :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3 1)) (list 1 (list 1 4)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)) (list 2 (list 3 1 1 1)))))) :raw-genotype (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 150 131 135 82 172 233 7 239 200 39 36 56 247 157 245 129 120 241 68 124 30 62 5 91 122 56 167 49 32 176 120 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 112 189 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 112 189 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 108 28 73 192 108 125 102 73 39 243 140 84 112 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 247 27 223 39 246 0 235 131 216 19 124 126 106 74 164 174 221 65 19 207 25 151 12 236 220 151 45 37 242 83 213 94 12 232 77 191 63 121 84 164 178 179 214 95 96 34 222 88 9 211 227 94 103 229 85 41 201 116 181) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 108 28 73 192 108 125 102 73 39 243 140 84 112 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 247 27 223 39 246 0 235 131 216 19 124 126 106 74 164 174 221 65 19 207 25 151 12 236 220 151 45 37 242 83 213 94 12 232 77 191 63 121 84 164 178 179 214 95 96 34 222 88 9 211 227 94 103 229 85 41 201 116 181)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 13 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 4 57 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 14 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 243 24 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 3 (list 1 2 1)) (list 2 (list 2 1 1 2)) (list 1 (list 2 1 2)))))) :raw-genotype (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 170 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 1)) (list 1 (list 1 1)) (list 1 (list 2 2 1 1)) (list 1 (list 1 1 1)) (list 2 (list 1 1 1 1 1)))))) :raw-genotype (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 164 177 140 137 112 38 237 97 176 139 141 15 96 9 210 17 39 202 88 93 101 56 235 240 143 215 57 186 252 39 34 213 111 13 50 0 71 239 49 153 32 33 22 52 0 93 253 149 48 205 103 98 9 128 123 117 70 187 114 109 222 148 75 171 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 243 24 88 166 13 55 254 131 221 200 254 3 51 217 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 233 7 239 200 39 36 56 247 157 245 129 120 241 68 124 30 62 5 91 122 56 167 49 32 176 120 255 197 28 212 237 63 21 242 229 157 189 241 123 9 222 161 37 96 240 118 22 113 237 19 206 165 38 153 40 28 225 173 196 225 43 114 166 211 36 157 83 52 242 54 175 244 110 72 221 207 204 74 206 91 174 139 255 255 97 229 232 22 130 240 241 229 177 186 210 15 109 63 191 66 96 63 72 193 89 166 39 250 15 6 249 49 182 212 16 37 96 167 51 12 146 245 52 150 240 62 47 161 133 246 200 89 212 84 223 158 122 17 134 71 145 75 144 132 232 25 73 170 16 64 16 196 183 10 187 21 158 162 158 123 58 130 88 151 68 193 60 188 41 110 12 183 117 28 86 172 62 81 5 220 211 65 2 50 74 177 107 154 162 127 147 60 246 85 72 194 172 220 148 87 156 177 238 21 81 198 233 84 108 130 56 68 31 16 118 120 173 225 6 111 24 82 130 10 191 165 138 111 30 151 148 191 135 20 25 96 18 168 196 96 78 160 19 153 229 192 2 20 239 78 29 250 43 235 91 58 4 46 179 218 147 24 206 208 218 89 184 245 54 124 193 208 84 142 20 127 111 103 249 169 186 34 250 42 172 141 89 240 114 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 84 112 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 59 165 211 18 188 155 103 216 164 48 39 150 212 140 70 253 241 249 239 65 123 32 196 39 136 7 28 142 137 180 147 187 187 184 162 6 13 82 175 251 247 5 253 182 154 132 163 86 169 199 152 26 208 62 248 96 139 180 196 170 187 135 159 41 46 147 140 40 202 160 73 164 184 217 151 242 2 33 234 148 210 82 51 111 28 92 230 230 55 146 55 30 81 68 157 189 216 77 140 134 196 66 61 153 234 77 65 90 84 72 115 235 86 225 217 218 229 198 235 109 217 180 82 102 139 225 81 197 230 51 92 117 50 9 189 170 22 74 246 67 174 211 164 109 237 112 183 209 128 16) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3)) (list 3 (list 2 1 1 1)) (list 1 (list 1 3 1 1)) (list 1 (list 2 4)))))) :raw-genotype (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 174 39 150 11 47 16 190 252 39 196 199 67 8 19 17 86 63 250 225 185 164 249 109 206 21 213 246 216 177 87 117 162 59 163 213 54 14 151 142 198 138 40 151 248 8 27 63 29 231 243 133 8 102 42 240 165 180 73 107 167 181 192 43 18 0 17 2 27 46 151 94 227 212 62 172 97 153 190 188 137 65 69 88 12 55 205 79 163 230 143 212 197 37 36 111 254 215 166 107 180 255 217 114 52 204 96 116 99 191 246 89 49 250 125 122 231 79 129 254 234 168 134 226 150 57 87 10 10 14 215 252 127 178 228 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 112 166 136 30 30 210 163 210 55 92 167 189 93 198 8 227 180 66 178 126 141 88 166 13 55 254 131 221 200 254 3 30 238 35 166 174 73 8 165 104 248 164 115 150 243 118 198 122 183 128 250 47 153 122 220 148 19 68 1 177 41 171 77 227 231 196 237 41 246 1 112 60 19 145 65 33 103 130 227 172 169 30 68 111 155 162 194 185 217 255 129 1 166 218 52 183 6 217 20 221 74 95 101 41 24 115 8 21 126 88 206 31 2 50 44 83 41 25 160 202 198 63 211 75 207 161 60 171 182 43 124 2 61 124 200 32 120 155 238 203 221 89 165 197 192 214 243 171 215 245 177 143 65 89 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (quote ?) (list (list (list 4 4) (list (list 1 (list 1 3 1)) (list 1 (list 1 4)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)) (list 2 (list 3 1 1 1)))))) :raw-genotype (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 221 253 168 128 73 192 108 125 102 73 39 243 140 154 42 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 193 108 83 104 57 40 93 139 102 197 232 218 155 1 239 206 100 51 22 113 150 10 234 127 11 142 204 107 253 83 46 210 165 235 232 231 74 173 83 74 175 60 221 180 165 144 40 122 53 142 106 220 33 221 147 17 243 82 32 116 10 222 176 118 38 185 81 166 127 248 222 104 164 221 114 43 199 20 30 129 30 141 113 93 14 132 27 196 161 56 242 44 75 40 25 226 188 40 210 89 60 152 184 172 249 79 126 235 23 46 183 243 90 104 54 41 218 145 8 117 121 122 216 54 118 34 82 214 195 171 180 45 76 58 19 231 219 147 57 94 174 206 24 177 110 4 129 160 61 52)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 242 192 187 22 234 219 103 143 182 182 71 231 126 91 123 171 195 154 210 30 59 205 201 251 55 42 125 144 71 113 175 85 131 55 169 137 55 158 248 154 246 160 30 111 107 172 119 117 91 201 215 70 171 40 71 67 244 191 115 18 7 135 82 172 233 7 239 200 39 36 56 247 157 245 129 120 241 68 124 30 62 5 91 122 56 167 49 32 176 120 255 197 28 212 237 63 21 242 229 157 189 241 123 9 222 161 37 96 240 118 22 113 237 19 206 165 38 153 40 28 225 173 196 225 43 114 166 211 36 157 83 52 242 54 175 244 110 72 221 207 204 74 206 91 174 139 255 255 97 229 232 22 130 240 241 229 177 186 210 15 109 63 191 66 96 63 72 193 89 166 39 250 15 6 249 49 182 212 16 37 96 167 51 12 146 245 52 150 240 62 47 161 133 246 200 89 212 84 223 158 122 17 134 71 145 75 144 132 232 25 73 170 16 64 16 196 183 10 187 21 158 162 158 123 58 130 88 151 68 193 60 188 41 110 12 183 117 28 86 172 62 81 5 220 211 65 2 50 74 177 107 154 162 127 147 60 246 85 72 194 172 220 148 87 156 177 238 21 81 198 233 84 108 130 56 68 31 16 118 120 173 225 6 111 24 82 130 10 191 165 138 111 30 151 148 191 135 20 25 96 18 168 196 96 78 160 19 153 229 192 2 20 239 78 29 250 43 235 91 58 4 46 179 218 147 24 206 208 218 89 184 245 54 124 193 208 84 142 20 127 111 103 249 169 186 34 250 42 172 141 89 240 114 24 9 224 64 35 30 246 161 173 102 49 107 13 154 8 65 246 87 153 234 147 244 160 203 227 115 90 241 240 208 250 101 93 103 231 208 108 94 207 10 214 10 83 142 159 90 239 221 157 8 128 73 192 108 125 102 73 39 243 140 84 112 183 60 59 190 157 57 98 48 211 246 163 108 222 180 14 74 73 190 131 230 124 38 108 28 153 164 167 111 167 192 255 223 204 173 59 165 211 18 188 155 103 216 164 48 39 150 212 140 70 253 241 249 239 65 123 32 196 39 136 7 28 142 137 180 147 187 187 184 162 6 13 82 175 251 247 5 253 182 154 132 163 86 169 199 152 26 208 62 248 96 139 180 196 170 187 135 159 41 46 147 140 40 202 160 73 164 184 217 151 242 2 33 234 148 210 82 51 111 28 92 230 230 55 146 55 30 81 68 157 189 216 77 140 134 196 66 61 153 234 77 65 90 84 72 115 235 86 225 217 218 229 198 235 109 217 180 82 102 139 225 81 197 230 51 92 117 50 9 189 170 22 74 246 67 174 211 164 109 237 112 183 209 128 16)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 18) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (1 3)) (3 (2 1 1 1)) (1 (1 3 1 1)) (1 (2 4)))))) ((4 4) ((1 (1 1 1)) (1 (1 1 2)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1)))) ((4 4) ((4 ((1 (1 3 1)) (1 (1 4)) (1 (1 1 2 1)) (1 (1 1 2 1)) (2 (3 1 1 1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 95 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (3 0 4 1 nil 0) (2 0 5 1 nil 0) (4 0 5 2 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (7 0 9 2 nil 0))) nil 6.090014))
