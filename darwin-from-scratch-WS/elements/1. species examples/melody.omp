; OM File Header - Saved 2015/02/27 18:40:52
; (6.090014 :patc (om-make-point 10 60) (om-make-point 90 22) (om-make-point 988 700) "" 183 0 "2015/02/25 14:25:58" "2015/02/27 18:40:52")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "melody" (quote ((let ((box (om-load-boxcall (quote abstraction) "range and rising 2" (om-load-lisp-abspatch "range and rising" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (let ((len (length (d::phenotype spec))))$    (loop for sub on (mapcar 'd::region-pitch (d::phenotype spec))$        for pitch = (car sub)$        for melod = (when (cdr sub)$                      (- (cadr sub) $                         (car sub)))$        for index from 0$$        sum (+ (d::within-M pitch range)$               (if (and melod (<= melod 0)) $                   (* (- melod)$                      (- len index)) $                 0)$               ))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 351 234) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 43 365) (om-make-point 493 134) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 209 223 211 1 147 214 220 28 149 152 74 185 223 90 19 208 147 150 66 156 158 91 127 68 115 192 135 92 50 37 67 167) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 209 223 211 1 147 214 220 28 149 152 74 185 223 90 19 208 147 150 66 156 158 91 127 68 115 192 135 92 50 37 67 167)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 267 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 51) (list 15/16 1/16 1 52) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 66) (list 25/16 1/16 1 64) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 28 204 133 8 187 14 239 239 164 168 168 191 191 196 24 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 28 204 133 8 187 14 239 239 164 168 168 191 191 196 24 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 273 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 65) (list 7/4 1/16 1 63) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 177 55 133 8 187 14 239 239 164 168 169 190 191 142 90 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 177 55 133 8 187 14 239 239 164 168 169 190 191 142 90 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 277 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 62) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 65) (list 7/4 1/16 1 63) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 177 55 133 8 187 14 239 239 164 168 214 190 191 142 90 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 177 55 133 8 187 14 239 239 164 168 214 190 191 142 90 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 278 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 66) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 243 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 243 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 281 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 69) (list 15/8 1/16 1 67) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 24 171 194 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 24 171 194 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 283 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 51) (list 15/16 1/16 1 52) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 28 204 133 8 187 14 239 239 164 168 169 190 191 196 24 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 28 204 133 8 187 14 239 239 164 168 169 190 191 196 24 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 285 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 53) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 230 227 177 55 133 8 187 14 239 239 164 168 169 190 191 196 24 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 230 227 177 55 133 8 187 14 239 239 164 168 169 190 191 196 24 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 286 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 65) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 64) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 242 191 196 24 141 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 242 191 196 24 141 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 293 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 59) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 63) (list 29/16 1/16 1 67) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 161 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 90 119 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 161 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 90 119 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 295 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 48) (list 1/16 1/16 1 51) (list 1/8 1/16 1 51) (list 3/16 1/16 1 51) (list 1/4 1/16 1 51) (list 5/16 1/16 1 51) (list 3/8 1/16 1 52) (list 7/16 1/16 1 61) (list 1/2 1/16 1 61) (list 9/16 1/16 1 61) (list 5/8 1/16 1 59) (list 11/16 1/16 1 58) (list 3/4 1/16 1 55) (list 13/16 1/16 1 50) (list 7/8 1/16 1 50) (list 15/16 1/16 1 53) (list 1 1/16 1 56) (list 17/16 1/16 1 56) (list 9/8 1/16 1 60) (list 19/16 1/16 1 62) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 62) (list 23/16 1/16 1 66) (list 3/2 1/16 1 67) (list 25/16 1/16 1 63) (list 13/8 1/16 1 64) (list 27/16 1/16 1 69) (list 7/4 1/16 1 72) (list 29/16 1/16 1 64) (list 15/8 1/16 1 72) (list 31/16 1/16 1 72)) :raw-genotype (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 24 141 224 124) :decoder (list (list 48 72)) :num-operons 32 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 153 3 103 53 53 29 163 13 163 86 60 57 227 152 80 133 8 187 14 239 239 164 168 169 190 191 196 24 141 224 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 306) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 802 99) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 665 44) (om-make-point 60 30) (list 1/2 1) "(1/2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TRILLS" (quote make-trills) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 1) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 654 157) (om-make-point 109 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 60 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 509 41) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 498 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 40) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 202 36) (om-make-point 62 30) (list 48 72) "(48 72)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 1 nil 0) (4 0 1 1 nil 0) (0 0 1 2 nil 0) (2 0 3 4 nil 0) (7 0 4 0 nil 0) (8 0 4 1 nil 0) (5 0 6 0 nil 0))) nil 6.090014))