; OM File Header - Saved 2015/02/26 22:13:58
; (6.090014 :patc (om-make-point 10 60) (om-make-point 69 22) (om-make-point 988 700) "" 183 0 "2015/02/25 14:25:58" "2015/02/26 22:13:58")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "melody" (quote ((let ((box (om-load-boxcall (quote lispfun) "POPULATION" (quote om-darwin::population) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 470 549) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PROCESS" (quote om-darwin::process) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE-BOX" "GA-ENGINE-BOX" nil))) (om-make-point 45 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REINIT" (quote om-darwin::reinit) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 415 585) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 351 214) (om-make-point 62 30) (list 60 66) "(60 66)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "range" (om-load-lisp-abspatch "range" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (loop for pitch in (mapcar 'd::region-pitch (d::phenotype spec))$$$        sum (d::within-M pitch range)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 326 265) nil (list nil) "l" "range"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 147 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 253 604) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 3) (om-load-inputfun (quote input-funbox) "times" "N" 3))) (om-make-point 197 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 234 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "range and rising 2" (om-load-lisp-abspatch "range and rising" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (let ((len (length (d::phenotype spec))))$    (loop for sub on (mapcar 'd::region-pitch (d::phenotype spec))$        for pitch = (car sub)$        for melod = (when (cdr sub)$                      (- (cadr sub) $                         (car sub)))$        for index from 0$$        sum (+ (d::within-M pitch range)$               (if (and melod (<= melod 0)) $                   (* (- melod)$                      (- len index)) $                 0)$               ))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 431 253) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 37 376) (om-make-point 493 134) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 195 6 22 253 185 100 239 110 68 51 246 14 17 160 215 255 60 43 95 116 87 31 231 28) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 195 6 22 253 185 100 239 110 68 51 246 14 17 160 215 255 60 43 95 116 87 31 231 28)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 61) (list 11/16 1/16 1 60) (list 3/4 1/16 1 65) (list 13/16 1/16 1 60) (list 7/8 1/16 1 60) (list 15/16 1/16 1 65) (list 1 1/16 1 66) (list 17/16 1/16 1 64) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 64) (list 23/16 1/16 1 64)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 88 187 142 62 112 67 168 66 63 40 190 91 91 66) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 88 187 142 62 112 67 168 66 63 40 190 91 91 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 61) (list 11/16 1/16 1 60) (list 3/4 1/16 1 65) (list 13/16 1/16 1 60) (list 7/8 1/16 1 60) (list 15/16 1/16 1 65) (list 1 1/16 1 63) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 64) (list 23/16 1/16 1 64)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 88 187 142 62 112 67 115 119 63 40 190 91 91 66) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 88 187 142 62 112 67 115 119 63 40 190 91 91 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 65) (list 13/16 1/16 1 60) (list 7/8 1/16 1 60) (list 15/16 1/16 1 65) (list 1 1/16 1 63) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 64) (list 23/16 1/16 1 64)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 211 187 142 62 112 67 115 119 63 40 190 91 91 66) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 211 187 142 62 112 67 115 119 63 40 190 91 91 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 65) (list 1 1/16 1 63) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 64) (list 23/16 1/16 1 64)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 67 115 119 63 40 190 91 91 66) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 67 115 119 63 40 190 91 91 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 61) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 64) (list 23/16 1/16 1 64)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 38 144 119 63 40 190 91 91 66) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 38 144 119 63 40 190 91 91 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 60) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 61) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 67) (list 23/16 1/16 1 61)) :raw-genotype (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 38 144 119 63 40 190 91 94 63) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 87 66 211 187 43 161 112 38 144 119 63 40 190 91 94 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 59) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 61) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 63) (list 21/16 1/16 1 64) (list 11/8 1/16 1 67) (list 23/16 1/16 1 61)) :raw-genotype (list 167 64 215 238 241 237 41 13 211 66 211 187 43 161 112 38 144 119 63 40 190 91 94 63) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 211 66 211 187 43 161 112 38 144 119 63 40 190 91 94 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 59) (list 9/16 1/16 1 64) (list 5/8 1/16 1 59) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 68) (list 1 1/16 1 60) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 65) (list 21/16 1/16 1 64) (list 11/8 1/16 1 67) (list 23/16 1/16 1 61)) :raw-genotype (list 167 64 215 238 241 237 41 13 211 66 211 187 43 161 112 20 162 119 63 40 17 91 94 63) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 13 211 66 211 187 43 161 112 20 162 119 63 40 17 91 94 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 65) (list 1/2 1/16 1 60) (list 9/16 1/16 1 59) (list 5/8 1/16 1 65) (list 11/16 1/16 1 60) (list 3/4 1/16 1 58) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 68) (list 1 1/16 1 60) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 65) (list 21/16 1/16 1 64) (list 11/8 1/16 1 67) (list 23/16 1/16 1 61)) :raw-genotype (list 167 64 215 238 241 237 41 142 62 36 117 187 85 161 112 20 162 119 63 40 17 91 94 63) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 142 62 36 117 187 85 161 112 20 162 119 63 40 17 91 94 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 62) (list 1/8 1/16 1 63) (list 3/16 1/16 1 61) (list 1/4 1/16 1 64) (list 5/16 1/16 1 60) (list 3/8 1/16 1 64) (list 7/16 1/16 1 65) (list 1/2 1/16 1 55) (list 9/16 1/16 1 60) (list 5/8 1/16 1 63) (list 11/16 1/16 1 60) (list 3/4 1/16 1 66) (list 13/16 1/16 1 59) (list 7/8 1/16 1 60) (list 15/16 1/16 1 61) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 61) (list 19/16 1/16 1 63) (list 5/4 1/16 1 65) (list 21/16 1/16 1 64) (list 11/8 1/16 1 67) (list 23/16 1/16 1 61)) :raw-genotype (list 167 64 215 238 241 237 41 142 82 237 40 187 43 161 112 38 144 119 63 40 17 91 94 63) :decoder (list (list 48 72)) :num-operons 24 :range (list 48 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 64 215 238 241 237 41 142 82 237 40 187 43 161 112 38 144 119 63 40 17 91 94 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 124) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 528 45) (om-make-point 60 30) (list 1/2 1) "(1/2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MAKE-TRILLS" (quote make-trills) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 1) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 517 158) (om-make-point 109 67) nil nil nil 1))) (setf (frame-position newbox) (om-make-point 517 158)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 26 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 412 41) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 349 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 40) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 202 36) (om-make-point 62 30) (list 48 72) "(48 72)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (10 0 2 0 nil 0) (3 0 4 1 nil 0) (10 0 5 0 nil 0) (10 0 6 0 nil 0) (13 0 7 0 nil 0) (7 0 8 0 nil 0) (17 0 9 1 nil 0) (13 0 10 1 nil 0) (4 0 10 2 nil 0) (11 0 12 4 nil 0) (16 0 13 0 nil 0) (17 0 13 1 nil 0) (14 0 15 0 nil 0))) nil 6.090014))
