; OM File Header - Saved 2015/02/18 19:30:26
; (6.090014 :patc (om-make-point 172 10) (om-make-point 149 50) (om-make-point 779 705) "" 183 0 "2015/02/16 14:02:07" "2015/02/18 19:30:26")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "defspecies test" (quote ((let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 168 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 239 19) (om-make-point 62 30) (list 76 84) "(76 84)" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 569 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 400 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil) (om-load-inputfun (quote input-funbox) "" "max-generations" 100))) (om-make-point 214 267) (om-make-point 397 165) (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :num-operons 25 :range (list 60 84) :from-file t)) :fitness-function nil :max-generations 100 :from-file t)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 705 212) (om-make-point 1326 -334) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "impossible" (om-load-lisp-abspatch "impossible" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"odd midi numbers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec)$  1.0)") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 493 63) nil (list nil) "l" "impossible"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 97 44) (om-make-point 34 43) 25 "25$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "melodic int and pcs" (om-load-lisp-abspatch "melodic int and pcs" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"odd midi numbers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (let ((pitches (mapcar 'dwn::pitch (dwn::operons spec))))$    (+ (loop for pitch in pitches$             sum (+ (if (member (mod pitch 12) '(0 2 4 5 7 9 11)) 0 1)$                    (dwn::within-M pitch range)))$$       (loop for sub on pitches$             while (cdr sub)$             for mel = (- (car sub) (cadr sub))$             $             sum (dwn::within-M (abs mel) '(4 9))))))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 216 103) nil (list nil) "l" "melodic int and pcs"))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8))) (om-make-point 47 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (7 0 0 1 nil 0) (4 0 2 0 nil 0) (4 0 3 0 nil 0) (8 0 4 1 nil 0) (7 0 4 2 nil 0) (1 0 7 1 nil 0) (6 0 8 0 nil 0))) nil 6.090014))