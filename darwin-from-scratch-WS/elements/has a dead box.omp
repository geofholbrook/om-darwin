; OM File Header - Saved 2013/01/05 2:03:24
; (6.050102 :patc (om-make-point 10 10) (om-make-point 139 0) (om-make-point 1402 965) "" 183 0 "2013/01/02 21:24:23" "2013/01/03 1:30:40")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 652 670) (om-make-point 35 30) 120 "120" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 498 668) (om-make-point 38 30) (list 80) "(80)" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 575 673) (om-make-point 31 30) (list 6) "(6)" nil) (om-load-boxcall (quote genfun) "WITH-ELEMENTS" (quote om-darwin::with-elements) (quote ((om-load-inputfun (quote input-funbox) "" "FUNCTIONS" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTIONS" nil))) (om-make-point 547 389) (om-make-point 187 59) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 747 166) (om-make-point 56 30) (list 60 72) "(60 72)" nil) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 652 280) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "EVENP" (quote evenp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 557 304) nil nil "l" nil 1) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 400 680) (om-make-point 56 30) (list 0 150) "(0 150)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 314 761) (om-make-point 385 134) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7000) (6800) (6800) (6800) (6600) (6000) (6200) (6600) (6600))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500)) :ldur (quote ((180) (180) (180) (180) (180) (180) (180) (180) (180) (180))) :lvel (quote ((80) (80) (80) (80) (80) (80) (80) (80) (80) (80))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 120)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 1263 13) (om-make-point 570 607) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 269 639) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 149 706) (om-make-point 95 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 619 53) (om-make-point 56 30) (list 62 72) "(62 72)" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 497 73) (om-make-point 56 30) (list 48 56) "(48 56)" nil) (om-load-boxcall (quote genfun) "INTERPOLATION" (quote interpolation) (quote ((om-load-inputfun (quote input-funbox) "number or list" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "number or list" "END" 1) (om-load-inputfun (quote input-funbox) "integer" "SAMPLES" 5) (om-load-inputfun (quote input-funbox) "number" "CURVE" 0.0))) (om-make-point 457 188) (om-make-point 107 59) nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "dynamic-range" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 335 319) (om-make-point 131 59) nil "l" (list (om-load-boxin "range" 1 (om-make-point 435 88) "" "range" nil nil) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 413 234) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 129 197) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 298 366) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 179 57) "" nil nil nil) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 343 512) (om-make-point 170 59) nil nil nil 3) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 440 647) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 314 634) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (4 0 2 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (3 0 5 0 nil 0) (5 1 6 0 nil 0) (5 0 7 0 nil 0))) 1 "dynamic-range" nil) (om-load-boxcall (quote genfun) "ADD" (quote om-darwin::add) (quote ((om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "CRITERIA" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTIONS" nil))) (om-make-point 255 420) (om-make-point 109 59) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 275 198) (om-make-point 42 30) (list 3 4) "(3 4)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 390 519) (om-make-point 35 30) 500 "500" nil) (om-load-boxwithed1 (quote box-with-win) "melodic" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 160 303) (om-make-point 122 59) nil "l" (list (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 73 350) (om-make-point 56 35) nil nil nil 1) (om-load-boxin "interval-range" 1 (om-make-point 374 156) "" "interval-range" nil nil) (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 108 415) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 55 265) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 123 487) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 294 135) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 284 240) nil nil nil nil 0) (om-load-boxin "input" 0 (om-make-point 179 57) "" nil nil nil) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 37 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 343 512) (om-make-point 170 59) nil nil nil 3) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 440 647) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 314 634) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (3 1 0 1 nil 0) (0 0 2 0 nil 0) (8 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (8 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 8 0 nil 0) (4 0 9 0 nil 0) (9 1 10 0 nil 0) (9 0 11 0 nil 0))) 1 "melodic" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 287 36) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 94 81) (om-make-point 28 30) 72 "72" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 40 84) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 60) (om-load-inputfun (quote input-funbox) "max" "HIGH" 72))) (om-make-point 44 139) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 44 271) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "RUN" (quote om-darwin::run) (quote ((om-load-inputfun (quote input-funbox) "MODEL-1" "MODEL-1" nil) (om-load-inputfun (quote input-funbox) "CRITERION" "CRITERION" nil) (om-load-inputfun (quote input-funbox) "MAX-GENERATIONS" "MAX-GENERATIONS" nil))) (om-make-point 96 569) (om-make-point 188 43) nil nil nil 1))) (quote ((6 0 3 0 nil 0) (5 0 3 1 nil 0) (4 0 5 1 nil 0) (10 0 8 1 nil 0) (7 0 8 2 nil 0) (1 0 8 4 nil 0) (2 0 8 6 nil 0) (0 0 8 7 nil 0) (24 0 10 0 nil 0) (9 0 10 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (19 0 13 2 nil 0) (13 0 14 1 nil 0) (18 0 15 0 nil 0) (14 0 15 2 nil 0) (16 0 18 1 nil 0) (21 0 22 0 nil 0) (20 0 22 1 nil 0) (22 0 23 0 nil 0) (19 0 23 1 nil 0) (23 0 24 0 nil 0) (3 0 24 1 nil 0) (17 0 24 2 nil 0))) nil 6.050102))
