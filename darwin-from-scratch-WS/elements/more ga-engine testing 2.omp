; OM File Header - Saved 2015/02/26 18:48:59
; (6.090014 :patc (om-make-point 118 60) (om-make-point 151 111) (om-make-point 884 667) "" 183 0 "2015/02/24 18:40:08" "2015/02/26 13:59:10")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"range and rising.oml\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "more ga-engine testing 2" (quote ((let ((box (om-load-boxcall (quote lispfun) "REINIT" (quote om-darwin::reinit) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 351 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 190 38) (om-make-point 69 30) (list 20 100) "(20 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 92 63) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 165 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 27 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 203 555) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 717 513) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 660 24) (om-make-point 62 30) (list 30 90) "(30 90)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 42 245) (om-make-point 582 178) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 3 86 85 199 102 67 169 204 243 94 79 228 126 1 165 98 233 43 245 132 5 83 103 30 190 251 203 230 124 183 19 4) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 3 86 85 199 102 67 169 204 243 94 79 228 126 1 165 98 233 43 245 132 5 83 103 30 190 251 203 230 124 183 19 4)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 180 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 81) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 85) (list 15/8 1/16 1 85) (list 31/16 1/16 1 88)) :raw-genotype (list 185 202 227 65 65 224 223 223 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 65 146 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 223 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 65 146 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 181 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 85) (list 15/8 1/16 1 85) (list 31/16 1/16 1 88)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 65 146 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 65 146 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 182 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 86) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 85) (list 15/8 1/16 1 85) (list 31/16 1/16 1 88)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 183 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 29) (list 1/16 1/16 1 52) (list 1/8 1/16 1 78) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 86) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 85) (list 15/8 1/16 1 85) (list 31/16 1/16 1 88)) :raw-genotype (list 252 113 58 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 113 58 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 184 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 86) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 85) (list 15/8 1/16 1 85) (list 31/16 1/16 1 84)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 145) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 228 227 146 146 65 146 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 185 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 84) (list 15/8 1/16 1 86) (list 31/16 1/16 1 88)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 186 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 29) (list 1/16 1/16 1 30) (list 1/8 1/16 1 78) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 84) (list 15/8 1/16 1 86) (list 31/16 1/16 1 88)) :raw-genotype (list 252 10 58 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 10 58 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 187 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 28) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 84) (list 15/8 1/16 1 86) (list 31/16 1/16 1 88)) :raw-genotype (list 89 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 188 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 84) (list 15/8 1/16 1 86) (list 31/16 1/16 1 93)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 235) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 235)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 189 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 43) (list 1/16 1/16 1 60) (list 1/8 1/16 1 85) (list 3/16 1/16 1 85) (list 1/4 1/16 1 85) (list 5/16 1/16 1 82) (list 3/8 1/16 1 81) (list 7/16 1/16 1 80) (list 1/2 1/16 1 80) (list 9/16 1/16 1 80) (list 5/8 1/16 1 82) (list 11/16 1/16 1 82) (list 3/4 1/16 1 83) (list 13/16 1/16 1 87) (list 7/8 1/16 1 87) (list 15/16 1/16 1 87) (list 1 1/16 1 90) (list 17/16 1/16 1 90) (list 9/8 1/16 1 90) (list 19/16 1/16 1 89) (list 5/4 1/16 1 89) (list 21/16 1/16 1 89) (list 11/8 1/16 1 89) (list 23/16 1/16 1 89) (list 3/2 1/16 1 89) (list 25/16 1/16 1 87) (list 13/8 1/16 1 85) (list 27/16 1/16 1 85) (list 7/4 1/16 1 85) (list 29/16 1/16 1 84) (list 15/8 1/16 1 86) (list 31/16 1/16 1 84)) :raw-genotype (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 145) :decoder (list (list 20 100)) :num-operons 32 :range (list 20 100) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 202 227 65 65 224 223 222 222 222 224 143 63 67 67 67 70 151 70 69 150 231 150 150 150 229 227 146 146 145 66 145)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 346) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "range and rising" (quote ("elements" "range and rising")) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 511 102) (om-make-point 194 67) (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (8 0 4 0 nil 0) (8 0 5 0 nil 0) (8 0 6 0 nil 0) (9 0 6 1 nil 0) (3 0 8 1 nil 0) (9 0 8 2 nil 0) (7 0 9 1 nil 0))) nil 6.090014))
