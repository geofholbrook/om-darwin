; OM File Header - Saved 2015/02/24 19:14:01
; (6.090014 :patc (om-make-point 118 60) (om-make-point 175 78) (om-make-point 884 667) "" 183 0 "2015/02/24 18:34:30" "2015/02/24 19:13:59")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"range and rising.oml\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "more ga-engine testing" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-DX-MELODY" (quote make-dx-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8))) (om-make-point 266 38) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 27 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 150 486) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 598 496) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 740 48) (om-make-point 62 30) (list 30 90) "(30 90)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil))) (om-make-point 61 187) (om-make-point 582 178) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 155 30 240 228 72 251 132 121)) (om-darwin::update om-darwin::spec) om-darwin::spec) :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 205 12 189 254 85 15 158)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 174 38 1 14 66 99 253 44)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 131 101 68 83 143 151 193 221)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 116 5 254 242 177 101 17 64)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 62 45 169 95 3 235 107)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 190 141 27 96 22 120 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 228 60 172 233 138 75 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 76 236 167 180 18 137 25 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 191 155 93 195 19 166 23 92)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::dx-melody) nil) (make-instance (quote om-darwin::dx-melody) :range (list 60 72) :num-operons 8 :start 48 :melodic-range (list -3 3) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 40 143 59 130 77 40 56 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 -3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 32))) (om-make-point 137 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "range and rising" (quote ("elements" "range and rising")) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 645 197) (om-make-point 194 67) (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (5 0 2 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (0 0 5 1 nil 0) (4 0 7 1 nil 0))) nil 6.090014))
