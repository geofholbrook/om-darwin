; OM File Header - Saved 2015/02/16 13:36:29
; (6.080004 :patc (om-make-point 10 10) (om-make-point 52 22) (om-make-point 984 756) "" 183 0 "2013/01/03 0:38:15" "2015/02/16 13:36:29")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "with-helpers" (quote ((om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 463 173) (om-make-point 104 30) (list 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11)" nil) (om-load-boxcall (quote genfun) "EACH-PC" (quote om-darwin::each-pc) (quote ((om-load-inputfun (quote input-funbox) "" "FUNCTIONS" nil))) (om-make-point 479 337) (om-make-point 163 59) nil nil nil 1) (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 428 259) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 115 667) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 310 260) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 325 332) nil nil "l" nil 1) (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 176 431) nil nil nil 2) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 44 253) (om-make-point 102 30) (list (quote :dx-fix) 1 3 75) "(:dx-fix 1 3 75)" nil) (om-load-boxcall (quote lispfun) "SET-MUTATION-MODE" (quote om-darwin::set-mutation-mode) (quote ((om-load-inputfun (quote input-funbox) "MODE" "MODE" nil))) (om-make-point 67 336) nil nil nil nil 1) (om-load-boxcall (quote genfun) "WITH-PHENO" (quote om-darwin::with-pheno) (quote ((om-load-inputfun (quote input-funbox) "" "PHENOTYPER" nil) (om-load-inputfun (quote input-funbox) "" "FUNCTIONS" nil))) (om-make-point 366 455) (om-make-point 230 59) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 869 674) (om-make-point 35 30) 120 "120" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 715 672) (om-make-point 38 30) (list 80) "(80)" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 792 677) (om-make-point 31 30) (list 6) "(6)" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 617 684) (om-make-point 56 30) (list 0 125) "(0 125)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 531 765) (om-make-point 385 134) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5200) (5500) (5700) (5900) (6000) (6200) (6500) (6700) (6900) (7200))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1400)) :ldur (quote ((150) (150) (150) (150) (150) (150) (150) (150) (150) (150) (150))) :lvel (quote ((80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 120)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 570 607) (om-make-point 1263 13) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 421 647) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 366 710) (om-make-point 95 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 599 566) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 411 41) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 218 86) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 164 89) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 60) (om-load-inputfun (quote input-funbox) "max" "HIGH" 72))) (om-make-point 168 144) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 232 282) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "RUN" (quote om-darwin::run) (quote ((om-load-inputfun (quote input-funbox) "MODEL-1" "MODEL-1" nil) (om-load-inputfun (quote input-funbox) "CRITERION" "CRITERION" nil) (om-load-inputfun (quote input-funbox) "MAX-GENERATIONS" "MAX-GENERATIONS" nil))) (om-make-point 219 581) (om-make-point 188 43) nil nil nil 1))) (quote ((2 0 1 0 nil 0) (0 0 2 1 nil 0) (5 0 3 0 nil 0) (23 0 3 1 nil 0) (4 0 5 0 nil 0) (8 0 6 0 nil 0) (22 0 6 1 nil 0) (7 0 8 0 nil 0) (5 0 9 0 nil 0) (1 0 9 1 nil 0) (16 0 14 1 nil 0) (13 0 14 2 nil 0) (11 0 14 4 nil 0) (12 0 14 6 nil 0) (10 0 14 7 nil 0) (3 0 16 0 nil 0) (15 0 16 1 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (21 0 22 0 nil 0) (18 0 22 1 nil 0) (6 1 23 0 nil 0) (9 0 23 1 nil 0) (17 0 23 2 nil 0))) nil 6.080004))
