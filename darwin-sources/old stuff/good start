(defmacro defclas (name inheritance &rest rest)  "simpler defclass"  (let ((slots (pop rest)))    `(defclass       ,name       ,inheritance       ,(mapcar #'(lambda (slot)                     `( ,(first slot) :accessor ,(first slot) :initarg                        ,(intern (symbol-name (first slot)) 'keyword)                       ,. (rest slot)))                slots)       ,. rest)))(defclas box ()  ((things)   (check-this)))(defclas thing ()  ((parent)))(defmethod what-thing ((self box)) 'thing)  (defmethod initialize-instance :after ((self box) &rest initargs)  (declare (ignore initargs))  (setf (things self)         (loop repeat 5              collect (make-instance (what-thing self)                        :parent self)))  (setf (check-this self) 5))