; OM File Header - Saved 2015/03/05 16:54:50
; (6.090014 :patc (om-make-point 172 60) (om-make-point 158 22) (om-make-point 804 669) "" 183 0 "2015/03/05 15:40:41" "2015/03/05 16:28:17")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "BPC right angles" (quote ((let ((box (om-load-boxcall (quote abstraction) "right angles (unfinished)" (om-load-lisp-abspatch "right angles (unfinished)" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"right angles\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec)$  (let ((bpc (d::phenotype spec)))$    (flet ((vector (p1 p2) (list (- (car p2) (car p1))$                                 (- (cadr p2) (cadr p1))))$         $           (dot (v1 v2) (+ (* (car v1) (car v2))$                           (* (cadr v1) (cadr v2)))))$$      (let ((pts (mat-trans (list (x-points bpc)$                                  (y-points bpc)))))$        (loop for sub on pts$              if (cddr sub)$              sum (expt (let ((origin (second sub))$                              (point1 (first sub))$                              (point2 (third sub)))$$                          (let ((vector1 (vector point1 origin))$                                (vector2 (vector point2 origin)))$$                            (dot vector1 vector2)))$                        2))))))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 349 63) nil (list nil) "l" "right angles (unfinished)"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 213 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 130 267) (om-make-point 232 272) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 143 10 252 179 95 118 103 209 126 189 40 14 113 223 162 126 216 8 148 211) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 143 10 252 179 95 118 103 209 126 189 40 14 113 223 162 126 216 8 148 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 169 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 29 73 164 34 236 5 105 207 181 90 203 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 73 164 34 236 5 105 207 181 90 203 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 196 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 28 73 164 236 236 5 105 207 181 90 202 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 28 73 164 236 236 5 105 207 181 90 202 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 209 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 73 164 34 236 5 105 207 181 90 203 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 73 164 34 236 5 105 207 181 90 203 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 224 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 29 73 164 236 236 5 105 111 21 90 203 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 73 164 236 236 5 105 111 21 90 203 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 231 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 27 73 164 236 34 5 105 111 21 90 202 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 73 164 236 34 5 105 111 21 90 202 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 251 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 28 73 164 236 34 5 105 111 21 90 202 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 28 73 164 236 34 5 105 111 21 90 202 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 264 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 73 164 34 236 5 105 111 21 90 203 226 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 73 164 34 236 5 105 111 21 90 203 226 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 281 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 29 73 164 236 34 5 105 111 21 90 203 226 144 28 230 131 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 73 164 236 34 5 105 111 21 90 203 226 144 28 230 131 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 288 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 27 73 164 236 34 5 105 111 21 90 202 226 144 28 230 131 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 73 164 236 34 5 105 111 21 90 202 226 144 28 230 131 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 290 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 29 73 164 236 236 5 105 111 21 90 203 225 144 28 230 213 13 214 189 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 73 164 236 236 5 105 111 21 90 203 225 144 28 230 213 13 214 189 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 367) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (29 73 63 34 34 5 4 5 80 90)) (quote (1 24 43 28 28 11 13 12 88 78)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc" (om-load-patch-abs1 "bpc" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 62) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 162 279) (om-make-point 165 150) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (12 22 42 44 67 32 9 94 4 35)) (quote (80 64 1 93 79 22 21 23 56 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 130 470) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 1 nil 0) (8 0 5 1 nil 0) (1 0 5 2 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (5 0 9 0 nil 0))) 6.090014 nil "" (om-make-point 234 149) (om-make-point 577 573)) (quote nil) (om-make-point 143 62) nil (list nil) "l" "bpc"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0))) nil 6.090014))
