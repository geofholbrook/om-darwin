; OM File Header - Saved 2015/03/05 17:52:11
; (6.090014 :patc (om-make-point 172 60) (om-make-point 232 73) (om-make-point 950 697) "" 183 0 "2015/03/05 12:46:16" "2015/03/05 17:52:11")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "om-species" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 253 531) (om-make-point 62 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 200 561) (om-make-point 96 67) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 43 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 273 470) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 2" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 629 565) (om-make-point 177 99) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bits-ff" (om-load-patch-abs1 "bits-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 193 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "alternate" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 151 220) nil nil nil (list (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 348 446) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 207 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" 0) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" 1) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 0))) (om-make-point 117 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 165 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 130 281) (om-make-point 66 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 107 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 159 506) (om-make-point 109 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 0 1 1 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 138 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 624) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 92 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (6 0 2 0 nil 0) (9 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (9 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (8 0 9 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "alternate" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 429 125) (om-make-point 391 481)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 214 175) nil (list nil) "l" "bits-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 72 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 58 299) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 245 146 89 178 69 124 123 86 228 5 77 121 102 90 26) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 146 89 178 69 124 123 86 228 5 77 121 102 90 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 233 198 243 128 247 252 167 188 9 114 79 114 19 214 247) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 198 243 128 247 252 167 188 9 114 79 114 19 214 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 168 7 128 243 247 252 167 188 9 114 79 114 19 214 247) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 168 7 128 243 247 252 167 188 9 114 79 114 19 214 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 233 198 128 243 247 252 167 188 9 114 79 114 19 214 247) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 198 128 243 247 252 167 188 9 114 79 114 19 214 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 166 211 194 48 139 112 135 63 46 109 30 193 94 73 163) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 166 211 194 48 139 112 135 63 46 109 30 193 94 73 163)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 167 210 194 48 139 112 135 63 46 109 30 193 94 73 163) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 167 210 194 48 139 112 135 63 46 109 30 193 94 73 163)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 198 128 243 247 252 167 188 9 114 79 197 19 214 247) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 198 128 243 247 252 167 188 9 114 79 197 19 214 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 233 194 42 225 247 198 235 186 44 225 142 46 217 119 71) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 194 42 225 247 198 235 186 44 225 142 46 217 119 71)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 198 128 243 247 252 170 188 9 114 79 197 19 214 247) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 198 128 243 247 252 170 188 9 114 79 197 19 214 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 191 41 131 66 127 154 244 174 247 252 153 67 13 33 89) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 191 41 131 66 127 154 244 174 247 252 153 67 13 33 89)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 53 130 197 149 123 82 221 161 11 233 155 230 118 44 124) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 53 130 197 149 123 82 221 161 11 233 155 230 118 44 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 151) (setf (om-darwin::result om-darwin::ga) (list 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 503 105) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc-ff" (om-load-patch-abs1 "bpc-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 179 510) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 137 167) (om-make-point 40 60) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output0" 0 (om-make-point 447 622) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 130 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 143 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 89 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 266 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 168 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 159 228) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 279 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 329 230) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 198 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 228 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 340 316) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 100 453) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 99 382) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 165 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 95 580) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 50 479) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (1 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0) (2 0 5 0 nil 0) (4 0 6 0 nil 0) (7 0 6 1 nil 0) (5 0 8 0 nil 0) (9 0 8 1 nil 0) (6 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (14 0 13 1 nil 0) (13 0 15 0 nil 0) (11 0 15 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0))) 6.090014 nil "" (om-make-point 200 31) (om-make-point 572 747)) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 115 264) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 203 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 431 652) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 1 nil 0) (4 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 3 1 nil 0) (5 0 4 0 nil 0) (0 0 6 0 nil 0))) 6.090014 nil "" (om-make-point 347 22) (om-make-point 615 756)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 812 111) nil (list nil) "l" "bpc-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 647 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 583 311) (om-make-point 290 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 55 160 84 16 119 200 69 41 117 239 90 134 56 18 218 205 113 80 211 12 251 226 9 210 115 55 183 141 107 168 88 112 241 3 162 69 177 148 59 250) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 55 160 84 16 119 200 69 41 117 239 90 134 56 18 218 205 113 80 211 12 251 226 9 210 115 55 183 141 107 168 88 112 241 3 162 69 177 148 59 250)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 866.87275 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 163 114 121 135 255 186 226 96 18 102 15 231 158 73 5 183 118 140 16 235 73 30 98 253 155 132 80 180 65 31 124 170 170 165 87 112 133 68 56 184) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 163 114 121 135 255 186 226 96 18 102 15 231 158 73 5 183 118 140 16 235 73 30 98 253 155 132 80 180 65 31 124 170 170 165 87 112 133 68 56 184)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 780.581 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 254 83 235 66 203 7 178 172 197 128 168 134 29 213 77 28 32 222 113 63 38 152 204 102 100 210 224 20 14 107 36 83 146 147 209 61 55 76 185 164) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 83 235 66 203 7 178 172 197 128 168 134 29 213 77 28 32 222 113 63 38 152 204 102 100 210 224 20 14 107 36 83 146 147 209 61 55 76 185 164)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 883.77137 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 46 39 130 71 22 118 16 9 43 82 155 82 163 220 81 229 126 19 8 62 0 101 105 176 209 8 100 235 197 46 41 9 197 220 120 61 170 185 73 82) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 46 39 130 71 22 118 16 9 43 82 155 82 163 220 81 229 126 19 8 62 0 101 105 176 209 8 100 235 197 46 41 9 197 220 120 61 170 185 73 82)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1008.0757 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 245 28 78 107 137 188 66 100 217 161 34 17 231 205 57 236 94 193 85 32 203 84 125 73 183 160 16 103 15 41 228 238 171 98 19 78 54 233 189 102) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 28 78 107 137 188 66 100 217 161 34 17 231 205 57 236 94 193 85 32 203 84 125 73 183 160 16 103 15 41 228 238 171 98 19 78 54 233 189 102)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 799.44556 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 37 64 231 249 125 136 14 147 26 79 17 200 116 56 227 199 178 126 217 244 45 35 63 200 100 248 226 76 193 252 243 219 164 51 149 200 181 46 128 82) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 37 64 231 249 125 136 14 147 26 79 17 200 116 56 227 199 178 126 217 244 45 35 63 200 100 248 226 76 193 252 243 219 164 51 149 200 181 46 128 82)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1015.2953 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 144 66 5 88 7 47 115 200 13 50 132 172 185 89 2 230 26 142 71 63 62 21 110 223 85 207 206 63 20 60 122 141 13 122 219 222 154 204 76 20) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 144 66 5 88 7 47 115 200 13 50 132 172 185 89 2 230 26 142 71 63 62 21 110 223 85 207 206 63 20 60 122 141 13 122 219 222 154 204 76 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 915.85596 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 114 149 2 58 8 75 133 136 100 152 246 66 188 206 29 79 127 51 231 201 65 20 33 166 25 174 245 97 79 109 164 244 223 53 128 211 60 254 164 78) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 149 2 58 8 75 133 136 100 152 246 66 188 206 29 79 127 51 231 201 65 20 33 166 25 174 245 97 79 109 164 244 223 53 128 211 60 254 164 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 745.73224 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 3 40 221 125 144 174 179 147 139 211 253 27 185 186 102 116 55 186 219 137 133 46 178 155 30 33 59 94 205 2 18 192 186 200 94 207 219 12 143 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 3 40 221 125 144 174 179 147 139 211 253 27 185 186 102 116 55 186 219 137 133 46 178 155 30 33 59 94 205 2 18 192 186 200 94 207 219 12 143 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1084.0073 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 177 62 216 242 212 166 122 85 161 14 156 203 168 96 195 228 167 219 95 139 193 36 114 132 59 245 171 142 14 240 142 93 235 37 82 216 20 94 2 200) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 177 62 216 242 212 166 122 85 161 14 156 203 168 96 195 228 167 219 95 139 193 36 114 132 59 245 171 142 14 240 142 93 235 37 82 216 20 94 2 200)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 824.5143 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 24 189 88 197 54 52 64 3 83 122 107 28 129 117 14 41 255 68 174 186 218 89 107 40 89 37 109 152 247 36 172 48 219 246 221 165 233 148 100 246) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 24 189 88 197 54 52 64 3 83 122 107 28 129 117 14 41 255 68 174 186 218 89 107 40 89 37 109 152 247 36 172 48 219 246 221 165 233 148 100 246)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 341) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (62 13 20 34 53 85 24 96 18 1)) (quote (15 29 57 73 5 82 17 39 16 33)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0.18431373 0.6784314 0.78431374)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (73 30 98 51 54 31 80 79 65 31)) (quote (23 69 69 64 87 11 32 68 56 83)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 461 185) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc-lib" (om-load-patch-abs1 "bpc-lib" (quote ((let ((box (om-load-editor-box1 "BPC-LIB" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 346 475) (om-make-point 90 94) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (25 42 45 100 4 35 9 11 80 10)) (quote (20 26 20 14 15 29 70 31 15 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (90 31 3 42 31 0 18 59 39 34)) (quote (17 58 25 17 100 76 18 35 59 93)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 450 365) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 416 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 62) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 157 284) (om-make-point 165 150) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (90 31 3 42 31 0 18 59 39 34)) (quote (17 58 25 17 100 76 18 35 59 93)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 44 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 217 570) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (8 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 5 1 nil 0) (11 0 8 1 nil 0) (4 0 8 2 nil 0) (9 0 10 1 nil 0) (10 0 11 0 nil 0) (7 0 11 1 nil 0) (0 0 12 0 nil 0))) 6.090014 nil "" (om-make-point 201 60) (om-make-point 704 692)) (quote nil) (om-make-point 645 47) nil (list nil) "l" "bpc-lib"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf" (om-load-patch-abs1 "bpf" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 299) (om-make-point 169 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (41 20 79 21 27 37 50 70 29 38)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 85 186) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 112 384) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 2 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.090014 nil "" (om-make-point 188 283) (om-make-point 504 495)) (quote nil) (om-make-point 367 64) nil (list nil) "l" "bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 100 34) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 315 339) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 17 115 22 93 181 170 245 150 232) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 17 115 22 93 181 170 245 150 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 0 101 101 202 101 101 101 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 0 101 101 202 101 101 101 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 0 101 101 0 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 0 101 101 0 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 103 101 101 202 101 101 101 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 103 101 101 202 101 101 101 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 103 101 102 0 101 101 101 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 103 101 102 0 101 101 101 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 0 101 101 104 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 0 101 101 104 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 103 101 101 204 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 103 101 101 204 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 104 101 101 204 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 104 101 101 204 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 103 101 101 204 101 204 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 103 101 101 204 101 204 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 0 103 104 101 204 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 0 103 104 101 204 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 103 204 104 102 101 0 101 101 102 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 103 204 104 102 101 0 101 101 102 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 226) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (0 0 0 0 0 0 0 0 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.18431373 0.6784314 0.78431374)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 503 105) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-ff" (om-load-patch-abs1 "bpf-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 166 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 152 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 110) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 110 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.090014 nil "" (om-make-point 226 178) (om-make-point 344 464)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 515 203) nil (list nil) "l" "bpf-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 379 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ten-bits" (om-load-patch-abs1 "ten-bits" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 43 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 176 30) "" nil 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 98 173) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 164 284) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 341 98) (om-make-point 375 389)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 103) nil (list nil) "l" "ten-bits"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 2 nil 0) (9 0 3 0 nil 0) (16 0 5 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (10 0 8 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (15 0 13 1 nil 0) (14 0 13 2 nil 0) (11 0 15 0 nil 0) (12 0 16 0 nil 0))) nil 6.090014))
