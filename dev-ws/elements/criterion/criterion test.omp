; OM File Header - Saved 2015/03/10 2:20:01
; (6.090014 :patc (om-make-point 10 10) (om-make-point 72 44) (om-make-point 737 658) "" 183 0 "2015/03/09 16:47:05" "2015/03/10 2:20:01")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criterion test" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 129 104) (om-make-point 62 30) (list 60 84) "(60 84)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 387 111) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 437 49) (om-make-point 145 30) (list (quote :unsigned) (quote :set) 2 3 5) "(:unsigned :set 2 3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 387 166) (om-make-point 136 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 158 30) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 86 427) (om-make-point 462 95) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 141 44 176 90 200 174 180 13 183 238 161 189 13 5 96 203 221 62 76 155 94 219 181 183 162 186 182 70 205 218 4 40) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 141 44 176 90 200 174 180 13 183 238 161 189 13 5 96 203 221 62 76 155 94 219 181 183 162 186 182 70 205 218 4 40)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 74) (list 1/4 1/16 1 72) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 71) (list 17/16 1/16 1 68) (list 9/8 1/16 1 73) (list 19/16 1/16 1 75) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 69) (list 3/2 1/16 1 67) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 38 65 43 141 114 59 207 160 255 132 112 42 47 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 38 65 43 141 114 59 207 160 255 132 112 42 47 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 74) (list 1/4 1/16 1 72) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 71) (list 17/16 1/16 1 68) (list 9/8 1/16 1 73) (list 19/16 1/16 1 75) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 38 65 43 141 114 144 122 160 255 132 112 42 47 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 38 65 43 141 114 144 122 160 255 132 112 42 47 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2.143547 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 74) (list 1/4 1/16 1 72) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 71) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 62)) :raw-genotype (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 2) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 64 137 207 254 109 37 90 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3.3483696 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 71) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 62)) :raw-genotype (list 89 66 94 74 127 207 254 109 37 90 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 2) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 109 37 90 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4.594794 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 67) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 71) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 86 208 5 98 43 141 114 144 122 160 255 132 112 42 47 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5.873095 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 67) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 76) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 112 42 47 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 112 42 47 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7.1773877 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 67) (list 5/8 1/16 1 80) (list 11/16 1/16 1 75) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 76) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 82) (list 29/16 1/16 1 77) (list 15/8 1/16 1 72) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 109 37 107 170 90 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8.503698 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 69) (list 1/2 1/16 1 72) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 67) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 76) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 82) (list 29/16 1/16 1 77) (list 15/8 1/16 1 72) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 109 37 90 170 107 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 109 37 90 170 107 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9.849155 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 80) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 67) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 76) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 74) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 82) (list 29/16 1/16 1 77) (list 15/8 1/16 1 72) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 126 20 90 170 107 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 126 20 90 170 107 42 39 69 139 41 208 5 98 43 141 114 144 122 160 255 132 47 42 112 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11.211579 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 74) (list 1/16 1/16 1 76) (list 1/8 1/16 1 79) (list 3/16 1/16 1 84) (list 1/4 1/16 1 62) (list 5/16 1/16 1 67) (list 3/8 1/16 1 64) (list 7/16 1/16 1 61) (list 1/2 1/16 1 80) (list 9/16 1/16 1 75) (list 5/8 1/16 1 80) (list 11/16 1/16 1 67) (list 3/4 1/16 1 77) (list 13/16 1/16 1 74) (list 7/8 1/16 1 79) (list 15/16 1/16 1 74) (list 1 1/16 1 76) (list 17/16 1/16 1 68) (list 9/8 1/16 1 65) (list 19/16 1/16 1 83) (list 5/4 1/16 1 78) (list 21/16 1/16 1 76) (list 11/8 1/16 1 60) (list 23/16 1/16 1 79) (list 3/2 1/16 1 82) (list 25/16 1/16 1 70) (list 13/8 1/16 1 65) (list 27/16 1/16 1 67) (list 7/4 1/16 1 72) (list 29/16 1/16 1 77) (list 15/8 1/16 1 82) (list 31/16 1/16 1 60)) :raw-genotype (list 89 66 94 74 127 207 254 126 20 90 170 107 42 39 69 139 41 208 5 98 43 141 175 144 122 160 255 132 112 42 47 0) :decoder (list (list 60 84)) :num-operons 32 :range (list 60 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 89 66 94 74 127 207 254 126 20 90 170 107 42 39 69 139 41 208 5 98 43 141 175 144 122 160 255 132 112 42 47 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 3036) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 456 334) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (op)$  (d::offby (d::pitch op) '(60 62)))") (quote ((om-load-inputfun (quote input-funbox) "" "OP" nil))) (om-make-point 243 96) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVALUATE" (quote om-darwin::evaluate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "CRIT" "CRIT" nil))) (om-make-point 316 300) (om-make-point 96 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 75 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 3 1 nil 0) (2 0 3 2 nil 0) (8 0 5 1 nil 0) (3 0 5 2 nil 0) (8 0 7 0 nil 0) (3 0 7 1 nil 0) (4 0 8 0 nil 0) (0 0 8 1 nil 0))) nil 6.090014))