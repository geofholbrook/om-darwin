; OM File Header - Saved 2015/03/10 0:45:43
; (6.090014 :patc (om-make-point 10 60) (om-make-point 179 48) (om-make-point 539 464) "" 183 0 "2015/03/04 23:22:30" "2015/03/10 0:45:43")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "still-working-p" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 300 38) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FFF" (quote om-darwin::fff) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 336 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 80 17) (om-make-point 48 30) (list 1 5) "(1 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 214 5) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 167 8) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "ALLOW-RESTS" (quote t)) (om-load-inputfun (quote input-funbox) "" "ALLOW-TIES" (quote t)))) (om-make-point 68 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 51 228) (om-make-point 401 187) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 160 207 94 131 108 67 163 244 11 178 219 140 192 1 36 121 180 186 152 81 42 168 88 108 83 99 219 227 207 37 83 202) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 207 94 131 108 67 163 244 11 178 219 140 192 1 36 121 180 186 152 81 42 168 88 108 83 99 219 227 207 37 83 202)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 44 207 72 234 29 175 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 31 156 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 175 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 31 156 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 44 207 72 234 29 175 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 29 158 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 175 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 29 158 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 2 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 44 207 72 234 29 173 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 29 158 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 173 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 29 158 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 2 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 2 2)))))) :raw-genotype (list 44 207 72 234 29 173 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 90 97 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 173 97 33 4 95 129 52 228 119 132 242 109 95 236 152 119 90 97 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 2 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 2 2)))))) :raw-genotype (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 119 90 97 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 119 90 97 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 13 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 2 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1)))))) :raw-genotype (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 147 149 97 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 147 149 97 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 14 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1.0 1 2 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 2)))))) :raw-genotype (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 206 90 97 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 173 97 33 4 95 129 52 228 230 21 242 109 95 236 152 206 90 97 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 4.0 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1)))))) :raw-genotype (list 44 207 72 234 29 129 97 33 4 95 173 52 228 230 21 242 109 95 236 152 147 149 97 126 216 90 79 128 193 254 249 110) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 129 97 33 4 95 173 52 228 230 21 242 109 95 236 152 147 149 97 126 216 90 79 128 193 254 249 110)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 16 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 4.0 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1)))))) :raw-genotype (list 44 207 72 234 29 129 97 33 4 95 173 52 231 227 21 242 109 95 236 152 147 149 97 126 216 90 79 128 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 129 97 33 4 95 173 52 231 227 21 242 109 95 236 152 147 149 97 126 216 90 79 128 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 17 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :operons (list nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 4.0 1)) (list 1 (list 3 1 1)) (list 1 (list 1 1 2)) (list 1 (list 1.0 1 1 1 1)) (list 1 (list 2 1)))))) :raw-genotype (list 44 207 72 234 29 129 97 33 4 99 173 52 228 230 21 242 109 47 204 33 7 213 65 36 179 2 9 252 156 251 132 211) :decoder (list (list 1 5) (list 0 15) (list 0 31) (list (quote :set) nil (quote t))) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests nil :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 44 207 72 234 29 129 97 33 4 99 173 52 228 230 21 242 109 47 204 33 7 213 65 36 179 2 9 252 156 251 132 211)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 1782) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((4 ((1 (1.0 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 681 141) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 5 1 nil 0) (4 0 5 3 nil 0) (3 0 5 4 nil 0) (5 0 6 1 nil 0) (1 0 6 2 nil 0))) nil 6.090014))