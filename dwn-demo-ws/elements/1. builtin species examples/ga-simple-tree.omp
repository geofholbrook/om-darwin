; OM File Header - Saved 2015/03/05 17:55:55
; (6.090014 :patc (om-make-point 10 110) (om-make-point 76 22) (om-make-point 844 590) "" 183 0 "2015/02/25 19:31:33" "2015/03/05 17:55:55")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-simple-tree" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 454 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 293 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 327 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 14 42 144 76 36 1 204 230 31 131 252 118 199 240 232 212 207 58 32 17 103 191 108 183 189 253 152 20 92 191 200 87 113 185 238 249 171 63 168 5 177 123 32 242 49 84 144 105 229 199 208 233 177 115 101 157 75 58 31 174 13 142 38 52 119 152 187 35 60 102 56 33 233 227 80 112 223 28 90 74 212 51 12 206 88 125 167 50 134 182 206 125 14 63 210 100 5 68 163 51 174 197 47 155 5 245 127 203 228 68 125 194 213 126 140 156 103 8 221 157 1 198 113 20 255 80 132 234 71 241 170 2 160 201 150 8 138 90 244 230 175 15 37 183 150 238 34 62 36 232 239 141 148 223 176 101 248 51 15 129 219 193 202 245 142 231 140 20 122 192 165 44 197 142 142 90 80 196 100 74 183 249 202 206 109 204 149 87 125 150 160 214 182 141 219 214 179 71 242 62 230 164 110 161 232 87 98 76 126 252 81 176 167 35 177 119 87 210 102 156 211 6 186 168 75 156 104 120 231 190 158 66 98 155 105 160 237 127 230 37 103 189 27 107 168 144 94 216 119 64 45 46 176 222 42 6 11 12 138 70 227 50 163 101 14 205 18 203 67 213 49 75 166 201 3 184 152 210 83 167 118 2 45 163 210 231 199 171 54 180 184 194 187 86 180 101 228 112 96 42 48 43 32 182 47 93 85 176 19 207 182 68 62 254 167 239 251 25 117 177 130 43 109 7 92 107 94 250 98 13 74 229 34 95 186 66 45 74 195 226 226 32 233 54 229 49 196 180 31 195 224 210 111 116 23 77 127 114 115 140 159 117 245 177 216 47 118 229 216 181 175 56 56 145 86 156 227 32 171 234 208 109 240 174 191 220 211 55 233 184 20 34 120 145 26 88 124 142 131 20 228 95 11 147 77 196 29 53 243 34 184 93 43 162 195 237 136 205 50 171 4 104 236 153 14 69 205 224 26 185 24 19 205 162 45 154 146 113 174 102 160 105 150 190 126 16 19 161 95 37 94 170 60 46 249 44 175 194 233 86 142 229 89 194 35 243 235 32 211 0 43 46 89 9 176 166 26 146 60 244 143 201 114 73 253 110 143 197 34 135 180 68 176 145 206 196 161 110 36 42 167 223 85 182 39 28 135 43 103 189 118 230 112 10 212 149 236 146 231 150 91 70 255 169 10 131 15 50 204 45 71 251 251 106 119 59 126 31 148 90 35 174 186 226 250 67 89 157 81 211 213 60 83 115 164 218 191 45 100 154 166 193 195 224 36 160 82 6 25 238 137 229 186 107 151 153 114 77 230 66 62 150 104 213 8 192 221 142 25 143 132 56 132 229 8 104 37 123 149 183) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 14 42 144 76 36 1 204 230 31 131 252 118 199 240 232 212 207 58 32 17 103 191 108 183 189 253 152 20 92 191 200 87 113 185 238 249 171 63 168 5 177 123 32 242 49 84 144 105 229 199 208 233 177 115 101 157 75 58 31 174 13 142 38 52 119 152 187 35 60 102 56 33 233 227 80 112 223 28 90 74 212 51 12 206 88 125 167 50 134 182 206 125 14 63 210 100 5 68 163 51 174 197 47 155 5 245 127 203 228 68 125 194 213 126 140 156 103 8 221 157 1 198 113 20 255 80 132 234 71 241 170 2 160 201 150 8 138 90 244 230 175 15 37 183 150 238 34 62 36 232 239 141 148 223 176 101 248 51 15 129 219 193 202 245 142 231 140 20 122 192 165 44 197 142 142 90 80 196 100 74 183 249 202 206 109 204 149 87 125 150 160 214 182 141 219 214 179 71 242 62) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 42 144 76 36 1 204 230 31 131 252 118 199 240 232 212 207 58 32 17 103 191 108 183 189 253 152 20 92 191 200 87 113 185 238 249 171 63 168 5 177 123 32 242 49 84 144 105 229 199 208 233 177 115 101 157 75 58 31 174 13 142 38 52 119 152 187 35 60 102 56 33 233 227 80 112 223 28 90 74 212 51 12 206 88 125 167 50 134 182 206 125 14 63 210 100 5 68 163 51 174 197 47 155 5 245 127 203 228 68 125 194 213 126 140 156 103 8 221 157 1 198 113 20 255 80 132 234 71 241 170 2 160 201 150 8 138 90 244 230 175 15 37 183 150 238 34 62 36 232 239 141 148 223 176 101 248 51 15 129 219 193 202 245 142 231 140 20 122 192 165 44 197 142 142 90 80 196 100 74 183 249 202 206 109 204 149 87 125 150 160 214 182 141 219 214 179 71 242 62)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 230 164 110 161 232 87 98 76 126 252 81 176 167 35 177 119 87 210 102 156 211 6 186 168 75 156 104 120 231 190 158 66 98 155 105 160 237 127 230 37 103 189 27 107 168 144 94 216 119 64 45 46 176 222 42 6 11 12 138 70 227 50 163 101 14 205 18 203 67 213 49 75 166 201 3 184 152 210 83 167 118 2 45 163 210 231 199 171 54 180 184 194 187 86 180 101 228 112 96 42 48 43 32 182 47 93 85 176 19 207 182 68 62 254 167 239 251 25 117 177 130 43 109 7 92 107 94 250 98 13 74 229 34 95 186 66 45 74 195 226 226 32 233 54 229 49 196 180 31 195 224 210 111 116 23 77 127 114 115 140 159 117 245 177 216 47 118 229 216 181 175 56 56 145 86 156 227 32 171 234 208 109 240 174 191 220 211 55 233 184 20 34 120 145 26 88 124 142 131 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 230 164 110 161 232 87 98 76 126 252 81 176 167 35 177 119 87 210 102 156 211 6 186 168 75 156 104 120 231 190 158 66 98 155 105 160 237 127 230 37 103 189 27 107 168 144 94 216 119 64 45 46 176 222 42 6 11 12 138 70 227 50 163 101 14 205 18 203 67 213 49 75 166 201 3 184 152 210 83 167 118 2 45 163 210 231 199 171 54 180 184 194 187 86 180 101 228 112 96 42 48 43 32 182 47 93 85 176 19 207 182 68 62 254 167 239 251 25 117 177 130 43 109 7 92 107 94 250 98 13 74 229 34 95 186 66 45 74 195 226 226 32 233 54 229 49 196 180 31 195 224 210 111 116 23 77 127 114 115 140 159 117 245 177 216 47 118 229 216 181 175 56 56 145 86 156 227 32 171 234 208 109 240 174 191 220 211 55 233 184 20 34 120 145 26 88 124 142 131 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 228 95 11 147 77 196 29 53 243 34 184 93 43 162 195 237 136 205 50 171 4 104 236 153 14 69 205 224 26 185 24 19 205 162 45 154 146 113 174 102 160 105 150 190 126 16 19 161 95 37 94 170 60 46 249 44 175 194 233 86 142 229 89 194 35 243 235 32 211 0 43 46 89 9 176 166 26 146 60 244 143 201 114 73 253 110 143 197 34 135 180 68 176 145 206 196 161 110 36 42 167 223 85 182 39 28 135 43 103 189 118 230 112 10 212 149 236 146 231 150 91 70 255 169 10 131 15 50 204 45 71 251 251 106 119 59 126 31 148 90 35 174 186 226 250 67 89 157 81 211 213 60 83 115 164 218 191 45 100 154 166 193 195 224 36 160 82 6 25 238 137 229 186 107 151 153 114 77 230 66 62 150 104 213 8 192 221 142 25 143 132 56 132 229 8 104 37 123 149 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 228 95 11 147 77 196 29 53 243 34 184 93 43 162 195 237 136 205 50 171 4 104 236 153 14 69 205 224 26 185 24 19 205 162 45 154 146 113 174 102 160 105 150 190 126 16 19 161 95 37 94 170 60 46 249 44 175 194 233 86 142 229 89 194 35 243 235 32 211 0 43 46 89 9 176 166 26 146 60 244 143 201 114 73 253 110 143 197 34 135 180 68 176 145 206 196 161 110 36 42 167 223 85 182 39 28 135 43 103 189 118 230 112 10 212 149 236 146 231 150 91 70 255 169 10 131 15 50 204 45 71 251 251 106 119 59 126 31 148 90 35 174 186 226 250 67 89 157 81 211 213 60 83 115 164 218 191 45 100 154 166 193 195 224 36 160 82 6 25 238 137 229 186 107 151 153 114 77 230 66 62 150 104 213 8 192 221 142 25 143 132 56 132 229 8 104 37 123 149 183)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 14 42 144 76 36 1 204 230 31 131 252 118 199 240 232 212 207 58 32 17 103 191 108 183 189 253 152 20 92 191 200 87 113 185 238 249 171 63 168 5 177 123 32 242 49 84 144 105 229 199 208 233 177 115 101 157 75 58 31 174 13 142 38 52 119 152 187 35 60 102 56 33 233 227 80 112 223 28 90 74 212 51 12 206 88 125 167 50 134 182 206 125 14 63 210 100 5 68 163 51 174 197 47 155 5 245 127 203 228 68 125 194 213 126 140 156 103 8 221 157 1 198 113 20 255 80 132 234 71 241 170 2 160 201 150 8 138 90 244 230 175 15 37 183 150 238 34 62 36 232 239 141 148 223 176 101 248 51 15 129 219 193 202 245 142 231 140 20 122 192 165 44 197 142 142 90 80 196 100 74 183 249 202 206 109 204 149 87 125 150 160 214 182 141 219 214 179 71 242 62 230 164 110 161 232 87 98 76 126 252 81 176 167 35 177 119 87 210 102 156 211 6 186 168 75 156 104 120 231 190 158 66 98 155 105 160 237 127 230 37 103 189 27 107 168 144 94 216 119 64 45 46 176 222 42 6 11 12 138 70 227 50 163 101 14 205 18 203 67 213 49 75 166 201 3 184 152 210 83 167 118 2 45 163 210 231 199 171 54 180 184 194 187 86 180 101 228 112 96 42 48 43 32 182 47 93 85 176 19 207 182 68 62 254 167 239 251 25 117 177 130 43 109 7 92 107 94 250 98 13 74 229 34 95 186 66 45 74 195 226 226 32 233 54 229 49 196 180 31 195 224 210 111 116 23 77 127 114 115 140 159 117 245 177 216 47 118 229 216 181 175 56 56 145 86 156 227 32 171 234 208 109 240 174 191 220 211 55 233 184 20 34 120 145 26 88 124 142 131 20 228 95 11 147 77 196 29 53 243 34 184 93 43 162 195 237 136 205 50 171 4 104 236 153 14 69 205 224 26 185 24 19 205 162 45 154 146 113 174 102 160 105 150 190 126 16 19 161 95 37 94 170 60 46 249 44 175 194 233 86 142 229 89 194 35 243 235 32 211 0 43 46 89 9 176 166 26 146 60 244 143 201 114 73 253 110 143 197 34 135 180 68 176 145 206 196 161 110 36 42 167 223 85 182 39 28 135 43 103 189 118 230 112 10 212 149 236 146 231 150 91 70 255 169 10 131 15 50 204 45 71 251 251 106 119 59 126 31 148 90 35 174 186 226 250 67 89 157 81 211 213 60 83 115 164 218 191 45 100 154 166 193 195 224 36 160 82 6 25 238 137 229 186 107 151 153 114 77 230 66 62 150 104 213 8 192 221 142 25 143 132 56 132 229 8 104 37 123 149 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 163 163 39 10 109 32 209 7 229 157 44 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 163 163 39 10 109 32 209 7 229 157 44 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 163 163 39 10 109 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 163 163 39 10 109 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 254 45 196 153 47 135 104 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 254 45 196 153 47 135 104 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 0 206 172 114 223 188 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 187 89 56 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 254 45 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 187 89 56 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 99 187 172 170 48 254 45 196 153 50 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 2)) (list 1 (list 1 2 2)) (list 1 (list 1 3)) (list 1 (list 1 1 1 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1 1 1 1)))))) :raw-genotype (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 127 172 170 48 202 97 196 153 47 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 2)) (list 1 (list 1 2 1 1)) (list 1 (list 1 2 1 1 1)) (list 1 (list 2 1)) (list 1 (list 1 1 1 2 1)))))) :raw-genotype (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 223 188 127 168 102 48 203 229 87 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1)) (list 1 (list 1 1 2)) (list 1 (list 1 1 1)) (list 2 (list 1 1 2 1 1)) (list 1 (list 1 1 3)))))) :raw-genotype (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 187 172 170 48 254 45 196 153 50 135 189 63 47 159 182 134 103 171 146 4 47 198 43 54 80 63 27 12 100 67 201 243 81 228 52 190 254 85 205 31 129 21 86 125 52 50 144 128 17 27 197 164 108 44 201 255 142 100 190 43 20 104 80 8 219 233 172 211 234 24 151 188 173 201 213 50 87 1 81 251 11 211 58 40 176 99 217 140 14 160 109 19 99 185 6 113 163 141 113 84 72 14 70 53 70 252 7 49 216 148 94 230 72 150 180 233 41 164 204 244 49 49 111 154 188 158 73 92 10 247 184 15 171 32 176 248 143 172 128 157 162 96 131 110 16 182 144 196 221 15 125 94 95 69 162 126 0 76 139 198 113 225 171 254 175 180 154 14 11 223 30 38 174 55 96 156 186 77 58 160 151 231 210 106 153 188 169 207 102 146 159 185 97 189 200 14 188 206 172 114 223 0 127 168 102 48 203 222 94 41 209 89 29 101 44 66 106 198 191 112 106 188 127 192 32 165 86 157 146 105 154 171 101 115 77 6 55 152 221 38 113 144 216 252 91 58 33 223 111 102 89 98 21 14 140 101 244 245 108 105 99 187 132 156 99 142 27 194 102 101 73 55 39 203 204 211 141 76 135 153 77 11 251 204 85 49 1 216 221 33 249 254 66 113 170 183 165 202 46 199 111 102 10 181 102 95 227 101 191 104 204 210 143 100 99 255 247 70 28 51 229 240 47 214 175 65 220 51 43 182 242 13 239 103 33 156 97 47 86 42 73 244 16 8 235 45 26 34 235 149 216 245 230 187 126 85 113 214 4 192 20 187 233 177 194 228 153 81 144 25 25 51 177 13 220 216 234 84 6 180 180 55 237 223 102 51 17 150 161 112 22 109 163 39 10 163 32 209 7 229 157 142 237 237 78 166 251 219 190 179 219 143 188 203 70 48 78 231 149 180 93 200 141 215 4 116 215 9 21 32 88 7 98 198 203 253 75 37 152 129 248 45 87 207 224 252 122 43 126 124 41 232 41 61 164 242 179 184 77 243 32 117 65 80 101 232 139 171 66 172 121 103 19 223 69 243 204 125 248 41 145 86 10 66 205 72 178 43 181 138 248 105 70 252 95 64 56 22 211 202 249 35 169 15 129 242 109 12 236 166 224 111 217 237 137 189 61 175 167 32 163 128 12 167 158 16 34 96 57 96 216 105 158 9 0 49 247 205 138 133 99 210 213 45 120 117 237 156 111 100 152 79 53 162 98 195 178 17 178 235 58 152 113 11 180 68 8 103 0 170 217 32 11 186 244 181 176 9 97 194 51 18 36 156 112 220 169 191 70 57 96 207 54 96 133 221 143 33 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 45) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (2 2)) (1 (1 2 2)) (1 (1 3)) (1 (1 1 1 1 1)) (1 (1 1)) (1 (1 1 1 1 1)))))) ((4 4) ((4 ((1 (1 1 1 1 1)) (1 (2 1 2)) (1 (1 2 1 1)) (1 (1 2 1 1 1)) (1 (2 1)) (1 (1 1 1 2 1)))))) ((4 4) ((4 ((1 (1 2 1)) (1 (1 1 2)) (1 (1 1 1)) (2 (1 1 2 1 1)) (1 (1 1 3))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 642 93) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
