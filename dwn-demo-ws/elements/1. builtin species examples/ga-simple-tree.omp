; OM File Header - Saved 2015/03/05 15:10:30
; (6.090014 :patc (om-make-point 10 110) (om-make-point 76 22) (om-make-point 844 590) "" 183 0 "2015/02/25 19:31:33" "2015/03/05 15:10:30")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-simple-tree" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 454 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 293 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 327 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 57 231 106 15 201 26 174 18 57 28 233 93 214 216 66 46 41 49 178 127 247 139 20 30 83 8 250 240 3 12 204 167 29 98 132 249 95 165 176 170 201 71 134 193 10 216 189 191 28 251 217 147 250 197 224 4 206 149 194 121 83 196 227 229 50 227 151 228 28 237 234 77 173 90 138 133 219 0 89 216 143 178 126 97 146 140 4 148 105 144 69 193 159 148 24 246 224 77 143 179 189 26 244 140 141 17 91 89 108 8 100 254 84 192 20 99 121 255 40 197 230 117 207 172 4 67 59 231 157 224 52 110 97 60 143 6 62 117 245 5 3 190 46 120 186 144 75 152 93 49 201 236 113 231 45 123 50 27 149 81 208 78 115 13 34 46 206 122 166 174 17 92 91 142 212 230 184 217 129 117 86 126 240 178 130 225 112 96 191 214 186 27 165 22 97 27 190 76 162 74 38 25 210 137 71 220 35 107 16 237 146 220 107 11 237 245 139 112 63 238 26 30 240 212 44 48 230 215 176 11 35 233 110 7 52 233 253 159 119 108 224 159 173 240 216 11 123 68 145 1 149 254 175 111 15 137 219 189 50 217 196 228 124 207 49 137 93 229 248 112 207 3 64 131 26 205 95 229 181 11 163 9 139 209 9 103 61 58 191 72 226 153 233 61 229 223 50 10 167 108 98 251 158 166 160 137 128 120 120 200 23 126 122 189 93 205 187 180 18 189 105 140 102 210 202 163 230 35 163 77 215 95 127 34 33 131 72 46 216 34 243 76 124 177 112 255 189 7 136 199 87 175 244 69 195 122 194 201 35 211 174 80 156 187 101 250 43 45 92 140 194 60 217 20 24 130 171 151 68 103 175 72 120 253 41 253 58 137 29 176 119 138 100 230 49 39 144 201 242 170 84 75 239 118 159 39 243 110 192 180 75 230 213 76 58 180 130 238 140 138 246 33 6 224 15 45 81 181 65 117 27 87 250 178 151 29 196 55 223 129 42 21 169 166 154 146 68 245 94 120 69 12 105 197 171 71 163 15 190 237 42 79 65 222 98 143 123 230 206 250 121 76 6 209 4 138 205 141 86 208 96 115 46 161 106 154 218 22 40 154 170 5 219 252 118 29 124 170 36 97 211 77 46 218 186 60 10 49 69 33 185 55 88 153 49 42 61 86 127 11 39 12 47 205 200 124 226 141 64 150 0 212 121 139 151 205 201 212 150 215 48 151 51 193 184 54 170 196 244 255 9 236 188 97 167 200 187 115 135 5 224 199 30 83 82 108 27 81 105 212 3 74 128 20 19 202 144 118 144 55 85 20 71 118 199 242 204 221 3 232 26 61 106 220 124 23 73 214 130) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 249 57 231 106 15 201 26 174 18 57 28 233 93 214 216 66 46 41 49 178 127 247 139 20 30 83 8 250 240 3 12 204 167 29 98 132 249 95 165 176 170 201 71 134 193 10 216 189 191 28 251 217 147 250 197 224 4 206 149 194 121 83 196 227 229 50 227 151 228 28 237 234 77 173 90 138 133 219 0 89 216 143 178 126 97 146 140 4 148 105 144 69 193 159 148 24 246 224 77 143 179 189 26 244 140 141 17 91 89 108 8 100 254 84 192 20 99 121 255 40 197 230 117 207 172 4 67 59 231 157 224 52 110 97 60 143 6 62 117 245 5 3 190 46 120 186 144 75 152 93 49 201 236 113 231 45 123 50 27 149 81 208 78 115 13 34 46 206 122 166 174 17 92 91 142 212 230 184 217 129 117 86 126 240 178 130 225 112 96 191 214 186 27 165 22 97 27 190 76 162) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 57 231 106 15 201 26 174 18 57 28 233 93 214 216 66 46 41 49 178 127 247 139 20 30 83 8 250 240 3 12 204 167 29 98 132 249 95 165 176 170 201 71 134 193 10 216 189 191 28 251 217 147 250 197 224 4 206 149 194 121 83 196 227 229 50 227 151 228 28 237 234 77 173 90 138 133 219 0 89 216 143 178 126 97 146 140 4 148 105 144 69 193 159 148 24 246 224 77 143 179 189 26 244 140 141 17 91 89 108 8 100 254 84 192 20 99 121 255 40 197 230 117 207 172 4 67 59 231 157 224 52 110 97 60 143 6 62 117 245 5 3 190 46 120 186 144 75 152 93 49 201 236 113 231 45 123 50 27 149 81 208 78 115 13 34 46 206 122 166 174 17 92 91 142 212 230 184 217 129 117 86 126 240 178 130 225 112 96 191 214 186 27 165 22 97 27 190 76 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 74 38 25 210 137 71 220 35 107 16 237 146 220 107 11 237 245 139 112 63 238 26 30 240 212 44 48 230 215 176 11 35 233 110 7 52 233 253 159 119 108 224 159 173 240 216 11 123 68 145 1 149 254 175 111 15 137 219 189 50 217 196 228 124 207 49 137 93 229 248 112 207 3 64 131 26 205 95 229 181 11 163 9 139 209 9 103 61 58 191 72 226 153 233 61 229 223 50 10 167 108 98 251 158 166 160 137 128 120 120 200 23 126 122 189 93 205 187 180 18 189 105 140 102 210 202 163 230 35 163 77 215 95 127 34 33 131 72 46 216 34 243 76 124 177 112 255 189 7 136 199 87 175 244 69 195 122 194 201 35 211 174 80 156 187 101 250 43 45 92 140 194 60 217 20 24 130 171 151 68 103 175 72 120 253 41 253 58 137 29 176 119 138 100 230 49 39 144 201 242) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 74 38 25 210 137 71 220 35 107 16 237 146 220 107 11 237 245 139 112 63 238 26 30 240 212 44 48 230 215 176 11 35 233 110 7 52 233 253 159 119 108 224 159 173 240 216 11 123 68 145 1 149 254 175 111 15 137 219 189 50 217 196 228 124 207 49 137 93 229 248 112 207 3 64 131 26 205 95 229 181 11 163 9 139 209 9 103 61 58 191 72 226 153 233 61 229 223 50 10 167 108 98 251 158 166 160 137 128 120 120 200 23 126 122 189 93 205 187 180 18 189 105 140 102 210 202 163 230 35 163 77 215 95 127 34 33 131 72 46 216 34 243 76 124 177 112 255 189 7 136 199 87 175 244 69 195 122 194 201 35 211 174 80 156 187 101 250 43 45 92 140 194 60 217 20 24 130 171 151 68 103 175 72 120 253 41 253 58 137 29 176 119 138 100 230 49 39 144 201 242)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 170 84 75 239 118 159 39 243 110 192 180 75 230 213 76 58 180 130 238 140 138 246 33 6 224 15 45 81 181 65 117 27 87 250 178 151 29 196 55 223 129 42 21 169 166 154 146 68 245 94 120 69 12 105 197 171 71 163 15 190 237 42 79 65 222 98 143 123 230 206 250 121 76 6 209 4 138 205 141 86 208 96 115 46 161 106 154 218 22 40 154 170 5 219 252 118 29 124 170 36 97 211 77 46 218 186 60 10 49 69 33 185 55 88 153 49 42 61 86 127 11 39 12 47 205 200 124 226 141 64 150 0 212 121 139 151 205 201 212 150 215 48 151 51 193 184 54 170 196 244 255 9 236 188 97 167 200 187 115 135 5 224 199 30 83 82 108 27 81 105 212 3 74 128 20 19 202 144 118 144 55 85 20 71 118 199 242 204 221 3 232 26 61 106 220 124 23 73 214 130) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 170 84 75 239 118 159 39 243 110 192 180 75 230 213 76 58 180 130 238 140 138 246 33 6 224 15 45 81 181 65 117 27 87 250 178 151 29 196 55 223 129 42 21 169 166 154 146 68 245 94 120 69 12 105 197 171 71 163 15 190 237 42 79 65 222 98 143 123 230 206 250 121 76 6 209 4 138 205 141 86 208 96 115 46 161 106 154 218 22 40 154 170 5 219 252 118 29 124 170 36 97 211 77 46 218 186 60 10 49 69 33 185 55 88 153 49 42 61 86 127 11 39 12 47 205 200 124 226 141 64 150 0 212 121 139 151 205 201 212 150 215 48 151 51 193 184 54 170 196 244 255 9 236 188 97 167 200 187 115 135 5 224 199 30 83 82 108 27 81 105 212 3 74 128 20 19 202 144 118 144 55 85 20 71 118 199 242 204 221 3 232 26 61 106 220 124 23 73 214 130)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 57 231 106 15 201 26 174 18 57 28 233 93 214 216 66 46 41 49 178 127 247 139 20 30 83 8 250 240 3 12 204 167 29 98 132 249 95 165 176 170 201 71 134 193 10 216 189 191 28 251 217 147 250 197 224 4 206 149 194 121 83 196 227 229 50 227 151 228 28 237 234 77 173 90 138 133 219 0 89 216 143 178 126 97 146 140 4 148 105 144 69 193 159 148 24 246 224 77 143 179 189 26 244 140 141 17 91 89 108 8 100 254 84 192 20 99 121 255 40 197 230 117 207 172 4 67 59 231 157 224 52 110 97 60 143 6 62 117 245 5 3 190 46 120 186 144 75 152 93 49 201 236 113 231 45 123 50 27 149 81 208 78 115 13 34 46 206 122 166 174 17 92 91 142 212 230 184 217 129 117 86 126 240 178 130 225 112 96 191 214 186 27 165 22 97 27 190 76 162 74 38 25 210 137 71 220 35 107 16 237 146 220 107 11 237 245 139 112 63 238 26 30 240 212 44 48 230 215 176 11 35 233 110 7 52 233 253 159 119 108 224 159 173 240 216 11 123 68 145 1 149 254 175 111 15 137 219 189 50 217 196 228 124 207 49 137 93 229 248 112 207 3 64 131 26 205 95 229 181 11 163 9 139 209 9 103 61 58 191 72 226 153 233 61 229 223 50 10 167 108 98 251 158 166 160 137 128 120 120 200 23 126 122 189 93 205 187 180 18 189 105 140 102 210 202 163 230 35 163 77 215 95 127 34 33 131 72 46 216 34 243 76 124 177 112 255 189 7 136 199 87 175 244 69 195 122 194 201 35 211 174 80 156 187 101 250 43 45 92 140 194 60 217 20 24 130 171 151 68 103 175 72 120 253 41 253 58 137 29 176 119 138 100 230 49 39 144 201 242 170 84 75 239 118 159 39 243 110 192 180 75 230 213 76 58 180 130 238 140 138 246 33 6 224 15 45 81 181 65 117 27 87 250 178 151 29 196 55 223 129 42 21 169 166 154 146 68 245 94 120 69 12 105 197 171 71 163 15 190 237 42 79 65 222 98 143 123 230 206 250 121 76 6 209 4 138 205 141 86 208 96 115 46 161 106 154 218 22 40 154 170 5 219 252 118 29 124 170 36 97 211 77 46 218 186 60 10 49 69 33 185 55 88 153 49 42 61 86 127 11 39 12 47 205 200 124 226 141 64 150 0 212 121 139 151 205 201 212 150 215 48 151 51 193 184 54 170 196 244 255 9 236 188 97 167 200 187 115 135 5 224 199 30 83 82 108 27 81 105 212 3 74 128 20 19 202 144 118 144 55 85 20 71 118 199 242 204 221 3 232 26 61 106 220 124 23 73 214 130)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 43 151 149 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 43 151 149 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 30 196 21 28 141 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 30 196 21 28 141 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 13 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 14 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 151 60 156 237 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 151 60 156 237 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 213 151 60 156 237 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 151 60 156 237 244 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 16 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 9 90 129 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 17 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 98 90 129 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 98 90 129 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 18 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 59 205 44 232 98 26 193 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 2 (list 1 1 2 2)) (list 1 (list 1 2 2 1)) (list 2 (list 1 1 1)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 9 90 129 213 237 60 156 151 244 143 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 3)) (list 2 (list 1 1 1 1 1 1)) (list 1 (list 1 2 1 1)) (list 1 (list 1 1)) (list 1 (list 1 1)))))) :raw-genotype (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 20)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 1 1)) (list 1 (list 2 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 2 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 30 168 47 132 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 205 44 232 98 26 193 244 151 60 156 237 213 204 123 45 54 177 50 21 198 248 129 171 170 27 4 25 227 0 89 143 159 220 182 93 87 160 87 0 187 245 187 49 229 132 57 206 58 127 38 34 163 51 204 107 11 158 193 113 97 75 153 249 147 170 8 178 2 104 129 112 179 61 232 155 180 121 21 34 164 220 84 99 166 42 152 111 96 103 11 162 193 131 45 170 248 27 130 58 180 229 96 37 2 120 6 219 246 3 122 0 42 180 27 147 56 1 190 205 220 190 21 106 8 151 161 45 143 203 183 217 208 95 96 28 253 107 36 158 41 222 158 161 186 247 222 45 182 172 42 68 212 143 75 94 144 157 10 170 154 227 157 155 150 210 100 110 18 115 103 183 106 247 34 146 166 181 104 41 64 55 57 101 154 118 109 247 50 130 109 127 151 5 224 74 149 197 78 157 149 151 43 236 97 127 59 223 193 203 135 209 140 23 27 124 164 125 224 103 41 190 177 8 254 150 88 90 161 207 209 120 53 176 17 195 82 130 22 26 236 215 155 171 43 50 161 5 120 162 239 102 29 112 13 204 145 255 38 211 189 67 221 185 96 108 55 68 77 29 169 247 132 88 143 219 35 23 204 39 87 130 116 140 20 85 238 18 127 252 152 207 53 197 227 91 243 60 8 85 184 211 161 251 115 220 169 134 100 186 163 126 36 107 140 120 164 156 189 97 115 78 162 215 126 152 127 203 109 134 169 125 136 204 215 166 225 26 142 251 138 207 224 113 230 115 12 67 125 220 192 169 142 254 55 91 109 210 25 189 195 20 97 70 116 94 149 83 255 134 233 25 153 35 28 222 162 14 217 7 83 230 42 73 191 222 206 64 55 61 52 25 20 228 165 106 3 141 196 21 28 30 132 47 168 211 217 189 23 43 9 175 86 243 222 42 69 237 222 99 36 25 20 162 7 159 202 203 241 183 95 37 6 182 92 62 29 41 233 37 189 30 154 97 79 47 182 237 70 52 206 126 125 118 65 36 60 141 230 242 4 168 60 232 207 163 185 66 15 226 50 51 20 49 164 150 138 227 45 221 87 179 227 187 9 97 238 133 1 247 97 56 205 89 240 52 205 5 231 187 155 26 35 141 129 99 58 127 164 20 195 142 223 83 60 117 149 218 3 112 190 41 202 125 78 88 163 180 7 210 11 137 67 160 231 146 56 249 128 248 202 138 115 183 138 4 74 169 74 215 129 14 185 200 38 93 197 116 21 155 51 255 158 224 77 3 150 221 66 193 62 38 220 243 204 226 148 165 173 29 23 203 164 7 12 39 35 239 234 42 23 61 65 56 240 102 104 131 110 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 84) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((2 (1 1 2 2)) (1 (1 2 2 1)) (2 (1 1 1)) (1 (2 1 1 1 1)))))) ((4 4) ((4 ((1 (1 1 3)) (2 (1 1 1 1 1 1)) (1 (1 2 1 1)) (1 (1 1)) (1 (1 1)))))) ((4 4) ((4 ((1 (1 1 1 1 1)) (1 (2 1 1)) (1 (1 2 1)) (1 (1 2 1 1)) (2 (1 1 1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 560 85) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
