; OM File Header - Saved 2015/03/05 16:59:47
; (6.090014 :patc (om-make-point 10 110) (om-make-point 76 22) (om-make-point 844 590) "" 183 0 "2015/02/25 19:31:33" "2015/03/05 16:59:47")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-simple-tree" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 454 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 293 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 327 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 140 233 199 127 165 87 217 141 28 58 166 47 103 237 201 85 164 65 214 52 81 122 81 139 44 24 46 165 132 211 52 11 198 13 251 110 134 71 232 164 30 84 96 167 67 193 135 111 232 197 230 62 10 84 153 177 212 124 21 221 34 117 194 88 252 143 14 48 138 222 21 43 157 26 145 134 165 38 221 238 172 188 97 245 169 205 32 9 140 126 182 211 198 185 73 241 122 56 201 104 173 78 214 113 162 159 1 255 104 209 223 8 149 147 245 61 125 161 239 11 72 251 242 139 99 1 14 190 48 137 166 142 176 205 182 81 246 236 232 74 195 248 151 198 177 197 83 30 74 1 58 106 82 14 59 254 163 39 245 151 239 231 178 148 217 161 93 70 188 144 155 237 240 71 178 77 2 200 99 166 55 179 201 120 143 66 68 166 89 174 60 168 120 231 176 234 224 122 0 201 27 129 240 58 237 51 204 159 125 68 73 128 163 213 151 97 155 68 195 129 215 72 135 173 30 221 44 54 231 27 161 71 167 241 185 88 158 17 240 221 138 107 218 135 134 49 37 5 141 24 22 99 27 108 98 42 225 245 71 209 221 143 92 206 182 92 44 91 200 136 162 211 221 151 60 101 243 15 72 192 33 125 186 248 50 163 117 167 23 132 249 219 120 127 95 72 115 195 235 36 54 79 79 57 147 29 21 160 7 161 136 12 205 204 184 9 221 45 254 209 241 70 238 192 241 36 22 44 89 122 147 24 233 74 47 74 134 176 61 130 164 165 234 119 65 201 58 114 131 96 161 30 101 185 80 58 153 106 223 165 197 221 139 69 47 248 68 13 131 67 81 176 94 116 15 173 169 16 43 189 130 11 254 65 114 165 48 121 41 144 149 51 130 213 86 5 94 134 240 114 74 159 66 226 172 28 168 43 245 106 20 147 111 58 250 95 96 157 52 88 204 253 245 143 240 244 66 34 45 85 212 7 151 211 21 124 58 59 209 5 205 175 129 92 148 42 17 197 74 71 128 179 71 72 81 54 21 249 42 86 227 254 252 55 195 20 203 206 38 114 39 231 123 216 129 70 63 226 40 9 59 76 133 58 210 3 206 152 43 73 8 97 67 44 182 44 89 221 218 105 243 239 85 130 204 58 129 28 84 6 175 36 115 96 70 67 40 239 241 111 170 168 145 103 22 62 255 166 187 199 91 54 46 184 97 191 229 130 23 43 191 137 154 243 178 242 170 68 244 43 1 152 163 198 43 29 15 227 141 33 5 51 129 197 56 192 102 20 58 239 110 229 28 112 66 75 87 146 53 77 228 51 220 206 144 185 245 242 33 39 251 190 6 155 164 167 12 55 255 75) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 140 233 199 127 165 87 217 141 28 58 166 47 103 237 201 85 164 65 214 52 81 122 81 139 44 24 46 165 132 211 52 11 198 13 251 110 134 71 232 164 30 84 96 167 67 193 135 111 232 197 230 62 10 84 153 177 212 124 21 221 34 117 194 88 252 143 14 48 138 222 21 43 157 26 145 134 165 38 221 238 172 188 97 245 169 205 32 9 140 126 182 211 198 185 73 241 122 56 201 104 173 78 214 113 162 159 1 255 104 209 223 8 149 147 245 61 125 161 239 11 72 251 242 139 99 1 14 190 48 137 166 142 176 205 182 81 246 236 232 74 195 248 151 198 177 197 83 30 74 1 58 106 82 14 59 254 163 39 245 151 239 231 178 148 217 161 93 70 188 144 155 237 240 71 178 77 2 200 99 166 55 179 201 120 143 66 68 166 89 174 60 168 120 231 176 234 224 122 0 201) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 140 233 199 127 165 87 217 141 28 58 166 47 103 237 201 85 164 65 214 52 81 122 81 139 44 24 46 165 132 211 52 11 198 13 251 110 134 71 232 164 30 84 96 167 67 193 135 111 232 197 230 62 10 84 153 177 212 124 21 221 34 117 194 88 252 143 14 48 138 222 21 43 157 26 145 134 165 38 221 238 172 188 97 245 169 205 32 9 140 126 182 211 198 185 73 241 122 56 201 104 173 78 214 113 162 159 1 255 104 209 223 8 149 147 245 61 125 161 239 11 72 251 242 139 99 1 14 190 48 137 166 142 176 205 182 81 246 236 232 74 195 248 151 198 177 197 83 30 74 1 58 106 82 14 59 254 163 39 245 151 239 231 178 148 217 161 93 70 188 144 155 237 240 71 178 77 2 200 99 166 55 179 201 120 143 66 68 166 89 174 60 168 120 231 176 234 224 122 0 201)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 27 129 240 58 237 51 204 159 125 68 73 128 163 213 151 97 155 68 195 129 215 72 135 173 30 221 44 54 231 27 161 71 167 241 185 88 158 17 240 221 138 107 218 135 134 49 37 5 141 24 22 99 27 108 98 42 225 245 71 209 221 143 92 206 182 92 44 91 200 136 162 211 221 151 60 101 243 15 72 192 33 125 186 248 50 163 117 167 23 132 249 219 120 127 95 72 115 195 235 36 54 79 79 57 147 29 21 160 7 161 136 12 205 204 184 9 221 45 254 209 241 70 238 192 241 36 22 44 89 122 147 24 233 74 47 74 134 176 61 130 164 165 234 119 65 201 58 114 131 96 161 30 101 185 80 58 153 106 223 165 197 221 139 69 47 248 68 13 131 67 81 176 94 116 15 173 169 16 43 189 130 11 254 65 114 165 48 121 41 144 149 51 130 213 86 5 94 134 240 114) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 129 240 58 237 51 204 159 125 68 73 128 163 213 151 97 155 68 195 129 215 72 135 173 30 221 44 54 231 27 161 71 167 241 185 88 158 17 240 221 138 107 218 135 134 49 37 5 141 24 22 99 27 108 98 42 225 245 71 209 221 143 92 206 182 92 44 91 200 136 162 211 221 151 60 101 243 15 72 192 33 125 186 248 50 163 117 167 23 132 249 219 120 127 95 72 115 195 235 36 54 79 79 57 147 29 21 160 7 161 136 12 205 204 184 9 221 45 254 209 241 70 238 192 241 36 22 44 89 122 147 24 233 74 47 74 134 176 61 130 164 165 234 119 65 201 58 114 131 96 161 30 101 185 80 58 153 106 223 165 197 221 139 69 47 248 68 13 131 67 81 176 94 116 15 173 169 16 43 189 130 11 254 65 114 165 48 121 41 144 149 51 130 213 86 5 94 134 240 114)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 74 159 66 226 172 28 168 43 245 106 20 147 111 58 250 95 96 157 52 88 204 253 245 143 240 244 66 34 45 85 212 7 151 211 21 124 58 59 209 5 205 175 129 92 148 42 17 197 74 71 128 179 71 72 81 54 21 249 42 86 227 254 252 55 195 20 203 206 38 114 39 231 123 216 129 70 63 226 40 9 59 76 133 58 210 3 206 152 43 73 8 97 67 44 182 44 89 221 218 105 243 239 85 130 204 58 129 28 84 6 175 36 115 96 70 67 40 239 241 111 170 168 145 103 22 62 255 166 187 199 91 54 46 184 97 191 229 130 23 43 191 137 154 243 178 242 170 68 244 43 1 152 163 198 43 29 15 227 141 33 5 51 129 197 56 192 102 20 58 239 110 229 28 112 66 75 87 146 53 77 228 51 220 206 144 185 245 242 33 39 251 190 6 155 164 167 12 55 255 75) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 74 159 66 226 172 28 168 43 245 106 20 147 111 58 250 95 96 157 52 88 204 253 245 143 240 244 66 34 45 85 212 7 151 211 21 124 58 59 209 5 205 175 129 92 148 42 17 197 74 71 128 179 71 72 81 54 21 249 42 86 227 254 252 55 195 20 203 206 38 114 39 231 123 216 129 70 63 226 40 9 59 76 133 58 210 3 206 152 43 73 8 97 67 44 182 44 89 221 218 105 243 239 85 130 204 58 129 28 84 6 175 36 115 96 70 67 40 239 241 111 170 168 145 103 22 62 255 166 187 199 91 54 46 184 97 191 229 130 23 43 191 137 154 243 178 242 170 68 244 43 1 152 163 198 43 29 15 227 141 33 5 51 129 197 56 192 102 20 58 239 110 229 28 112 66 75 87 146 53 77 228 51 220 206 144 185 245 242 33 39 251 190 6 155 164 167 12 55 255 75)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 140 233 199 127 165 87 217 141 28 58 166 47 103 237 201 85 164 65 214 52 81 122 81 139 44 24 46 165 132 211 52 11 198 13 251 110 134 71 232 164 30 84 96 167 67 193 135 111 232 197 230 62 10 84 153 177 212 124 21 221 34 117 194 88 252 143 14 48 138 222 21 43 157 26 145 134 165 38 221 238 172 188 97 245 169 205 32 9 140 126 182 211 198 185 73 241 122 56 201 104 173 78 214 113 162 159 1 255 104 209 223 8 149 147 245 61 125 161 239 11 72 251 242 139 99 1 14 190 48 137 166 142 176 205 182 81 246 236 232 74 195 248 151 198 177 197 83 30 74 1 58 106 82 14 59 254 163 39 245 151 239 231 178 148 217 161 93 70 188 144 155 237 240 71 178 77 2 200 99 166 55 179 201 120 143 66 68 166 89 174 60 168 120 231 176 234 224 122 0 201 27 129 240 58 237 51 204 159 125 68 73 128 163 213 151 97 155 68 195 129 215 72 135 173 30 221 44 54 231 27 161 71 167 241 185 88 158 17 240 221 138 107 218 135 134 49 37 5 141 24 22 99 27 108 98 42 225 245 71 209 221 143 92 206 182 92 44 91 200 136 162 211 221 151 60 101 243 15 72 192 33 125 186 248 50 163 117 167 23 132 249 219 120 127 95 72 115 195 235 36 54 79 79 57 147 29 21 160 7 161 136 12 205 204 184 9 221 45 254 209 241 70 238 192 241 36 22 44 89 122 147 24 233 74 47 74 134 176 61 130 164 165 234 119 65 201 58 114 131 96 161 30 101 185 80 58 153 106 223 165 197 221 139 69 47 248 68 13 131 67 81 176 94 116 15 173 169 16 43 189 130 11 254 65 114 165 48 121 41 144 149 51 130 213 86 5 94 134 240 114 74 159 66 226 172 28 168 43 245 106 20 147 111 58 250 95 96 157 52 88 204 253 245 143 240 244 66 34 45 85 212 7 151 211 21 124 58 59 209 5 205 175 129 92 148 42 17 197 74 71 128 179 71 72 81 54 21 249 42 86 227 254 252 55 195 20 203 206 38 114 39 231 123 216 129 70 63 226 40 9 59 76 133 58 210 3 206 152 43 73 8 97 67 44 182 44 89 221 218 105 243 239 85 130 204 58 129 28 84 6 175 36 115 96 70 67 40 239 241 111 170 168 145 103 22 62 255 166 187 199 91 54 46 184 97 191 229 130 23 43 191 137 154 243 178 242 170 68 244 43 1 152 163 198 43 29 15 227 141 33 5 51 129 197 56 192 102 20 58 239 110 229 28 112 66 75 87 146 53 77 228 51 220 206 144 185 245 242 33 39 251 190 6 155 164 167 12 55 255 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 28 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1 1)) (list 1 (list 1 3 2)) (list 1 (list 4 1)))))) :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 1 (list 1 2)) (list 1 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 29 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 171 14 101 214 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1 1)) (list 1 (list 1 3 2)) (list 1 (list 4 1)))))) :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 1 (list 1 2)) (list 1 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 171 14 101 214 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 30 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1 1)) (list 1 (list 1 3 2)) (list 1 (list 4 1)))))) :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 1 (list 1 2)) (list 1 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 31 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 227 163 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 1 2 1)) (list 1 (list 1 3 1)))))) :raw-genotype (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 45 240 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 45 240 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 227 163 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 32 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2 1 2 1)) (list 1 (list 1 3 1)))))) :raw-genotype (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 45 240 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 45 240 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 79 194 109 68 25 202 118 140 61 79 173 180 206 131 245 210 116 3 145 17 102 18 248 133 137 234 224 68 73 120 126 36 81 29 7 130 53 73 45 135 42 173 157 235 235 173 210 112 189 142 165 182 88 32 117 19 138 77 157 255 191 187 198 121 90 81 185 112 164 166 230 192 33 182 28 108 24 250 156 118 45 225 74 57 57 236 204 121 90 61 165 237 211 109 236 206 83 7 89 197 204 14 51 189 134 2 147 89 97 223 5 167 220 166 174 142 53 103 42 166 194 201 105 116 244 243 222 60 30 255 113 91 125 123 214 189 240 231 201 33 51 163 0 1 110 86 73 99 225 172 143 39 88 56 41 139 18 15 47 152 141 30 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 33 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 56 41 139 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 227 163 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 106 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 5 1)) (list 2 (list 2)) (list 3 (list 1 2)))))) :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 56 41 139 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 227 163 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 106 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 34 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 5 1)) (list 2 (list 2)) (list 3 (list 1 2)))))) :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 35 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 75 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 5 1)) (list 2 (list 2)) (list 3 (list 1 2)))))) :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183 233 75 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 36 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 40 63 61 105 132 13 43 45 16 165 151 228 97 46 196 81 153 2 7 159 64 100 1 12 10 73 6 199 13 173 41 84 126 47 184 242 179 91 252 125 229 154 22 74 67 158 16 50 35 97 175 236 190 232 126 189 110 35 118 192 134 43 143 138 49 250 173 113 100 97 203 37 106 80 46 34 235 140 201 183 41 63 205 53 84 229 10 98 180 159 36 191 95 74 12 6 102 122 101 137 156 251 218 140 240 185 243 60 99 199 208 215 23 230 71 138 217 152 55 96 41 216 237 255 198 1 248 64 233 21 39 239 146 135 2 88 179 124 222 190 162 155 22 200 254 174 94 18 13 254 166 99 124 178 141 141 99 144 72 110 111 26 35 107 107 239 225 228 245 232 237 167 55 8 140 84 161 140 85 100 138 138 89 134 67 20 253 244 241 57 153 113 198 173 73 6 234 86 82 79 234 105 115 136 50 188 2 247 161 140 89 131 131 9 226 226 208 180 63 13 57 56 70 210 86 26 193 58 74 86 154 47 227 191 13 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 5 1)) (list 2 (list 2)) (list 3 (list 1 2)))))) :raw-genotype (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 2 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 77 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 127 191 143 59 20 77 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 206 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 159 148 4 129 145 34 95 4 102 246 147 179 131 34 72 52 144 232 254 103 126 222 113 49 209 119 222 245 19 249 145 169 79 34 224 241 45 107 91 38 76 15 255 63 233 201 173 21 187 153 245 214 194 16 72 229 38 97 130 81 202 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 40 63 61 105 132 13 43 45 16 165 151 228 97 46 196 81 153 2 7 159 64 100 1 12 10 73 6 199 13 173 41 84 126 47 184 242 179 91 252 125 229 154 22 74 67 158 16 50 35 97 175 236 190 232 126 189 110 35 118 192 134 43 143 138 49 250 173 113 100 97 203 37 106 80 46 34 235 140 201 183 41 63 205 53 84 229 10 98 180 159 36 191 95 74 12 6 102 122 101 137 156 251 218 140 240 185 243 60 99 199 208 215 23 230 71 138 217 152 55 96 41 216 237 255 198 1 248 64 233 21 39 239 146 135 2 88 179 124 222 190 162 155 22 200 254 174 94 18 13 254 166 99 124 178 141 141 99 144 72 110 111 26 35 107 107 239 225 228 245 232 237 167 55 8 140 84 161 140 85 100 138 138 89 134 67 20 253 244 241 57 153 113 198 173 73 6 234 86 82 79 234 105 115 136 50 188 2 247 161 140 89 131 131 9 226 226 208 180 63 13 57 56 70 210 86 26 193 58 74 86 154 47 227 191 13 13 98 104 39 230 179 53 0 116 209 185 154 3 101 147 90 162 170 235 25 76 50 151 63 32 106 30 137 63 142 133 247 220 155 124 213 25 212 105 219 228 49 237 162 78 88 123 108 194 186 184 36 77 148 6 64 5 165 187 206 9 107 79 183 236 137 167 181 237 213 14 110 165 211 112 129 43 71 96 113 197 68 13 151 240 72 147 135 5 124 208 195 62 233 82 216 194 20 209 133 196 206 51 127 254 51 230 132 78 211 142 172 55 158 204 169 58 9 196 75 187 134 116 153 220 163 38 209 163 103 177 151 53 255 113 123 173 101)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 37 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 221 246 244 72 216 99 26 110 131 244 116 189 115 243 72 164 181 14 149 172 92 232 204 105 181 134 77 11 107 205 48 31 20 39 29 225 210 75 42 20 19 77 139 223 210 43 56 119 51 155 153 154 82 216 252 10 27 103 187 53 101 152 151 7 193 74 46 199 115 220 82 67 48 69 246 60 164 103 193 161 180 198 162 52 200 182 27 232 105 51 153 190 8 66 86 125 210 213 14 209 161 56 214 79 95 60 136 162 178 39 3 208 240 208 37 160 217 95 62 28 39 215 68 127 102 25 127 164 50 196 72 27 234 166 134 182 114 91 104 143 122 40 135 31 18 57 211 207 8 28 213 22 225 248 105 200 61 145 39 224 201 163 255 191 124 206 247 73 36 244 114 165 157 120 135 100 12 230 95 28 34 76 99 103 169 238 99 53 77 116 130 18 133 109 141 129 254 168 120 69 185 48 36 62 35 121 72 163 89 43 114 222 155 100 221 42 110 76 253 206 159 195 107 175 164 201 219 157 2 174 175 63 140 142 2 233 199 68 211 94 175 50 29 19 69 125 52 19 88 92 155 170 38 246 250 190 180 64 12 64 142 120 185 220 166 253 174 169 90 94 129 164 89 107 75 235 99 169 98 127 29 169 66 60 41 248 104 54 255 153 114 158 51 223 85 141 138 94 48 224 221 119 215 121 70 238 100 33 244 38 234 65 165 178 44 171 154 49 53 135 14 219 60 61 248 123 212 177 57 79 132 157 138 105 94 78 246 106 214 146 155 109 136 167 77 220 112 217 210 99 59 153 127 102 122 1 64 217 148 228 206 249 136 195 87 201 78 1 10 29 115 3 154 196 167 92 164 185 251 189 173 71 31 29 125 37 79 194 39 158 247 116 243 7 160 7 76 80 169 128 41 214 143 18 132 184 158 229 161 82 4 0 52 221 68 236 143 99 96 21 160 172 140 70 73 148 172 74 97 250 139 90 77 193 175 123 252 97 107 180 180 34 62 62 163 0 59 82 52 179 150 179 165 11 131 37 82 193 1 180 1 82 87 6 38 64 114 130 68 41 227 153 19 173 83 81 153 203 112 232 111 77 23 253 221 177 85 233 239 239 128 167 150 153 77 55 237 145 246 153 8 194 28 34 229 202 164 234 54 122 61 178 242 52 170 234 240 83 95 45 5 122 223 51 167 183 55 146 29 247 131 3 234 37 33 63 77 167 201) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 1 1)) (list 1 (list 1 3 2)) (list 1 (list 4 1)))))) :raw-genotype (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 95 140 66 164 178 194 11 17 225 165 165 151 92 86 162 129 121 184 159 65 119 102 197 240 53 147 200 146 179 58 124 60 203 241 166 91 149 139 74 40 205 92 218 110 60 137 0 127 120 240 245 55 139 72 155 89 53 76 15 87 152 93 9 116 1 115 202 146 43 129 250 48 143 56 176 241 15 141 144 200 20 163 12 210 219 71 65 244 27 39 39 184 205 34 255 237 18 30 47 152 141 15 66 4 154 67 95 37 226 154 41 103 56 128 80 44 43 115 238 135 234 195 197 16 9 116 147 210 245 82 54 113 42 243 123 219 140 36 9)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 3 2)) (list 2 (list 1 1 1 1)) (list 1 (list 3 1 1)) (list 2 (list 1 1 1)))))) :raw-genotype (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 182 228 162 19 234 127 223 43 115 130 230 21 131 208 254 57 55 127 117 209 133 48 86 80 15 9 75 108 207 13 88 232 114 109 1 70 151 16 68 171 20 73 198 217 104 199 124 4 134 38 248 245 24 204 158 86 15 20 50 22 239 111 32 150 47 221 92 56 199 183 59 5 157 203 122 74 36 240 101 26 95 158 229 254 201 8 8 156 222 162 207 215 251 230 27 230 147 83 178 235 108 105 160 135 152 220 22 149 168 96 173 242 212 229 200 108 8 179 21 112 175 234 180 35 166 167 38 99 86 96 185 152 199 199 83 114 204 198 53 16 189 179 78 83 185 141 32 140 196 14 246 171 18 166 6 48 105 218 12 168 222 202 186 29 96 64 39 160 85 140 148 119 35 102 92 254 90 43 216 18 0 111 254 62 131 84 228 41 147 155 108 29 193 166 52 216 180 77 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 2)) (list 1 (list 3 2 1)) (list 1 (list 1 2)) (list 1 (list 1 1 3)) (list 1 (list 1 3)))))) :raw-genotype (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 175 100 214 14 101 171 82 43 92 22 148 111 169 20 251 139 98 81 58 246 216 87 62 215 250 77 51 205 7 80 133 135 238 166 113 24 20 59 16 184 53 101 139 117 197 93 152 162 131 13 131 184 9 110 210 84 126 129 77 191 143 59 20 127 249 250 30 217 88 37 6 212 71 121 144 98 174 169 80 205 182 76 198 225 194 155 59 161 107 56 237 149 55 190 11 174 4 7 39 11 67 244 80 195 209 128 234 50 109 145 33 238 183 174 36 114 210 88 169 0 37 2 101 106 250 36 12 74 16 78 226 24 225 238 164 5 118 7 54 109 149 76 109 93 241 252 161 186 49 188 80 25 119 239 93 213 62 105 214 246 241 104 220 38 109 91 22 159 34 21 140 139 101 82 62 123 84 199 209 100 119 34 8 65 74 246 9 91 1 27 23 41 75 251 34 177 191 157 108)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 1 27 73 91 39 210 228 65 216 65 232 104 134 23 232 38 239 188 222 238 9 233 213 245 95 69 30 45 99 34 140 189 144 3 49 6 177 194 154 30 177 94 110 221 1 134 93 5 184 223 131 234 95 205 192 173 78 142 47 133 168 221 246 244 72 216 99 26 110 131 244 116 189 115 243 72 164 181 14 149 172 92 232 204 105 181 134 77 11 107 205 48 31 20 39 29 225 210 75 42 20 19 77 139 223 210 43 56 119 51 155 153 154 82 216 252 10 27 103 187 53 101 152 151 7 193 74 46 199 115 220 82 67 48 69 246 60 164 103 193 161 180 198 162 52 200 182 27 232 105 51 153 190 8 66 86 125 210 213 14 209 161 56 214 79 95 60 136 162 178 39 3 208 240 208 37 160 217 95 62 28 39 215 68 127 102 25 127 164 50 196 72 27 234 166 134 182 114 91 104 143 122 40 135 31 18 57 211 207 8 28 213 22 225 248 105 200 61 145 39 224 201 163 255 191 124 206 247 73 36 244 114 165 157 120 135 100 12 230 95 28 34 76 99 103 169 238 99 53 77 116 130 18 133 109 141 129 254 168 120 69 185 48 36 62 35 121 72 163 89 43 114 222 155 100 221 42 110 76 253 206 159 195 107 175 164 201 219 157 2 174 175 63 140 142 2 233 199 68 211 94 175 50 29 19 69 125 52 19 88 92 155 170 38 246 250 190 180 64 12 64 142 120 185 220 166 253 174 169 90 94 129 164 89 107 75 235 99 169 98 127 29 169 66 60 41 248 104 54 255 153 114 158 51 223 85 141 138 94 48 224 221 119 215 121 70 238 100 33 244 38 234 65 165 178 44 171 154 49 53 135 14 219 60 61 248 123 212 177 57 79 132 157 138 105 94 78 246 106 214 146 155 109 136 167 77 220 112 217 210 99 59 153 127 102 122 1 64 217 148 228 206 249 136 195 87 201 78 1 10 29 115 3 154 196 167 92 164 185 251 189 173 71 31 29 125 37 79 194 39 158 247 116 243 7 160 7 76 80 169 128 41 214 143 18 132 184 158 229 161 82 4 0 52 221 68 236 143 99 96 21 160 172 140 70 73 148 172 74 97 250 139 90 77 193 175 123 252 97 107 180 180 34 62 62 163 0 59 82 52 179 150 179 165 11 131 37 82 193 1 180 1 82 87 6 38 64 114 130 68 41 227 153 19 173 83 81 153 203 112 232 111 77 23 253 221 177 85 233 239 239 128 167 150 153 77 55 237 145 246 153 8 194 28 34 229 202 164 234 54 122 61 178 242 52 170 234 240 83 95 45 5 122 223 51 167 183 55 146 29 247 131 3 234 37 33 63 77 167 201)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 16) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (1 2 1 1)) (1 (1 3 2)) (1 (4 1)))))) ((4 4) ((4 ((1 (3 2)) (2 (1 1 1 1)) (1 (3 1 1)) (2 (1 1 1)))))) ((4 4) ((4 ((1 (1)) (1 (3 2 1)) (1 (1 2)) (1 (1 1 3)) (1 (1 3))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1067)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (444)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (160)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (480)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (600)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.090014 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 560 85) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
