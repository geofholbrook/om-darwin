; OM File Header - Saved 2015/03/09 23:49:05
; (6.090014 :patc (om-make-point 10 110) (om-make-point 76 22) (om-make-point 844 590) "" 183 0 "2015/02/25 19:31:33" "2015/03/09 23:49:05")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-simple-tree" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 454 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 293 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 327 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 23 206 214 55 37 60 180 99 246 146 63 139 247 235 66 206 52 144 215 91 60 55 74 41 0 65 250 80 171 59 47 158 157 83 21 147 210 113 212 71 104 69 30 214 138 197 214 230 23 254 125 235 33 133 181 107 43 76 186 16 39 55 61 252 132 171 205 119 7 166 26 169 213 216 41 88 207 224 109 108 72 10 187 100 102 219 153 217 192 96 75 122 122 99 17 28 246 255 228 148 184 83 131 70 135 166 133 235 146 4 4 14 26 91 161 179 162 15 162 163 206 91 157 94 111 46 29 95 207 221 188 114 115 114 86 38 22 5 25 125 168 125 99 46 166 23 218 212 63 59 87 208 193 82 44 200 247 158 173 190 140 6 17 174 131 115 74 3 184 141 118 78 223 250 158 30 239 140 55 37 189 14 141 107 196 131 33 245 201 112 27 191 168 245 248 92 95 206 198 6 102 11 102 248 103 95 44 22 177 233 236 105 31 217 75 176 6 166 223 210 24 201 192 245 131 182 215 99 253 76 5 61 34 19 38 45 104 182 116 139 201 214 157 138 228 129 157 120 174 53 196 203 18 13 163 47 121 30 150 199 228 138 60 180 196 6 169 189 204 77 128 84 20 150 229 219 207 152 178 47 247 249 196 48 145 121 214 215 44 216 37 132 193 11 31 234 53 113 193 80 55 44 223 44 189 145 68 158 30 7 82 76 110 236 106 77 73 211 176 59 28 128 30 134 172 53 66 85 120 33 111 184 185 131 67 105 178 156 222 194 169 135 105 244 165 162 71 185 84 46 138 233 226 191 239 231 98 113 38 69 224 126 226 176 219 181 100 147 14 150 2 39 222 199 5 98 223 117 147 151 179 125 189 3 237 154 107 94 250 205 71 170 116 198 210 103 48 251 9 131 190 78 235 225 7 166 229 174 139 84 192 109 245 140 138 242 168 132 66 231 95 158 145 86 80 20 193 208 171 73 141 2 233 87 34 116 73 141 225 68 239 160 227 46 229 59 202 24 230 40 2 166 84 16 194 55 68 3 125 239 116 143 207 69 98 80 37 113 199 190 192 108 106 235 7 242 161 24 137 90 198 77 156 191 30 209 46 187 114 153 188 86 159 6 93 12 206 55 215 222 226 161 64 238 79 68 19 48 147 101 255 119 22 173 202 48 213 162 110 32 94 74 165 162 97 174 90 58 77 5 211 173 238 89 61 101 73 137 78 168 208 41 148 247 6 251 65 103 11 102 10 132 222 177 143 143 155 45 180 143 156 126 61 53 42 13 15 181 199 115 62 173 214 42 226 42 86 51 242 73 135 240 222 163 83 234 37 133 76 116 0 80 193 230 125 255 192 219 50 83) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 23 206 214 55 37 60 180 99 246 146 63 139 247 235 66 206 52 144 215 91 60 55 74 41 0 65 250 80 171 59 47 158 157 83 21 147 210 113 212 71 104 69 30 214 138 197 214 230 23 254 125 235 33 133 181 107 43 76 186 16 39 55 61 252 132 171 205 119 7 166 26 169 213 216 41 88 207 224 109 108 72 10 187 100 102 219 153 217 192 96 75 122 122 99 17 28 246 255 228 148 184 83 131 70 135 166 133 235 146 4 4 14 26 91 161 179 162 15 162 163 206 91 157 94 111 46 29 95 207 221 188 114 115 114 86 38 22 5 25 125 168 125 99 46 166 23 218 212 63 59 87 208 193 82 44 200 247 158 173 190 140 6 17 174 131 115 74 3 184 141 118 78 223 250 158 30 239 140 55 37 189 14 141 107 196 131 33 245 201 112 27 191 168 245 248 92 95 206 198 6) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 206 214 55 37 60 180 99 246 146 63 139 247 235 66 206 52 144 215 91 60 55 74 41 0 65 250 80 171 59 47 158 157 83 21 147 210 113 212 71 104 69 30 214 138 197 214 230 23 254 125 235 33 133 181 107 43 76 186 16 39 55 61 252 132 171 205 119 7 166 26 169 213 216 41 88 207 224 109 108 72 10 187 100 102 219 153 217 192 96 75 122 122 99 17 28 246 255 228 148 184 83 131 70 135 166 133 235 146 4 4 14 26 91 161 179 162 15 162 163 206 91 157 94 111 46 29 95 207 221 188 114 115 114 86 38 22 5 25 125 168 125 99 46 166 23 218 212 63 59 87 208 193 82 44 200 247 158 173 190 140 6 17 174 131 115 74 3 184 141 118 78 223 250 158 30 239 140 55 37 189 14 141 107 196 131 33 245 201 112 27 191 168 245 248 92 95 206 198 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 102 11 102 248 103 95 44 22 177 233 236 105 31 217 75 176 6 166 223 210 24 201 192 245 131 182 215 99 253 76 5 61 34 19 38 45 104 182 116 139 201 214 157 138 228 129 157 120 174 53 196 203 18 13 163 47 121 30 150 199 228 138 60 180 196 6 169 189 204 77 128 84 20 150 229 219 207 152 178 47 247 249 196 48 145 121 214 215 44 216 37 132 193 11 31 234 53 113 193 80 55 44 223 44 189 145 68 158 30 7 82 76 110 236 106 77 73 211 176 59 28 128 30 134 172 53 66 85 120 33 111 184 185 131 67 105 178 156 222 194 169 135 105 244 165 162 71 185 84 46 138 233 226 191 239 231 98 113 38 69 224 126 226 176 219 181 100 147 14 150 2 39 222 199 5 98 223 117 147 151 179 125 189 3 237 154 107 94 250 205 71 170 116 198 210 103 48 251 9 131) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 11 102 248 103 95 44 22 177 233 236 105 31 217 75 176 6 166 223 210 24 201 192 245 131 182 215 99 253 76 5 61 34 19 38 45 104 182 116 139 201 214 157 138 228 129 157 120 174 53 196 203 18 13 163 47 121 30 150 199 228 138 60 180 196 6 169 189 204 77 128 84 20 150 229 219 207 152 178 47 247 249 196 48 145 121 214 215 44 216 37 132 193 11 31 234 53 113 193 80 55 44 223 44 189 145 68 158 30 7 82 76 110 236 106 77 73 211 176 59 28 128 30 134 172 53 66 85 120 33 111 184 185 131 67 105 178 156 222 194 169 135 105 244 165 162 71 185 84 46 138 233 226 191 239 231 98 113 38 69 224 126 226 176 219 181 100 147 14 150 2 39 222 199 5 98 223 117 147 151 179 125 189 3 237 154 107 94 250 205 71 170 116 198 210 103 48 251 9 131)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 190 78 235 225 7 166 229 174 139 84 192 109 245 140 138 242 168 132 66 231 95 158 145 86 80 20 193 208 171 73 141 2 233 87 34 116 73 141 225 68 239 160 227 46 229 59 202 24 230 40 2 166 84 16 194 55 68 3 125 239 116 143 207 69 98 80 37 113 199 190 192 108 106 235 7 242 161 24 137 90 198 77 156 191 30 209 46 187 114 153 188 86 159 6 93 12 206 55 215 222 226 161 64 238 79 68 19 48 147 101 255 119 22 173 202 48 213 162 110 32 94 74 165 162 97 174 90 58 77 5 211 173 238 89 61 101 73 137 78 168 208 41 148 247 6 251 65 103 11 102 10 132 222 177 143 143 155 45 180 143 156 126 61 53 42 13 15 181 199 115 62 173 214 42 226 42 86 51 242 73 135 240 222 163 83 234 37 133 76 116 0 80 193 230 125 255 192 219 50 83) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 190 78 235 225 7 166 229 174 139 84 192 109 245 140 138 242 168 132 66 231 95 158 145 86 80 20 193 208 171 73 141 2 233 87 34 116 73 141 225 68 239 160 227 46 229 59 202 24 230 40 2 166 84 16 194 55 68 3 125 239 116 143 207 69 98 80 37 113 199 190 192 108 106 235 7 242 161 24 137 90 198 77 156 191 30 209 46 187 114 153 188 86 159 6 93 12 206 55 215 222 226 161 64 238 79 68 19 48 147 101 255 119 22 173 202 48 213 162 110 32 94 74 165 162 97 174 90 58 77 5 211 173 238 89 61 101 73 137 78 168 208 41 148 247 6 251 65 103 11 102 10 132 222 177 143 143 155 45 180 143 156 126 61 53 42 13 15 181 199 115 62 173 214 42 226 42 86 51 242 73 135 240 222 163 83 234 37 133 76 116 0 80 193 230 125 255 192 219 50 83)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 206 214 55 37 60 180 99 246 146 63 139 247 235 66 206 52 144 215 91 60 55 74 41 0 65 250 80 171 59 47 158 157 83 21 147 210 113 212 71 104 69 30 214 138 197 214 230 23 254 125 235 33 133 181 107 43 76 186 16 39 55 61 252 132 171 205 119 7 166 26 169 213 216 41 88 207 224 109 108 72 10 187 100 102 219 153 217 192 96 75 122 122 99 17 28 246 255 228 148 184 83 131 70 135 166 133 235 146 4 4 14 26 91 161 179 162 15 162 163 206 91 157 94 111 46 29 95 207 221 188 114 115 114 86 38 22 5 25 125 168 125 99 46 166 23 218 212 63 59 87 208 193 82 44 200 247 158 173 190 140 6 17 174 131 115 74 3 184 141 118 78 223 250 158 30 239 140 55 37 189 14 141 107 196 131 33 245 201 112 27 191 168 245 248 92 95 206 198 6 102 11 102 248 103 95 44 22 177 233 236 105 31 217 75 176 6 166 223 210 24 201 192 245 131 182 215 99 253 76 5 61 34 19 38 45 104 182 116 139 201 214 157 138 228 129 157 120 174 53 196 203 18 13 163 47 121 30 150 199 228 138 60 180 196 6 169 189 204 77 128 84 20 150 229 219 207 152 178 47 247 249 196 48 145 121 214 215 44 216 37 132 193 11 31 234 53 113 193 80 55 44 223 44 189 145 68 158 30 7 82 76 110 236 106 77 73 211 176 59 28 128 30 134 172 53 66 85 120 33 111 184 185 131 67 105 178 156 222 194 169 135 105 244 165 162 71 185 84 46 138 233 226 191 239 231 98 113 38 69 224 126 226 176 219 181 100 147 14 150 2 39 222 199 5 98 223 117 147 151 179 125 189 3 237 154 107 94 250 205 71 170 116 198 210 103 48 251 9 131 190 78 235 225 7 166 229 174 139 84 192 109 245 140 138 242 168 132 66 231 95 158 145 86 80 20 193 208 171 73 141 2 233 87 34 116 73 141 225 68 239 160 227 46 229 59 202 24 230 40 2 166 84 16 194 55 68 3 125 239 116 143 207 69 98 80 37 113 199 190 192 108 106 235 7 242 161 24 137 90 198 77 156 191 30 209 46 187 114 153 188 86 159 6 93 12 206 55 215 222 226 161 64 238 79 68 19 48 147 101 255 119 22 173 202 48 213 162 110 32 94 74 165 162 97 174 90 58 77 5 211 173 238 89 61 101 73 137 78 168 208 41 148 247 6 251 65 103 11 102 10 132 222 177 143 143 155 45 180 143 156 126 61 53 42 13 15 181 199 115 62 173 214 42 226 42 86 51 242 73 135 240 222 163 83 234 37 133 76 116 0 80 193 230 125 255 192 219 50 83)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 27 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 40 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 27 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 40 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 27 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 27 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 253 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 32 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 253 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 66 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 66 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 164 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 129 4 123 180 32 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 164 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 114 91 86 239 252 98 129 4 123 180 32 121 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 164 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 98 129 4 123 180 32 121 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 84 191 26 164 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 239 91 86 116 252 98 129 4 123 180 32 121 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 227 209 95 28 171 207 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1)) (list 1 (list 1 1 1 1)) (list 2 (list 2 3)) (list 1 (list 1 1 1 1 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 91 86 239 252 79 51 4 123 180 129 94 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 207 209 95 28 171 227 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 2 2)) (list 1 (list 1 1 1 1 1 1)) (list 1 (list 1 1 1)) (list 1 (list 1 1 3)) (list 1 (list 1 1 2 1)) (list 1 (list 1 1 2 1)))))) :raw-genotype (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 31 128 138 84 191 26 63 203 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 249 84 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 239 91 86 116 252 98 129 4 123 180 32 121 42 139 238 65 37 180 41 205 234 231 26 231 153 3 197 40 70 171 92 174 168 107 2 28 109 145 148 17 217 174 27 96 231 108 170 129 129 199 232 35 221 175 61 112 169 89 43 151 30 185 151 252 117 171 121 222 133 177 142 16 112 55 178 18 29 90 102 136 34 28 255 235 165 67 193 143 156 253 97 211 30 110 37 112 70 87 107 196 63 227 209 95 28 171 207 12 130 49 56 245 40 250 243 217 7 35 231 243 208 75 73 240 95 227 207 83 95 245 41 222 153 192 25 68 251 222 126 76 228 118 143 207 174 30 14 207 8 65 155 182 98 237 29 106 147 120 98 168 193 138 206 23 174 134 249 168 17 231 216 43 40 142 136 173 56 13 201 118 73 183 7 184 181 172 176 112 161 63 165 241 103 36 17 160 154 87 93 86 29 31 128 138 8 11 26 203 164 28 3 29 228 77 180 243 244 40 145 166 231 115 249 172 57 62 51 242 168 18 198 47 111 151 18 101 95 20 79 141 36 95 48 46 13 53 236 228 66 81 66 198 149 92 140 14 37 136 13 127 91 180 229 29 219 255 137 89 210 201 228 87 226 234 175 10 85 58 71 99 187 255 39 109 124 20 142 116 19 240 186 230 24 115 125 65 26 221 23 140 38 45 165 14 67 239 4 214 162 156 153 157 253 57 67 206 88 156 30 27 104 112 96 239 17 254 240 45 158 14 47 220 229 254 88 254 98 176 76 110 42 146 48 88 42 70 9 132 123 51 73 125 37 187 4 20 165 104 65 83 180 36 16 200 45 205 87 101 139 215 222 25 81 102 231 151 27 243 39 163 90 112 243 196 83 238 175 43 39 85 201 59 35 76 69 227 150 55 195 99 114 63 32 143 249 151 235 16 242 195 112 28 152 143 241 73 94 13 16 101 152 42 238 213 139 57 224 35 89 130 45 231 234 119 233 10 15 183 158 76 190 61 140 239 243 43 250 215 128 197 185 154 71 146 229 151 151 120 197 129 162 176 64 131 17 29 137 15 30 69 55 143 139 32 50 113 130 188 36 210 88 232 218 36 221 39 111 136 6 147 30 213 227 131 77 20 172 33 100 175 184 251 82 29 163 116 109 113 14 6 33 126 90 161 119 147 195 208 37 203 170 115 207 253 52 225 244 197 168 222 245 202 42 245 216 66 123 157 114 236 63 175 209 63 147 164 226 183 48 10 115 201 66 164 130 39 71 247 231 241 10 229 250 71 208 81 153 54 29 117 124 2 49 62 117 183 115 129 91 42 235 172 153 234 218 196 115 197 41 221 177 188 233 106 67 224 15 180 76 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 28424) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (1 1 1)) (1 (1 1 1 1)) (2 (2 3)) (1 (1 1 1 1 2)) (1 (2 1 1)))))) ((4 4) ((4 ((1 (1 2 2)) (1 (1 1 1 1 1 1)) (1 (1 1 1)) (1 (1 1 3)) (1 (1 1 2 1)) (1 (1 1 2 1)))))) ((4 4) ((4 ((1 (1 1 1 1)) (1 (1 2 1 1 1)) (1 (1)) (1 (2 1 1)) (1 (2 1 1)) (1 (1 1 1 1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (533)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 642 93) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
