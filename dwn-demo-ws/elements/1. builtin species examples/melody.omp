; OM File Header - Saved 2015/03/05 15:10:30
; (6.090014 :patc (om-make-point 10 60) (om-make-point 94 67) (om-make-point 919 608) "" 183 0 "2015/02/25 14:25:58" "2015/03/05 15:10:30")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "melody" (quote ((let ((box (om-load-boxcall (quote abstraction) "range and rising 2" (om-load-lisp-abspatch "range and rising" 6.090014 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (let ((len (length (d::phenotype spec))))$    (loop for sub on (mapcar 'd::region-pitch (d::phenotype spec))$        for pitch = (car sub)$        for melod = (when (cdr sub)$                      (- (cadr sub) $                         (car sub)))$        for index from 0$$        sum (+ (d::within-M pitch range)$               (if (and melod (<= melod 0)) $                   (* (1+ (- melod))$                      (- len index)) $                 0)$               ))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 347 166) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 63 363) (om-make-point 488 152) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 121 87 192 137 244 144 90 204 128 14 168 131 130 37 93 246 190 65 97 64 162 66 52 50 246 94 153 6 192 131 204 19) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 87 192 137 244 144 90 204 128 14 168 131 130 37 93 246 190 65 97 64 162 66 52 50 246 94 153 6 192 131 204 19)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 546 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 48) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 63) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 63) (list 11/8 1/16 1 62) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 51) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 125 75 115 163 66 213 65 211 207 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 125 75 115 163 66 213 65 211 207 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 551 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 47) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 62) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 60) (list 11/8 1/16 1 61) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 51) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 171 25 115 163 66 213 65 211 207 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 171 25 115 163 66 213 65 211 207 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 552 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 48) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 59) (list 11/16 1/16 1 62) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 61) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 59) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 47) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 12 110 161 212 66 72 26 78 176 79 74 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 12 110 161 212 66 72 26 78 176 79 74 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 554 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 48) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 63) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 59) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 47) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 555 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 47) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 62) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 59) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 47) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 207 207 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 556 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 47) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 50) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 59) (list 11/16 1/16 1 63) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 63) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 60) (list 11/8 1/16 1 62) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 51) (list 29/16 1/16 1 52) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 11 113 65 14 110 161 212 66 72 27 78 176 76 72 24 25 124 125 124 171 75 115 163 66 213 65 211 212 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 11 113 65 14 110 161 212 66 72 27 78 176 76 72 24 25 124 125 124 171 75 115 163 66 213 65 211 212 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 557 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 48) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 62) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 59) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 53) (list 7/4 1/16 1 47) (list 29/16 1/16 1 46) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 12 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 66 207 206 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 12 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 66 207 206 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 558 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 47) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 62) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 62) (list 11/8 1/16 1 59) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 48) (list 29/16 1/16 1 46) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 208 206 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 11 110 161 212 66 74 26 78 176 79 72 24 25 124 125 124 173 23 115 163 66 213 65 208 206 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 559 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 47) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 63) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 63) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 60) (list 11/8 1/16 1 62) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 51) (list 29/16 1/16 1 52) (list 15/8 1/16 1 48) (list 31/16 1/16 1 64)) :raw-genotype (list 245 58 14 113 65 11 110 161 212 66 74 27 78 176 76 72 24 25 124 125 124 171 75 115 163 66 213 65 211 212 12 77) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 11 110 161 212 66 74 27 78 176 76 72 24 25 124 125 124 171 75 115 163 66 213 65 211 212 12 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 560 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 36) (list 1/16 1/16 1 45) (list 1/8 1/16 1 50) (list 3/16 1/16 1 51) (list 1/4 1/16 1 52) (list 5/16 1/16 1 48) (list 3/8 1/16 1 48) (list 7/16 1/16 1 50) (list 1/2 1/16 1 52) (list 9/16 1/16 1 53) (list 5/8 1/16 1 61) (list 11/16 1/16 1 63) (list 3/4 1/16 1 65) (list 13/16 1/16 1 65) (list 7/8 1/16 1 66) (list 15/16 1/16 1 59) (list 1 1/16 1 60) (list 17/16 1/16 1 61) (list 9/8 1/16 1 62) (list 19/16 1/16 1 63) (list 5/4 1/16 1 62) (list 21/16 1/16 1 60) (list 11/8 1/16 1 62) (list 23/16 1/16 1 53) (list 3/2 1/16 1 52) (list 25/16 1/16 1 53) (list 13/8 1/16 1 53) (list 27/16 1/16 1 52) (list 7/4 1/16 1 51) (list 29/16 1/16 1 47) (list 15/8 1/16 1 48) (list 31/16 1/16 1 65)) :raw-genotype (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 171 75 115 163 66 213 65 211 207 12 78) :decoder (list (list 36 84)) :num-operons 32 :range (list 36 84) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 58 14 113 65 12 110 161 212 66 74 27 78 176 79 72 24 25 124 125 124 171 75 115 163 66 213 65 211 207 12 78)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 60) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 802 99) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 758 43) (om-make-point 60 30) (list 1/2 1) "(1/2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TRILLS" (quote make-trills) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 1) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 747 156) (om-make-point 109 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 60 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 602 40) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 591 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 40) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 202 36) (om-make-point 62 30) (list 36 84) "(36 84)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 1 nil 0) (4 0 1 1 nil 0) (0 0 1 2 nil 0) (2 0 3 4 nil 0) (7 0 4 0 nil 0) (8 0 4 1 nil 0) (5 0 6 0 nil 0))) nil 6.090014))
