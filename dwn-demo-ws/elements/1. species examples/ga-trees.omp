; OM File Header - Saved 2015/03/04 16:40:52
; (6.090014 :patc (om-make-point 10 110) (om-make-point 82 22) (om-make-point 911 569) "" 183 0 "2015/02/25 19:31:33" "2015/03/04 16:40:52")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-trees" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 482 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 272 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 357 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 152 78 160 215 178 107 14 163 167 16 156 166 222 63 151 241 198 87 47 249 206 198 89 21 204 201 6 50 79 91 185 133 7 143 4 177 192 94 204 209 164 238 123 24 170 162 30 173 145 208 151 229 255 81 29 87 49 221 99 45 110 111 120 180 140 35 248 233 57 15 117 234 255 144 181 199 170 52 35 250 227 151 126 203 40 253 189 27 39 169 171 153 219 70 142 239 11 205 115 78 82 208 141 179 46 99 204 123 28 20 76 4 14 216 7 76 192 68 123 46 197 92 135 99 69 119 180 192 24 149 39 82 57 72 231 165 88 212 118 191 1 150 87 112 9 34 64 141 5 163 203 231 8 117 166 11 213 156 211 187 160 241 221 23 228 93 126 227 43 140 79 73 30 251 172 102 254 9 80 78 80 149 213 55 24 47 80 44 70 35 59 255 4 14 76 182 84 30 111 32 73 223 85 243 96 188 63 143 213 91 3 226 248 248 161 245 237 99 154 177 156 82 75 215 46 158 19 93 106 165 141 224 173 81 52 141 205 216 15 30 181 200 247 193 143 76 219 62 236 201 177 136 22 175 43 140 166 41 239 139 23 160 243 18 205 217 185 135 237 210 43 81 101 98 38 104 252 2 188 70 60 78 245 190 47 213 191 32 15 72 84 197 227 73 8 45 89 231 247 72 223 250 52 5 255 127 214 222 0 77 200 56 57 225 222 131 62 26 252 52 162 128 53 179 37 133 106 99 165 64 218 4 11 16 116 135 214 156 180 19 219 28 67 234 214 250 150 110 143 153 190 140 55 36 227 5 68 123 136 85 114 146 21 40 228 123 37 183 218 27 174 169 151 244 46 185 89 150 44 203 231 237 250 178 110 25 53 244 241 174 143 118 207 193 132 179 57 26 143 85 46 156 90 128 173 136 235 146 254 58 58 108 56 228 234 99 214 174 153 182 65 70 47 75 74 3 23 161 182 166 237 148 104 7 83 37 224 158 209 241 227 143 167 239 213 167 26 13 137 204 220 210 53 66 196 4 97 213 212 106 139 99 239 29 203 21 39 187 147 127 229 55 101 146 19 125 113 15 78 102 238 119 34 49 82 133 133 210 104 78 157 51 80 214 26 246 57 4 84 26 43 91 239 186 83 244 104 148 75 139 53 63 36 7 190 181 199 57 193 80 43 17 173 170 66 40 33 229 9 231 7 90 217 155 45 155 43 241 7 76 192 147 184 123 176 224 252 24 66 25 32 13 59 33 135 54 140 233 238 31 91 157 151 75 200 247 159 183 160 179 225 125 218 112 58 76 208 51 120 182 10 213 42 66 164 243 38 101 38 58 228 147 186 45 61 111 42 183 252 176) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 152 78 160 215 178 107 14 163 167 16 156 166 222 63 151 241 198 87 47 249 206 198 89 21 204 201 6 50 79 91 185 133 7 143 4 177 192 94 204 209 164 238 123 24 170 162 30 173 145 208 151 229 255 81 29 87 49 221 99 45 110 111 120 180 140 35 248 233 57 15 117 234 255 144 181 199 170 52 35 250 227 151 126 203 40 253 189 27 39 169 171 153 219 70 142 239 11 205 115 78 82 208 141 179 46 99 204 123 28 20 76 4 14 216 7 76 192 68 123 46 197 92 135 99 69 119 180 192 24 149 39 82 57 72 231 165 88 212 118 191 1 150 87 112 9 34 64 141 5 163 203 231 8 117 166 11 213 156 211 187 160 241 221 23 228 93 126 227 43 140 79 73 30 251 172 102 254 9 80 78 80 149 213 55 24 47 80 44 70 35 59 255 4 14 76 182 84 30 111 32) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 152 78 160 215 178 107 14 163 167 16 156 166 222 63 151 241 198 87 47 249 206 198 89 21 204 201 6 50 79 91 185 133 7 143 4 177 192 94 204 209 164 238 123 24 170 162 30 173 145 208 151 229 255 81 29 87 49 221 99 45 110 111 120 180 140 35 248 233 57 15 117 234 255 144 181 199 170 52 35 250 227 151 126 203 40 253 189 27 39 169 171 153 219 70 142 239 11 205 115 78 82 208 141 179 46 99 204 123 28 20 76 4 14 216 7 76 192 68 123 46 197 92 135 99 69 119 180 192 24 149 39 82 57 72 231 165 88 212 118 191 1 150 87 112 9 34 64 141 5 163 203 231 8 117 166 11 213 156 211 187 160 241 221 23 228 93 126 227 43 140 79 73 30 251 172 102 254 9 80 78 80 149 213 55 24 47 80 44 70 35 59 255 4 14 76 182 84 30 111 32)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 73 223 85 243 96 188 63 143 213 91 3 226 248 248 161 245 237 99 154 177 156 82 75 215 46 158 19 93 106 165 141 224 173 81 52 141 205 216 15 30 181 200 247 193 143 76 219 62 236 201 177 136 22 175 43 140 166 41 239 139 23 160 243 18 205 217 185 135 237 210 43 81 101 98 38 104 252 2 188 70 60 78 245 190 47 213 191 32 15 72 84 197 227 73 8 45 89 231 247 72 223 250 52 5 255 127 214 222 0 77 200 56 57 225 222 131 62 26 252 52 162 128 53 179 37 133 106 99 165 64 218 4 11 16 116 135 214 156 180 19 219 28 67 234 214 250 150 110 143 153 190 140 55 36 227 5 68 123 136 85 114 146 21 40 228 123 37 183 218 27 174 169 151 244 46 185 89 150 44 203 231 237 250 178 110 25 53 244 241 174 143 118 207 193 132 179 57 26 143 85) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 73 223 85 243 96 188 63 143 213 91 3 226 248 248 161 245 237 99 154 177 156 82 75 215 46 158 19 93 106 165 141 224 173 81 52 141 205 216 15 30 181 200 247 193 143 76 219 62 236 201 177 136 22 175 43 140 166 41 239 139 23 160 243 18 205 217 185 135 237 210 43 81 101 98 38 104 252 2 188 70 60 78 245 190 47 213 191 32 15 72 84 197 227 73 8 45 89 231 247 72 223 250 52 5 255 127 214 222 0 77 200 56 57 225 222 131 62 26 252 52 162 128 53 179 37 133 106 99 165 64 218 4 11 16 116 135 214 156 180 19 219 28 67 234 214 250 150 110 143 153 190 140 55 36 227 5 68 123 136 85 114 146 21 40 228 123 37 183 218 27 174 169 151 244 46 185 89 150 44 203 231 237 250 178 110 25 53 244 241 174 143 118 207 193 132 179 57 26 143 85)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 46 156 90 128 173 136 235 146 254 58 58 108 56 228 234 99 214 174 153 182 65 70 47 75 74 3 23 161 182 166 237 148 104 7 83 37 224 158 209 241 227 143 167 239 213 167 26 13 137 204 220 210 53 66 196 4 97 213 212 106 139 99 239 29 203 21 39 187 147 127 229 55 101 146 19 125 113 15 78 102 238 119 34 49 82 133 133 210 104 78 157 51 80 214 26 246 57 4 84 26 43 91 239 186 83 244 104 148 75 139 53 63 36 7 190 181 199 57 193 80 43 17 173 170 66 40 33 229 9 231 7 90 217 155 45 155 43 241 7 76 192 147 184 123 176 224 252 24 66 25 32 13 59 33 135 54 140 233 238 31 91 157 151 75 200 247 159 183 160 179 225 125 218 112 58 76 208 51 120 182 10 213 42 66 164 243 38 101 38 58 228 147 186 45 61 111 42 183 252 176) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 46 156 90 128 173 136 235 146 254 58 58 108 56 228 234 99 214 174 153 182 65 70 47 75 74 3 23 161 182 166 237 148 104 7 83 37 224 158 209 241 227 143 167 239 213 167 26 13 137 204 220 210 53 66 196 4 97 213 212 106 139 99 239 29 203 21 39 187 147 127 229 55 101 146 19 125 113 15 78 102 238 119 34 49 82 133 133 210 104 78 157 51 80 214 26 246 57 4 84 26 43 91 239 186 83 244 104 148 75 139 53 63 36 7 190 181 199 57 193 80 43 17 173 170 66 40 33 229 9 231 7 90 217 155 45 155 43 241 7 76 192 147 184 123 176 224 252 24 66 25 32 13 59 33 135 54 140 233 238 31 91 157 151 75 200 247 159 183 160 179 225 125 218 112 58 76 208 51 120 182 10 213 42 66 164 243 38 101 38 58 228 147 186 45 61 111 42 183 252 176)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 152 78 160 215 178 107 14 163 167 16 156 166 222 63 151 241 198 87 47 249 206 198 89 21 204 201 6 50 79 91 185 133 7 143 4 177 192 94 204 209 164 238 123 24 170 162 30 173 145 208 151 229 255 81 29 87 49 221 99 45 110 111 120 180 140 35 248 233 57 15 117 234 255 144 181 199 170 52 35 250 227 151 126 203 40 253 189 27 39 169 171 153 219 70 142 239 11 205 115 78 82 208 141 179 46 99 204 123 28 20 76 4 14 216 7 76 192 68 123 46 197 92 135 99 69 119 180 192 24 149 39 82 57 72 231 165 88 212 118 191 1 150 87 112 9 34 64 141 5 163 203 231 8 117 166 11 213 156 211 187 160 241 221 23 228 93 126 227 43 140 79 73 30 251 172 102 254 9 80 78 80 149 213 55 24 47 80 44 70 35 59 255 4 14 76 182 84 30 111 32 73 223 85 243 96 188 63 143 213 91 3 226 248 248 161 245 237 99 154 177 156 82 75 215 46 158 19 93 106 165 141 224 173 81 52 141 205 216 15 30 181 200 247 193 143 76 219 62 236 201 177 136 22 175 43 140 166 41 239 139 23 160 243 18 205 217 185 135 237 210 43 81 101 98 38 104 252 2 188 70 60 78 245 190 47 213 191 32 15 72 84 197 227 73 8 45 89 231 247 72 223 250 52 5 255 127 214 222 0 77 200 56 57 225 222 131 62 26 252 52 162 128 53 179 37 133 106 99 165 64 218 4 11 16 116 135 214 156 180 19 219 28 67 234 214 250 150 110 143 153 190 140 55 36 227 5 68 123 136 85 114 146 21 40 228 123 37 183 218 27 174 169 151 244 46 185 89 150 44 203 231 237 250 178 110 25 53 244 241 174 143 118 207 193 132 179 57 26 143 85 46 156 90 128 173 136 235 146 254 58 58 108 56 228 234 99 214 174 153 182 65 70 47 75 74 3 23 161 182 166 237 148 104 7 83 37 224 158 209 241 227 143 167 239 213 167 26 13 137 204 220 210 53 66 196 4 97 213 212 106 139 99 239 29 203 21 39 187 147 127 229 55 101 146 19 125 113 15 78 102 238 119 34 49 82 133 133 210 104 78 157 51 80 214 26 246 57 4 84 26 43 91 239 186 83 244 104 148 75 139 53 63 36 7 190 181 199 57 193 80 43 17 173 170 66 40 33 229 9 231 7 90 217 155 45 155 43 241 7 76 192 147 184 123 176 224 252 24 66 25 32 13 59 33 135 54 140 233 238 31 91 157 151 75 200 247 159 183 160 179 225 125 218 112 58 76 208 51 120 182 10 213 42 66 164 243 38 101 38 58 228 147 186 45 61 111 42 183 252 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 23 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 47 146 250 37 247 55 127 199 124 92 243 15 42 3 238 89 198 136 57 35 86 181 82 226 115 119 255 105 115 205 151 175 214 169 27 255 47 50 253 187 176 158 73 146 153 229 158 162 180 112 147 42 203 73 224 106 163 64 248 102 177 198 55 14 145 88 190 158 213 247 106 62 169 182 128 130 157 194 221 26 65 97 217 128 93 230 228 60 117 189 207 7 246 37 240 71 1 20 29 130 98 129 208 177 244 5 75 168 198 80 223 181 181 53 186 188 94 254 218 91 210 189 89 91 235 16 90 172 133 205 69 138 47 251 246 24 16 58 27 68 226 24 208 145 140 98 83 18 0 163 173 155 234 201 238 176 205 169 12 21 135 195 12 52 247 133 72 193 30 15 112 254 127 8 109 167 34 75 155 221 5 186 156 84 10 152 99 244 125 96 211 88 44 182 226 151 218 254 51 134 158 175 223 168 103 55 64 211 136 19 193 40 110 234 223 239 196 22 144 97 72 246 164 175 31 223 41 113 166 231 247 211 176 160 45 40 134 53 249 92 121 134 222 168 203 254 219 213 195 194 77 166 28 125 115 95 129 215 145 191 117 206 230 142 73 6 22 181 223 204 153 217 84 174 238 20 35 34 126 96 2 4 103 94 197 185 62 233 53 64 61 20 199 247 84 218 140 152 223 33 253 85 35 196 81 13 124 68 46 157 108 12 209 254 139 149 221 226 35 148 174 150 2 203 240 254 24 255 251 146 103 80 29 204 14 213 101 235 92 152 34 14 203 238 213 24 146 231 84 242 141 147 113 138 79 116 241 212 38 114 103 160 198 193 122 217 193 211 163 39 198 56 23 35 67 9 140 26 100 241 236 39 111 249 9 24 222 72 231 150 58 144 131 96 90 37 238 51 222 164 172 77 71 224 180 4 108 147 103 82 57 189 190 174 247 37 40 29 159 199 244 179 73 213 19 127 247 215 73 119 33 131 184 44 169 229 29 242 48 64 251 231 176 140 239 217 90 117 219 30 197 124 87 199 49 5 115 139 155 35 96 197 169 79 34 109 74 157 210 129 157 248 189 142 114 10 16 8 26 242 132 114 108 217 230 44 9 78 24 49 188 198 177 221 245 166 62 254 249 233 98 143 207 162 57 234 48 173 95 14 195 165 204 223 38 118 134 70 200 173 74 152 187 229 44 199 97 199 94 60 191 103 40 183 41 64 77 255 94 180 79 24 197 125 84 129 150 11 188 7 7 92 55 168 203 183 134 203 121 55 47 13 21 93 221 106 73 51 169 14 147 2 209 180 168 207 101 176 229 77 44 66 149 109 204 124 133 148 149 137 130 170 108 73 81 233 123 37 35 232) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 47 146 250 37 247 55 127 199 124 92 243 15 42 3 238 89 198 136 57 35 86 181 82 226 115 119 255 105 115 205 151 175 214 169 27 255 47 50 253 187 176 158 73 146 153 229 158 162 180 112 147 42 203 73 224 106 163 64 248 102 177 198 55 14 145 88 190 158 213 247 106 62 169 182 128 130 157 194 221 26 65 97 217 128 93 230 228 60 117 189 207 7 246 37 240 71 1 20 29 130 98 129 208 177 244 5 75 168 198 80 223 181 181 53 186 188 94 254 218 91 210 189 89 91 235 16 90 172 133 205 69 138 47 251 246 24 16 58 27 68 226 24 208 145 140 98 83 18 0 163 173 155 234 201 238 176 205 169 12 21 135 195 12 52 247 133 72 193 30 15 112 254 127 8 109 167 34 75 155 221 5 186 156 84 10 152 99 244 125 96 211 88 44 182 226 151 218 254 51 134) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 47 146 250 37 247 55 127 199 124 92 243 15 42 3 238 89 198 136 57 35 86 181 82 226 115 119 255 105 115 205 151 175 214 169 27 255 47 50 253 187 176 158 73 146 153 229 158 162 180 112 147 42 203 73 224 106 163 64 248 102 177 198 55 14 145 88 190 158 213 247 106 62 169 182 128 130 157 194 221 26 65 97 217 128 93 230 228 60 117 189 207 7 246 37 240 71 1 20 29 130 98 129 208 177 244 5 75 168 198 80 223 181 181 53 186 188 94 254 218 91 210 189 89 91 235 16 90 172 133 205 69 138 47 251 246 24 16 58 27 68 226 24 208 145 140 98 83 18 0 163 173 155 234 201 238 176 205 169 12 21 135 195 12 52 247 133 72 193 30 15 112 254 127 8 109 167 34 75 155 221 5 186 156 84 10 152 99 244 125 96 211 88 44 182 226 151 218 254 51 134)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 158 175 223 168 103 55 64 211 136 19 193 40 110 234 223 239 196 22 144 97 72 246 164 175 31 223 41 113 166 231 247 211 176 160 45 40 134 53 249 92 121 134 222 168 203 254 219 213 195 194 77 166 28 125 115 95 129 215 145 191 117 206 230 142 73 6 22 181 223 204 153 217 84 174 238 20 35 34 126 96 2 4 103 94 197 185 62 233 53 64 61 20 199 247 84 218 140 152 223 33 253 85 35 196 81 13 124 68 46 157 108 12 209 254 139 149 221 226 35 148 174 150 2 203 240 254 24 255 251 146 103 80 29 204 14 213 101 235 92 152 34 14 203 238 213 24 146 231 84 242 141 147 113 138 79 116 241 212 38 114 103 160 198 193 122 217 193 211 163 39 198 56 23 35 67 9 140 26 100 241 236 39 111 249 9 24 222 72 231 150 58 144 131 96 90 37 238 51 222 164) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 158 175 223 168 103 55 64 211 136 19 193 40 110 234 223 239 196 22 144 97 72 246 164 175 31 223 41 113 166 231 247 211 176 160 45 40 134 53 249 92 121 134 222 168 203 254 219 213 195 194 77 166 28 125 115 95 129 215 145 191 117 206 230 142 73 6 22 181 223 204 153 217 84 174 238 20 35 34 126 96 2 4 103 94 197 185 62 233 53 64 61 20 199 247 84 218 140 152 223 33 253 85 35 196 81 13 124 68 46 157 108 12 209 254 139 149 221 226 35 148 174 150 2 203 240 254 24 255 251 146 103 80 29 204 14 213 101 235 92 152 34 14 203 238 213 24 146 231 84 242 141 147 113 138 79 116 241 212 38 114 103 160 198 193 122 217 193 211 163 39 198 56 23 35 67 9 140 26 100 241 236 39 111 249 9 24 222 72 231 150 58 144 131 96 90 37 238 51 222 164)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 172 77 71 224 180 4 108 147 103 82 57 189 190 174 247 37 40 29 159 199 244 179 73 213 19 127 247 215 73 119 33 131 184 44 169 229 29 242 48 64 251 231 176 140 239 217 90 117 219 30 197 124 87 199 49 5 115 139 155 35 96 197 169 79 34 109 74 157 210 129 157 248 189 142 114 10 16 8 26 242 132 114 108 217 230 44 9 78 24 49 188 198 177 221 245 166 62 254 249 233 98 143 207 162 57 234 48 173 95 14 195 165 204 223 38 118 134 70 200 173 74 152 187 229 44 199 97 199 94 60 191 103 40 183 41 64 77 255 94 180 79 24 197 125 84 129 150 11 188 7 7 92 55 168 203 183 134 203 121 55 47 13 21 93 221 106 73 51 169 14 147 2 209 180 168 207 101 176 229 77 44 66 149 109 204 124 133 148 149 137 130 170 108 73 81 233 123 37 35 232) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 172 77 71 224 180 4 108 147 103 82 57 189 190 174 247 37 40 29 159 199 244 179 73 213 19 127 247 215 73 119 33 131 184 44 169 229 29 242 48 64 251 231 176 140 239 217 90 117 219 30 197 124 87 199 49 5 115 139 155 35 96 197 169 79 34 109 74 157 210 129 157 248 189 142 114 10 16 8 26 242 132 114 108 217 230 44 9 78 24 49 188 198 177 221 245 166 62 254 249 233 98 143 207 162 57 234 48 173 95 14 195 165 204 223 38 118 134 70 200 173 74 152 187 229 44 199 97 199 94 60 191 103 40 183 41 64 77 255 94 180 79 24 197 125 84 129 150 11 188 7 7 92 55 168 203 183 134 203 121 55 47 13 21 93 221 106 73 51 169 14 147 2 209 180 168 207 101 176 229 77 44 66 149 109 204 124 133 148 149 137 130 170 108 73 81 233 123 37 35 232)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 47 146 250 37 247 55 127 199 124 92 243 15 42 3 238 89 198 136 57 35 86 181 82 226 115 119 255 105 115 205 151 175 214 169 27 255 47 50 253 187 176 158 73 146 153 229 158 162 180 112 147 42 203 73 224 106 163 64 248 102 177 198 55 14 145 88 190 158 213 247 106 62 169 182 128 130 157 194 221 26 65 97 217 128 93 230 228 60 117 189 207 7 246 37 240 71 1 20 29 130 98 129 208 177 244 5 75 168 198 80 223 181 181 53 186 188 94 254 218 91 210 189 89 91 235 16 90 172 133 205 69 138 47 251 246 24 16 58 27 68 226 24 208 145 140 98 83 18 0 163 173 155 234 201 238 176 205 169 12 21 135 195 12 52 247 133 72 193 30 15 112 254 127 8 109 167 34 75 155 221 5 186 156 84 10 152 99 244 125 96 211 88 44 182 226 151 218 254 51 134 158 175 223 168 103 55 64 211 136 19 193 40 110 234 223 239 196 22 144 97 72 246 164 175 31 223 41 113 166 231 247 211 176 160 45 40 134 53 249 92 121 134 222 168 203 254 219 213 195 194 77 166 28 125 115 95 129 215 145 191 117 206 230 142 73 6 22 181 223 204 153 217 84 174 238 20 35 34 126 96 2 4 103 94 197 185 62 233 53 64 61 20 199 247 84 218 140 152 223 33 253 85 35 196 81 13 124 68 46 157 108 12 209 254 139 149 221 226 35 148 174 150 2 203 240 254 24 255 251 146 103 80 29 204 14 213 101 235 92 152 34 14 203 238 213 24 146 231 84 242 141 147 113 138 79 116 241 212 38 114 103 160 198 193 122 217 193 211 163 39 198 56 23 35 67 9 140 26 100 241 236 39 111 249 9 24 222 72 231 150 58 144 131 96 90 37 238 51 222 164 172 77 71 224 180 4 108 147 103 82 57 189 190 174 247 37 40 29 159 199 244 179 73 213 19 127 247 215 73 119 33 131 184 44 169 229 29 242 48 64 251 231 176 140 239 217 90 117 219 30 197 124 87 199 49 5 115 139 155 35 96 197 169 79 34 109 74 157 210 129 157 248 189 142 114 10 16 8 26 242 132 114 108 217 230 44 9 78 24 49 188 198 177 221 245 166 62 254 249 233 98 143 207 162 57 234 48 173 95 14 195 165 204 223 38 118 134 70 200 173 74 152 187 229 44 199 97 199 94 60 191 103 40 183 41 64 77 255 94 180 79 24 197 125 84 129 150 11 188 7 7 92 55 168 203 183 134 203 121 55 47 13 21 93 221 106 73 51 169 14 147 2 209 180 168 207 101 176 229 77 44 66 149 109 204 124 133 148 149 137 130 170 108 73 81 233 123 37 35 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 83 69 49 110 166 239 236 204 10 223 228 97 216 187 195 123 169 113 211 94 77 174 71 179 213 10 115 24 129 57 136 123 234 63 45 186 176 171 23 92 221 218 23 251 15 160 202 187 161 127 9 155 101 191 208 47 112 155 98 159 153 229 104 190 190 120 211 204 99 71 100 18 84 103 234 19 6 131 4 124 14 122 32 212 109 227 168 253 167 143 124 16 94 194 241 48 128 229 36 166 79 193 31 143 133 189 57 46 179 217 111 66 241 29 171 67 42 177 238 250 186 240 11 150 37 51 229 238 167 78 52 56 223 237 82 109 63 127 178 15 89 237 161 75 110 29 246 233 36 21 112 142 114 220 135 160 12 225 244 252 186 224 196 52 94 229 60 139 202 59 19 215 5 106 74 98 231 31 199 63 198 226 165 8 22 252 19 75 57 171 202 73 239 34 48 244 13 149 208 6 21 176 101 219 84 53 122 242 133 179 89 26 159 198 3 209 232 102 82 244 211 91 208 82 197 60 226 190 127 222 219 164 124 154 226 131 109 11 231 228 121 159 45 126 39 25 65 231 110 214 205 22 174 225 187 44 255 191 215 162 135 219 105 46 248 73 31 239 30 18 209 212 40 193 233 11 177 13 241 59 161 151 35 101 182 15 170 146 45 164 92 43 251 181 79 201 238 105 52 204 78 218 171 119 100 57 21 151 202 216 147 236 123 254 178 214 32 125 193 57 138 35 234 98 171 127 161 39 36 34 72 215 203 208 143 20 33 25 140 49 41 85 102 46 127 23 93 98 206 106 23 143 86 20 39 165 123 8 120 92 46 35 253 1 234 82 171 127 201 53 132 77 45 80 25 121 0 139 82 252 171 161 128 82 109 212 204 186 227 191 162 228 193 181 118 132 182 73 248 23 234 182 204 21 184 17 168 129 253 115 53 237 57 254 20 230 178 119 110 10 244 121 226 31 58 25 68 10 42 33 129 138 197 51 152 220 128 102 83 136 69 40 239 181 27 198 226 241 143 200 192 117 27 152 116 123 255 175 148 145 14 214 135 184 95 220 238 27 220 200 165 8 56 204 107 148 124 149 183 24 245 160 189 49 87 19 125 146 118 204 155 66 29 47 77 96 187 32 177 66 119 170 169 189 98 52 76 241 135 250 147 37 96 46 82 243 184 5 193 153 16 204 30 65 79 179 245 46 159 226 111 28 179 171 26 2 237 131 76 203 132 83 15 220 105 98 94 128 0 87 235 191 147 177 149 93 86 217 100 33 209 63 84 128 230 54 62 151 180 81 56 7 24 132 209 95 209 214 174 9 208 146 192 181 174 112 51 147 82 64 132 57 157 5 141 109 147 175 200 51) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 83 69 49 110 166 239 236 204 10 223 228 97 216 187 195 123 169 113 211 94 77 174 71 179 213 10 115 24 129 57 136 123 234 63 45 186 176 171 23 92 221 218 23 251 15 160 202 187 161 127 9 155 101 191 208 47 112 155 98 159 153 229 104 190 190 120 211 204 99 71 100 18 84 103 234 19 6 131 4 124 14 122 32 212 109 227 168 253 167 143 124 16 94 194 241 48 128 229 36 166 79 193 31 143 133 189 57 46 179 217 111 66 241 29 171 67 42 177 238 250 186 240 11 150 37 51 229 238 167 78 52 56 223 237 82 109 63 127 178 15 89 237 161 75 110 29 246 233 36 21 112 142 114 220 135 160 12 225 244 252 186 224 196 52 94 229 60 139 202 59 19 215 5 106 74 98 231 31 199 63 198 226 165 8 22 252 19 75 57 171 202 73 239 34 48 244 13 149 208 6) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 83 69 49 110 166 239 236 204 10 223 228 97 216 187 195 123 169 113 211 94 77 174 71 179 213 10 115 24 129 57 136 123 234 63 45 186 176 171 23 92 221 218 23 251 15 160 202 187 161 127 9 155 101 191 208 47 112 155 98 159 153 229 104 190 190 120 211 204 99 71 100 18 84 103 234 19 6 131 4 124 14 122 32 212 109 227 168 253 167 143 124 16 94 194 241 48 128 229 36 166 79 193 31 143 133 189 57 46 179 217 111 66 241 29 171 67 42 177 238 250 186 240 11 150 37 51 229 238 167 78 52 56 223 237 82 109 63 127 178 15 89 237 161 75 110 29 246 233 36 21 112 142 114 220 135 160 12 225 244 252 186 224 196 52 94 229 60 139 202 59 19 215 5 106 74 98 231 31 199 63 198 226 165 8 22 252 19 75 57 171 202 73 239 34 48 244 13 149 208 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 21 176 101 219 84 53 122 242 133 179 89 26 159 198 3 209 232 102 82 244 211 91 208 82 197 60 226 190 127 222 219 164 124 154 226 131 109 11 231 228 121 159 45 126 39 25 65 231 110 214 205 22 174 225 187 44 255 191 215 162 135 219 105 46 248 73 31 239 30 18 209 212 40 193 233 11 177 13 241 59 161 151 35 101 182 15 170 146 45 164 92 43 251 181 79 201 238 105 52 204 78 218 171 119 100 57 21 151 202 216 147 236 123 254 178 214 32 125 193 57 138 35 234 98 171 127 161 39 36 34 72 215 203 208 143 20 33 25 140 49 41 85 102 46 127 23 93 98 206 106 23 143 86 20 39 165 123 8 120 92 46 35 253 1 234 82 171 127 201 53 132 77 45 80 25 121 0 139 82 252 171 161 128 82 109 212 204 186 227 191 162 228 193 181 118 132 182 73 248 23) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 176 101 219 84 53 122 242 133 179 89 26 159 198 3 209 232 102 82 244 211 91 208 82 197 60 226 190 127 222 219 164 124 154 226 131 109 11 231 228 121 159 45 126 39 25 65 231 110 214 205 22 174 225 187 44 255 191 215 162 135 219 105 46 248 73 31 239 30 18 209 212 40 193 233 11 177 13 241 59 161 151 35 101 182 15 170 146 45 164 92 43 251 181 79 201 238 105 52 204 78 218 171 119 100 57 21 151 202 216 147 236 123 254 178 214 32 125 193 57 138 35 234 98 171 127 161 39 36 34 72 215 203 208 143 20 33 25 140 49 41 85 102 46 127 23 93 98 206 106 23 143 86 20 39 165 123 8 120 92 46 35 253 1 234 82 171 127 201 53 132 77 45 80 25 121 0 139 82 252 171 161 128 82 109 212 204 186 227 191 162 228 193 181 118 132 182 73 248 23)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 234 182 204 21 184 17 168 129 253 115 53 237 57 254 20 230 178 119 110 10 244 121 226 31 58 25 68 10 42 33 129 138 197 51 152 220 128 102 83 136 69 40 239 181 27 198 226 241 143 200 192 117 27 152 116 123 255 175 148 145 14 214 135 184 95 220 238 27 220 200 165 8 56 204 107 148 124 149 183 24 245 160 189 49 87 19 125 146 118 204 155 66 29 47 77 96 187 32 177 66 119 170 169 189 98 52 76 241 135 250 147 37 96 46 82 243 184 5 193 153 16 204 30 65 79 179 245 46 159 226 111 28 179 171 26 2 237 131 76 203 132 83 15 220 105 98 94 128 0 87 235 191 147 177 149 93 86 217 100 33 209 63 84 128 230 54 62 151 180 81 56 7 24 132 209 95 209 214 174 9 208 146 192 181 174 112 51 147 82 64 132 57 157 5 141 109 147 175 200 51) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 234 182 204 21 184 17 168 129 253 115 53 237 57 254 20 230 178 119 110 10 244 121 226 31 58 25 68 10 42 33 129 138 197 51 152 220 128 102 83 136 69 40 239 181 27 198 226 241 143 200 192 117 27 152 116 123 255 175 148 145 14 214 135 184 95 220 238 27 220 200 165 8 56 204 107 148 124 149 183 24 245 160 189 49 87 19 125 146 118 204 155 66 29 47 77 96 187 32 177 66 119 170 169 189 98 52 76 241 135 250 147 37 96 46 82 243 184 5 193 153 16 204 30 65 79 179 245 46 159 226 111 28 179 171 26 2 237 131 76 203 132 83 15 220 105 98 94 128 0 87 235 191 147 177 149 93 86 217 100 33 209 63 84 128 230 54 62 151 180 81 56 7 24 132 209 95 209 214 174 9 208 146 192 181 174 112 51 147 82 64 132 57 157 5 141 109 147 175 200 51)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 83 69 49 110 166 239 236 204 10 223 228 97 216 187 195 123 169 113 211 94 77 174 71 179 213 10 115 24 129 57 136 123 234 63 45 186 176 171 23 92 221 218 23 251 15 160 202 187 161 127 9 155 101 191 208 47 112 155 98 159 153 229 104 190 190 120 211 204 99 71 100 18 84 103 234 19 6 131 4 124 14 122 32 212 109 227 168 253 167 143 124 16 94 194 241 48 128 229 36 166 79 193 31 143 133 189 57 46 179 217 111 66 241 29 171 67 42 177 238 250 186 240 11 150 37 51 229 238 167 78 52 56 223 237 82 109 63 127 178 15 89 237 161 75 110 29 246 233 36 21 112 142 114 220 135 160 12 225 244 252 186 224 196 52 94 229 60 139 202 59 19 215 5 106 74 98 231 31 199 63 198 226 165 8 22 252 19 75 57 171 202 73 239 34 48 244 13 149 208 6 21 176 101 219 84 53 122 242 133 179 89 26 159 198 3 209 232 102 82 244 211 91 208 82 197 60 226 190 127 222 219 164 124 154 226 131 109 11 231 228 121 159 45 126 39 25 65 231 110 214 205 22 174 225 187 44 255 191 215 162 135 219 105 46 248 73 31 239 30 18 209 212 40 193 233 11 177 13 241 59 161 151 35 101 182 15 170 146 45 164 92 43 251 181 79 201 238 105 52 204 78 218 171 119 100 57 21 151 202 216 147 236 123 254 178 214 32 125 193 57 138 35 234 98 171 127 161 39 36 34 72 215 203 208 143 20 33 25 140 49 41 85 102 46 127 23 93 98 206 106 23 143 86 20 39 165 123 8 120 92 46 35 253 1 234 82 171 127 201 53 132 77 45 80 25 121 0 139 82 252 171 161 128 82 109 212 204 186 227 191 162 228 193 181 118 132 182 73 248 23 234 182 204 21 184 17 168 129 253 115 53 237 57 254 20 230 178 119 110 10 244 121 226 31 58 25 68 10 42 33 129 138 197 51 152 220 128 102 83 136 69 40 239 181 27 198 226 241 143 200 192 117 27 152 116 123 255 175 148 145 14 214 135 184 95 220 238 27 220 200 165 8 56 204 107 148 124 149 183 24 245 160 189 49 87 19 125 146 118 204 155 66 29 47 77 96 187 32 177 66 119 170 169 189 98 52 76 241 135 250 147 37 96 46 82 243 184 5 193 153 16 204 30 65 79 179 245 46 159 226 111 28 179 171 26 2 237 131 76 203 132 83 15 220 105 98 94 128 0 87 235 191 147 177 149 93 86 217 100 33 209 63 84 128 230 54 62 151 180 81 56 7 24 132 209 95 209 214 174 9 208 146 192 181 174 112 51 147 82 64 132 57 157 5 141 109 147 175 200 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 21 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 108 41 158 125 204 191 205 249 151 106 167 85 170 27 149 149 123 35 184 155 27 179 210 141 211 27 235 3 2 83 180 134 123 238 2 57 144 67 106 104 222 208 166 14 74 160 18 66 38 201 155 251 0 96 242 164 140 129 7 79 16 101 1 74 121 253 186 103 55 167 189 73 129 54 24 179 52 129 121 169 108 10 81 99 25 135 197 103 255 243 247 122 19 39 41 83 220 38 253 212 147 187 207 53 165 78 101 123 123 105 245 130 250 70 138 120 42 115 206 219 224 100 13 60 122 26 184 221 102 26 177 252 228 158 238 6 153 239 147 179 56 55 218 213 93 135 79 163 67 13 187 140 25 133 145 161 111 37 171 231 86 16 46 163 46 94 209 165 19 201 207 182 221 150 110 127 148 207 27 137 223 138 79 112 193 44 135 204 76 215 62 4 94 130 240 20 114 67 220 27 32 192 206 238 69 219 139 72 189 40 61 115 132 39 90 112 176 149 68 208 20 129 48 235 143 134 203 221 75 10 220 142 69 200 82 14 118 204 51 222 30 18 30 235 193 52 73 19 118 225 81 142 230 249 174 7 150 64 85 83 87 125 157 72 79 145 113 232 144 187 197 13 37 33 164 105 41 153 152 28 13 50 158 99 91 43 143 23 227 127 96 94 238 163 43 55 63 145 42 93 228 171 148 238 133 46 75 86 217 150 173 37 214 181 183 109 64 117 134 210 2 20 239 159 112 161 19 166 212 180 127 114 48 203 50 10 83 26 200 107 4 159 183 129 118 77 143 19 206 76 231 101 224 222 86 219 95 32 143 131 101 30 70 156 76 220 89 43 4 252 85 69 212 187 103 246 205 247 77 2 53 53 87 27 159 184 204 25 14 99 128 32 198 192 73 115 114 234 110 28 134 98 210 131 30 190 253 127 16 167 122 48 242 3 135 230 6 229 193 78 67 153 34 132 183 23 87 217 37 245 76 9 244 124 103 39 92 164 135 192 177 218 94 166 27 66 76 119 98 202 75 17 99 106 145 86 80 234 71 26 161 6 210 90 84 144 152 30 201 52 127 71 139 155 86 254 140 21 15 105 65 34 65 152 84 219 80 210 247 193 124 109 187 65 250 103 249 254 25 206 99 134 203 13 111 82 253 190 110 166 34 227 10 150 16 195 21 84 187 139 152 57 153 151 7 20 154 10 170 251 76 131 181 141 38 44 215 168 23 242 164 143 132 91 181 6 84 74 14 1 5 168 22 26 232 61 88 53 157 43 165 215 96 76 179 103 101 75 22 23 95 100 190 144 66 79 179 129 70 108 207 167 215 162 35 229 3 64 143 147 36 192 48 81 8 77 20 157 4 187) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 108 41 158 125 204 191 205 249 151 106 167 85 170 27 149 149 123 35 184 155 27 179 210 141 211 27 235 3 2 83 180 134 123 238 2 57 144 67 106 104 222 208 166 14 74 160 18 66 38 201 155 251 0 96 242 164 140 129 7 79 16 101 1 74 121 253 186 103 55 167 189 73 129 54 24 179 52 129 121 169 108 10 81 99 25 135 197 103 255 243 247 122 19 39 41 83 220 38 253 212 147 187 207 53 165 78 101 123 123 105 245 130 250 70 138 120 42 115 206 219 224 100 13 60 122 26 184 221 102 26 177 252 228 158 238 6 153 239 147 179 56 55 218 213 93 135 79 163 67 13 187 140 25 133 145 161 111 37 171 231 86 16 46 163 46 94 209 165 19 201 207 182 221 150 110 127 148 207 27 137 223 138 79 112 193 44 135 204 76 215 62 4 94 130 240 20 114 67 220 27) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 108 41 158 125 204 191 205 249 151 106 167 85 170 27 149 149 123 35 184 155 27 179 210 141 211 27 235 3 2 83 180 134 123 238 2 57 144 67 106 104 222 208 166 14 74 160 18 66 38 201 155 251 0 96 242 164 140 129 7 79 16 101 1 74 121 253 186 103 55 167 189 73 129 54 24 179 52 129 121 169 108 10 81 99 25 135 197 103 255 243 247 122 19 39 41 83 220 38 253 212 147 187 207 53 165 78 101 123 123 105 245 130 250 70 138 120 42 115 206 219 224 100 13 60 122 26 184 221 102 26 177 252 228 158 238 6 153 239 147 179 56 55 218 213 93 135 79 163 67 13 187 140 25 133 145 161 111 37 171 231 86 16 46 163 46 94 209 165 19 201 207 182 221 150 110 127 148 207 27 137 223 138 79 112 193 44 135 204 76 215 62 4 94 130 240 20 114 67 220 27)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 32 192 206 238 69 219 139 72 189 40 61 115 132 39 90 112 176 149 68 208 20 129 48 235 143 134 203 221 75 10 220 142 69 200 82 14 118 204 51 222 30 18 30 235 193 52 73 19 118 225 81 142 230 249 174 7 150 64 85 83 87 125 157 72 79 145 113 232 144 187 197 13 37 33 164 105 41 153 152 28 13 50 158 99 91 43 143 23 227 127 96 94 238 163 43 55 63 145 42 93 228 171 148 238 133 46 75 86 217 150 173 37 214 181 183 109 64 117 134 210 2 20 239 159 112 161 19 166 212 180 127 114 48 203 50 10 83 26 200 107 4 159 183 129 118 77 143 19 206 76 231 101 224 222 86 219 95 32 143 131 101 30 70 156 76 220 89 43 4 252 85 69 212 187 103 246 205 247 77 2 53 53 87 27 159 184 204 25 14 99 128 32 198 192 73 115 114 234 110 28) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 32 192 206 238 69 219 139 72 189 40 61 115 132 39 90 112 176 149 68 208 20 129 48 235 143 134 203 221 75 10 220 142 69 200 82 14 118 204 51 222 30 18 30 235 193 52 73 19 118 225 81 142 230 249 174 7 150 64 85 83 87 125 157 72 79 145 113 232 144 187 197 13 37 33 164 105 41 153 152 28 13 50 158 99 91 43 143 23 227 127 96 94 238 163 43 55 63 145 42 93 228 171 148 238 133 46 75 86 217 150 173 37 214 181 183 109 64 117 134 210 2 20 239 159 112 161 19 166 212 180 127 114 48 203 50 10 83 26 200 107 4 159 183 129 118 77 143 19 206 76 231 101 224 222 86 219 95 32 143 131 101 30 70 156 76 220 89 43 4 252 85 69 212 187 103 246 205 247 77 2 53 53 87 27 159 184 204 25 14 99 128 32 198 192 73 115 114 234 110 28)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 134 98 210 131 30 190 253 127 16 167 122 48 242 3 135 230 6 229 193 78 67 153 34 132 183 23 87 217 37 245 76 9 244 124 103 39 92 164 135 192 177 218 94 166 27 66 76 119 98 202 75 17 99 106 145 86 80 234 71 26 161 6 210 90 84 144 152 30 201 52 127 71 139 155 86 254 140 21 15 105 65 34 65 152 84 219 80 210 247 193 124 109 187 65 250 103 249 254 25 206 99 134 203 13 111 82 253 190 110 166 34 227 10 150 16 195 21 84 187 139 152 57 153 151 7 20 154 10 170 251 76 131 181 141 38 44 215 168 23 242 164 143 132 91 181 6 84 74 14 1 5 168 22 26 232 61 88 53 157 43 165 215 96 76 179 103 101 75 22 23 95 100 190 144 66 79 179 129 70 108 207 167 215 162 35 229 3 64 143 147 36 192 48 81 8 77 20 157 4 187) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 134 98 210 131 30 190 253 127 16 167 122 48 242 3 135 230 6 229 193 78 67 153 34 132 183 23 87 217 37 245 76 9 244 124 103 39 92 164 135 192 177 218 94 166 27 66 76 119 98 202 75 17 99 106 145 86 80 234 71 26 161 6 210 90 84 144 152 30 201 52 127 71 139 155 86 254 140 21 15 105 65 34 65 152 84 219 80 210 247 193 124 109 187 65 250 103 249 254 25 206 99 134 203 13 111 82 253 190 110 166 34 227 10 150 16 195 21 84 187 139 152 57 153 151 7 20 154 10 170 251 76 131 181 141 38 44 215 168 23 242 164 143 132 91 181 6 84 74 14 1 5 168 22 26 232 61 88 53 157 43 165 215 96 76 179 103 101 75 22 23 95 100 190 144 66 79 179 129 70 108 207 167 215 162 35 229 3 64 143 147 36 192 48 81 8 77 20 157 4 187)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 108 41 158 125 204 191 205 249 151 106 167 85 170 27 149 149 123 35 184 155 27 179 210 141 211 27 235 3 2 83 180 134 123 238 2 57 144 67 106 104 222 208 166 14 74 160 18 66 38 201 155 251 0 96 242 164 140 129 7 79 16 101 1 74 121 253 186 103 55 167 189 73 129 54 24 179 52 129 121 169 108 10 81 99 25 135 197 103 255 243 247 122 19 39 41 83 220 38 253 212 147 187 207 53 165 78 101 123 123 105 245 130 250 70 138 120 42 115 206 219 224 100 13 60 122 26 184 221 102 26 177 252 228 158 238 6 153 239 147 179 56 55 218 213 93 135 79 163 67 13 187 140 25 133 145 161 111 37 171 231 86 16 46 163 46 94 209 165 19 201 207 182 221 150 110 127 148 207 27 137 223 138 79 112 193 44 135 204 76 215 62 4 94 130 240 20 114 67 220 27 32 192 206 238 69 219 139 72 189 40 61 115 132 39 90 112 176 149 68 208 20 129 48 235 143 134 203 221 75 10 220 142 69 200 82 14 118 204 51 222 30 18 30 235 193 52 73 19 118 225 81 142 230 249 174 7 150 64 85 83 87 125 157 72 79 145 113 232 144 187 197 13 37 33 164 105 41 153 152 28 13 50 158 99 91 43 143 23 227 127 96 94 238 163 43 55 63 145 42 93 228 171 148 238 133 46 75 86 217 150 173 37 214 181 183 109 64 117 134 210 2 20 239 159 112 161 19 166 212 180 127 114 48 203 50 10 83 26 200 107 4 159 183 129 118 77 143 19 206 76 231 101 224 222 86 219 95 32 143 131 101 30 70 156 76 220 89 43 4 252 85 69 212 187 103 246 205 247 77 2 53 53 87 27 159 184 204 25 14 99 128 32 198 192 73 115 114 234 110 28 134 98 210 131 30 190 253 127 16 167 122 48 242 3 135 230 6 229 193 78 67 153 34 132 183 23 87 217 37 245 76 9 244 124 103 39 92 164 135 192 177 218 94 166 27 66 76 119 98 202 75 17 99 106 145 86 80 234 71 26 161 6 210 90 84 144 152 30 201 52 127 71 139 155 86 254 140 21 15 105 65 34 65 152 84 219 80 210 247 193 124 109 187 65 250 103 249 254 25 206 99 134 203 13 111 82 253 190 110 166 34 227 10 150 16 195 21 84 187 139 152 57 153 151 7 20 154 10 170 251 76 131 181 141 38 44 215 168 23 242 164 143 132 91 181 6 84 74 14 1 5 168 22 26 232 61 88 53 157 43 165 215 96 76 179 103 101 75 22 23 95 100 190 144 66 79 179 129 70 108 207 167 215 162 35 229 3 64 143 147 36 192 48 81 8 77 20 157 4 187)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 24 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 223 21 112 182 163 138 173 104 74 245 240 240 29 168 93 184 80 201 0 159 52 212 234 225 61 96 87 187 139 224 182 102 131 93 194 204 103 168 207 182 1 109 137 173 177 242 32 213 236 255 100 169 192 174 69 154 205 120 113 243 85 55 0 248 93 121 202 89 79 216 39 181 255 5 221 148 154 38 217 47 209 46 128 55 239 102 125 186 61 152 194 249 167 221 184 110 142 140 71 140 72 174 27 208 146 41 247 157 171 23 137 181 11 183 78 224 221 176 205 9 88 162 221 34 213 210 209 151 6 141 55 211 240 184 136 57 55 135 207 67 45 137 70 242 100 214 203 178 138 65 39 148 212 197 29 158 213 90 203 96 128 108 240 70 18 253 253 27 38 171 145 60 14 48 236 118 162 63 117 167 43 100 104 13 165 197 54 204 133 54 82 175 122 214 107 151 120 222 220 122 10 41 49 110 139 252 227 106 226 214 163 223 3 180 47 232 200 177 171 117 221 249 162 181 186 111 124 187 234 91 14 33 75 74 12 103 28 62 143 141 233 119 252 19 77 81 49 146 218 19 53 202 55 138 43 118 125 122 242 26 35 249 113 191 26 219 24 1 130 27 90 139 190 170 167 48 44 226 50 236 248 175 6 126 9 146 12 102 233 127 31 192 170 231 118 55 166 188 125 127 21 196 198 11 228 210 183 147 191 132 227 101 115 59 227 165 88 53 83 131 212 128 1 50 30 83 203 144 123 231 193 163 182 209 93 34 65 97 174 236 67 187 110 85 159 195 220 7 201 4 56 57 102 64 184 122 151 106 8 21 26 65 173 199 158 211 200 218 166 129 97 0 89 189 15 230 65 234 154 236 55 154 144 1 2 80 127 111 50 236 29 9 49 79 69 20 45 100 135 6 200 163 181 59 212 201 105 68 10 251 8 156 246 50 35 116 252 12 180 0 46 99 172 75 6 183 150 145 216 81 135 246 149 246 211 146 196 38 118 78 141 37 52 28 130 183 126 85 252 170 190 62 218 141 192 58 171 16 102 141 145 188 90 136 45 208 18 180 220 242 83 10 96 192 108 61 59 13 64 100 168 247 101 226 67 80 31 35 165 166 120 2 104 163 151 133 244 136 191 242 139 151 98 82 183 165 188 208 18 89 208 183 12 7 147 38 253 31 178 198 156 117 206 125 234 108 178 121 17 251 11 31 153 54 95 5 110 119 105 79 64 215 107 66 239 210 231 143 5 57 109 155 188 255 170 50 152 179 188 19 53 59 97 153 169 36 80 246 101 13 140 38 237 53 57 49 205 39 30 4 101 55 36 48 72 130 52 223 131 85 100 222 118 221 102 196 162 125 32 159) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 223 21 112 182 163 138 173 104 74 245 240 240 29 168 93 184 80 201 0 159 52 212 234 225 61 96 87 187 139 224 182 102 131 93 194 204 103 168 207 182 1 109 137 173 177 242 32 213 236 255 100 169 192 174 69 154 205 120 113 243 85 55 0 248 93 121 202 89 79 216 39 181 255 5 221 148 154 38 217 47 209 46 128 55 239 102 125 186 61 152 194 249 167 221 184 110 142 140 71 140 72 174 27 208 146 41 247 157 171 23 137 181 11 183 78 224 221 176 205 9 88 162 221 34 213 210 209 151 6 141 55 211 240 184 136 57 55 135 207 67 45 137 70 242 100 214 203 178 138 65 39 148 212 197 29 158 213 90 203 96 128 108 240 70 18 253 253 27 38 171 145 60 14 48 236 118 162 63 117 167 43 100 104 13 165 197 54 204 133 54 82 175 122 214 107 151 120 222 220 122) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 223 21 112 182 163 138 173 104 74 245 240 240 29 168 93 184 80 201 0 159 52 212 234 225 61 96 87 187 139 224 182 102 131 93 194 204 103 168 207 182 1 109 137 173 177 242 32 213 236 255 100 169 192 174 69 154 205 120 113 243 85 55 0 248 93 121 202 89 79 216 39 181 255 5 221 148 154 38 217 47 209 46 128 55 239 102 125 186 61 152 194 249 167 221 184 110 142 140 71 140 72 174 27 208 146 41 247 157 171 23 137 181 11 183 78 224 221 176 205 9 88 162 221 34 213 210 209 151 6 141 55 211 240 184 136 57 55 135 207 67 45 137 70 242 100 214 203 178 138 65 39 148 212 197 29 158 213 90 203 96 128 108 240 70 18 253 253 27 38 171 145 60 14 48 236 118 162 63 117 167 43 100 104 13 165 197 54 204 133 54 82 175 122 214 107 151 120 222 220 122)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 10 41 49 110 139 252 227 106 226 214 163 223 3 180 47 232 200 177 171 117 221 249 162 181 186 111 124 187 234 91 14 33 75 74 12 103 28 62 143 141 233 119 252 19 77 81 49 146 218 19 53 202 55 138 43 118 125 122 242 26 35 249 113 191 26 219 24 1 130 27 90 139 190 170 167 48 44 226 50 236 248 175 6 126 9 146 12 102 233 127 31 192 170 231 118 55 166 188 125 127 21 196 198 11 228 210 183 147 191 132 227 101 115 59 227 165 88 53 83 131 212 128 1 50 30 83 203 144 123 231 193 163 182 209 93 34 65 97 174 236 67 187 110 85 159 195 220 7 201 4 56 57 102 64 184 122 151 106 8 21 26 65 173 199 158 211 200 218 166 129 97 0 89 189 15 230 65 234 154 236 55 154 144 1 2 80 127 111 50 236 29 9 49 79 69 20 45 100 135 6) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 10 41 49 110 139 252 227 106 226 214 163 223 3 180 47 232 200 177 171 117 221 249 162 181 186 111 124 187 234 91 14 33 75 74 12 103 28 62 143 141 233 119 252 19 77 81 49 146 218 19 53 202 55 138 43 118 125 122 242 26 35 249 113 191 26 219 24 1 130 27 90 139 190 170 167 48 44 226 50 236 248 175 6 126 9 146 12 102 233 127 31 192 170 231 118 55 166 188 125 127 21 196 198 11 228 210 183 147 191 132 227 101 115 59 227 165 88 53 83 131 212 128 1 50 30 83 203 144 123 231 193 163 182 209 93 34 65 97 174 236 67 187 110 85 159 195 220 7 201 4 56 57 102 64 184 122 151 106 8 21 26 65 173 199 158 211 200 218 166 129 97 0 89 189 15 230 65 234 154 236 55 154 144 1 2 80 127 111 50 236 29 9 49 79 69 20 45 100 135 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 200 163 181 59 212 201 105 68 10 251 8 156 246 50 35 116 252 12 180 0 46 99 172 75 6 183 150 145 216 81 135 246 149 246 211 146 196 38 118 78 141 37 52 28 130 183 126 85 252 170 190 62 218 141 192 58 171 16 102 141 145 188 90 136 45 208 18 180 220 242 83 10 96 192 108 61 59 13 64 100 168 247 101 226 67 80 31 35 165 166 120 2 104 163 151 133 244 136 191 242 139 151 98 82 183 165 188 208 18 89 208 183 12 7 147 38 253 31 178 198 156 117 206 125 234 108 178 121 17 251 11 31 153 54 95 5 110 119 105 79 64 215 107 66 239 210 231 143 5 57 109 155 188 255 170 50 152 179 188 19 53 59 97 153 169 36 80 246 101 13 140 38 237 53 57 49 205 39 30 4 101 55 36 48 72 130 52 223 131 85 100 222 118 221 102 196 162 125 32 159) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 163 181 59 212 201 105 68 10 251 8 156 246 50 35 116 252 12 180 0 46 99 172 75 6 183 150 145 216 81 135 246 149 246 211 146 196 38 118 78 141 37 52 28 130 183 126 85 252 170 190 62 218 141 192 58 171 16 102 141 145 188 90 136 45 208 18 180 220 242 83 10 96 192 108 61 59 13 64 100 168 247 101 226 67 80 31 35 165 166 120 2 104 163 151 133 244 136 191 242 139 151 98 82 183 165 188 208 18 89 208 183 12 7 147 38 253 31 178 198 156 117 206 125 234 108 178 121 17 251 11 31 153 54 95 5 110 119 105 79 64 215 107 66 239 210 231 143 5 57 109 155 188 255 170 50 152 179 188 19 53 59 97 153 169 36 80 246 101 13 140 38 237 53 57 49 205 39 30 4 101 55 36 48 72 130 52 223 131 85 100 222 118 221 102 196 162 125 32 159)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 223 21 112 182 163 138 173 104 74 245 240 240 29 168 93 184 80 201 0 159 52 212 234 225 61 96 87 187 139 224 182 102 131 93 194 204 103 168 207 182 1 109 137 173 177 242 32 213 236 255 100 169 192 174 69 154 205 120 113 243 85 55 0 248 93 121 202 89 79 216 39 181 255 5 221 148 154 38 217 47 209 46 128 55 239 102 125 186 61 152 194 249 167 221 184 110 142 140 71 140 72 174 27 208 146 41 247 157 171 23 137 181 11 183 78 224 221 176 205 9 88 162 221 34 213 210 209 151 6 141 55 211 240 184 136 57 55 135 207 67 45 137 70 242 100 214 203 178 138 65 39 148 212 197 29 158 213 90 203 96 128 108 240 70 18 253 253 27 38 171 145 60 14 48 236 118 162 63 117 167 43 100 104 13 165 197 54 204 133 54 82 175 122 214 107 151 120 222 220 122 10 41 49 110 139 252 227 106 226 214 163 223 3 180 47 232 200 177 171 117 221 249 162 181 186 111 124 187 234 91 14 33 75 74 12 103 28 62 143 141 233 119 252 19 77 81 49 146 218 19 53 202 55 138 43 118 125 122 242 26 35 249 113 191 26 219 24 1 130 27 90 139 190 170 167 48 44 226 50 236 248 175 6 126 9 146 12 102 233 127 31 192 170 231 118 55 166 188 125 127 21 196 198 11 228 210 183 147 191 132 227 101 115 59 227 165 88 53 83 131 212 128 1 50 30 83 203 144 123 231 193 163 182 209 93 34 65 97 174 236 67 187 110 85 159 195 220 7 201 4 56 57 102 64 184 122 151 106 8 21 26 65 173 199 158 211 200 218 166 129 97 0 89 189 15 230 65 234 154 236 55 154 144 1 2 80 127 111 50 236 29 9 49 79 69 20 45 100 135 6 200 163 181 59 212 201 105 68 10 251 8 156 246 50 35 116 252 12 180 0 46 99 172 75 6 183 150 145 216 81 135 246 149 246 211 146 196 38 118 78 141 37 52 28 130 183 126 85 252 170 190 62 218 141 192 58 171 16 102 141 145 188 90 136 45 208 18 180 220 242 83 10 96 192 108 61 59 13 64 100 168 247 101 226 67 80 31 35 165 166 120 2 104 163 151 133 244 136 191 242 139 151 98 82 183 165 188 208 18 89 208 183 12 7 147 38 253 31 178 198 156 117 206 125 234 108 178 121 17 251 11 31 153 54 95 5 110 119 105 79 64 215 107 66 239 210 231 143 5 57 109 155 188 255 170 50 152 179 188 19 53 59 97 153 169 36 80 246 101 13 140 38 237 53 57 49 205 39 30 4 101 55 36 48 72 130 52 223 131 85 100 222 118 221 102 196 162 125 32 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 22 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 142 213 244 52 56 209 34 128 161 139 120 47 178 58 125 100 189 237 165 83 196 55 234 6 118 61 185 239 115 82 89 215 161 130 140 208 247 22 80 168 104 124 48 64 118 221 41 168 208 54 138 4 191 27 101 120 118 192 8 202 58 208 75 245 244 97 244 176 92 143 101 189 221 221 202 248 7 109 238 179 123 249 61 142 41 36 152 118 237 196 169 114 223 15 39 89 15 12 110 228 152 152 131 179 131 67 77 70 137 16 236 175 206 115 174 177 90 28 77 112 0 32 64 39 255 66 144 96 13 69 79 248 254 161 42 199 178 60 220 126 180 197 95 198 203 180 8 14 105 233 111 27 181 53 144 152 36 221 74 245 137 34 9 196 177 16 148 62 98 185 106 133 54 225 29 215 119 185 151 102 109 172 2 208 115 3 196 84 58 93 242 160 151 234 59 253 66 227 162 43 195 165 209 88 29 31 135 168 149 92 120 25 167 231 43 187 245 1 174 82 121 226 143 126 17 88 144 254 60 94 31 78 245 224 136 85 233 251 46 248 197 4 142 214 212 47 21 251 147 141 66 31 2 76 17 156 179 224 114 8 132 214 141 35 124 167 125 187 90 208 240 150 61 148 152 230 219 143 173 11 112 114 70 226 247 221 24 94 47 212 166 87 0 234 91 65 34 112 188 12 166 168 160 253 180 101 230 67 240 180 17 17 70 176 219 214 119 128 189 203 239 121 104 118 154 54 58 74 255 204 30 129 97 30 129 186 246 191 205 86 152 29 250 195 33 193 118 132 145 123 108 111 138 44 39 11 190 128 110 93 165 16 70 78 48 11 9 211 156 78 251 19 58 55 94 3 150 159 165 244 186 186 94 115 48 199 175 78 142 195 203 93 29 81 171 89 51 33 36 87 23 43 135 55 38 205 253 94 240 188 14 14 51 40 4 47 153 249 137 64 44 247 245 103 38 154 115 95 45 2 244 143 99 4 202 237 134 119 97 96 170 217 208 241 194 82 132 121 71 204 148 80 38 75 168 142 141 3 21 85 118 191 82 102 231 224 38 236 86 181 20 66 87 214 126 31 64 15 182 41 120 118 130 120 179 225 203 235 172 21 114 207 22 118 236 48 166 111 225 146 149 47 112 68 12 212 160 0 139 89 122 177 42 201 69 215 200 84 25 136 151 205 234 76 69 180 157 226 82 191 64 154 15 163 41 162 77 191 140 171 31 6 52 172 65 185 98 187 162 207 138 195 162 212 49 64 21 111 174 33 95 140 54 122 128 229 216 12 0 59 131 246 234 20 90 111 190 125 133 201 12 146 117 32 206 208 137 37 16 122 89 191 199 46 23 240 72 6 178 121) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 142 213 244 52 56 209 34 128 161 139 120 47 178 58 125 100 189 237 165 83 196 55 234 6 118 61 185 239 115 82 89 215 161 130 140 208 247 22 80 168 104 124 48 64 118 221 41 168 208 54 138 4 191 27 101 120 118 192 8 202 58 208 75 245 244 97 244 176 92 143 101 189 221 221 202 248 7 109 238 179 123 249 61 142 41 36 152 118 237 196 169 114 223 15 39 89 15 12 110 228 152 152 131 179 131 67 77 70 137 16 236 175 206 115 174 177 90 28 77 112 0 32 64 39 255 66 144 96 13 69 79 248 254 161 42 199 178 60 220 126 180 197 95 198 203 180 8 14 105 233 111 27 181 53 144 152 36 221 74 245 137 34 9 196 177 16 148 62 98 185 106 133 54 225 29 215 119 185 151 102 109 172 2 208 115 3 196 84 58 93 242 160 151 234 59 253 66 227 162 43) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 142 213 244 52 56 209 34 128 161 139 120 47 178 58 125 100 189 237 165 83 196 55 234 6 118 61 185 239 115 82 89 215 161 130 140 208 247 22 80 168 104 124 48 64 118 221 41 168 208 54 138 4 191 27 101 120 118 192 8 202 58 208 75 245 244 97 244 176 92 143 101 189 221 221 202 248 7 109 238 179 123 249 61 142 41 36 152 118 237 196 169 114 223 15 39 89 15 12 110 228 152 152 131 179 131 67 77 70 137 16 236 175 206 115 174 177 90 28 77 112 0 32 64 39 255 66 144 96 13 69 79 248 254 161 42 199 178 60 220 126 180 197 95 198 203 180 8 14 105 233 111 27 181 53 144 152 36 221 74 245 137 34 9 196 177 16 148 62 98 185 106 133 54 225 29 215 119 185 151 102 109 172 2 208 115 3 196 84 58 93 242 160 151 234 59 253 66 227 162 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 195 165 209 88 29 31 135 168 149 92 120 25 167 231 43 187 245 1 174 82 121 226 143 126 17 88 144 254 60 94 31 78 245 224 136 85 233 251 46 248 197 4 142 214 212 47 21 251 147 141 66 31 2 76 17 156 179 224 114 8 132 214 141 35 124 167 125 187 90 208 240 150 61 148 152 230 219 143 173 11 112 114 70 226 247 221 24 94 47 212 166 87 0 234 91 65 34 112 188 12 166 168 160 253 180 101 230 67 240 180 17 17 70 176 219 214 119 128 189 203 239 121 104 118 154 54 58 74 255 204 30 129 97 30 129 186 246 191 205 86 152 29 250 195 33 193 118 132 145 123 108 111 138 44 39 11 190 128 110 93 165 16 70 78 48 11 9 211 156 78 251 19 58 55 94 3 150 159 165 244 186 186 94 115 48 199 175 78 142 195 203 93 29 81 171 89 51 33 36 87) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 195 165 209 88 29 31 135 168 149 92 120 25 167 231 43 187 245 1 174 82 121 226 143 126 17 88 144 254 60 94 31 78 245 224 136 85 233 251 46 248 197 4 142 214 212 47 21 251 147 141 66 31 2 76 17 156 179 224 114 8 132 214 141 35 124 167 125 187 90 208 240 150 61 148 152 230 219 143 173 11 112 114 70 226 247 221 24 94 47 212 166 87 0 234 91 65 34 112 188 12 166 168 160 253 180 101 230 67 240 180 17 17 70 176 219 214 119 128 189 203 239 121 104 118 154 54 58 74 255 204 30 129 97 30 129 186 246 191 205 86 152 29 250 195 33 193 118 132 145 123 108 111 138 44 39 11 190 128 110 93 165 16 70 78 48 11 9 211 156 78 251 19 58 55 94 3 150 159 165 244 186 186 94 115 48 199 175 78 142 195 203 93 29 81 171 89 51 33 36 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 23 43 135 55 38 205 253 94 240 188 14 14 51 40 4 47 153 249 137 64 44 247 245 103 38 154 115 95 45 2 244 143 99 4 202 237 134 119 97 96 170 217 208 241 194 82 132 121 71 204 148 80 38 75 168 142 141 3 21 85 118 191 82 102 231 224 38 236 86 181 20 66 87 214 126 31 64 15 182 41 120 118 130 120 179 225 203 235 172 21 114 207 22 118 236 48 166 111 225 146 149 47 112 68 12 212 160 0 139 89 122 177 42 201 69 215 200 84 25 136 151 205 234 76 69 180 157 226 82 191 64 154 15 163 41 162 77 191 140 171 31 6 52 172 65 185 98 187 162 207 138 195 162 212 49 64 21 111 174 33 95 140 54 122 128 229 216 12 0 59 131 246 234 20 90 111 190 125 133 201 12 146 117 32 206 208 137 37 16 122 89 191 199 46 23 240 72 6 178 121) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 43 135 55 38 205 253 94 240 188 14 14 51 40 4 47 153 249 137 64 44 247 245 103 38 154 115 95 45 2 244 143 99 4 202 237 134 119 97 96 170 217 208 241 194 82 132 121 71 204 148 80 38 75 168 142 141 3 21 85 118 191 82 102 231 224 38 236 86 181 20 66 87 214 126 31 64 15 182 41 120 118 130 120 179 225 203 235 172 21 114 207 22 118 236 48 166 111 225 146 149 47 112 68 12 212 160 0 139 89 122 177 42 201 69 215 200 84 25 136 151 205 234 76 69 180 157 226 82 191 64 154 15 163 41 162 77 191 140 171 31 6 52 172 65 185 98 187 162 207 138 195 162 212 49 64 21 111 174 33 95 140 54 122 128 229 216 12 0 59 131 246 234 20 90 111 190 125 133 201 12 146 117 32 206 208 137 37 16 122 89 191 199 46 23 240 72 6 178 121)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 142 213 244 52 56 209 34 128 161 139 120 47 178 58 125 100 189 237 165 83 196 55 234 6 118 61 185 239 115 82 89 215 161 130 140 208 247 22 80 168 104 124 48 64 118 221 41 168 208 54 138 4 191 27 101 120 118 192 8 202 58 208 75 245 244 97 244 176 92 143 101 189 221 221 202 248 7 109 238 179 123 249 61 142 41 36 152 118 237 196 169 114 223 15 39 89 15 12 110 228 152 152 131 179 131 67 77 70 137 16 236 175 206 115 174 177 90 28 77 112 0 32 64 39 255 66 144 96 13 69 79 248 254 161 42 199 178 60 220 126 180 197 95 198 203 180 8 14 105 233 111 27 181 53 144 152 36 221 74 245 137 34 9 196 177 16 148 62 98 185 106 133 54 225 29 215 119 185 151 102 109 172 2 208 115 3 196 84 58 93 242 160 151 234 59 253 66 227 162 43 195 165 209 88 29 31 135 168 149 92 120 25 167 231 43 187 245 1 174 82 121 226 143 126 17 88 144 254 60 94 31 78 245 224 136 85 233 251 46 248 197 4 142 214 212 47 21 251 147 141 66 31 2 76 17 156 179 224 114 8 132 214 141 35 124 167 125 187 90 208 240 150 61 148 152 230 219 143 173 11 112 114 70 226 247 221 24 94 47 212 166 87 0 234 91 65 34 112 188 12 166 168 160 253 180 101 230 67 240 180 17 17 70 176 219 214 119 128 189 203 239 121 104 118 154 54 58 74 255 204 30 129 97 30 129 186 246 191 205 86 152 29 250 195 33 193 118 132 145 123 108 111 138 44 39 11 190 128 110 93 165 16 70 78 48 11 9 211 156 78 251 19 58 55 94 3 150 159 165 244 186 186 94 115 48 199 175 78 142 195 203 93 29 81 171 89 51 33 36 87 23 43 135 55 38 205 253 94 240 188 14 14 51 40 4 47 153 249 137 64 44 247 245 103 38 154 115 95 45 2 244 143 99 4 202 237 134 119 97 96 170 217 208 241 194 82 132 121 71 204 148 80 38 75 168 142 141 3 21 85 118 191 82 102 231 224 38 236 86 181 20 66 87 214 126 31 64 15 182 41 120 118 130 120 179 225 203 235 172 21 114 207 22 118 236 48 166 111 225 146 149 47 112 68 12 212 160 0 139 89 122 177 42 201 69 215 200 84 25 136 151 205 234 76 69 180 157 226 82 191 64 154 15 163 41 162 77 191 140 171 31 6 52 172 65 185 98 187 162 207 138 195 162 212 49 64 21 111 174 33 95 140 54 122 128 229 216 12 0 59 131 246 234 20 90 111 190 125 133 201 12 146 117 32 206 208 137 37 16 122 89 191 199 46 23 240 72 6 178 121)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 24 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 45 219 250 111 79 109 160 239 179 65 0 217 208 116 239 35 220 111 68 20 74 223 236 17 50 35 149 16 225 20 80 143 118 46 20 177 241 17 254 217 105 136 255 91 99 125 75 36 89 91 225 182 206 188 188 81 42 133 2 96 177 239 140 170 136 218 45 215 110 112 2 202 161 247 0 173 168 205 131 77 26 18 67 199 63 27 34 184 240 222 202 127 112 221 53 41 246 91 18 39 26 169 168 119 245 249 151 251 215 115 226 117 226 42 50 97 105 225 179 210 136 235 151 138 173 116 24 236 249 70 165 166 248 49 145 244 109 251 160 132 3 107 194 104 181 24 252 138 169 67 228 86 88 206 192 161 219 8 235 102 148 157 93 120 79 57 74 223 74 93 243 140 246 182 224 69 101 76 78 81 34 215 97 218 68 5 112 130 204 64 78 71 255 121 143 99 122 72 250 127 72 216 252 101 187 185 52 20 199 17 95 212 43 182 219 158 216 7 180 179 146 219 201 167 205 136 93 115 153 121 123 19 97 176 248 4 23 181 228 221 121 56 127 212 41 18 166 70 25 194 237 225 117 250 93 59 172 95 193 208 235 248 164 138 151 85 255 223 237 68 32 34 120 162 117 82 197 4 8 52 188 52 107 102 115 185 235 73 79 5 248 164 40 253 155 176 35 73 123 215 170 80 79 126 35 76 219 111 22 40 245 174 198 202 145 34 163 39 73 122 74 92 198 240 112 113 246 197 195 45 52 28 48 43 106 250 53 247 151 92 20 146 201 79 86 106 26 111 12 168 232 12 170 13 200 130 122 234 29 131 212 6 116 60 137 119 21 34 251 60 18 51 243 100 88 8 211 184 244 235 226 226 70 3 60 144 110 180 225 17 89 244 213 112 71 133 45 167 96 63 212 99 249 140 204 84 175 75 88 240 48 205 46 222 200 221 228 133 16 164 190 130 60 18 119 46 127 50 172 183 32 18 230 29 175 18 36 205 25 116 243 198 135 207 221 48 231 231 117 4 95 85 23 95 232 75 22 61 224 122 124 102 206 229 246 86 255 187 250 196 205 250 22 5 19 155 157 250 194 70 188 18 38 51 134 226 203 21 7 19 223 199 223 67 239 220 140 228 120 205 227 171 189 194 115 123 76 229 202 22 45 68 243 89 69 69 17 212 212 226 227 51 201 169 120 185 216 120 144 231 130 196 218 115 0 7 129 120 203 243 159 233 233 246 20 146 136 187 168 180 4 118 97 81 169 133 48 194 122 254 198 178 189 183 22 45 235 111 215 207 206 124 136 232 91 150 28 82 255 233 154 242 144 175 54 131 145 137 47 242 242 81 154 195 29 115 211 83 172 176) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 45 219 250 111 79 109 160 239 179 65 0 217 208 116 239 35 220 111 68 20 74 223 236 17 50 35 149 16 225 20 80 143 118 46 20 177 241 17 254 217 105 136 255 91 99 125 75 36 89 91 225 182 206 188 188 81 42 133 2 96 177 239 140 170 136 218 45 215 110 112 2 202 161 247 0 173 168 205 131 77 26 18 67 199 63 27 34 184 240 222 202 127 112 221 53 41 246 91 18 39 26 169 168 119 245 249 151 251 215 115 226 117 226 42 50 97 105 225 179 210 136 235 151 138 173 116 24 236 249 70 165 166 248 49 145 244 109 251 160 132 3 107 194 104 181 24 252 138 169 67 228 86 88 206 192 161 219 8 235 102 148 157 93 120 79 57 74 223 74 93 243 140 246 182 224 69 101 76 78 81 34 215 97 218 68 5 112 130 204 64 78 71 255 121 143 99 122 72 250 127) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 219 250 111 79 109 160 239 179 65 0 217 208 116 239 35 220 111 68 20 74 223 236 17 50 35 149 16 225 20 80 143 118 46 20 177 241 17 254 217 105 136 255 91 99 125 75 36 89 91 225 182 206 188 188 81 42 133 2 96 177 239 140 170 136 218 45 215 110 112 2 202 161 247 0 173 168 205 131 77 26 18 67 199 63 27 34 184 240 222 202 127 112 221 53 41 246 91 18 39 26 169 168 119 245 249 151 251 215 115 226 117 226 42 50 97 105 225 179 210 136 235 151 138 173 116 24 236 249 70 165 166 248 49 145 244 109 251 160 132 3 107 194 104 181 24 252 138 169 67 228 86 88 206 192 161 219 8 235 102 148 157 93 120 79 57 74 223 74 93 243 140 246 182 224 69 101 76 78 81 34 215 97 218 68 5 112 130 204 64 78 71 255 121 143 99 122 72 250 127)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 72 216 252 101 187 185 52 20 199 17 95 212 43 182 219 158 216 7 180 179 146 219 201 167 205 136 93 115 153 121 123 19 97 176 248 4 23 181 228 221 121 56 127 212 41 18 166 70 25 194 237 225 117 250 93 59 172 95 193 208 235 248 164 138 151 85 255 223 237 68 32 34 120 162 117 82 197 4 8 52 188 52 107 102 115 185 235 73 79 5 248 164 40 253 155 176 35 73 123 215 170 80 79 126 35 76 219 111 22 40 245 174 198 202 145 34 163 39 73 122 74 92 198 240 112 113 246 197 195 45 52 28 48 43 106 250 53 247 151 92 20 146 201 79 86 106 26 111 12 168 232 12 170 13 200 130 122 234 29 131 212 6 116 60 137 119 21 34 251 60 18 51 243 100 88 8 211 184 244 235 226 226 70 3 60 144 110 180 225 17 89 244 213 112 71 133 45 167 96 63) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 72 216 252 101 187 185 52 20 199 17 95 212 43 182 219 158 216 7 180 179 146 219 201 167 205 136 93 115 153 121 123 19 97 176 248 4 23 181 228 221 121 56 127 212 41 18 166 70 25 194 237 225 117 250 93 59 172 95 193 208 235 248 164 138 151 85 255 223 237 68 32 34 120 162 117 82 197 4 8 52 188 52 107 102 115 185 235 73 79 5 248 164 40 253 155 176 35 73 123 215 170 80 79 126 35 76 219 111 22 40 245 174 198 202 145 34 163 39 73 122 74 92 198 240 112 113 246 197 195 45 52 28 48 43 106 250 53 247 151 92 20 146 201 79 86 106 26 111 12 168 232 12 170 13 200 130 122 234 29 131 212 6 116 60 137 119 21 34 251 60 18 51 243 100 88 8 211 184 244 235 226 226 70 3 60 144 110 180 225 17 89 244 213 112 71 133 45 167 96 63)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 212 99 249 140 204 84 175 75 88 240 48 205 46 222 200 221 228 133 16 164 190 130 60 18 119 46 127 50 172 183 32 18 230 29 175 18 36 205 25 116 243 198 135 207 221 48 231 231 117 4 95 85 23 95 232 75 22 61 224 122 124 102 206 229 246 86 255 187 250 196 205 250 22 5 19 155 157 250 194 70 188 18 38 51 134 226 203 21 7 19 223 199 223 67 239 220 140 228 120 205 227 171 189 194 115 123 76 229 202 22 45 68 243 89 69 69 17 212 212 226 227 51 201 169 120 185 216 120 144 231 130 196 218 115 0 7 129 120 203 243 159 233 233 246 20 146 136 187 168 180 4 118 97 81 169 133 48 194 122 254 198 178 189 183 22 45 235 111 215 207 206 124 136 232 91 150 28 82 255 233 154 242 144 175 54 131 145 137 47 242 242 81 154 195 29 115 211 83 172 176) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 212 99 249 140 204 84 175 75 88 240 48 205 46 222 200 221 228 133 16 164 190 130 60 18 119 46 127 50 172 183 32 18 230 29 175 18 36 205 25 116 243 198 135 207 221 48 231 231 117 4 95 85 23 95 232 75 22 61 224 122 124 102 206 229 246 86 255 187 250 196 205 250 22 5 19 155 157 250 194 70 188 18 38 51 134 226 203 21 7 19 223 199 223 67 239 220 140 228 120 205 227 171 189 194 115 123 76 229 202 22 45 68 243 89 69 69 17 212 212 226 227 51 201 169 120 185 216 120 144 231 130 196 218 115 0 7 129 120 203 243 159 233 233 246 20 146 136 187 168 180 4 118 97 81 169 133 48 194 122 254 198 178 189 183 22 45 235 111 215 207 206 124 136 232 91 150 28 82 255 233 154 242 144 175 54 131 145 137 47 242 242 81 154 195 29 115 211 83 172 176)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 219 250 111 79 109 160 239 179 65 0 217 208 116 239 35 220 111 68 20 74 223 236 17 50 35 149 16 225 20 80 143 118 46 20 177 241 17 254 217 105 136 255 91 99 125 75 36 89 91 225 182 206 188 188 81 42 133 2 96 177 239 140 170 136 218 45 215 110 112 2 202 161 247 0 173 168 205 131 77 26 18 67 199 63 27 34 184 240 222 202 127 112 221 53 41 246 91 18 39 26 169 168 119 245 249 151 251 215 115 226 117 226 42 50 97 105 225 179 210 136 235 151 138 173 116 24 236 249 70 165 166 248 49 145 244 109 251 160 132 3 107 194 104 181 24 252 138 169 67 228 86 88 206 192 161 219 8 235 102 148 157 93 120 79 57 74 223 74 93 243 140 246 182 224 69 101 76 78 81 34 215 97 218 68 5 112 130 204 64 78 71 255 121 143 99 122 72 250 127 72 216 252 101 187 185 52 20 199 17 95 212 43 182 219 158 216 7 180 179 146 219 201 167 205 136 93 115 153 121 123 19 97 176 248 4 23 181 228 221 121 56 127 212 41 18 166 70 25 194 237 225 117 250 93 59 172 95 193 208 235 248 164 138 151 85 255 223 237 68 32 34 120 162 117 82 197 4 8 52 188 52 107 102 115 185 235 73 79 5 248 164 40 253 155 176 35 73 123 215 170 80 79 126 35 76 219 111 22 40 245 174 198 202 145 34 163 39 73 122 74 92 198 240 112 113 246 197 195 45 52 28 48 43 106 250 53 247 151 92 20 146 201 79 86 106 26 111 12 168 232 12 170 13 200 130 122 234 29 131 212 6 116 60 137 119 21 34 251 60 18 51 243 100 88 8 211 184 244 235 226 226 70 3 60 144 110 180 225 17 89 244 213 112 71 133 45 167 96 63 212 99 249 140 204 84 175 75 88 240 48 205 46 222 200 221 228 133 16 164 190 130 60 18 119 46 127 50 172 183 32 18 230 29 175 18 36 205 25 116 243 198 135 207 221 48 231 231 117 4 95 85 23 95 232 75 22 61 224 122 124 102 206 229 246 86 255 187 250 196 205 250 22 5 19 155 157 250 194 70 188 18 38 51 134 226 203 21 7 19 223 199 223 67 239 220 140 228 120 205 227 171 189 194 115 123 76 229 202 22 45 68 243 89 69 69 17 212 212 226 227 51 201 169 120 185 216 120 144 231 130 196 218 115 0 7 129 120 203 243 159 233 233 246 20 146 136 187 168 180 4 118 97 81 169 133 48 194 122 254 198 178 189 183 22 45 235 111 215 207 206 124 136 232 91 150 28 82 255 233 154 242 144 175 54 131 145 137 47 242 242 81 154 195 29 115 211 83 172 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 20 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 45 129 85 108 142 251 68 89 7 205 128 42 134 215 149 222 33 140 120 65 209 235 200 247 183 217 221 135 151 59 186 18 138 195 10 213 25 48 65 51 183 142 184 245 40 130 68 228 103 70 179 125 204 90 65 11 24 118 99 22 116 156 60 132 16 228 125 1 23 36 5 243 192 244 78 185 36 56 196 243 83 236 173 177 86 80 16 211 238 82 28 71 101 58 170 78 174 69 227 166 126 168 90 155 159 44 127 176 145 29 237 102 181 50 189 3 118 48 94 146 194 228 189 162 175 79 91 147 124 56 212 203 225 226 187 161 223 112 89 200 66 51 130 20 0 6 9 233 251 171 65 193 27 124 75 137 62 86 66 11 239 11 89 95 34 232 201 50 197 12 97 43 9 213 131 1 57 237 58 141 179 213 137 41 225 36 64 4 163 108 19 55 103 41 111 62 87 151 3 65 248 37 136 94 24 74 70 93 111 203 66 251 174 32 38 114 132 206 96 65 98 53 8 6 134 181 103 239 205 71 152 94 5 207 174 133 169 79 83 170 16 100 230 208 74 63 109 177 36 167 72 102 74 217 88 44 89 12 159 243 149 178 27 221 166 227 128 106 101 225 55 244 7 139 202 129 227 96 180 14 117 142 194 222 74 123 228 119 145 7 19 182 54 225 4 109 113 154 203 34 205 101 52 28 216 40 42 37 211 16 208 159 166 8 77 232 252 227 21 84 26 55 137 176 158 40 37 99 242 171 8 51 196 224 20 54 202 43 52 121 199 142 231 33 74 63 230 129 46 146 214 142 120 44 2 43 20 50 14 244 85 89 76 215 94 134 201 84 142 206 125 17 169 44 170 177 181 178 201 60 89 115 232 2 99 129 157 64 156 255 30 187 4 248 216 55 19 205 253 246 154 74 106 237 73 118 124 143 133 200 84 208 15 18 18 93 68 177 151 155 150 81 132 106 201 125 150 117 32 45 70 57 145 146 41 130 250 20 194 199 78 215 57 151 111 65 110 193 85 205 136 239 42 60 211 221 254 22 205 112 146 83 76 22 43 11 168 129 83 205 7 8 100 37 133 123 194 61 168 123 174 66 146 193 153 133 169 191 52 42 125 105 143 206 86 61 96 30 236 3 173 105 210 123 204 129 235 215 90 136 189 76 249 239 251 228 28 110 104 107 198 111 86 122 114 218 225 243 8 104 155 153 48 58 250 59 131 188 127 163 25 41 159 240 236 193 11 64 50 30 83 38 84 158 70 155 12 119 7 6 169 86 253 161 230 237 233 219 188 239 94 162 136 190 236 195 246 192 13 232 90 252 14 17 241 152 211 32 233 38 94 122 110 1 187 179 93 222 175 183) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 45 129 85 108 142 251 68 89 7 205 128 42 134 215 149 222 33 140 120 65 209 235 200 247 183 217 221 135 151 59 186 18 138 195 10 213 25 48 65 51 183 142 184 245 40 130 68 228 103 70 179 125 204 90 65 11 24 118 99 22 116 156 60 132 16 228 125 1 23 36 5 243 192 244 78 185 36 56 196 243 83 236 173 177 86 80 16 211 238 82 28 71 101 58 170 78 174 69 227 166 126 168 90 155 159 44 127 176 145 29 237 102 181 50 189 3 118 48 94 146 194 228 189 162 175 79 91 147 124 56 212 203 225 226 187 161 223 112 89 200 66 51 130 20 0 6 9 233 251 171 65 193 27 124 75 137 62 86 66 11 239 11 89 95 34 232 201 50 197 12 97 43 9 213 131 1 57 237 58 141 179 213 137 41 225 36 64 4 163 108 19 55 103 41 111 62 87 151 3 65) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 129 85 108 142 251 68 89 7 205 128 42 134 215 149 222 33 140 120 65 209 235 200 247 183 217 221 135 151 59 186 18 138 195 10 213 25 48 65 51 183 142 184 245 40 130 68 228 103 70 179 125 204 90 65 11 24 118 99 22 116 156 60 132 16 228 125 1 23 36 5 243 192 244 78 185 36 56 196 243 83 236 173 177 86 80 16 211 238 82 28 71 101 58 170 78 174 69 227 166 126 168 90 155 159 44 127 176 145 29 237 102 181 50 189 3 118 48 94 146 194 228 189 162 175 79 91 147 124 56 212 203 225 226 187 161 223 112 89 200 66 51 130 20 0 6 9 233 251 171 65 193 27 124 75 137 62 86 66 11 239 11 89 95 34 232 201 50 197 12 97 43 9 213 131 1 57 237 58 141 179 213 137 41 225 36 64 4 163 108 19 55 103 41 111 62 87 151 3 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 248 37 136 94 24 74 70 93 111 203 66 251 174 32 38 114 132 206 96 65 98 53 8 6 134 181 103 239 205 71 152 94 5 207 174 133 169 79 83 170 16 100 230 208 74 63 109 177 36 167 72 102 74 217 88 44 89 12 159 243 149 178 27 221 166 227 128 106 101 225 55 244 7 139 202 129 227 96 180 14 117 142 194 222 74 123 228 119 145 7 19 182 54 225 4 109 113 154 203 34 205 101 52 28 216 40 42 37 211 16 208 159 166 8 77 232 252 227 21 84 26 55 137 176 158 40 37 99 242 171 8 51 196 224 20 54 202 43 52 121 199 142 231 33 74 63 230 129 46 146 214 142 120 44 2 43 20 50 14 244 85 89 76 215 94 134 201 84 142 206 125 17 169 44 170 177 181 178 201 60 89 115 232 2 99 129 157 64 156 255 30 187 4 248 216 55 19 205 253 246) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 248 37 136 94 24 74 70 93 111 203 66 251 174 32 38 114 132 206 96 65 98 53 8 6 134 181 103 239 205 71 152 94 5 207 174 133 169 79 83 170 16 100 230 208 74 63 109 177 36 167 72 102 74 217 88 44 89 12 159 243 149 178 27 221 166 227 128 106 101 225 55 244 7 139 202 129 227 96 180 14 117 142 194 222 74 123 228 119 145 7 19 182 54 225 4 109 113 154 203 34 205 101 52 28 216 40 42 37 211 16 208 159 166 8 77 232 252 227 21 84 26 55 137 176 158 40 37 99 242 171 8 51 196 224 20 54 202 43 52 121 199 142 231 33 74 63 230 129 46 146 214 142 120 44 2 43 20 50 14 244 85 89 76 215 94 134 201 84 142 206 125 17 169 44 170 177 181 178 201 60 89 115 232 2 99 129 157 64 156 255 30 187 4 248 216 55 19 205 253 246)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 154 74 106 237 73 118 124 143 133 200 84 208 15 18 18 93 68 177 151 155 150 81 132 106 201 125 150 117 32 45 70 57 145 146 41 130 250 20 194 199 78 215 57 151 111 65 110 193 85 205 136 239 42 60 211 221 254 22 205 112 146 83 76 22 43 11 168 129 83 205 7 8 100 37 133 123 194 61 168 123 174 66 146 193 153 133 169 191 52 42 125 105 143 206 86 61 96 30 236 3 173 105 210 123 204 129 235 215 90 136 189 76 249 239 251 228 28 110 104 107 198 111 86 122 114 218 225 243 8 104 155 153 48 58 250 59 131 188 127 163 25 41 159 240 236 193 11 64 50 30 83 38 84 158 70 155 12 119 7 6 169 86 253 161 230 237 233 219 188 239 94 162 136 190 236 195 246 192 13 232 90 252 14 17 241 152 211 32 233 38 94 122 110 1 187 179 93 222 175 183) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 74 106 237 73 118 124 143 133 200 84 208 15 18 18 93 68 177 151 155 150 81 132 106 201 125 150 117 32 45 70 57 145 146 41 130 250 20 194 199 78 215 57 151 111 65 110 193 85 205 136 239 42 60 211 221 254 22 205 112 146 83 76 22 43 11 168 129 83 205 7 8 100 37 133 123 194 61 168 123 174 66 146 193 153 133 169 191 52 42 125 105 143 206 86 61 96 30 236 3 173 105 210 123 204 129 235 215 90 136 189 76 249 239 251 228 28 110 104 107 198 111 86 122 114 218 225 243 8 104 155 153 48 58 250 59 131 188 127 163 25 41 159 240 236 193 11 64 50 30 83 38 84 158 70 155 12 119 7 6 169 86 253 161 230 237 233 219 188 239 94 162 136 190 236 195 246 192 13 232 90 252 14 17 241 152 211 32 233 38 94 122 110 1 187 179 93 222 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 129 85 108 142 251 68 89 7 205 128 42 134 215 149 222 33 140 120 65 209 235 200 247 183 217 221 135 151 59 186 18 138 195 10 213 25 48 65 51 183 142 184 245 40 130 68 228 103 70 179 125 204 90 65 11 24 118 99 22 116 156 60 132 16 228 125 1 23 36 5 243 192 244 78 185 36 56 196 243 83 236 173 177 86 80 16 211 238 82 28 71 101 58 170 78 174 69 227 166 126 168 90 155 159 44 127 176 145 29 237 102 181 50 189 3 118 48 94 146 194 228 189 162 175 79 91 147 124 56 212 203 225 226 187 161 223 112 89 200 66 51 130 20 0 6 9 233 251 171 65 193 27 124 75 137 62 86 66 11 239 11 89 95 34 232 201 50 197 12 97 43 9 213 131 1 57 237 58 141 179 213 137 41 225 36 64 4 163 108 19 55 103 41 111 62 87 151 3 65 248 37 136 94 24 74 70 93 111 203 66 251 174 32 38 114 132 206 96 65 98 53 8 6 134 181 103 239 205 71 152 94 5 207 174 133 169 79 83 170 16 100 230 208 74 63 109 177 36 167 72 102 74 217 88 44 89 12 159 243 149 178 27 221 166 227 128 106 101 225 55 244 7 139 202 129 227 96 180 14 117 142 194 222 74 123 228 119 145 7 19 182 54 225 4 109 113 154 203 34 205 101 52 28 216 40 42 37 211 16 208 159 166 8 77 232 252 227 21 84 26 55 137 176 158 40 37 99 242 171 8 51 196 224 20 54 202 43 52 121 199 142 231 33 74 63 230 129 46 146 214 142 120 44 2 43 20 50 14 244 85 89 76 215 94 134 201 84 142 206 125 17 169 44 170 177 181 178 201 60 89 115 232 2 99 129 157 64 156 255 30 187 4 248 216 55 19 205 253 246 154 74 106 237 73 118 124 143 133 200 84 208 15 18 18 93 68 177 151 155 150 81 132 106 201 125 150 117 32 45 70 57 145 146 41 130 250 20 194 199 78 215 57 151 111 65 110 193 85 205 136 239 42 60 211 221 254 22 205 112 146 83 76 22 43 11 168 129 83 205 7 8 100 37 133 123 194 61 168 123 174 66 146 193 153 133 169 191 52 42 125 105 143 206 86 61 96 30 236 3 173 105 210 123 204 129 235 215 90 136 189 76 249 239 251 228 28 110 104 107 198 111 86 122 114 218 225 243 8 104 155 153 48 58 250 59 131 188 127 163 25 41 159 240 236 193 11 64 50 30 83 38 84 158 70 155 12 119 7 6 169 86 253 161 230 237 233 219 188 239 94 162 136 190 236 195 246 192 13 232 90 252 14 17 241 152 211 32 233 38 94 122 110 1 187 179 93 222 175 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 20 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 227 114 164 224 35 22 70 246 11 131 98 93 132 92 198 232 119 60 99 218 82 121 78 31 208 216 61 35 105 148 90 205 103 173 212 98 254 184 94 71 192 170 70 199 57 60 186 234 139 160 42 89 225 226 176 219 81 182 133 22 254 86 84 67 14 165 75 151 4 164 97 199 3 6 173 92 50 209 171 43 243 170 127 148 176 33 172 187 121 175 151 190 4 170 137 175 76 116 151 110 141 151 182 149 212 218 119 148 211 135 14 49 54 173 190 90 0 204 189 241 193 46 116 51 250 127 152 218 137 211 198 166 50 57 38 224 46 84 12 33 122 122 108 114 199 50 55 164 8 73 40 255 106 54 51 201 239 187 182 10 203 160 246 1 136 159 168 118 240 147 164 214 6 27 194 154 172 102 195 110 85 146 147 160 104 158 53 195 199 138 164 70 159 199 80 128 137 52 99 222 157 105 120 158 188 146 10 160 209 254 180 130 64 174 17 65 191 81 10 40 220 217 208 50 15 78 166 215 84 166 76 57 195 36 217 210 67 177 171 93 134 207 239 102 127 22 209 216 158 40 96 136 9 44 216 46 156 121 144 213 189 77 48 134 131 115 168 45 41 18 153 241 52 138 102 228 254 10 61 234 31 103 43 99 155 105 75 167 76 124 114 218 191 246 121 3 123 206 99 22 219 23 138 73 201 179 110 199 65 121 67 199 12 71 153 12 38 1 134 240 118 146 63 239 176 125 125 85 27 82 199 77 184 47 230 117 114 252 167 145 76 47 62 244 4 27 174 166 248 130 208 233 183 221 40 207 187 49 62 39 108 110 212 197 114 5 2 77 180 186 206 249 8 192 97 73 30 25 127 56 174 147 66 192 55 33 125 163 235 119 191 178 97 97 71 55 254 85 79 57 201 37 48 48 101 43 119 20 75 76 94 28 183 232 30 209 53 12 171 3 89 156 237 131 245 43 58 37 142 194 52 102 205 150 204 74 42 224 10 88 139 78 240 208 93 159 230 86 114 115 37 229 17 109 47 242 200 254 177 87 89 32 163 217 172 14 135 69 191 185 141 128 30 42 62 175 90 180 233 243 56 214 229 29 84 11 166 68 220 211 111 161 195 229 11 108 26 14 12 251 156 65 103 171 253 204 46 193 58 154 12 218 132 200 250 229 138 230 26 42 151 81 188 87 206 231 203 39 10 221 29 238 133 1 18 92 175 23 57 149 142 94 6 106 194 93 26 179 244 57 65 26 235 26 138 198 104 191 89 123 71 250 207 42 108 224 238 140 89 255 63 218 83 109 177 62 214 225 148 79 138 128 135 38 23 191 175 111 244 74 59 114 58 212 106 179 115 29 0 53) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 227 114 164 224 35 22 70 246 11 131 98 93 132 92 198 232 119 60 99 218 82 121 78 31 208 216 61 35 105 148 90 205 103 173 212 98 254 184 94 71 192 170 70 199 57 60 186 234 139 160 42 89 225 226 176 219 81 182 133 22 254 86 84 67 14 165 75 151 4 164 97 199 3 6 173 92 50 209 171 43 243 170 127 148 176 33 172 187 121 175 151 190 4 170 137 175 76 116 151 110 141 151 182 149 212 218 119 148 211 135 14 49 54 173 190 90 0 204 189 241 193 46 116 51 250 127 152 218 137 211 198 166 50 57 38 224 46 84 12 33 122 122 108 114 199 50 55 164 8 73 40 255 106 54 51 201 239 187 182 10 203 160 246 1 136 159 168 118 240 147 164 214 6 27 194 154 172 102 195 110 85 146 147 160 104 158 53 195 199 138 164 70 159 199 80 128 137 52 99 222) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 227 114 164 224 35 22 70 246 11 131 98 93 132 92 198 232 119 60 99 218 82 121 78 31 208 216 61 35 105 148 90 205 103 173 212 98 254 184 94 71 192 170 70 199 57 60 186 234 139 160 42 89 225 226 176 219 81 182 133 22 254 86 84 67 14 165 75 151 4 164 97 199 3 6 173 92 50 209 171 43 243 170 127 148 176 33 172 187 121 175 151 190 4 170 137 175 76 116 151 110 141 151 182 149 212 218 119 148 211 135 14 49 54 173 190 90 0 204 189 241 193 46 116 51 250 127 152 218 137 211 198 166 50 57 38 224 46 84 12 33 122 122 108 114 199 50 55 164 8 73 40 255 106 54 51 201 239 187 182 10 203 160 246 1 136 159 168 118 240 147 164 214 6 27 194 154 172 102 195 110 85 146 147 160 104 158 53 195 199 138 164 70 159 199 80 128 137 52 99 222)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 157 105 120 158 188 146 10 160 209 254 180 130 64 174 17 65 191 81 10 40 220 217 208 50 15 78 166 215 84 166 76 57 195 36 217 210 67 177 171 93 134 207 239 102 127 22 209 216 158 40 96 136 9 44 216 46 156 121 144 213 189 77 48 134 131 115 168 45 41 18 153 241 52 138 102 228 254 10 61 234 31 103 43 99 155 105 75 167 76 124 114 218 191 246 121 3 123 206 99 22 219 23 138 73 201 179 110 199 65 121 67 199 12 71 153 12 38 1 134 240 118 146 63 239 176 125 125 85 27 82 199 77 184 47 230 117 114 252 167 145 76 47 62 244 4 27 174 166 248 130 208 233 183 221 40 207 187 49 62 39 108 110 212 197 114 5 2 77 180 186 206 249 8 192 97 73 30 25 127 56 174 147 66 192 55 33 125 163 235 119 191 178 97 97 71 55 254 85 79 57) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 157 105 120 158 188 146 10 160 209 254 180 130 64 174 17 65 191 81 10 40 220 217 208 50 15 78 166 215 84 166 76 57 195 36 217 210 67 177 171 93 134 207 239 102 127 22 209 216 158 40 96 136 9 44 216 46 156 121 144 213 189 77 48 134 131 115 168 45 41 18 153 241 52 138 102 228 254 10 61 234 31 103 43 99 155 105 75 167 76 124 114 218 191 246 121 3 123 206 99 22 219 23 138 73 201 179 110 199 65 121 67 199 12 71 153 12 38 1 134 240 118 146 63 239 176 125 125 85 27 82 199 77 184 47 230 117 114 252 167 145 76 47 62 244 4 27 174 166 248 130 208 233 183 221 40 207 187 49 62 39 108 110 212 197 114 5 2 77 180 186 206 249 8 192 97 73 30 25 127 56 174 147 66 192 55 33 125 163 235 119 191 178 97 97 71 55 254 85 79 57)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 201 37 48 48 101 43 119 20 75 76 94 28 183 232 30 209 53 12 171 3 89 156 237 131 245 43 58 37 142 194 52 102 205 150 204 74 42 224 10 88 139 78 240 208 93 159 230 86 114 115 37 229 17 109 47 242 200 254 177 87 89 32 163 217 172 14 135 69 191 185 141 128 30 42 62 175 90 180 233 243 56 214 229 29 84 11 166 68 220 211 111 161 195 229 11 108 26 14 12 251 156 65 103 171 253 204 46 193 58 154 12 218 132 200 250 229 138 230 26 42 151 81 188 87 206 231 203 39 10 221 29 238 133 1 18 92 175 23 57 149 142 94 6 106 194 93 26 179 244 57 65 26 235 26 138 198 104 191 89 123 71 250 207 42 108 224 238 140 89 255 63 218 83 109 177 62 214 225 148 79 138 128 135 38 23 191 175 111 244 74 59 114 58 212 106 179 115 29 0 53) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 201 37 48 48 101 43 119 20 75 76 94 28 183 232 30 209 53 12 171 3 89 156 237 131 245 43 58 37 142 194 52 102 205 150 204 74 42 224 10 88 139 78 240 208 93 159 230 86 114 115 37 229 17 109 47 242 200 254 177 87 89 32 163 217 172 14 135 69 191 185 141 128 30 42 62 175 90 180 233 243 56 214 229 29 84 11 166 68 220 211 111 161 195 229 11 108 26 14 12 251 156 65 103 171 253 204 46 193 58 154 12 218 132 200 250 229 138 230 26 42 151 81 188 87 206 231 203 39 10 221 29 238 133 1 18 92 175 23 57 149 142 94 6 106 194 93 26 179 244 57 65 26 235 26 138 198 104 191 89 123 71 250 207 42 108 224 238 140 89 255 63 218 83 109 177 62 214 225 148 79 138 128 135 38 23 191 175 111 244 74 59 114 58 212 106 179 115 29 0 53)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 227 114 164 224 35 22 70 246 11 131 98 93 132 92 198 232 119 60 99 218 82 121 78 31 208 216 61 35 105 148 90 205 103 173 212 98 254 184 94 71 192 170 70 199 57 60 186 234 139 160 42 89 225 226 176 219 81 182 133 22 254 86 84 67 14 165 75 151 4 164 97 199 3 6 173 92 50 209 171 43 243 170 127 148 176 33 172 187 121 175 151 190 4 170 137 175 76 116 151 110 141 151 182 149 212 218 119 148 211 135 14 49 54 173 190 90 0 204 189 241 193 46 116 51 250 127 152 218 137 211 198 166 50 57 38 224 46 84 12 33 122 122 108 114 199 50 55 164 8 73 40 255 106 54 51 201 239 187 182 10 203 160 246 1 136 159 168 118 240 147 164 214 6 27 194 154 172 102 195 110 85 146 147 160 104 158 53 195 199 138 164 70 159 199 80 128 137 52 99 222 157 105 120 158 188 146 10 160 209 254 180 130 64 174 17 65 191 81 10 40 220 217 208 50 15 78 166 215 84 166 76 57 195 36 217 210 67 177 171 93 134 207 239 102 127 22 209 216 158 40 96 136 9 44 216 46 156 121 144 213 189 77 48 134 131 115 168 45 41 18 153 241 52 138 102 228 254 10 61 234 31 103 43 99 155 105 75 167 76 124 114 218 191 246 121 3 123 206 99 22 219 23 138 73 201 179 110 199 65 121 67 199 12 71 153 12 38 1 134 240 118 146 63 239 176 125 125 85 27 82 199 77 184 47 230 117 114 252 167 145 76 47 62 244 4 27 174 166 248 130 208 233 183 221 40 207 187 49 62 39 108 110 212 197 114 5 2 77 180 186 206 249 8 192 97 73 30 25 127 56 174 147 66 192 55 33 125 163 235 119 191 178 97 97 71 55 254 85 79 57 201 37 48 48 101 43 119 20 75 76 94 28 183 232 30 209 53 12 171 3 89 156 237 131 245 43 58 37 142 194 52 102 205 150 204 74 42 224 10 88 139 78 240 208 93 159 230 86 114 115 37 229 17 109 47 242 200 254 177 87 89 32 163 217 172 14 135 69 191 185 141 128 30 42 62 175 90 180 233 243 56 214 229 29 84 11 166 68 220 211 111 161 195 229 11 108 26 14 12 251 156 65 103 171 253 204 46 193 58 154 12 218 132 200 250 229 138 230 26 42 151 81 188 87 206 231 203 39 10 221 29 238 133 1 18 92 175 23 57 149 142 94 6 106 194 93 26 179 244 57 65 26 235 26 138 198 104 191 89 123 71 250 207 42 108 224 238 140 89 255 63 218 83 109 177 62 214 225 148 79 138 128 135 38 23 191 175 111 244 74 59 114 58 212 106 179 115 29 0 53)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 21 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 52 162 80 90 158 218 134 244 4 255 12 124 107 196 113 190 193 47 187 139 193 181 116 15 143 245 178 175 84 188 110 97 237 180 54 236 205 241 110 138 98 14 51 32 80 37 112 98 212 247 58 116 153 48 151 143 6 144 138 167 121 98 144 97 26 177 141 22 152 48 37 3 178 197 55 80 164 166 32 253 68 59 253 53 210 241 78 208 231 123 227 137 158 177 103 194 248 89 162 203 24 130 209 61 117 115 208 2 136 221 214 121 7 140 4 0 65 200 222 171 232 184 99 72 169 214 241 58 172 34 166 48 255 211 189 66 139 57 210 52 24 174 146 99 157 238 230 90 61 179 52 5 196 115 74 131 166 252 183 254 11 214 190 247 134 13 106 43 242 232 157 7 145 223 237 124 216 146 44 126 237 243 172 45 126 240 246 89 204 172 182 45 188 211 31 65 115 80 27 198 122 134 189 160 41 179 241 241 58 121 1 200 101 182 58 146 145 22 199 130 188 70 186 98 37 196 51 10 162 111 201 204 165 129 181 90 100 103 16 129 14 34 78 104 254 233 32 248 229 118 127 244 140 145 72 45 62 87 131 23 90 3 187 135 37 24 207 182 35 180 139 253 63 1 176 210 75 172 84 4 140 141 185 201 204 137 46 166 207 41 26 138 198 12 11 99 81 24 210 52 204 76 233 2 14 173 85 93 209 93 228 40 172 49 228 201 201 148 136 105 231 136 87 128 215 232 67 15 93 41 170 125 177 234 180 59 234 175 149 84 196 48 58 18 164 227 70 229 243 166 96 119 253 222 75 255 211 184 73 153 4 244 39 33 20 98 192 213 199 15 176 137 46 203 96 133 55 205 216 187 251 90 248 47 158 164 212 254 22 251 193 120 166 4 77 94 5 114 41 26 19 191 176 163 188 111 44 126 241 211 211 208 70 92 126 156 43 112 116 103 50 0 227 36 111 59 209 135 207 179 183 190 173 144 205 162 84 173 58 209 68 116 127 47 195 93 204 117 138 49 140 67 222 211 211 108 66 112 94 195 219 186 194 25 73 79 119 31 219 104 160 250 167 245 119 222 184 249 219 125 67 229 148 142 113 130 198 217 28 25 115 136 164 115 64 29 116 166 163 21 197 82 7 118 115 217 108 68 85 52 29 142 119 56 101 94 55 89 102 197 29 194 240 47 242 3 29 104 80 76 254 80 17 154 209 94 206 243 209 185 33 63 225 56 55 122 213 103 67 58 222 248 239 19 23 99 163 71 209 167 95 23 16 85 94 113 177 113 223 53 158 156 162 163 23 179 5 70 87 166 102 57 249 173 21 96 102 248 66 15 65 210 6 89 191 227 134 79 236 127) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 52 162 80 90 158 218 134 244 4 255 12 124 107 196 113 190 193 47 187 139 193 181 116 15 143 245 178 175 84 188 110 97 237 180 54 236 205 241 110 138 98 14 51 32 80 37 112 98 212 247 58 116 153 48 151 143 6 144 138 167 121 98 144 97 26 177 141 22 152 48 37 3 178 197 55 80 164 166 32 253 68 59 253 53 210 241 78 208 231 123 227 137 158 177 103 194 248 89 162 203 24 130 209 61 117 115 208 2 136 221 214 121 7 140 4 0 65 200 222 171 232 184 99 72 169 214 241 58 172 34 166 48 255 211 189 66 139 57 210 52 24 174 146 99 157 238 230 90 61 179 52 5 196 115 74 131 166 252 183 254 11 214 190 247 134 13 106 43 242 232 157 7 145 223 237 124 216 146 44 126 237 243 172 45 126 240 246 89 204 172 182 45 188 211 31 65 115 80 27 198) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 52 162 80 90 158 218 134 244 4 255 12 124 107 196 113 190 193 47 187 139 193 181 116 15 143 245 178 175 84 188 110 97 237 180 54 236 205 241 110 138 98 14 51 32 80 37 112 98 212 247 58 116 153 48 151 143 6 144 138 167 121 98 144 97 26 177 141 22 152 48 37 3 178 197 55 80 164 166 32 253 68 59 253 53 210 241 78 208 231 123 227 137 158 177 103 194 248 89 162 203 24 130 209 61 117 115 208 2 136 221 214 121 7 140 4 0 65 200 222 171 232 184 99 72 169 214 241 58 172 34 166 48 255 211 189 66 139 57 210 52 24 174 146 99 157 238 230 90 61 179 52 5 196 115 74 131 166 252 183 254 11 214 190 247 134 13 106 43 242 232 157 7 145 223 237 124 216 146 44 126 237 243 172 45 126 240 246 89 204 172 182 45 188 211 31 65 115 80 27 198)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 122 134 189 160 41 179 241 241 58 121 1 200 101 182 58 146 145 22 199 130 188 70 186 98 37 196 51 10 162 111 201 204 165 129 181 90 100 103 16 129 14 34 78 104 254 233 32 248 229 118 127 244 140 145 72 45 62 87 131 23 90 3 187 135 37 24 207 182 35 180 139 253 63 1 176 210 75 172 84 4 140 141 185 201 204 137 46 166 207 41 26 138 198 12 11 99 81 24 210 52 204 76 233 2 14 173 85 93 209 93 228 40 172 49 228 201 201 148 136 105 231 136 87 128 215 232 67 15 93 41 170 125 177 234 180 59 234 175 149 84 196 48 58 18 164 227 70 229 243 166 96 119 253 222 75 255 211 184 73 153 4 244 39 33 20 98 192 213 199 15 176 137 46 203 96 133 55 205 216 187 251 90 248 47 158 164 212 254 22 251 193 120 166 4 77 94 5 114 41 26) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 122 134 189 160 41 179 241 241 58 121 1 200 101 182 58 146 145 22 199 130 188 70 186 98 37 196 51 10 162 111 201 204 165 129 181 90 100 103 16 129 14 34 78 104 254 233 32 248 229 118 127 244 140 145 72 45 62 87 131 23 90 3 187 135 37 24 207 182 35 180 139 253 63 1 176 210 75 172 84 4 140 141 185 201 204 137 46 166 207 41 26 138 198 12 11 99 81 24 210 52 204 76 233 2 14 173 85 93 209 93 228 40 172 49 228 201 201 148 136 105 231 136 87 128 215 232 67 15 93 41 170 125 177 234 180 59 234 175 149 84 196 48 58 18 164 227 70 229 243 166 96 119 253 222 75 255 211 184 73 153 4 244 39 33 20 98 192 213 199 15 176 137 46 203 96 133 55 205 216 187 251 90 248 47 158 164 212 254 22 251 193 120 166 4 77 94 5 114 41 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 19 191 176 163 188 111 44 126 241 211 211 208 70 92 126 156 43 112 116 103 50 0 227 36 111 59 209 135 207 179 183 190 173 144 205 162 84 173 58 209 68 116 127 47 195 93 204 117 138 49 140 67 222 211 211 108 66 112 94 195 219 186 194 25 73 79 119 31 219 104 160 250 167 245 119 222 184 249 219 125 67 229 148 142 113 130 198 217 28 25 115 136 164 115 64 29 116 166 163 21 197 82 7 118 115 217 108 68 85 52 29 142 119 56 101 94 55 89 102 197 29 194 240 47 242 3 29 104 80 76 254 80 17 154 209 94 206 243 209 185 33 63 225 56 55 122 213 103 67 58 222 248 239 19 23 99 163 71 209 167 95 23 16 85 94 113 177 113 223 53 158 156 162 163 23 179 5 70 87 166 102 57 249 173 21 96 102 248 66 15 65 210 6 89 191 227 134 79 236 127) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 19 191 176 163 188 111 44 126 241 211 211 208 70 92 126 156 43 112 116 103 50 0 227 36 111 59 209 135 207 179 183 190 173 144 205 162 84 173 58 209 68 116 127 47 195 93 204 117 138 49 140 67 222 211 211 108 66 112 94 195 219 186 194 25 73 79 119 31 219 104 160 250 167 245 119 222 184 249 219 125 67 229 148 142 113 130 198 217 28 25 115 136 164 115 64 29 116 166 163 21 197 82 7 118 115 217 108 68 85 52 29 142 119 56 101 94 55 89 102 197 29 194 240 47 242 3 29 104 80 76 254 80 17 154 209 94 206 243 209 185 33 63 225 56 55 122 213 103 67 58 222 248 239 19 23 99 163 71 209 167 95 23 16 85 94 113 177 113 223 53 158 156 162 163 23 179 5 70 87 166 102 57 249 173 21 96 102 248 66 15 65 210 6 89 191 227 134 79 236 127)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 52 162 80 90 158 218 134 244 4 255 12 124 107 196 113 190 193 47 187 139 193 181 116 15 143 245 178 175 84 188 110 97 237 180 54 236 205 241 110 138 98 14 51 32 80 37 112 98 212 247 58 116 153 48 151 143 6 144 138 167 121 98 144 97 26 177 141 22 152 48 37 3 178 197 55 80 164 166 32 253 68 59 253 53 210 241 78 208 231 123 227 137 158 177 103 194 248 89 162 203 24 130 209 61 117 115 208 2 136 221 214 121 7 140 4 0 65 200 222 171 232 184 99 72 169 214 241 58 172 34 166 48 255 211 189 66 139 57 210 52 24 174 146 99 157 238 230 90 61 179 52 5 196 115 74 131 166 252 183 254 11 214 190 247 134 13 106 43 242 232 157 7 145 223 237 124 216 146 44 126 237 243 172 45 126 240 246 89 204 172 182 45 188 211 31 65 115 80 27 198 122 134 189 160 41 179 241 241 58 121 1 200 101 182 58 146 145 22 199 130 188 70 186 98 37 196 51 10 162 111 201 204 165 129 181 90 100 103 16 129 14 34 78 104 254 233 32 248 229 118 127 244 140 145 72 45 62 87 131 23 90 3 187 135 37 24 207 182 35 180 139 253 63 1 176 210 75 172 84 4 140 141 185 201 204 137 46 166 207 41 26 138 198 12 11 99 81 24 210 52 204 76 233 2 14 173 85 93 209 93 228 40 172 49 228 201 201 148 136 105 231 136 87 128 215 232 67 15 93 41 170 125 177 234 180 59 234 175 149 84 196 48 58 18 164 227 70 229 243 166 96 119 253 222 75 255 211 184 73 153 4 244 39 33 20 98 192 213 199 15 176 137 46 203 96 133 55 205 216 187 251 90 248 47 158 164 212 254 22 251 193 120 166 4 77 94 5 114 41 26 19 191 176 163 188 111 44 126 241 211 211 208 70 92 126 156 43 112 116 103 50 0 227 36 111 59 209 135 207 179 183 190 173 144 205 162 84 173 58 209 68 116 127 47 195 93 204 117 138 49 140 67 222 211 211 108 66 112 94 195 219 186 194 25 73 79 119 31 219 104 160 250 167 245 119 222 184 249 219 125 67 229 148 142 113 130 198 217 28 25 115 136 164 115 64 29 116 166 163 21 197 82 7 118 115 217 108 68 85 52 29 142 119 56 101 94 55 89 102 197 29 194 240 47 242 3 29 104 80 76 254 80 17 154 209 94 206 243 209 185 33 63 225 56 55 122 213 103 67 58 222 248 239 19 23 99 163 71 209 167 95 23 16 85 94 113 177 113 223 53 158 156 162 163 23 179 5 70 87 166 102 57 249 173 21 96 102 248 66 15 65 210 6 89 191 227 134 79 236 127)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 24 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 29 77 173 42 109 3 246 92 109 51 13 47 77 152 44 232 30 150 22 66 28 45 112 75 113 98 169 8 105 249 173 0 131 69 207 120 11 113 43 15 232 7 174 51 107 182 52 141 170 185 18 63 58 113 29 208 242 251 231 16 103 135 124 29 22 223 128 5 226 30 173 66 209 84 91 103 227 104 67 86 164 239 121 98 52 126 162 91 174 250 18 85 73 188 42 216 2 144 212 153 158 208 0 95 1 186 156 167 155 114 79 169 225 34 190 210 58 73 240 227 16 217 125 190 127 66 48 87 23 5 138 3 181 165 79 208 157 32 6 184 235 77 147 12 235 210 7 61 110 10 91 167 219 37 163 135 165 174 211 87 190 175 85 95 156 62 237 15 144 219 121 183 250 62 183 182 162 97 8 233 224 42 110 195 57 90 20 65 141 191 172 178 225 51 164 71 209 197 163 118 106 69 87 236 133 23 158 96 253 157 232 61 146 5 112 146 136 3 229 15 178 178 8 69 192 14 232 197 208 86 2 94 165 209 31 190 117 51 203 226 25 38 158 115 96 186 40 243 180 47 150 149 249 122 202 236 40 11 67 140 211 43 223 182 14 219 5 101 44 186 123 183 20 167 71 173 132 15 172 56 243 8 92 43 47 63 93 225 250 195 220 97 135 93 208 60 69 186 13 64 55 159 236 36 160 241 36 171 11 75 9 7 8 104 54 180 62 136 76 34 193 116 108 243 28 165 58 73 58 211 49 26 247 67 250 18 198 97 229 127 231 45 30 134 82 205 122 123 119 118 142 246 226 113 83 152 47 32 180 185 135 144 138 50 56 37 144 186 3 46 185 255 196 178 185 86 223 70 180 214 90 253 243 90 195 166 41 123 33 162 130 102 19 58 230 243 208 63 168 174 192 47 77 210 141 233 60 52 249 195 172 65 88 59 237 165 198 26 43 247 207 100 179 240 234 78 152 63 162 148 19 63 119 130 157 85 48 73 104 108 67 168 24 115 232 25 5 38 54 139 17 227 62 193 1 168 209 113 228 27 135 158 101 6 86 91 203 35 8 172 236 80 184 8 180 164 116 243 146 31 9 37 191 27 179 166 127 218 250 34 83 81 22 88 149 96 32 39 140 143 248 184 85 150 54 162 91 118 169 39 171 107 6 112 216 180 191 155 182 125 244 177 151 166 164 165 78 62 86 255 236 156 187 202 118 43 47 245 105 103 28 144 119 22 6 232 188 254 60 174 94 127 141 125 150 115 33 12 99 209 80 225 16 67 61 228 30 118 194 114 189 215 102 219 115 62 20 60 25 200 90 161 41 79 205 174 254 7 90 75 165 183 221 38 245 248 84 139 70 254) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 29 77 173 42 109 3 246 92 109 51 13 47 77 152 44 232 30 150 22 66 28 45 112 75 113 98 169 8 105 249 173 0 131 69 207 120 11 113 43 15 232 7 174 51 107 182 52 141 170 185 18 63 58 113 29 208 242 251 231 16 103 135 124 29 22 223 128 5 226 30 173 66 209 84 91 103 227 104 67 86 164 239 121 98 52 126 162 91 174 250 18 85 73 188 42 216 2 144 212 153 158 208 0 95 1 186 156 167 155 114 79 169 225 34 190 210 58 73 240 227 16 217 125 190 127 66 48 87 23 5 138 3 181 165 79 208 157 32 6 184 235 77 147 12 235 210 7 61 110 10 91 167 219 37 163 135 165 174 211 87 190 175 85 95 156 62 237 15 144 219 121 183 250 62 183 182 162 97 8 233 224 42 110 195 57 90 20 65 141 191 172 178 225 51 164 71 209 197 163 118) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 77 173 42 109 3 246 92 109 51 13 47 77 152 44 232 30 150 22 66 28 45 112 75 113 98 169 8 105 249 173 0 131 69 207 120 11 113 43 15 232 7 174 51 107 182 52 141 170 185 18 63 58 113 29 208 242 251 231 16 103 135 124 29 22 223 128 5 226 30 173 66 209 84 91 103 227 104 67 86 164 239 121 98 52 126 162 91 174 250 18 85 73 188 42 216 2 144 212 153 158 208 0 95 1 186 156 167 155 114 79 169 225 34 190 210 58 73 240 227 16 217 125 190 127 66 48 87 23 5 138 3 181 165 79 208 157 32 6 184 235 77 147 12 235 210 7 61 110 10 91 167 219 37 163 135 165 174 211 87 190 175 85 95 156 62 237 15 144 219 121 183 250 62 183 182 162 97 8 233 224 42 110 195 57 90 20 65 141 191 172 178 225 51 164 71 209 197 163 118)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 106 69 87 236 133 23 158 96 253 157 232 61 146 5 112 146 136 3 229 15 178 178 8 69 192 14 232 197 208 86 2 94 165 209 31 190 117 51 203 226 25 38 158 115 96 186 40 243 180 47 150 149 249 122 202 236 40 11 67 140 211 43 223 182 14 219 5 101 44 186 123 183 20 167 71 173 132 15 172 56 243 8 92 43 47 63 93 225 250 195 220 97 135 93 208 60 69 186 13 64 55 159 236 36 160 241 36 171 11 75 9 7 8 104 54 180 62 136 76 34 193 116 108 243 28 165 58 73 58 211 49 26 247 67 250 18 198 97 229 127 231 45 30 134 82 205 122 123 119 118 142 246 226 113 83 152 47 32 180 185 135 144 138 50 56 37 144 186 3 46 185 255 196 178 185 86 223 70 180 214 90 253 243 90 195 166 41 123 33 162 130 102 19 58 230 243 208 63 168 174) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 106 69 87 236 133 23 158 96 253 157 232 61 146 5 112 146 136 3 229 15 178 178 8 69 192 14 232 197 208 86 2 94 165 209 31 190 117 51 203 226 25 38 158 115 96 186 40 243 180 47 150 149 249 122 202 236 40 11 67 140 211 43 223 182 14 219 5 101 44 186 123 183 20 167 71 173 132 15 172 56 243 8 92 43 47 63 93 225 250 195 220 97 135 93 208 60 69 186 13 64 55 159 236 36 160 241 36 171 11 75 9 7 8 104 54 180 62 136 76 34 193 116 108 243 28 165 58 73 58 211 49 26 247 67 250 18 198 97 229 127 231 45 30 134 82 205 122 123 119 118 142 246 226 113 83 152 47 32 180 185 135 144 138 50 56 37 144 186 3 46 185 255 196 178 185 86 223 70 180 214 90 253 243 90 195 166 41 123 33 162 130 102 19 58 230 243 208 63 168 174)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 192 47 77 210 141 233 60 52 249 195 172 65 88 59 237 165 198 26 43 247 207 100 179 240 234 78 152 63 162 148 19 63 119 130 157 85 48 73 104 108 67 168 24 115 232 25 5 38 54 139 17 227 62 193 1 168 209 113 228 27 135 158 101 6 86 91 203 35 8 172 236 80 184 8 180 164 116 243 146 31 9 37 191 27 179 166 127 218 250 34 83 81 22 88 149 96 32 39 140 143 248 184 85 150 54 162 91 118 169 39 171 107 6 112 216 180 191 155 182 125 244 177 151 166 164 165 78 62 86 255 236 156 187 202 118 43 47 245 105 103 28 144 119 22 6 232 188 254 60 174 94 127 141 125 150 115 33 12 99 209 80 225 16 67 61 228 30 118 194 114 189 215 102 219 115 62 20 60 25 200 90 161 41 79 205 174 254 7 90 75 165 183 221 38 245 248 84 139 70 254) :decoder (list (list 2 6) (list 1 32)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 47 77 210 141 233 60 52 249 195 172 65 88 59 237 165 198 26 43 247 207 100 179 240 234 78 152 63 162 148 19 63 119 130 157 85 48 73 104 108 67 168 24 115 232 25 5 38 54 139 17 227 62 193 1 168 209 113 228 27 135 158 101 6 86 91 203 35 8 172 236 80 184 8 180 164 116 243 146 31 9 37 191 27 179 166 127 218 250 34 83 81 22 88 149 96 32 39 140 143 248 184 85 150 54 162 91 118 169 39 171 107 6 112 216 180 191 155 182 125 244 177 151 166 164 165 78 62 86 255 236 156 187 202 118 43 47 245 105 103 28 144 119 22 6 232 188 254 60 174 94 127 141 125 150 115 33 12 99 209 80 225 16 67 61 228 30 118 194 114 189 215 102 219 115 62 20 60 25 200 90 161 41 79 205 174 254 7 90 75 165 183 221 38 245 248 84 139 70 254)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 29 77 173 42 109 3 246 92 109 51 13 47 77 152 44 232 30 150 22 66 28 45 112 75 113 98 169 8 105 249 173 0 131 69 207 120 11 113 43 15 232 7 174 51 107 182 52 141 170 185 18 63 58 113 29 208 242 251 231 16 103 135 124 29 22 223 128 5 226 30 173 66 209 84 91 103 227 104 67 86 164 239 121 98 52 126 162 91 174 250 18 85 73 188 42 216 2 144 212 153 158 208 0 95 1 186 156 167 155 114 79 169 225 34 190 210 58 73 240 227 16 217 125 190 127 66 48 87 23 5 138 3 181 165 79 208 157 32 6 184 235 77 147 12 235 210 7 61 110 10 91 167 219 37 163 135 165 174 211 87 190 175 85 95 156 62 237 15 144 219 121 183 250 62 183 182 162 97 8 233 224 42 110 195 57 90 20 65 141 191 172 178 225 51 164 71 209 197 163 118 106 69 87 236 133 23 158 96 253 157 232 61 146 5 112 146 136 3 229 15 178 178 8 69 192 14 232 197 208 86 2 94 165 209 31 190 117 51 203 226 25 38 158 115 96 186 40 243 180 47 150 149 249 122 202 236 40 11 67 140 211 43 223 182 14 219 5 101 44 186 123 183 20 167 71 173 132 15 172 56 243 8 92 43 47 63 93 225 250 195 220 97 135 93 208 60 69 186 13 64 55 159 236 36 160 241 36 171 11 75 9 7 8 104 54 180 62 136 76 34 193 116 108 243 28 165 58 73 58 211 49 26 247 67 250 18 198 97 229 127 231 45 30 134 82 205 122 123 119 118 142 246 226 113 83 152 47 32 180 185 135 144 138 50 56 37 144 186 3 46 185 255 196 178 185 86 223 70 180 214 90 253 243 90 195 166 41 123 33 162 130 102 19 58 230 243 208 63 168 174 192 47 77 210 141 233 60 52 249 195 172 65 88 59 237 165 198 26 43 247 207 100 179 240 234 78 152 63 162 148 19 63 119 130 157 85 48 73 104 108 67 168 24 115 232 25 5 38 54 139 17 227 62 193 1 168 209 113 228 27 135 158 101 6 86 91 203 35 8 172 236 80 184 8 180 164 116 243 146 31 9 37 191 27 179 166 127 218 250 34 83 81 22 88 149 96 32 39 140 143 248 184 85 150 54 162 91 118 169 39 171 107 6 112 216 180 191 155 182 125 244 177 151 166 164 165 78 62 86 255 236 156 187 202 118 43 47 245 105 103 28 144 119 22 6 232 188 254 60 174 94 127 141 125 150 115 33 12 99 209 80 225 16 67 61 228 30 118 194 114 189 215 102 219 115 62 20 60 25 200 90 161 41 79 205 174 254 7 90 75 165 183 221 38 245 248 84 139 70 254)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((2 (2)) (1 (1)) (1 (1 1 1 2 1)))) ((4 4) ((4 (1 3 1)))) ((4 4) ((1 (2 1)) (1 (1 1)) (2 (3 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 560 85) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
