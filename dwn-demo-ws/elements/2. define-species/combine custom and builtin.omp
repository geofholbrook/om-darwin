; OM File Header - Saved 2015/09/14 20:43:41
; (6.1 :patc (om-make-point 280 10) (om-make-point 2085 49) (om-make-point 733 682) "" 183 0 "2015/08/23 21:41:24" "2015/09/14 20:43:27")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "combine custom and builtin" (quote ((let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 556 451) (om-make-point 280 189) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHENOTYPE" (quote phenotype) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 392 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 30) (quote "doesn't work!") "" (om-make-point 516 81) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 646 150) (om-make-point 136 30) (list (quote :set) 0 2 4 5 7 9 11) "(:set 0 2 4 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 593 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 61 499) (om-make-point 386 161) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 166 227 206 12 98) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 166 227 206 12 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 231 255 146 48 112) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 255 146 48 112)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 19 34 97 178 185) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 19 34 97 178 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 47 95 189 6 41) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 47 95 189 6 41)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 215 236 253 173 83) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 215 236 253 173 83)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 131 51 120 218 112) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 131 51 120 218 112)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 28 55 1 242 29) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 28 55 1 242 29)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 18 162 71 215 60) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 162 71 215 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 235 11 54 215 85) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 235 11 54 215 85)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 221 10 188 7 237) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 10 188 7 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 147 216 255 196 223) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 147) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 216 255 196 223) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil) :pheno (list (list 0 1/16 1 6800) (list 1/16 1/16 1 6800) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6200)) :num-notes 4 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 216 255 196 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 281 49) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 85 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "custom" (om-load-patch-abs1 "custom" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 108 20) (om-make-point 34 30) 61 "61" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 77 20) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 173 218) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 163 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 309 399) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 251 173) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 209 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 159 73) (om-make-point 77 30) (list 0 4 7 12) "(0 4 7 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" (list 0 4 7 12)) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 120 168) (om-make-point 86 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 11))) (om-make-point 50 50) (om-make-point 92 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (3 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (1 0 9 0 nil 0) (0 0 9 1 nil 0))) 6.1 nil "" (om-make-point 2992 159) (om-make-point 575 559)) (quote nil) (om-make-point 44 61) nil (list nil) "l" "custom"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 150 224) (om-make-point 75 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 222 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 244 126) (om-make-point 155 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (3 0 4 0 nil 0) (10 0 5 1 nil 0) (8 0 7 0 nil 0) (7 0 9 0 nil 0) (11 0 9 1 nil 0) (9 0 10 0 nil 0) (6 0 11 0 nil 0))) nil 6.1))
