; OM File Header - Saved 2015/03/05 15:10:30
; (6.090014 :patc (om-make-point 172 60) (om-make-point 29 163) (om-make-point 934 552) "" 183 0 "2015/03/05 12:46:16" "2015/03/05 15:10:30")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "lists bpf bpc" (quote ((let ((box (om-load-boxcall (quote abstraction) "bpc-ff" (om-load-patch-abs1 "bpc-ff" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 34 509) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 79 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 412) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 88 489) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 324 346) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 212 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 182 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 313 260) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 263 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 258) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 152 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 250 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 73 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 127 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 244 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 656) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (6 0 2 1 nil 0) (3 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (11 0 7 0 nil 0) (9 0 7 1 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (15 0 12 0 nil 0) (14 0 13 0 nil 0) (16 0 14 0 nil 0) (16 0 15 0 nil 0) (17 0 16 0 nil 0) (1 0 18 0 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 734 81) nil (list nil) "l" "bpc-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-ff" (om-load-patch-abs1 "bpf-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 166 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 152 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 110) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 110 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 505 163) nil (list nil) "l" "bpf-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bits-ff" (om-load-patch-abs1 "bits-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 193 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "alternate" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 151 220) nil nil nil (list (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 348 446) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 207 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" 0) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" 1) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 0))) (om-make-point 117 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 165 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 130 281) (om-make-point 66 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 107 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 159 506) (om-make-point 109 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 0 1 1 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 138 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 624) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 92 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (6 0 2 0 nil 0) (9 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (9 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (8 0 9 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "alternate" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 214 175) nil (list nil) "l" "bits-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 72 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 58 299) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 62 65 51 88 60 82 28 19 79 61 250 59 213 53 245) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 62 65 51 88 60 82 28 19 79 61 250 59 213 53 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 196 151 168 237 52 247 166 209 76 189 164 53 92 109 194) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 196 151 168 237 52 247 166 209 76 189 164 53 92 109 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 196 151 168 237 52 247 166 209 76 238 103 70 7 50 195) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 196 151 168 237 52 247 166 209 76 238 103 70 7 50 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 251 234 151 58 51 53 112 7 76 238 103 70 7 50 195) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 251 234 151 58 51 53 112 7 76 238 103 70 7 50 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 251 234 7 58 51 53 112 151 76 238 103 70 7 31 100) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 251 234 7 58 51 53 112 151 76 238 103 70 7 31 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 91 99 115 42 221 146 28 107 178 164 53 92 109 194) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 91 99 115 42 221 146 28 107 178 164 53 92 109 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 148 239 160 2 203 228 167 233 204 207 228 40 48 50 195) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 239 160 2 203 228 167 233 204 207 228 40 48 50 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 30 91 99 115 42 221 146 28 107 178 164 53 109 92 194) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 91 99 115 42 221 146 28 107 178 164 53 109 92 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 66 49 147 86 18 120 204 85 25 126 43 54 206 50 135) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 66 49 147 86 18 120 204 85 25 126 43 54 206 50 135)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 196 151 168 234 52 247 166 209 137 13 251 101 62 16 132) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 196 151 168 234 52 247 166 209 137 13 251 101 62 16 132)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 125 234 60 150 204 101 161 31 134 175 57 141 41 205 156) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 125 234 60 150 204 101 161 31 134 175 57 141 41 205 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 159) (setf (om-darwin::result om-darwin::ga) (list 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 616 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 658 299) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 248 197 147 238 172 92 132 224 6 232 44 200 247 69 2 81 1 129 167 120) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 248 197 147 238 172 92 132 224 6 232 44 200 247 69 2 81 1 129 167 120)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.19803906 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 239 34 236 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 239 34 236 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.29705858 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 36 237 236 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 36 237 236 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.36961198 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 30 32 237 34 236 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 30 32 237 34 236 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.38516474 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 239 34 236 236 32 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 239 34 236 236 32 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.3960781 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 36 236 237 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 36 236 237 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.4686315 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 30 32 36 237 34 235 32 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 30 32 36 237 34 235 32 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.48418427 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 36 237 237 235 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 36 237 237 235 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.55673767 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 30 32 237 34 236 236 32 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 30 32 237 34 236 236 32 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.56765104 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 30 32 36 236 237 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 30 32 36 236 237 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.5832038 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 50 149 45 243 238 233 26 223 219 13 29 33 237 36 236 236 235 234 231 231) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 149 45 243 238 233 26 223 219 13 29 33 237 36 236 236 235 234 231 231)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 275) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (50 48 45 41 36 31 26 21 17 13)) (quote (29 33 37 34 34 34 33 32 29 29)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc" (om-load-patch-abs1 "bpc" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 62) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 162 279) (om-make-point 165 150) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (12 22 42 44 67 32 9 94 4 35)) (quote (80 64 1 93 79 22 21 23 56 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 130 470) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 1 nil 0) (8 0 5 1 nil 0) (1 0 5 2 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (5 0 9 0 nil 0))) 6.090014 nil "" (om-make-point 234 149) (om-make-point 577 573)) (quote nil) (om-make-point 573 33) nil (list nil) "l" "bpc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf" (om-load-patch-abs1 "bpf" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 299) (om-make-point 169 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (41 20 79 21 27 37 50 70 29 38)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 85 186) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 112 384) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 2 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.090014 nil "" (om-make-point 188 283) (om-make-point 504 495)) (quote nil) (om-make-point 416 86) nil (list nil) "l" "bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 100 34) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 355 302) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 222 98 31 212 52 235 64 114 43 216) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 222 98 31 212 52 235 64 114 43 216)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 202 202 101 101 0 101 101 202 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 202 202 101 101 0 101 101 202 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 202 202 101 101 0 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 202 202 101 101 0 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 202 101 101 0 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 202 101 101 0 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 101 101 0 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 101 101 0 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 101 102 0 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 101 102 0 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 101 102 0 102 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 101 102 0 102 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 101 102 2 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 101 102 2 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 103 102 1 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 103 102 1 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 103 102 2 101 101 203 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 103 102 2 101 101 203 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 202 203 103 102 2 101 101 203 1) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 202 203 103 102 2 101 101 203 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 193) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (0 0 0 0 0 0 0 0 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 369 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ten-bits" (om-load-patch-abs1 "ten-bits" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 43 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 176 30) "" nil 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 98 173) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 164 284) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 341 98) (om-make-point 375 389)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 103) nil (list nil) "l" "ten-bits"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 3 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (7 0 5 0 nil 0) (5 0 6 1 nil 0) (0 0 6 2 nil 0) (11 0 10 1 nil 0) (1 0 10 2 nil 0) (8 0 11 0 nil 0) (9 0 12 0 nil 0))) nil 6.090014))
