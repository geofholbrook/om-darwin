; OM File Header - Saved 2015/03/10 1:13:42
; (6.090014 :patc (om-make-point 172 60) (om-make-point 143 95) (om-make-point 934 552) "" 183 0 "2015/03/05 12:46:16" "2015/03/10 1:13:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "lists bpf bpc" (quote ((let ((box (om-load-boxcall (quote abstraction) "bpc-ff" (om-load-patch-abs1 "bpc-ff" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 34 509) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 79 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 412) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 88 489) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 324 346) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 212 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 182 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 313 260) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 263 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 258) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 152 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 250 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 73 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 127 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 244 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 656) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (6 0 2 1 nil 0) (3 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (11 0 7 0 nil 0) (9 0 7 1 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (15 0 12 0 nil 0) (14 0 13 0 nil 0) (16 0 14 0 nil 0) (16 0 15 0 nil 0) (17 0 16 0 nil 0) (1 0 18 0 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 734 81) nil (list nil) "l" "bpc-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf-ff" (om-load-patch-abs1 "bpf-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 166 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 152 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 110) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 110 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 505 163) nil (list nil) "l" "bpf-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bits-ff" (om-load-patch-abs1 "bits-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 193 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "alternate" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 151 220) nil nil nil (list (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 348 446) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 207 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" 0) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" 1) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 0))) (om-make-point 117 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 165 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 130 281) (om-make-point 66 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 107 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 159 506) (om-make-point 109 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 0 1 1 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 138 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 624) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 92 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (6 0 2 0 nil 0) (9 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (9 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (8 0 9 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "alternate" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 214 175) nil (list nil) "l" "bits-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 72 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 58 299) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 181 202 162 84 255 223 87 241 140 130 73 204 30 3 250) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 181 202 162 84 255 223 87 241 140 130 73 204 30 3 250)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 1 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 215 32 183 132 147 196 43 210 140 201 0 219 142 85 210) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 215 32 183 132 147 196 43 210 140 201 0 219 142 85 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 70 255 242 107 210 232 49 210 140 201 0 219 142 85 210) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 70 255 242 107 210 232 49 210 140 201 0 219 142 85 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 67 213 242 107 255 232 49 210 140 201 0 219 142 85 210) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 67 213 242 107 255 232 49 210 140 201 0 219 142 85 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 70 210 242 107 255 232 49 214 136 201 0 219 142 85 210) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 70 210 242 107 255 232 49 214 136 201 0 219 142 85 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 91 119 235 207 190 58 49 210 140 201 0 219 142 85 210) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 91 119 235 207 190 58 49 210 140 201 0 219 142 85 210)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 70 210 242 107 255 232 252 209 195 52 95 106 133 209 38) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 70 210 242 107 255 232 252 209 195 52 95 106 133 209 38)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 238 32 183 132 147 196 43 37 17 149 101 94 60 13 225) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 238 32 183 132 147 196 43 37 17 149 101 94 60 13 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 251 4 210 104 5 248 218 24 188 36 153 61 96 190 143) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 251 4 210 104 5 248 218 24 188 36 153 61 96 190 143)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 238 32 183 7 16 196 43 37 17 149 101 94 60 13 225) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 238 32 183 7 16 196 43 37 17 149 101 94 60 13 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 79 49 227 37 63 139 179 254 172 81 139 51 63 46 21) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 79 49 227 37 63 139 179 254 172 81 139 51 63 46 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 308) (setf (om-darwin::result om-darwin::ga) (list 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 616 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 658 299) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 86 168 7 180 231 0 5 29 60 16 45 32 156 20 82 19 152 217 195 207 202 118 55 101 93 180 161 234 18 172 113 32 56 60 175 82 253 206 223 16 136 217 110 186 9 74 134 249 212 69 132 112 0 111 118 226 69 99 57 253) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 86 168 7 180 231 0 5 29 60 16 45 32 156 20 82 19 152 217 195 207 202 118 55 101 93 180 161 234 18 172 113 32 56 60 175 82 253 206 223 16 136 217 110 186 9 74 134 249 212 69 132 112 0 111 118 226 69 99 57 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.49509764 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.59411717 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 16) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 16)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.66667057 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.6822233 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 241 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 241 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.6931367 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 248 43 42 42 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 181 82 180 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 248 43 42 42 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 181 82 180 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.7656901 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 30 231 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 30 231 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.78124285 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 142 139 139 241 41 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 142 139 139 241 41 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.7921562 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 248 43 42 42 243 243 241 43 45 50 252 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 248 43 42 42 243 243 241 43 45 50 252 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 83 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.8382435 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 81 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 242 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 81 179 74 69 64 60 159 156 153 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0.85379625 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 150 150 247 41 140 140 241 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 81 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 150 247 41 140 140 241 142 244 247 247 43 43 41 243 243 241 43 45 251 51 249 143 240 35 133 31 31 230 27 141 43 247 149 253 56 61 167 172 176 180 81 179 74 69 64 60 159 156 155 151 249 46 144 140 35 131 126 21 18)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 2240) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (49 49 45 41 39 39 40 41 42 45 45 43 43 41 41 41 39 43 45 49 51 47 42 38 35 32 31 31 28 27)) (quote (40 43 45 48 51 56 61 66 71 75 79 83 78 74 69 64 60 58 55 54 50 47 46 43 39 35 30 25 21 18)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 906 73) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc" (om-load-patch-abs1 "bpc" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 62) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 162 279) (om-make-point 165 150) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (12 22 42 44 67 32 9 94 4 35)) (quote (80 64 1 93 79 22 21 23 56 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 130 470) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 1 nil 0) (8 0 5 1 nil 0) (1 0 5 2 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (5 0 9 0 nil 0))) 6.090014 nil "" (om-make-point 234 149) (om-make-point 577 573)) (quote nil) (om-make-point 573 33) nil (list nil) "l" "bpc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf" (om-load-patch-abs1 "bpf" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 299) (om-make-point 169 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (41 20 79 21 27 37 50 70 29 38)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 85 186) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 112 384) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 2 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.090014 nil "" (om-make-point 188 283) (om-make-point 504 495)) (quote nil) (om-make-point 416 86) nil (list nil) "l" "bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 100 34) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 355 302) (om-make-point 186 181) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 97 233 107 11 32 155 79 123 82 144) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 97 233 107 11 32 155 79 123 82 144)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 2 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 204 202 202 202 202 202 0 0 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 204 202 202 202 202 202 0 0 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 202 202 202 0 0 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 202 202 202 0 0 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 204 103 202 202 202 202 0 0 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 204 103 202 202 202 202 0 0 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 202 202 202 0 103 0) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 202 202 202 0 103 0)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 6 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 202 202 202 0 103 1) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 202 202 202 0 103 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 203 202 202 0 103 1) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 203 202 202 0 103 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 204 202 202 0 103 1) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 204 202 202 0 103 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 202 202 204 202 202 0 103 2) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 202 202 204 202 202 0 103 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 10 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 102 205 202 202 204 202 202 0 103 2) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 205 202 202 204 202 202 0 103 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :operons nil :pheno nil :raw-genotype (list 101 205 103 202 204 202 202 0 103 2) :decoder nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 205 103 202 204 202 202 0 103 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 69) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (0 2 0 0 0 0 0 0 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 503 105) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 369 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ten-bits" (om-load-patch-abs1 "ten-bits" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 43 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 176 30) "" nil 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 98 173) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 164 284) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.090014 nil "" (om-make-point 341 98) (om-make-point 375 389)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 109 103) nil (list nil) "l" "ten-bits"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 3 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (7 0 5 0 nil 0) (5 0 6 1 nil 0) (0 0 6 2 nil 0) (11 0 10 1 nil 0) (1 0 10 2 nil 0) (8 0 11 0 nil 0) (9 0 12 0 nil 0))) nil 6.090014))
