; OM File Header - Saved 2015/03/10 1:13:42
; (6.090014 :patc (om-make-point 10 10) (om-make-point 207 69) (om-make-point 681 565) "" 183 0 "2015/03/09 17:57:05" "2015/03/10 1:13:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "3.1. pitch and melodic" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 166 38) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 111 335) (om-make-point 459 177) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 43 224 131 255 185 153 198 50 47 73 189 17 114 228 17 83 207 232 154 110 2 118 127 158 201 38 13 198 142 237 114 167) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 43 224 131 255 185 153 198 50 47 73 189 17 114 228 17 83 207 232 154 110 2 118 127 158 201 38 13 198 142 237 114 167)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 68) (list 11/16 1/16 1 67) (list 3/4 1/16 1 67) (list 13/16 1/16 1 68) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 66) (list 19/16 1/16 1 65) (list 5/4 1/16 1 64) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 228 163 214 70 199 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 228 163 214 70 199 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 68) (list 11/16 1/16 1 67) (list 3/4 1/16 1 67) (list 13/16 1/16 1 68) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 67) (list 17/16 1/16 1 67) (list 9/8 1/16 1 66) (list 19/16 1/16 1 65) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 228 163 214 70 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 228 163 214 70 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2.143547 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 68) (list 11/16 1/16 1 67) (list 3/4 1/16 1 67) (list 13/16 1/16 1 68) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 65) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 204 191 203 228 86 33 124 60 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 2.4966615 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 68) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 67) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 64) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 191 87 203 190 85 34 124 97 228 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 191 87 203 190 85 34 124 97 228 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3.3483696 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 68) (list 11/16 1/16 1 67) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 65) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 204 191 203 228 86 33 124 97 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 204 191 203 228 86 33 124 97 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3.7152527 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 64) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 191 87 203 228 85 34 124 97 190 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 191 87 203 228 85 34 124 97 190 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4.263832 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 68) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 67) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 63) (list 19/16 1/16 1 64) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 191 87 203 190 85 34 124 97 228 46 214 163 224 173 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 191 87 203 190 85 34 124 97 228 46 214 163 224 173 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4.594794 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 70) (list 5/16 1/16 1 70) (list 3/8 1/16 1 70) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 65) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 23 205 205 191 203 228 85 34 124 97 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 23 205 205 191 203 228 85 34 124 97 190 46 214 163 228 70 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4.9719415 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 70) (list 5/16 1/16 1 70) (list 3/8 1/16 1 70) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 66) (list 7/8 1/16 1 68) (list 15/16 1/16 1 67) (list 1 1/16 1 66) (list 17/16 1/16 1 67) (list 9/8 1/16 1 67) (list 19/16 1/16 1 64) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 68) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 23 205 205 191 203 228 85 34 124 97 190 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 23 205 205 191 203 228 85 34 124 97 190 46 214 163 228 173 224 146 160 83 201 124 254 202 21 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 5.351711 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 65) (list 1/16 1/16 1 66) (list 1/8 1/16 1 67) (list 3/16 1/16 1 68) (list 1/4 1/16 1 68) (list 5/16 1/16 1 69) (list 3/8 1/16 1 69) (list 7/16 1/16 1 69) (list 1/2 1/16 1 68) (list 9/16 1/16 1 67) (list 5/8 1/16 1 67) (list 11/16 1/16 1 68) (list 3/4 1/16 1 67) (list 13/16 1/16 1 67) (list 7/8 1/16 1 68) (list 15/16 1/16 1 69) (list 1 1/16 1 66) (list 17/16 1/16 1 66) (list 9/8 1/16 1 66) (list 19/16 1/16 1 66) (list 5/4 1/16 1 63) (list 21/16 1/16 1 63) (list 11/8 1/16 1 64) (list 23/16 1/16 1 65) (list 3/2 1/16 1 66) (list 25/16 1/16 1 67) (list 13/8 1/16 1 67) (list 27/16 1/16 1 67) (list 7/4 1/16 1 67) (list 29/16 1/16 1 68) (list 15/8 1/16 1 69) (list 31/16 1/16 1 67)) :raw-genotype (list 5 253 228 242 21 204 204 191 203 228 85 34 124 163 190 48 227 71 97 214 224 146 160 83 201 124 254 202 150 151 152 176) :decoder (list (list 60 72)) :num-operons 32 :range (list 60 72) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 253 228 242 21 204 204 191 203 228 85 34 124 163 190 48 227 71 97 214 224 146 160 83 201 124 254 202 150 151 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 90) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 495 49) (om-make-point 53 30) (list -1 1) "(-1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 365 67) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfun (quote input-funbox) "" "SUBJECT" nil) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 375 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)))) (om-make-point 172 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 1 nil 0) (4 0 1 2 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (0 0 5 0 nil 0))) nil 6.090014))
