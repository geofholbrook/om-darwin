; OM File Header - Saved 2015/06/03 23:06:42
; (6.0901 :maqt (om-make-point 293 204) (om-make-point 50 50) (om-make-point 1319 425) "" 182 0 nil "2015/06/03 23:06:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-maq2 "overlap maquette" (quote ((let ((box (om-load-tempobj1 "test verticalities overlap" (quote ((om-load-inputfun (quote input-funbox) "" "input" (list 7200 9600)))) (list (quote patch) (om-load-patch-abs1 "test verticalities overlap" (quote ((let ((box (om-load-boxin "input" 1 (om-make-point 879 97) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 6000 8000)))) (om-make-point 715 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "verts" (om-load-patch-abs1 "verts" (quote ((let ((box (om-load-boxcall (quote abstraction) "count-two-fers" (om-load-lisp-abspatch "count-two-fers" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"count-two-fers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (groups)$  (* (loop for group in (remove-if-not #'(lambda (g)$                                           (> (length g) 1))$                                       groups)$           ;do (print group)$           sum (abs (- (d::region-pitch (first group))$                       (d::region-pitch (second group)))))$     1000))$") (quote ((om-load-inputfun (quote input-funbox) "" "GROUPS" nil))) (om-make-point 144 598) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONVERT-TO-CHORD-LIST" (quote om-darwin::convert-to-chord-list) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 488) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 348 306) (om-make-point 104 30) (quote om-darwin::region-start) "d::region-start" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 246 385) (om-make-point 96 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 246 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 348 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "spec" 1 (om-make-point 415 27) "" "spec" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-MAQ-OVERLAPS" (quote get-maq-overlaps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "SPEC" "SPEC" nil))) (om-make-point 146 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 2 nil 0) (9 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (8 0 9 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 595 232) nil (list nil) "l" "verts"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 521 37) (om-make-point 226 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 394 366) (om-make-point 149 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 188 95) (om-make-point 90 30) (list 2400 9600) "(2400 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 58) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 74) (om-make-point 76 30) (list 100 200) "(100 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 329 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 65 514) (om-make-point 649 144) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) nil) (setf (om-darwin::population om-darwin::ga) (list (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2415.869 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2563.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2731.926 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2901.0996 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 77) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 567 352) (om-make-point 1177 1026) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 95 156) (om-make-point 123 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 248 770) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (7 0 8 0 nil 0) (10 0 9 1 nil 0) (4 0 9 2 nil 0) (6 0 10 0 nil 0) (5 0 10 1 nil 0) (9 0 11 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 9267 8234 (om-make-color 0.5 0.5 0.6) (list (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 162 49 80 1 88 183 83 191 194 48 71 103 241 191 205 162 168 3 46 121 85 245 102 38 120 176 39 155 43 219 88 180) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 162 49 80 1 88 183 83 191 194 48 71 103 241 191 205 162 168 3 46 121 85 245 102 38 120 176 39 155 43 219 88 180)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 124 199 54 125 124 198 50 198 124 198 124 50 195 196) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7400)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 124 199 54 125 124 198 50 198 124 198 124 50 195 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) 67405) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 124 125 54 199 124 198 50 198 124 198 124 50 195 193) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7600) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7700) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7100)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 124 125 54 199 124 198 50 198 124 198 124 50 195 193)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 873.03205 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 125 198 54 125 124 198 50 198 124 198 124 50 195 193) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7600) (list 19/16 1/16 1 7600) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7100)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 123 125 198 54 125 124 198 50 198 124 198 124 50 195 193)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 194 51 123 121 122 48 123 124 199 54 125 124 198 50 198 124 198 124 50 195 196) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7200) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7400)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 194 51 123 121 122 48 123 124 199 54 125 124 198 50 198 124 198 124 50 195 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 196 121 122 121 49 121 196 121 196 51 123 121 122 48 123 124 199 54 125 124 195 53 198 124 198 124 50 195 196) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7400) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7300) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7300) (list 3/2 1/16 1 7700) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7400)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 196 121 122 121 49 121 196 121 196 51 123 121 122 48 123 124 199 54 125 124 195 53 198 124 198 124 50 195 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 1372.2086 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 196 121 121 196 121 196 51 123 121 122 48 123 125 198 54 125 124 198 50 198 124 198 124 50 195 193) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7400) (list 7/16 1/16 1 7200) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7600) (list 19/16 1/16 1 7600) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7100)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 196 121 121 196 121 196 51 123 121 122 48 123 125 198 54 125 124 198 50 198 124 198 124 50 195 193)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 196 122 123 121 51 48 123 124 199 54 125 124 198 50 198 124 198 196 50 195 124) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7300) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7500) (list 1 1/16 1 7200) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7400) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7500)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 196 122 123 121 51 48 123 124 199 54 125 124 198 50 198 124 198 196 50 195 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 1526.3485 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 125 123 198 54 125 124 198 50 198 124 198 124 50 195 193) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7300) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7600) (list 9/8 1/16 1 7400) (list 19/16 1/16 1 7600) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7400) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7100)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 122 121 196 121 196 121 196 51 123 121 122 48 125 123 198 54 125 124 198 50 198 124 198 124 50 195 193)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 123 121 196 121 196 121 196 51 123 121 122 48 122 125 199 54 125 124 195 53 198 124 198 124 50 195 196) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7400) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7500) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7200) (list 17/16 1/16 1 7300) (list 9/8 1/16 1 7600) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7800) (list 21/16 1/16 1 7600) (list 11/8 1/16 1 7500) (list 23/16 1/16 1 7300) (list 3/2 1/16 1 7700) (list 25/16 1/16 1 7600) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7500) (list 29/16 1/16 1 7400) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7400)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 123 121 196 121 196 121 196 51 123 121 122 48 122 125 199 54 125 124 195 53 198 124 198 124 50 195 196)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1861.231 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 121 196 121 49 121 123 121 196 121 123 121 196 121 196 121 122 51 123 124 199 125 54 53 198 127 195 124 198 50 124 195 194) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 7400) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 7300) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 7400) (list 3/8 1/16 1 7200) (list 7/16 1/16 1 7400) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7200) (list 11/16 1/16 1 7400) (list 3/4 1/16 1 7200) (list 13/16 1/16 1 7400) (list 7/8 1/16 1 7200) (list 15/16 1/16 1 7300) (list 1 1/16 1 7500) (list 17/16 1/16 1 7400) (list 9/8 1/16 1 7500) (list 19/16 1/16 1 7700) (list 5/4 1/16 1 7600) (list 21/16 1/16 1 7800) (list 11/8 1/16 1 7700) (list 23/16 1/16 1 7600) (list 3/2 1/16 1 7800) (list 25/16 1/16 1 7300) (list 13/8 1/16 1 7500) (list 27/16 1/16 1 7600) (list 7/4 1/16 1 7400) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 7200)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 196 121 49 121 123 121 196 121 123 121 196 121 196 121 122 51 123 124 199 125 54 53 198 127 195 124 198 50 124 195 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10))) (setf (om-darwin::generation om-darwin::ga) 68143) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 30 47 1 nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "test verticalities overlap" (quote ((om-load-inputfun (quote input-funbox) "" "input" (list 3600 6000)))) (list (quote patch) (om-load-patch-abs1 "test verticalities overlap" (quote ((let ((box (om-load-boxin "input" 1 (om-make-point 879 97) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 6000 8000)))) (om-make-point 715 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "verts" (om-load-patch-abs1 "verts" (quote ((let ((box (om-load-boxcall (quote abstraction) "count-two-fers" (om-load-lisp-abspatch "count-two-fers" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"count-two-fers\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (groups)$  (* (loop for group in (remove-if-not #'(lambda (g)$                                           (> (length g) 1))$                                       groups)$           ;do (print group)$           sum (abs (- (d::region-pitch (first group))$                       (d::region-pitch (second group)))))$     1000))$") (quote ((om-load-inputfun (quote input-funbox) "" "GROUPS" nil))) (om-make-point 144 598) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONVERT-TO-CHORD-LIST" (quote om-darwin::convert-to-chord-list) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 488) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 348 306) (om-make-point 104 30) (quote om-darwin::region-start) "d::region-start" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 246 385) (om-make-point 96 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 246 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 348 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "spec" 1 (om-make-point 415 27) "" "spec" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 91 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-MAQ-OVERLAPS" (quote get-maq-overlaps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "SPEC" "SPEC" nil))) (om-make-point 146 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 2 nil 0) (9 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (8 0 9 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 595 232) nil (list nil) "l" "verts"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 521 37) (om-make-point 226 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 394 366) (om-make-point 149 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 188 95) (om-make-point 90 30) (list 2400 9600) "(2400 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 58) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 74) (om-make-point 76 30) (list 100 200) "(100 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 329 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 65 514) (om-make-point 649 144) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) nil) (setf (om-darwin::population om-darwin::ga) (list (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 41 11 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 232 139)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 12 40 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 231 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2415.869 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 232 45 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2563.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 146 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 192 192 163 197 45 232 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2731.926 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 9 11 168 232 203 80 172 204 112 172 138 44 166 40 255 164 192 163 196 45 232 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 2901.0996 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232) :decoder (list (list 5000 8000 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 5000 8000) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 52 19 79 15 136 10 42 133 42 7 11 168 232 203 80 172 204 112 172 139 44 166 40 255 132 192 163 196 43 137 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 77) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 567 352) (om-make-point 1177 1026) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 95 156) (om-make-point 123 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 248 770) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (7 0 8 0 nil 0) (10 0 9 1 nil 0) (4 0 9 2 nil 0) (6 0 10 0 nil 0) (5 0 10 1 nil 0) (9 0 11 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 1402 715))) 0 596 8106 (om-make-color 0.5 0.5 0.6) (list (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 203 28 140 209 73 76 177 153 106 151 64 70 199 222 228 227 198 42 181 158 134 141 7 40 91 160 21 85 54 0 217 22) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 203 28 140 209 73 76 177 153 106 151 64 70 199 222 228 227 198 42 181 158 134 141 7 40 91 160 21 85 54 0 217 22)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 180 181 109 108 36 181 182 108) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 180 181 109 108 36 181 182 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 66567) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 240 165 240 96 244 27 29 104 179 107 108 34 181 109 108 180 181 109 108 36 181 108 182) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4300) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 5900) (list 31/16 1/16 1 6000)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 240 165 240 96 244 27 29 104 179 107 108 34 181 109 108 180 181 109 108 36 181 108 182)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 873.03205 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 255 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 181 108 109 34 109 183 109 34 109 108 36 181 182 35) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6000) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5900) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 6000) (list 21/16 1/16 1 5800) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 6100) (list 3/2 1/16 1 6000) (list 25/16 1/16 1 5800) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 181 108 109 34 109 183 109 34 109 108 36 181 182 35)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 178 181 109 108 36 181 182 108) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5600) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 178 181 109 108 36 181 182 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 180 108 109 108 109 108 180 181 109 108 36 181 182 35) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5900) (list 1/8 1/16 1 5800) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4800) (list 7/8 1/16 1 5200) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 6000) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 180 108 109 108 109 108 180 181 109 108 36 181 182 35)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 1372.2086 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 107 183 108 180 181 109 108 36 181 182 108) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5800) (list 11/8 1/16 1 6100) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 107 183 108 180 181 109 108 36 181 182 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 180 36 109 108 181 181 182 108) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 6000) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 5900) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 240 166 240 96 244 27 29 104 179 34 108 107 181 109 108 180 36 109 108 181 181 182 108)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 1526.3485 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 180 108 106 108 109 34 181 183 109 108 36 181 182 35) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5900) (list 1/8 1/16 1 5800) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4800) (list 7/8 1/16 1 5200) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5700) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5800) (list 3/2 1/16 1 5900) (list 25/16 1/16 1 6100) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 180 108 106 108 109 34 181 183 109 108 36 181 182 35)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 108 108 109 180 109 108 180 181 109 108 36 181 182 35) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5900) (list 1/8 1/16 1 5800) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4500) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4800) (list 7/8 1/16 1 5200) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5900) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 6000) (list 21/16 1/16 1 5800) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 254 180 252 250 248 173 244 96 240 166 240 96 243 28 29 104 179 108 108 109 180 109 108 180 181 109 108 36 181 182 35)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1861.231 (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :raw-genotype (list 252 180 254 252 250 248 173 244 96 237 166 240 96 244 27 29 104 179 34 108 107 108 109 181 180 181 109 108 36 181 182 35) :decoder (list (list 2400 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 5700) (list 1/16 1/16 1 5800) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5500) (list 5/16 1/16 1 5300) (list 3/8 1/16 1 5100) (list 7/16 1/16 1 4900) (list 1/2 1/16 1 4700) (list 9/16 1/16 1 4200) (list 5/8 1/16 1 4400) (list 11/16 1/16 1 4500) (list 3/4 1/16 1 4700) (list 13/16 1/16 1 4900) (list 7/8 1/16 1 5100) (list 15/16 1/16 1 5300) (list 1 1/16 1 5500) (list 17/16 1/16 1 5700) (list 9/8 1/16 1 5800) (list 19/16 1/16 1 5900) (list 5/4 1/16 1 5800) (list 21/16 1/16 1 5900) (list 11/8 1/16 1 6000) (list 23/16 1/16 1 5900) (list 3/2 1/16 1 5800) (list 25/16 1/16 1 5900) (list 13/8 1/16 1 6000) (list 27/16 1/16 1 5900) (list 7/4 1/16 1 6000) (list 29/16 1/16 1 5900) (list 15/8 1/16 1 6000) (list 31/16 1/16 1 5900)) :num-notes 32 :range (list 2400 9600) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 180 254 252 250 248 173 244 96 237 166 240 96 244 27 29 104 179 34 108 107 108 109 181 180 181 109 108 36 181 182 35)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 67317) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 30 48 1 nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 20243 0 63)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) (quote nil) nil t "off" 6.0901 nil (quote (1)) (quote (1)) nil))
