; OM File Header - Saved 2020/11/26 22:11:56
; (6.16 :patc (om-make-point 226 60) (om-make-point 629 179) (om-make-point 739 595) "" 183 0 "2020/11/26 22:08:41" "2020/11/26 22:11:56")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"species.ga-chord-seq.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criteria.harmonic" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 458 58) (om-make-point 75 30) (list 1000 nil) "(1000 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 480 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 110 281) (om-make-point 524 174) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 38 93 62 82 49 208 175 151 252 85 57 157 232 55 89 235 127 176 202 31 215 156 125 87 221 12 76 36 133 65 43 145) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 38 93 62 82 49 208 175 151 252 85 57 157 232 55 89 235 127 176 202 31 215 156 125 87 221 12 76 36 133 65 43 145)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4700) (list 1 1/4 1 3700) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 106) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 58 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4700) (list 1 1/4 1 3700) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 58 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 148 245 174 221 111 13 172 236 38 183 220 136 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3600) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 6700) (list 1 1/4 1 3800) (list 1 1/4 1 4700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 148 245 174 221 111 13 172 236 38 183 220 136 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 111 13 172 236 38 183 219 137 15 39 132 196 1 142 39 181 96 160 12 150 147 60 99 163 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7000) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4700) (list 1 1/4 1 3700) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 111 13 172 236 38 183 219 137 15 39 132 196 1 142 39 181 96 160 12 150 147 60 99 163 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 150 70 159 245 236 221 111 174 172 236 38 183 64 36 15 39 132 142 1 196 39 142 21 49 150 147 235 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 3800) (list 0 1/4 1 6900) (list 0 1/4 1 4700) (list 0 1/4 1 5900) (list 1/4 1/4 1 5000) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 6200) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 6300) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 6700) (list 1 1/4 1 3700) (list 1 1/4 1 4700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 4900) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 70 159 245 236 221 111 174 172 236 38 183 64 36 15 39 132 142 1 196 39 142 21 49 150 147 235 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 195 2 142 39 181 96 160 147 150 12 58 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4600) (list 1 1/4 1 3800) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 195 2 142 39 181 96 160 147 150 12 58 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 1861.231 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 114 130 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 5500) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4700) (list 1 1/4 1 3700) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 114 130 172 236 38 183 220 136 15 39 132 196 1 142 39 181 96 160 147 150 12 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 150 70 159 245 236 221 111 174 172 236 38 183 64 36 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 3800) (list 0 1/4 1 6900) (list 0 1/4 1 4700) (list 0 1/4 1 5900) (list 1/4 1/4 1 5000) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 6200) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 6300) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 6700) (list 1 1/4 1 3800) (list 1 1/4 1 4700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 70 159 245 236 221 111 174 172 236 38 183 64 36 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 148 245 174 221 111 10 175 236 38 183 220 136 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3600) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4600) (list 1/2 1/4 1 6300) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 6700) (list 1 1/4 1 3800) (list 1 1/4 1 4700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 148 245 174 221 111 10 175 236 38 183 220 136 15 39 132 142 2 196 39 142 21 49 147 150 12 60 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 2336.1072 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 142 60 49 150 147 235 21 163 99 110 1) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4800) (list 0 1/4 1 6900) (list 0 1/4 1 3800) (list 0 1/4 1 5900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 7200) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 4900) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5000) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 3800) (list 1 1/4 1 5700) (list 1 1/4 1 4700) (list 1 1/4 1 3700) (list 1 1/4 1 6700) (list 5/4 1/4 1 3800) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 5900) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 7200) (list 3/2 1/4 1 4900) (list 3/2 1/4 1 5700) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 70 150 245 174 221 111 13 172 236 38 183 220 136 15 39 132 196 1 142 39 142 60 49 150 147 235 21 163 99 110 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9))) (setf (om-darwin::generation om-darwin::ga) 176) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4800 6900 3800 5900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 7200 3600 4900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5000 3700 7100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6100 5100 3800)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 3700 6700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 6900 5800 4800)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 3800 4800 5900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 6100 7200 3700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1072 65) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "species.ga-chord-seq" (quote ("elements" "species.ga-chord-seq")) (quote nil) (om-make-point 73 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0))) nil 6.16))
