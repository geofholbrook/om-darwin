; OM File Header - Saved 2020/12/01 11:07:16
; (6.16 :patc (om-make-point 226 60) (om-make-point 1951 -185) (om-make-point 739 595) "" 183 0 "2020/11/26 22:08:41" "2020/12/01 11:07:16")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"species.ga-chord-seq.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criteria.harmonic" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 458 58) (om-make-point 75 30) (list 1000 nil) "(1000 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 480 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 110 281) (om-make-point 524 174) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 41 165 183 33 38 111 92 11 106 123 118 236 194 47 58 51 109 109 18 143 79 56 119 223 64 221 8 176 34 56 237) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 41 165 183 33 38 111 92 11 106 123 118 236 194 47 58 51 109 109 18 143 79 56 119 223 64 221 8 176 34 56 237)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 107277.3 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 246 254 2 173 113 23 179 2 68 142 124 154 180 34 61 38 118 64 60 159 161 26 197 31 163 187 208 153 134 15 15 174) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 6800) (list 0 1/4 1 3800) (list 0 1/4 1 6100) (list 1/4 1/4 1 3800) (list 1/4 1/4 1 5900) (list 1/4 1/4 1 6700) (list 1/4 1/4 1 3800) (list 1/2 1/4 1 6700) (list 1/2 1/4 1 6700) (list 1/2 1/4 1 4900) (list 1/2 1/4 1 4200) (list 3/4 1/4 1 6800) (list 3/4 1/4 1 7000) (list 3/4 1/4 1 6000) (list 3/4 1/4 1 3700) (list 1 1/4 1 4300) (list 1 1/4 1 6300) (list 1 1/4 1 5900) (list 1 1/4 1 4700) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 6200) (list 5/4 1/4 1 4800) (list 5/4 1/4 1 6700) (list 3/2 1/4 1 5100) (list 3/2 1/4 1 3800) (list 3/2 1/4 1 5900) (list 3/2 1/4 1 4100) (list 7/4 1/4 1 5900) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6200)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 246 254 2 173 113 23 179 2 68 142 124 154 180 34 61 38 118 64 60 159 161 26 197 31 163 187 208 153 134 15 15 174)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 90894.625 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 9 244 136 120 81 119 91 227 173 78 46 240 82 60 0 227 154 216 75 170 73 252 164 7 248 55 233 104 42 93 39 61) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4500) (list 0 1/4 1 5800) (list 0 1/4 1 6100) (list 0 1/4 1 4500) (list 1/4 1/4 1 4300) (list 1/4 1/4 1 4400) (list 1/4 1/4 1 5300) (list 1/4 1/4 1 4100) (list 1/2 1/4 1 6100) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 4500) (list 1/2 1/4 1 5400) (list 3/4 1/4 1 4400) (list 3/4 1/4 1 5900) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 4100) (list 1 1/4 1 4200) (list 1 1/4 1 6700) (list 1 1/4 1 3700) (list 1 1/4 1 5800) (list 5/4 1/4 1 7200) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 5200) (list 5/4 1/4 1 4300) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 5400) (list 3/2 1/4 1 4700) (list 3/2 1/4 1 6600) (list 7/4 1/4 1 4100) (list 7/4 1/4 1 5500) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 6000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 244 136 120 81 119 91 227 173 78 46 240 82 60 0 227 154 216 75 170 73 252 164 7 248 55 233 104 42 93 39 61)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 113608.59 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 204 202 166 116 123 40 89 218 20 234 75 99 193 197 172 179 7 130 240 59 108 215 70 192 82 30 197 242 131 62 137 100) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5500) (list 0 1/4 1 5300) (list 0 1/4 1 5400) (list 0 1/4 1 4100) (list 1/4 1/4 1 4800) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 5100) (list 1/4 1/4 1 6900) (list 1/2 1/4 1 5600) (list 1/2 1/4 1 4800) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 6100) (list 3/4 1/4 1 4400) (list 3/4 1/4 1 4800) (list 3/4 1/4 1 6000) (list 3/4 1/4 1 6700) (list 1 1/4 1 4300) (list 1 1/4 1 5500) (list 1 1/4 1 5400) (list 1 1/4 1 5800) (list 5/4 1/4 1 7000) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 4300) (list 3/2 1/4 1 4400) (list 3/2 1/4 1 6600) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 5600) (list 7/4 1/4 1 5600) (list 7/4 1/4 1 6100) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 6200)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 204 202 166 116 123 40 89 218 20 234 75 99 193 197 172 179 7 130 240 59 108 215 70 192 82 30 197 242 131 62 137 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 104354.85 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 26 61 181 255 199 145 77 223 205 154 132 106 125 79 186 139 9 47 30 226 103 198 48 228 227 43 122 239 234 41 243 185) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 6000) (list 0 1/4 1 6900) (list 0 1/4 1 6900) (list 1/4 1/4 1 5000) (list 1/4 1/4 1 7000) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 3700) (list 1/2 1/4 1 5600) (list 1/2 1/4 1 4200) (list 1/2 1/4 1 5700) (list 1/2 1/4 1 6800) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 4100) (list 3/4 1/4 1 3700) (list 3/4 1/4 1 6400) (list 1 1/4 1 4500) (list 1 1/4 1 4600) (list 1 1/4 1 6600) (list 1 1/4 1 4000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 4700) (list 5/4 1/4 1 4200) (list 3/2 1/4 1 4100) (list 3/2 1/4 1 4200) (list 3/2 1/4 1 4700) (list 3/2 1/4 1 5300) (list 7/4 1/4 1 4800) (list 7/4 1/4 1 4000) (list 7/4 1/4 1 5700) (list 7/4 1/4 1 3600)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 26 61 181 255 199 145 77 223 205 154 132 106 125 79 186 139 9 47 30 226 103 198 48 228 227 43 122 239 234 41 243 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 114300.61 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 231 233 45 66 253 111 146 141 33 91 78 62 14 242 56 3 240 110 116 42 178 87 211 36 158 44 9 142 188 113 90 189) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4500) (list 0 1/4 1 4700) (list 0 1/4 1 4400) (list 0 1/4 1 6500) (list 1/4 1/4 1 6700) (list 1/4 1/4 1 3600) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 5300) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6100) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 5600) (list 3/4 1/4 1 5500) (list 3/4 1/4 1 3900) (list 1 1/4 1 5400) (list 1 1/4 1 7200) (list 1 1/4 1 4100) (list 1 1/4 1 4100) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 6200) (list 5/4 1/4 1 7200) (list 3/2 1/4 1 4600) (list 3/2 1/4 1 4300) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 6700) (list 7/4 1/4 1 3900) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 4000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 233 45 66 253 111 146 141 33 91 78 62 14 242 56 3 240 110 116 42 178 87 211 36 158 44 9 142 188 113 90 189)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 97264.42 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 223 186 187 95 172 195 14 33 140 86 145 122 137 183 9 203 168 250 122 231 102 21 164 200 231 255 92 27 85 155 66 233) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 3700) (list 0 1/4 1 3700) (list 0 1/4 1 3800) (list 0 1/4 1 5700) (list 1/4 1/4 1 6000) (list 1/4 1/4 1 4600) (list 1/4 1/4 1 5000) (list 1/4 1/4 1 6900) (list 1/2 1/4 1 6500) (list 1/2 1/4 1 4800) (list 1/2 1/4 1 7000) (list 1/2 1/4 1 4700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 4500) (list 3/4 1/4 1 5400) (list 1 1/4 1 5600) (list 1 1/4 1 6400) (list 1 1/4 1 4700) (list 1 1/4 1 4500) (list 5/4 1/4 1 6400) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 5200) (list 5/4 1/4 1 5100) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 6900) (list 3/2 1/4 1 5400) (list 3/2 1/4 1 6300) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 4300) (list 7/4 1/4 1 6500) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 223 186 187 95 172 195 14 33 140 86 145 122 137 183 9 203 168 250 122 231 102 21 164 200 231 255 92 27 85 155 66 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 92080.88 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 166 209 136 123 241 12 187 22 110 164 155 191 232 200 104 21 10 234 217 200 247 255 200 96 140 231 41 182 26 222 164 198) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5400) (list 0 1/4 1 6000) (list 0 1/4 1 6100) (list 0 1/4 1 4800) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 4800) (list 1/4 1/4 1 3800) (list 1/4 1/4 1 5800) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 4200) (list 3/4 1/4 1 4600) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 6600) (list 3/4 1/4 1 5700) (list 1 1/4 1 4600) (list 1 1/4 1 4800) (list 1 1/4 1 6800) (list 1 1/4 1 5100) (list 5/4 1/4 1 6100) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5100) (list 5/4 1/4 1 5800) (list 3/2 1/4 1 6500) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 7000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3600) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 4900)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 166 209 136 123 241 12 187 22 110 164 155 191 232 200 104 21 10 234 217 200 247 255 200 96 140 231 41 182 26 222 164 198)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 109961.7 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 53 21 72 161 209 51 189 4 100 194 46 12 163 146 73 141 69 70 11 183 32 141 110 8 159 197 146 223 240 211 116 10) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5200) (list 0 1/4 1 5700) (list 0 1/4 1 7100) (list 0 1/4 1 4900) (list 1/4 1/4 1 6000) (list 1/4 1/4 1 5000) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 4000) (list 1/2 1/4 1 6200) (list 1/2 1/4 1 4500) (list 1/2 1/4 1 4500) (list 1/2 1/4 1 4800) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 6600) (list 1 1/4 1 6800) (list 1 1/4 1 6900) (list 1 1/4 1 4700) (list 1 1/4 1 7100) (list 5/4 1/4 1 6800) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 7200) (list 5/4 1/4 1 4400) (list 3/2 1/4 1 4700) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 3700) (list 7/4 1/4 1 5400) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 4100) (list 7/4 1/4 1 4600)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 53 21 72 161 209 51 189 4 100 194 46 12 163 146 73 141 69 70 11 183 32 141 110 8 159 197 146 223 240 211 116 10)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 87984.9 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 93 239 244 109 252 94 151 47 33 213 174 33 87 206 150 136 238 72 251 206 121 60 65 116 55 149 62 47 27 157 149 227) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5500) (list 0 1/4 1 5300) (list 0 1/4 1 5800) (list 0 1/4 1 7100) (list 1/4 1/4 1 6600) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 4600) (list 1/2 1/4 1 6900) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 6200) (list 1/2 1/4 1 6900) (list 3/4 1/4 1 4900) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 3800) (list 3/4 1/4 1 6100) (list 1 1/4 1 5200) (list 1 1/4 1 7100) (list 1 1/4 1 6500) (list 1 1/4 1 5700) (list 5/4 1/4 1 4600) (list 5/4 1/4 1 5900) (list 5/4 1/4 1 6400) (list 5/4 1/4 1 4100) (list 3/2 1/4 1 5400) (list 3/2 1/4 1 3700) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 4600) (list 7/4 1/4 1 6300) (list 7/4 1/4 1 4500) (list 7/4 1/4 1 3700) (list 7/4 1/4 1 4100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 239 244 109 252 94 151 47 33 213 174 33 87 206 150 136 238 72 251 206 121 60 65 116 55 149 62 47 27 157 149 227)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 97790.27 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 5 186 198 233 25 35 205 54 85 178 240 8 170 73 19 252 41 29 33 240 19 159 64 244 176 51 229 119 188 254 87 42) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4100) (list 0 1/4 1 3700) (list 0 1/4 1 4900) (list 0 1/4 1 4700) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 5300) (list 1/2 1/4 1 4700) (list 1/2 1/4 1 6600) (list 1/2 1/4 1 5400) (list 1/2 1/4 1 4400) (list 3/4 1/4 1 5800) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 5500) (list 3/4 1/4 1 6600) (list 1 1/4 1 4000) (list 1 1/4 1 6500) (list 1 1/4 1 6900) (list 1 1/4 1 5400) (list 5/4 1/4 1 5500) (list 5/4 1/4 1 4700) (list 5/4 1/4 1 6300) (list 5/4 1/4 1 5800) (list 3/2 1/4 1 6400) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 4300) (list 3/2 1/4 1 4400) (list 7/4 1/4 1 3900) (list 7/4 1/4 1 6800) (list 7/4 1/4 1 4900) (list 7/4 1/4 1 4100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 186 198 233 25 35 205 54 85 178 240 8 170 73 19 252 41 29 33 240 19 159 64 244 176 51 229 119 188 254 87 42)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6800 3800 6100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 5900 6700 3800)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6700 4900 4200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 7000 6000 3700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 6300 5900 4700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 6200 4800 6700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 3800 5900 4100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5100 5100 6200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 1072 65) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "species.ga-chord-seq" (quote ("elements" "species.ga-chord-seq")) (quote nil) (om-make-point 73 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0))) nil 6.16))
