; OM File Header - Saved 2020/11/30 14:12:20
; (6.16 :patc (om-make-point 226 60) (om-make-point 50 50) (om-make-point 999 689) "" 183 0 "2020/11/26 22:19:35" "2020/11/26 22:29:44")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"species.ga-chord-seq.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criteria.list" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 231 119) (quote "an integer input applies a weight multiplier to the criterion to the left") "" (om-make-point 730 151) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 664 182) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 500 271) (om-make-point 193 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 600 63) (om-make-point 135 30) (list (quote :set) 0 2 4 5 7 9 11) "(:set 0 2 4 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 601 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 371 58) (om-make-point 68 30) (list 800 nil) "(800 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 441 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 176 384) (om-make-point 524 174) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 236 20 98 249 198 39 165 24 95 143 88 197 86 114 143 183 214 246 189 192 199 222 73 3 94 4 249 163 57 7 58 254) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 236 20 98 249 198 39 165 24 95 143 88 197 86 114 143 183 214 246 189 192 199 222 73 3 94 4 249 163 57 7 58 254)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 46235.415 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 190 97 196 183 3 206 85 215 80 192 202 181 199 213 43 33 160 98 193 212 139 87 236 210 197 189 127 42 117 109 54 225) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4100) (list 0 1/4 1 5900) (list 0 1/4 1 4700) (list 0 1/4 1 7100) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 5700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 6600) (list 1/2 1/4 1 4200) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 5300) (list 1/2 1/4 1 6900) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 6400) (list 3/4 1/4 1 4200) (list 3/4 1/4 1 6900) (list 1 1/4 1 4800) (list 1 1/4 1 6000) (list 1 1/4 1 4400) (list 1 1/4 1 6300) (list 5/4 1/4 1 6400) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 5000) (list 5/4 1/4 1 6100) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 5200) (list 3/2 1/4 1 4100) (list 7/4 1/4 1 4200) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 5300) (list 7/4 1/4 1 3900)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 190 97 196 183 3 206 85 215 80 192 202 181 199 213 43 33 160 98 193 212 139 87 236 210 197 189 127 42 117 109 54 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 77200.016 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 24 145 11 57 100 226 247 152 31 131 157 107 160 239 50 201 184 34 99 124 169 54 159 123 87 194 62 52 55 208 232 225) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 7000) (list 0 1/4 1 4700) (list 0 1/4 1 5600) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 4000) (list 1/2 1/4 1 6700) (list 1/2 1/4 1 5600) (list 1/2 1/4 1 4500) (list 1/2 1/4 1 6900) (list 3/4 1/4 1 4800) (list 3/4 1/4 1 5300) (list 3/4 1/4 1 4900) (list 3/4 1/4 1 5200) (list 1 1/4 1 7200) (list 1 1/4 1 7000) (list 1 1/4 1 6100) (list 1 1/4 1 4900) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4700) (list 5/4 1/4 1 4800) (list 3/2 1/4 1 4900) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5100) (list 7/4 1/4 1 5400) (list 7/4 1/4 1 5900) (list 7/4 1/4 1 4600) (list 7/4 1/4 1 3900)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 24 145 11 57 100 226 247 152 31 131 157 107 160 239 50 201 184 34 99 124 169 54 159 123 87 194 62 52 55 208 232 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 63934.965 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 77 82 52 119 28 83 105 26 229 57 7 2 36 115 64 20 67 104 169 166 8 203 249 224 93 111 219 0 76 3 59 104) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 3900) (list 0 1/4 1 4400) (list 0 1/4 1 5100) (list 0 1/4 1 4400) (list 1/4 1/4 1 6400) (list 1/4 1/4 1 4500) (list 1/4 1/4 1 6700) (list 1/4 1/4 1 6200) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 5600) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 3800) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 6300) (list 3/4 1/4 1 5600) (list 1 1/4 1 6600) (list 1 1/4 1 6600) (list 1 1/4 1 5700) (list 1 1/4 1 5400) (list 5/4 1/4 1 4400) (list 5/4 1/4 1 5400) (list 5/4 1/4 1 6300) (list 5/4 1/4 1 3800) (list 3/2 1/4 1 5500) (list 3/2 1/4 1 3600) (list 3/2 1/4 1 7000) (list 3/2 1/4 1 3600) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 3900) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 6600)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 77 82 52 119 28 83 105 26 229 57 7 2 36 115 64 20 67 104 169 166 8 203 249 224 93 111 219 0 76 3 59 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 53681.207 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 214 116 162 19 165 9 204 101 205 37 81 62 106 116 55 33 173 17 57 28 235 28 183 40 170 27 49 250 116 232 74 6) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6500) (list 0 1/4 1 4100) (list 0 1/4 1 5000) (list 0 1/4 1 5500) (list 1/4 1/4 1 5300) (list 1/4 1/4 1 4500) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 6300) (list 1/2 1/4 1 5600) (list 1/2 1/4 1 3600) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 6100) (list 3/4 1/4 1 6800) (list 3/4 1/4 1 4100) (list 3/4 1/4 1 5400) (list 3/4 1/4 1 6900) (list 1 1/4 1 6100) (list 1 1/4 1 5300) (list 1 1/4 1 5600) (list 1 1/4 1 6400) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 6400) (list 5/4 1/4 1 7100) (list 5/4 1/4 1 3900) (list 3/2 1/4 1 5800) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 4800) (list 3/2 1/4 1 6400) (list 7/4 1/4 1 4100) (list 7/4 1/4 1 4600) (list 7/4 1/4 1 3600) (list 7/4 1/4 1 4200)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 214 116 162 19 165 9 204 101 205 37 81 62 106 116 55 33 173 17 57 28 235 28 183 40 170 27 49 250 116 232 74 6)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 61667.56 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 46 83 98 223 180 77 100 23 186 223 36 184 21 151 135 25 246 49 72 119 35 178 222 162 247 119 134 191 27 203 230 223) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4500) (list 0 1/4 1 4500) (list 0 1/4 1 6000) (list 0 1/4 1 3700) (list 1/4 1/4 1 6800) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 5900) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 3700) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 3900) (list 3/4 1/4 1 6000) (list 3/4 1/4 1 6100) (list 1 1/4 1 6000) (list 1 1/4 1 4800) (list 1 1/4 1 7100) (list 1 1/4 1 4400) (list 5/4 1/4 1 7100) (list 5/4 1/4 1 6600) (list 5/4 1/4 1 3600) (list 5/4 1/4 1 5000) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 4400) (list 3/2 1/4 1 5900) (list 3/2 1/4 1 4200) (list 7/4 1/4 1 6300) (list 7/4 1/4 1 5400) (list 7/4 1/4 1 4400) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 46 83 98 223 180 77 100 23 186 223 36 184 21 151 135 25 246 49 72 119 35 178 222 162 247 119 134 191 27 203 230 223)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 77323.946 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 50 100 34 139 208 168 200 7 106 100 100 63 107 8 78 18 168 128 51 3 21 236 13 135 200 1 65 29 14 225 195 75) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4900) (list 0 1/4 1 6200) (list 0 1/4 1 7000) (list 0 1/4 1 6400) (list 1/4 1/4 1 5900) (list 1/4 1/4 1 5600) (list 1/4 1/4 1 5100) (list 1/4 1/4 1 4300) (list 1/2 1/4 1 6800) (list 1/2 1/4 1 6200) (list 1/2 1/4 1 6200) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 6900) (list 3/4 1/4 1 4400) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5400) (list 1 1/4 1 5600) (list 1 1/4 1 5300) (list 1 1/4 1 5000) (list 1 1/4 1 3900) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 5000) (list 5/4 1/4 1 4900) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5100) (list 3/2 1/4 1 3700) (list 3/2 1/4 1 6400) (list 3/2 1/4 1 6500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 3900) (list 7/4 1/4 1 4600) (list 7/4 1/4 1 3700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 100 34 139 208 168 200 7 106 100 100 63 107 8 78 18 168 128 51 3 21 236 13 135 200 1 65 29 14 225 195 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 74929.38 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 138 28 86 2 143 105 10 219 200 172 40 201 202 177 126 63 137 0 56 217 199 162 127 240 64 225 210 57 51 19 69 46) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6300) (list 0 1/4 1 6400) (list 0 1/4 1 4800) (list 0 1/4 1 3800) (list 1/4 1/4 1 6800) (list 1/4 1/4 1 6700) (list 1/4 1/4 1 4600) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 5100) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 3900) (list 1/2 1/4 1 5200) (list 3/4 1/4 1 5300) (list 3/4 1/4 1 6500) (list 3/4 1/4 1 5100) (list 3/4 1/4 1 6200) (list 1 1/4 1 6200) (list 1 1/4 1 3600) (list 1 1/4 1 5500) (list 1 1/4 1 6800) (list 5/4 1/4 1 5000) (list 5/4 1/4 1 5000) (list 5/4 1/4 1 5200) (list 5/4 1/4 1 5400) (list 3/2 1/4 1 6300) (list 3/2 1/4 1 3900) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5600) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 5500) (list 7/4 1/4 1 6800) (list 7/4 1/4 1 4500)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 28 86 2 143 105 10 219 200 172 40 201 202 177 126 63 137 0 56 217 199 162 127 240 64 225 210 57 51 19 69 46)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 62642.168 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 16 105 52 210 255 144 233 9 53 61 240 181 177 6 184 67 36 239 71 20 214 146 186 46 191 56 99 104 156 196 211 225) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5200) (list 0 1/4 1 6700) (list 0 1/4 1 5100) (list 0 1/4 1 6100) (list 1/4 1/4 1 6900) (list 1/4 1/4 1 6900) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 4500) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 5400) (list 1/2 1/4 1 6900) (list 3/4 1/4 1 6500) (list 3/4 1/4 1 4200) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 6600) (list 1 1/4 1 7200) (list 1 1/4 1 5300) (list 1 1/4 1 7000) (list 1 1/4 1 5600) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 7100) (list 5/4 1/4 1 3700) (list 5/4 1/4 1 4500) (list 3/2 1/4 1 4200) (list 3/2 1/4 1 5500) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 6600) (list 7/4 1/4 1 4400) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3900)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 16 105 52 210 255 144 233 9 53 61 240 181 177 6 184 67 36 239 71 20 214 146 186 46 191 56 99 104 156 196 211 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 59347.516 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 101 185 129 98 132 247 204 36 41 32 221 122 17 170 110 162 12 156 155 175 11 3 243 206 239 83 99 22 226 215 89 102) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6300) (list 0 1/4 1 3600) (list 0 1/4 1 5400) (list 0 1/4 1 6000) (list 1/4 1/4 1 5700) (list 1/4 1/4 1 6100) (list 1/4 1/4 1 5500) (list 1/4 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6800) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4700) (list 3/4 1/4 1 5300) (list 3/4 1/4 1 5800) (list 3/4 1/4 1 7200) (list 3/4 1/4 1 5000) (list 1 1/4 1 4800) (list 1 1/4 1 4400) (list 1 1/4 1 4300) (list 1 1/4 1 6300) (list 5/4 1/4 1 4700) (list 5/4 1/4 1 3900) (list 5/4 1/4 1 5700) (list 5/4 1/4 1 5700) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5800) (list 7/4 1/4 1 4000) (list 7/4 1/4 1 6600) (list 7/4 1/4 1 5100) (list 7/4 1/4 1 6400)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 185 129 98 132 247 204 36 41 32 221 122 17 170 110 162 12 156 155 175 11 3 243 206 239 83 99 22 226 215 89 102)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 73422.81 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 16 146 43 23 98 179 198 251 229 177 135 157 189 35 143 41 184 205 178 166 170 60 205 203 19 143 155 91 127 236 38 5) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5200) (list 0 1/4 1 7100) (list 0 1/4 1 4200) (list 0 1/4 1 5900) (list 1/4 1/4 1 6000) (list 1/4 1/4 1 6700) (list 1/4 1/4 1 4900) (list 1/4 1/4 1 6500) (list 1/2 1/4 1 4300) (list 1/2 1/4 1 6500) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 4500) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 7100) (list 3/4 1/4 1 6800) (list 3/4 1/4 1 4000) (list 1 1/4 1 7200) (list 1 1/4 1 5600) (list 1 1/4 1 6600) (list 1 1/4 1 5400) (list 5/4 1/4 1 5800) (list 5/4 1/4 1 5900) (list 5/4 1/4 1 5600) (list 5/4 1/4 1 5400) (list 3/2 1/4 1 5500) (list 3/2 1/4 1 6800) (list 3/2 1/4 1 4300) (list 3/2 1/4 1 5300) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 3700) (list 7/4 1/4 1 4100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 16 146 43 23 98 179 198 251 229 177 135 157 189 35 143 41 184 205 178 166 170 60 205 203 19 143 155 91 127 236 38 5)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100 5900 4700 7100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 5700 4700 6600)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 4300 5300 6900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6400 4200 6900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 6000 4400 6300)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4900 5000 6100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 4000 5200 4100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 7100 5300 3900)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1072 65) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "species.ga-chord-seq" (quote ("elements" "species.ga-chord-seq")) (quote nil) (om-make-point 73 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 2 2 nil 0) (3 0 4 0 nil 0) (5 0 6 0 nil 0) (8 0 7 1 nil 0) (2 0 7 2 nil 0))) nil 6.16))
