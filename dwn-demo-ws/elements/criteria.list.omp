; OM File Header - Saved 2020/12/01 11:07:16
; (6.16 :patc (om-make-point 226 60) (om-make-point 50 50) (om-make-point 999 689) "" 183 0 "2020/11/26 22:19:35" "2020/12/01 11:07:16")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"species.ga-chord-seq.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criteria.list" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 231 119) (quote "an integer input applies a weight multiplier to the criterion to the left") "" (om-make-point 745 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 664 182) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 500 271) (om-make-point 193 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 600 63) (om-make-point 135 30) (list (quote :set) 0 2 4 5 7 9 11) "(:set 0 2 4 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 601 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 371 58) (om-make-point 68 30) (list 800 nil) "(800 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 441 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 176 384) (om-make-point 524 174) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 138 135 27 220 155 163 125 198 22 252 29 152 243 78 225 115 131 134 155 223 208 204 189 179 185 119 36 240 88 202 143 240) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 135 27 220 155 163 125 198 22 252 29 152 243 78 225 115 131 134 155 223 208 204 189 179 185 119 36 240 88 202 143 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 222 147 72 174 48 0 28 2 53 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 248 150 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3600) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3600) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 6400) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 5900) (list 1 1/4 1 4700) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 222 147 72 174 48 0 28 2 53 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 248 150 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 944) (list 1.6338116 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 40 73 72 174 48 0 28 2 53 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 248 150 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3900) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3600) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 6400) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 5900) (list 1 1/4 1 4700) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 40 73 72 174 48 0 28 2 53 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 248 150 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 4.079074 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 222 147 72 174 48 0 53 2 28 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 244 154 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3600) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3600) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 6400) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 5900) (list 1 1/4 1 4700) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 5800) (list 7/4 1/4 1 4200) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 222 147 72 174 48 0 53 2 28 147 14 213 111 221 113 109 23 233 181 202 9 74 26 17 146 120 125 244 154 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 6.966298 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 222 147 72 174 48 0 28 2 53 147 9 111 23 221 113 109 233 212 181 202 9 75 120 17 148 25 248 183 150 125) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3600) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3600) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 4500) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 5900) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 4700) (list 1 1/4 1 6300) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3700) (list 3/2 1/4 1 4500) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 3600) (list 3/2 1/4 1 6100) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 5000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 222 147 72 174 48 0 28 2 53 147 9 111 23 221 113 109 233 212 181 202 9 75 120 17 148 25 248 183 150 125)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 10.184067 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 147 222 88 72 174 48 3 166 111 10 147 9 148 23 221 113 109 233 212 181 202 9 74 26 17 146 120 125 248 150 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 7200) (list 0 1/4 1 3600) (list 0 1/4 1 5000) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3900) (list 1/2 1/4 1 5400) (list 1/2 1/4 1 3600) (list 1/2 1/4 1 4600) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 4500) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 5900) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 4700) (list 1 1/4 1 6300) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 147 222 88 72 174 48 3 166 111 10 147 9 148 23 221 113 109 233 212 181 202 9 74 26 17 146 120 125 248 150 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 13.672327 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 84 220 149 72 174 48 0 28 5 50 147 14 213 111 221 23 109 113 233 181 202 9 74 25 17 146 120 248 186 147 125) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 4600) (list 0 1/4 1 7100) (list 0 1/4 1 3700) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3600) (list 1/2 1/4 1 6400) (list 1/2 1/4 1 4100) (list 1/2 1/4 1 4900) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 5000) (list 3/4 1/4 1 6400) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 7200) (list 1 1/4 1 5900) (list 1 1/4 1 7100) (list 1 1/4 1 3800) (list 1 1/4 1 4700) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3700) (list 7/4 1/4 1 7200) (list 7/4 1/4 1 5000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 84 220 149 72 174 48 0 28 5 50 147 14 213 111 221 23 109 113 233 181 202 9 74 25 17 146 120 248 186 147 125)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 17.392487 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 222 147 72 174 48 3 166 111 10 147 9 148 23 221 109 113 233 212 181 202 9 75 25 17 148 120 248 183 150 125) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3600) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3900) (list 1/2 1/4 1 5400) (list 1/2 1/4 1 3600) (list 1/2 1/4 1 4600) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 4500) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 5900) (list 3/4 1/4 1 7200) (list 1 1/4 1 7100) (list 1 1/4 1 3800) (list 1 1/4 1 4700) (list 1 1/4 1 6300) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3700) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 3600) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 5000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 222 147 72 174 48 3 166 111 10 147 9 148 23 221 109 113 233 212 181 202 9 75 25 17 148 120 248 183 150 125)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 21.317263 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 134 89 222 147 72 174 48 3 166 148 10 147 9 111 23 221 113 109 233 212 181 202 9 75 25 17 148 120 183 248 150 125) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5900) (list 0 1/4 1 5100) (list 0 1/4 1 3600) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3900) (list 1/2 1/4 1 5400) (list 1/2 1/4 1 3600) (list 1/2 1/4 1 4600) (list 1/2 1/4 1 7200) (list 3/4 1/4 1 4500) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 5900) (list 3/4 1/4 1 7200) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 4700) (list 1 1/4 1 6300) (list 5/4 1/4 1 6900) (list 5/4 1/4 1 5300) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3700) (list 3/2 1/4 1 6100) (list 3/2 1/4 1 5300) (list 3/2 1/4 1 3600) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 7100) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 3800) (list 7/4 1/4 1 5000)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 134 89 222 147 72 174 48 3 166 148 10 147 9 111 23 221 113 109 233 212 181 202 9 75 25 17 148 120 183 248 150 125)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 25.42616 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 135 88 40 73 72 174 48 1 221 2 53 28 198 95 106 152 113 109 20 234 20 177 9 74 26 146 203 120 125 100 43 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6000) (list 0 1/4 1 5000) (list 0 1/4 1 3900) (list 0 1/4 1 7200) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6200) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 6400) (list 3/4 1/4 1 4900) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6800) (list 3/4 1/4 1 4000) (list 1 1/4 1 3800) (list 1 1/4 1 7100) (list 1 1/4 1 5600) (list 1 1/4 1 4800) (list 5/4 1/4 1 5600) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 5400) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 4200) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 88 40 73 72 174 48 1 221 2 53 28 198 95 106 152 113 109 20 234 20 177 9 74 26 146 203 120 125 100 43 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 29.703125 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 137 86 147 222 72 175 47 1 221 2 53 28 198 95 106 152 109 113 20 234 18 179 9 74 26 146 203 120 125 100 43 183) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 6200) (list 0 1/4 1 4800) (list 0 1/4 1 7200) (list 0 1/4 1 3600) (list 1/4 1/4 1 7100) (list 1/4 1/4 1 6300) (list 1/4 1/4 1 4600) (list 1/4 1/4 1 3700) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 3800) (list 1/2 1/4 1 5200) (list 1/2 1/4 1 6400) (list 3/4 1/4 1 4900) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6800) (list 3/4 1/4 1 4000) (list 1 1/4 1 7100) (list 1 1/4 1 3800) (list 1 1/4 1 5600) (list 1 1/4 1 4800) (list 5/4 1/4 1 5400) (list 5/4 1/4 1 6700) (list 5/4 1/4 1 4500) (list 5/4 1/4 1 3600) (list 3/2 1/4 1 6200) (list 3/2 1/4 1 7100) (list 3/2 1/4 1 5400) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 5000) (list 7/4 1/4 1 6200) (list 7/4 1/4 1 4200) (list 7/4 1/4 1 7100)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 86 147 222 72 175 47 1 221 2 53 28 198 95 106 152 109 113 20 234 18 179 9 74 26 146 203 120 125 100 43 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 1125) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5000 3600 7200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6200 4700 3600)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 3800 5200 7200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6400 3600 7200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 7100 5900 4700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5300 4500 3600)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5300 7100 4500)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6200 3800 7100)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 1072 65) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "species.ga-chord-seq" (quote ("elements" "species.ga-chord-seq")) (quote nil) (om-make-point 123 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 2 2 nil 0) (3 0 4 0 nil 0) (5 0 6 0 nil 0) (8 0 7 1 nil 0) (2 0 7 2 nil 0))) nil 6.16))