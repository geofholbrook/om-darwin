; OM File Header - Saved 2020/12/01 11:07:16
; (6.16 :patc (om-make-point 10 10) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 "2020/12/01 9:56:20" "2020/12/01 11:07:16")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"species.ga-chord-seq.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "criterion" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 384 40) (om-make-point 56 30) (quote :chord) ":chord" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 551 46) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 482 27) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pitch) $  (and (member (mod pitch 500) (list 0 200)) t)$)$") (quote ((om-load-inputfun (quote input-funbox) "" "PITCH" nil))) (om-make-point 300 44) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :chord) (list (list "operons" (quote :operons)) (list "onoperons" (quote :onoperons)) (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "adjacent-regions" (quote :adjacent-regions)) (list "adjacent-pitches" (quote :adjacent-pitches)) (list "elements" (quote :elements)) (list "adjacent-elements" (quote :adjacent-elements)) (list "dx" (quote :dx)) (list "signed-dx" (quote :signed-dx)) (list "attacks" (quote :attacks)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)) (list "chord" (quote :chord)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 405 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 93 471) (om-make-point 524 174) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 242 51 146 86 68 150 177 155 182 167 172 71 88 91 20 175 3 92 182 107 122 205 113 241 40 7 203 123 247 96 96 217) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 242 51 146 86 68 150 177 155 182 167 172 71 88 91 20 175 3 92 182 107 122 205 113 241 40 7 203 123 247 96 96 217)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 209 51 172 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6200) (list 1 1/4 1 6700) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 209 51 172 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 20941) (list 0.010308652 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 71 135 110 225 248 226 58 63 71 159 26 216 145 140 29 135 209 51 172 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 3900) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6200) (list 1 1/4 1 6700) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 71 135 110 225 248 226 58 63 71 159 26 216 145 140 29 135 209 51 172 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.025737213 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 109 151 172 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6200) (list 1 1/4 1 6700) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 7100) (list 3/2 1/4 1 3900) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 109 151 172 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 0.043954365 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 249 249 145 140 29 135 209 51 172 226 83 196 164 155 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6300) (list 1 1/4 1 6300) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 4300) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 71 135 110 226 248 226 58 63 71 159 249 249 145 140 29 135 209 51 172 226 83 196 164 155 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.06425711 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 77 72 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 109 151 172 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 7100) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6200) (list 1 1/4 1 6700) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 7100) (list 3/2 1/4 1 3900) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 77 72 135 110 226 248 226 58 63 71 159 26 216 145 140 29 135 109 151 172 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.08626654 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 170 247 216 11 75 78 71 135 110 226 248 226 58 63 71 159 234 8 207 140 29 135 209 51 172 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 5800) (list 0 1/4 1 6100) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 4800) (list 1 1/4 1 4400) (list 1 1/4 1 5800) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 170 247 216 11 75 78 71 135 110 226 248 226 58 63 71 159 234 8 207 140 29 135 209 51 172 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.109739155 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 84 135 110 134 71 226 58 63 71 159 234 8 145 140 29 135 209 104 119 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 4600) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 5900) (list 1/2 1/4 1 7000) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 4800) (list 1 1/4 1 4400) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 6600) (list 3/2 1/4 1 4400) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 84 135 110 134 71 226 58 63 71 159 234 8 145 140 29 135 209 104 119 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.13450282 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 170 247 216 11 75 78 71 135 110 226 248 226 58 63 71 159 234 8 207 140 29 135 209 51 172 226 83 143 217 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 5800) (list 0 1/4 1 6100) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 4800) (list 1 1/4 1 4400) (list 1 1/4 1 5800) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 6800) (list 7/4 1/4 1 6800) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 170 247 216 11 75 78 71 135 110 226 248 226 58 63 71 159 234 8 207 140 29 135 209 51 172 226 83 143 217 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.16042821 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 41 78 83 216 11 75 78 71 135 110 71 84 173 111 63 134 159 234 8 145 140 29 135 209 104 119 226 83 196 164 182 159) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 4000) (list 0 1/4 1 4000) (list 0 1/4 1 4500) (list 0 1/4 1 6700) (list 1/4 1/4 1 4700) (list 1/4 1/4 1 3700) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 6000) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 7000) (list 1/2 1/4 1 4600) (list 3/4 1/4 1 6100) (list 3/4 1/4 1 3600) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 5900) (list 1 1/4 1 4700) (list 1 1/4 1 4800) (list 1 1/4 1 4400) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6000) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 6600) (list 3/2 1/4 1 4400) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 4500) (list 7/4 1/4 1 4700) (list 7/4 1/4 1 5200) (list 7/4 1/4 1 7000) (list 7/4 1/4 1 4700)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 41 78 83 216 11 75 78 71 135 110 71 84 173 111 63 134 159 234 8 145 140 29 135 209 104 119 226 83 196 164 182 159)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.18741402 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 241 134 78 216 13 77 78 71 12 110 226 248 226 58 63 71 159 26 216 145 140 29 86 209 51 172 226 135 193 165 181 155) :decoder (list (list (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100) (list 3600 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/4 1 5500) (list 0 1/4 1 5900) (list 0 1/4 1 4000) (list 0 1/4 1 6700) (list 1/4 1/4 1 4900) (list 1/4 1/4 1 3900) (list 1/4 1/4 1 4000) (list 1/4 1/4 1 7000) (list 1/2 1/4 1 4800) (list 1/2 1/4 1 7200) (list 1/2 1/4 1 4000) (list 1/2 1/4 1 6200) (list 3/4 1/4 1 4000) (list 3/4 1/4 1 5700) (list 3/4 1/4 1 6200) (list 3/4 1/4 1 7000) (list 1 1/4 1 4700) (list 1 1/4 1 6200) (list 1 1/4 1 6700) (list 1 1/4 1 7000) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 6500) (list 5/4 1/4 1 4800) (list 5/4 1/4 1 6000) (list 3/2 1/4 1 5000) (list 3/2 1/4 1 6000) (list 3/2 1/4 1 4000) (list 3/2 1/4 1 6000) (list 7/4 1/4 1 4400) (list 7/4 1/4 1 5300) (list 7/4 1/4 1 6900) (list 7/4 1/4 1 4300)) :num-notes 8 :num-chords 8 :cardinality 4 :range (list 3600 7200) :note-value 1/4 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 241 134 78 216 13 77 78 71 12 110 226 248 226 58 63 71 159 26 216 145 140 29 86 209 51 172 226 135 193 165 181 155)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5))) (setf (om-darwin::generation om-darwin::ga) 20989) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 1 1 1)) ((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4000 4500 6700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3700 4000 7000)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 7200 4000 6200)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5700 6200 7000)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6200 6700 7000)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6500 6000 6000)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 6000 4000 4500)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5200 7000 4700)) :ldur (quote (667 667 667 667)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 1072 65) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "species.ga-chord-seq" (quote ("elements" "species.ga-chord-seq")) (quote nil) (om-make-point 84 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 0 nil 0) (0 0 4 1 nil 0) (2 0 4 2 nil 0) (1 0 4 3 nil 0) (6 0 5 1 nil 0) (4 0 5 2 nil 0))) nil 6.16))
