; OM File Header - Saved 2020/11/26 8:23:11
; (6.16 :patc (om-make-point 388 60) (om-make-point 604 354) (om-make-point 848 830) "" 183 0 "2020/11/25 10:41:29" "2020/11/26 8:23:11")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 440 74) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 260 31) (om-make-point 161 30) (list (quote :set) -200 -100 200 200) "(:set -200 -100 200 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 616 170) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 527 72) (om-make-point 115 30) (list (quote :set) 6000 6600) "(:set 6000 6600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCHES" (quote c-pitches) (quote ((om-load-inputfun (quote input-funbox) "" "EVAL" nil) (om-load-inputfun (quote input-funbox) "" "TEST" 6000) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 500 234) (om-make-point 141 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 157 399) (om-make-point 402 193) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 152 192 83 235 174 152 250 79 65 254 8 49 132 50 16 84 213 228 160 248 158 180 195 75) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 152 192 83 235 174 152 250 79 65 254 8 49 132 50 16 84 213 228 160 248 158 180 195 75)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 221 156 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 6600) (list 0 1/8 1 6000) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 6600) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 221 156 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 19579) (list 0.01507027 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 221 156 214 130 39 162 123 199) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 6600) (list 0 1/8 1 6000) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 6600) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6400)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 221 156 214 130 39 162 123 199)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.037625358 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 226 151 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 6600) (list 0 1/8 1 6000) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 6600) (list 5/8 1/8 1 6500) (list 5/8 1/8 1 6800) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 32 247 253 19 104 65 136 13 221 91 97 84 123 32 71 226 151 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 8) (list 0.06425711 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 32 247 253 19 104 86 136 13 221 91 97 84 123 32 71 221 156 214 74 95 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 6600) (list 0 1/8 1 6000) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6800) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 6600) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6900) (list 3/4 1/8 1 6400) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 32 247 253 19 104 86 136 13 221 91 97 84 123 32 71 221 156 214 74 95 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.093937785 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 32 247 253 141 104 65 136 13 221 91 97 84 123 10 57 235 110 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 6600) (list 0 1/8 1 6000) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 7100) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 7000) (list 5/8 1/8 1 6500) (list 5/8 1/8 1 6100) (list 5/8 1/8 1 6600) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 32 247 253 141 104 65 136 13 221 91 97 84 123 10 57 235 110 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.12611348 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 37 242 253 141 104 65 136 13 221 91 97 84 191 123 168 221 156 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 7100) (list 0 1/8 1 6800) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 7100) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6900) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 7200) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 37 242 253 141 104 65 136 13 221 91 97 84 191 123 168 221 156 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 0.16042821 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 37 242 253 141 106 65 136 13 221 91 97 84 123 191 168 221 156 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 7100) (list 0 1/8 1 6800) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 7100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6900) (list 5/8 1/8 1 7200) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 37 242 253 141 106 65 136 13 221 91 97 84 123 191 168 221 156 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 0.19663035 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 37 242 253 141 104 65 136 13 221 91 97 84 123 191 168 219 158 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 7100) (list 0 1/8 1 6800) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 7100) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6900) (list 5/8 1/8 1 7200) (list 5/8 1/8 1 7100) (list 5/8 1/8 1 6200) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 37 242 253 141 104 65 136 13 221 91 97 84 123 191 168 219 158 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 0.2345308 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 182 37 242 253 141 106 65 136 12 222 91 97 84 123 191 168 221 156 214 130 39 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6000) (list 0 1/8 1 7100) (list 0 1/8 1 6800) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 7100) (list 1/8 1/8 1 6200) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 7200) (list 3/8 1/8 1 6100) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6900) (list 5/8 1/8 1 7200) (list 5/8 1/8 1 6000) (list 5/8 1/8 1 6000) (list 3/4 1/8 1 6600) (list 3/4 1/8 1 6000) (list 3/4 1/8 1 6000) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 182 37 242 253 141 106 65 136 12 222 91 97 84 123 191 168 221 156 214 130 39 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.2739815 (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-chord-seq) nil) (make-instance (quote om-darwin::ga-chord-seq) :raw-genotype (list 160 32 248 252 19 104 65 136 13 221 91 97 84 123 32 66 226 113 1 135 34 162 123 65) :decoder (list (list (list 6000 7200 100) (list 6000 7200 100) (list 6000 7200 100))) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 6400) (list 0 1/8 1 6600) (list 0 1/8 1 6100) (list 1/8 1/8 1 6500) (list 1/8 1/8 1 6600) (list 1/8 1/8 1 6000) (list 1/4 1/8 1 6000) (list 1/4 1/8 1 6600) (list 1/4 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6000) (list 3/8 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 1/2 1/8 1 6600) (list 5/8 1/8 1 6100) (list 5/8 1/8 1 6500) (list 5/8 1/8 1 6900) (list 3/4 1/8 1 6100) (list 3/4 1/8 1 6500) (list 3/4 1/8 1 6800) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6600) (list 7/8 1/8 1 6000)) :num-notes 8 :num-chords 8 :cardinality 3 :range (list 6000 7200) :note-value 1/8 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 32 248 252 19 104 65 136 13 221 91 97 84 123 32 66 226 113 1 135 34 162 123 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 19754) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6600 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6600 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6600 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6000 6600)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6600 6600)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6000 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6000 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6600 6000)) :ldur (quote (333 333 333)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD-SEQ" (quote make-ga-chord-seq) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-CHORDS" 8) (om-load-inputfun (quote input-funbox) "" "CARDINALITY" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/8))) (om-make-point 102 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 1 nil 0) (2 0 4 2 nil 0) (6 0 5 1 nil 0))) nil 6.16))