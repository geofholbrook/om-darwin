; OM File Header - Saved 2020/11/25 11:06:20
; (6.16 :patc (om-make-point 172 60) (om-make-point 506 305) (om-make-point 675 604) "" 183 0 "2015/06/02 21:41:33" "2020/11/25 11:06:20")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "chord-seq" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 60 136) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 150 187) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/20) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 69 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 411 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 332 55) (om-make-point 84 30) (list (quote :set) 0 1 2) "(:set 0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 366 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 144 73) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 273 48) (om-make-point 39 30) 1/4 "1/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 218 33) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 146 390) (om-make-point 420 166) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 18 48 45 235 4 215 254 152 230 27 130 10 229 234 136 97 217 104 168 58 138 180 153 127 32 208 160 64 149 212 88 46) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 48 45 235 4 215 254 152 230 27 130 10 229 234 136 97 217 104 168 58 138 180 153 127 32 208 160 64 149 212 88 46)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 40 56 229 118 99 240 180 68 65 247 89 239 223 114 158 153 244 180 180 98 133 221 20 33 116 185 251 99 118 84 237 73) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6100) (list 1/20 1/20 1 6800) (list 1/10 1/20 1 6800) (list 3/20 1/20 1 7100) (list 1/5 1/10 1 6000) (list 3/10 1/10 1 7100) (list 2/5 1/20 1 6200) (list 9/20 1/10 1 6200) (list 11/20 1/20 1 7000) (list 3/5 1/20 1 7100) (list 13/20 1/10 1 6300) (list 3/4 1/10 1 6700) (list 17/20 1/10 1 7200) (list 19/20 1/10 1 6400) (list 21/20 1/20 1 6100) (list 11/10 1/10 1 6300)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 40 56 229 118 99 240 180 68 65 247 89 239 223 114 158 153 244 180 180 98 133 221 20 33 116 185 251 99 118 84 237 73)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 135 72 95 112 181 35 186 9 99 245 24 53 188 237 178 143 23 113 153 131 155 199 166 59 140 162 103 14 18 155 123 1) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6500) (list 1/20 1/20 1 6400) (list 1/10 1/10 1 7200) (list 1/5 1/10 1 6400) (list 3/10 1/10 1 6800) (list 2/5 1/10 1 7100) (list 1/2 1/10 1 6600) (list 3/5 1/10 1 6900) (list 7/10 1/10 1 7000) (list 4/5 1/10 1 7000) (list 9/10 1/10 1 7200) (list 1 1/10 1 7000) (list 11/10 1/20 1 7000) (list 23/20 1/20 1 7200) (list 6/5 1/10 1 6500) (list 13/10 1/10 1 6600)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 72 95 112 181 35 186 9 99 245 24 53 188 237 178 143 23 113 153 131 155 199 166 59 140 162 103 14 18 155 123 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 57 108 45 146 13 62 150 42 28 145 121 235 200 174 55 255 51 138 216 109 89 39 116 243 119 144 137 37 115 82 25 208) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 6500) (list 1/20 1/20 1 6600) (list 1/10 1/20 1 6000) (list 3/20 1/20 1 6700) (list 1/5 1/10 1 6200) (list 3/10 1/10 1 6400) (list 2/5 1/20 1 6500) (list 9/20 1/10 1 6300) (list 11/20 1/20 1 7200) (list 3/5 1/10 1 6800) (list 7/10 1/10 1 7100) (list 4/5 1/10 1 7200) (list 9/10 1/20 1 6200) (list 19/20 1/10 1 6700) (list 21/20 1/20 1 7100) (list 11/10 1/20 1 7200)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 57 108 45 146 13 62 150 42 28 145 121 235 200 174 55 255 51 138 216 109 89 39 116 243 119 144 137 37 115 82 25 208)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 200 217 199 100 15 192 55 134 144 244 147 27 51 92 196 106 11 142 191 240 112 113 104 244 247 88 223 252 138 229 189 143) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/10 1 6500) (list 1/10 1/20 1 6400) (list 3/20 1/20 1 6200) (list 1/5 1/20 1 6300) (list 1/4 1/20 1 6100) (list 3/10 1/10 1 6400) (list 2/5 1/20 1 7200) (list 9/20 1/20 1 6100) (list 1/2 1/20 1 7100) (list 11/20 1/20 1 6900) (list 3/5 1/10 1 6800) (list 7/10 1/20 1 6000) (list 3/4 1/20 1 6000) (list 4/5 1/20 1 6200) (list 17/20 1/10 1 6800) (list 19/20 1/10 1 6700)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 217 199 100 15 192 55 134 144 244 147 27 51 92 196 106 11 142 191 240 112 113 104 244 247 88 223 252 138 229 189 143)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 181 237 224 0 7 81 123 151 228 188 13 201 122 115 90 235 26 145 89 2 228 89 177 119 36 102 144 251 230 150 202 66) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/10 1 7200) (list 1/10 1/20 1 6300) (list 3/20 1/10 1 6700) (list 1/4 1/10 1 6600) (list 7/20 1/20 1 6700) (list 2/5 1/10 1 6000) (list 1/2 1/10 1 6500) (list 3/5 1/10 1 7200) (list 7/10 1/10 1 6000) (list 4/5 1/20 1 7100) (list 17/20 1/10 1 6700) (list 19/20 1/10 1 6800) (list 21/20 1/20 1 7000) (list 11/10 1/10 1 6100) (list 6/5 1/20 1 6900) (list 5/4 1/20 1 6700)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 181 237 224 0 7 81 123 151 228 188 13 201 122 115 90 235 26 145 89 2 228 89 177 119 36 102 144 251 230 150 202 66)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 93 139 251 77 251 62 58 175 1 11 37 33 36 3 139 108 249 111 89 212 17 133 197 244 113 183 92 196 184 173 9 238) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/10 1 6200) (list 1/10 1/10 1 6400) (list 1/5 1/20 1 6400) (list 1/4 1/10 1 6600) (list 7/20 1/10 1 6100) (list 9/20 1/10 1 7100) (list 11/20 1/10 1 7000) (list 13/20 1/20 1 6900) (list 7/10 1/10 1 6200) (list 4/5 1/20 1 7100) (list 17/20 1/10 1 6400) (list 19/20 1/20 1 6200) (list 1 1/10 1 6900) (list 11/10 1/20 1 6100) (list 23/20 1/10 1 6200) (list 5/4 1/20 1 6900)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 139 251 77 251 62 58 175 1 11 37 33 36 3 139 108 249 111 89 212 17 133 197 244 113 183 92 196 184 173 9 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 230 31 112 147 193 102 12 107 93 190 179 57 213 154 194 225 83 75 178 179 201 33 39 32 206 115 160 232 135 48 110 232) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/10 1 6900) (list 1/10 1/10 1 6800) (list 1/5 1/20 1 7100) (list 1/4 1/10 1 7200) (list 7/20 1/20 1 6200) (list 2/5 1/10 1 7000) (list 1/2 1/20 1 6500) (list 11/20 1/10 1 7200) (list 13/20 1/10 1 6500) (list 3/4 1/10 1 6900) (list 17/20 1/10 1 6600) (list 19/20 1/20 1 6000) (list 1 1/10 1 7100) (list 11/10 1/20 1 6400) (list 23/20 1/20 1 6500) (list 6/5 1/20 1 6600)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 230 31 112 147 193 102 12 107 93 190 179 57 213 154 194 225 83 75 178 179 201 33 39 32 206 115 160 232 135 48 110 232)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 102 26 63 35 108 37 231 225 207 215 97 197 160 1 88 89 206 75 32 61 241 214 225 211 119 255 216 165 252 129 163 178) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 7100) (list 1/20 1/10 1 7100) (list 3/20 1/10 1 6400) (list 1/4 1/10 1 7000) (list 7/20 1/10 1 7200) (list 9/20 1/10 1 6600) (list 11/20 1/10 1 6400) (list 13/20 1/10 1 7000) (list 3/4 1/10 1 7100) (list 17/20 1/10 1 6600) (list 19/20 1/20 1 6700) (list 1 1/10 1 6400) (list 11/10 1/10 1 6200) (list 6/5 1/10 1 6800) (list 13/10 1/10 1 6500) (list 7/5 1/20 1 6700)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 102 26 63 35 108 37 231 225 207 215 97 197 160 1 88 89 206 75 32 61 241 214 225 211 119 255 216 165 252 129 163 178)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 128 240 25 147 221 217 93 19 67 97 43 136 79 44 241 120 26 70 237 156 191 241 98 99 191 242 246 164 121 96 107 156) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 7100) (list 1/20 1/10 1 7200) (list 3/20 1/10 1 6000) (list 1/4 1/10 1 6200) (list 7/20 1/10 1 6200) (list 9/20 1/20 1 6400) (list 1/2 1/20 1 6100) (list 11/20 1/20 1 6700) (list 3/5 1/20 1 6000) (list 13/20 1/20 1 6300) (list 7/10 1/10 1 6900) (list 4/5 1/10 1 6700) (list 9/10 1/20 1 6900) (list 19/20 1/20 1 7200) (list 1 1/20 1 6400) (list 21/20 1/20 1 6300)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 240 25 147 221 217 93 19 67 97 43 136 79 44 241 120 26 70 237 156 191 241 98 99 191 242 246 164 121 96 107 156)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 201 91 237 191 236 118 102 239 227 6 115 30 164 29 206 44 230 30 33 143 59 109 250 40 110 48 34 23 254 183 29 214) :decoder (list (list 6000 7200 100) (list 1 2)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/10 1 6600) (list 1/10 1/10 1 6300) (list 1/5 1/20 1 6200) (list 1/4 1/10 1 7100) (list 7/20 1/20 1 6600) (list 2/5 1/20 1 7100) (list 9/20 1/10 1 6800) (list 11/20 1/20 1 7100) (list 3/5 1/20 1 6900) (list 13/20 1/10 1 6700) (list 3/4 1/10 1 6700) (list 17/20 1/20 1 6300) (list 9/10 1/20 1 6600) (list 19/20 1/10 1 6800) (list 21/20 1/10 1 6700) (list 23/20 1/20 1 6300)) :range (list 6000 7200) :note-value 1/20 :num-notes 16 :len-range (list 1 2) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 201 91 237 191 236 118 102 239 227 6 115 30 164 29 206 44 230 30 33 143 59 109 250 40 110 48 34 23 254 183 29 214)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1 1)) (1 (1.0 2 1 1)) (1 (1.0 1 1 2)) (1 (2 2 1)))) ((4 4) ((1 (1.0 1 2 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 966 270) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 524 57) (om-make-point 76 30) (list 700 800) "(700 800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 452 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD-SEQ" (quote make-ga-chord-seq) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-CHORDS" 8) (om-load-inputfun (quote input-funbox) "" "CARDINALITY" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/8))) (om-make-point 202 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 3 nil 0) (5 0 3 0 nil 0) (11 0 3 1 nil 0) (4 0 5 0 nil 0) (2 0 9 1 nil 0) (10 0 11 0 nil 0) (6 0 12 0 nil 0) (8 0 12 1 nil 0) (7 0 12 3 nil 0))) nil 6.16))
