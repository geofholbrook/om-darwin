; OM File Header - Saved 2015/03/10 1:13:42
; (6.090014 :patc (om-make-point 10 110) (om-make-point 76 22) (om-make-point 844 590) "" 183 0 "2015/02/25 19:31:33" "2015/03/10 1:13:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga-simple-tree" (quote ((let ((box (om-load-boxcall (quote genfun) "MAKE-GA-SIMPLE-TREE" (quote make-ga-simple-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)))) (om-make-point 97 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GENERATION" (quote om-darwin::generation) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 454 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 386 57) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 293 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 327 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 647 114) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "number-of-notes" (om-load-lisp-abspatch "number-of-notes" 6.090014 "$(lambda (spec num-notes)$  (abs (- (length (tree2ratio (d::phenotype spec)))$          num-notes)))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "NUM-NOTES" nil))) (om-make-point 508 214) nil (list nil) "l" "number-of-notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 54 343) (om-make-point 763 118) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 87 172 218 155 176 160 249 147 135 171 234 228 235 67 56 171 127 23 113 211 86 230 174 166 128 25 212 212 116 105 65 190 121 228 95 140 150 70 188 47 130 96 205 18 172 223 189 252 147 21 70 24 113 240 23 37 190 250 62 54 65 81 182 45 74 179 255 241 23 104 123 170 136 25 110 87 160 191 167 215 208 18 172 170 146 118 168 46 18 141 137 95 36 172 46 232 232 130 5 127 124 163 106 229 88 196 29 132 141 207 238 14 203 193 160 119 100 93 52 155 129 246 152 228 32 22 109 115 52 118 38 76 118 199 222 221 109 76 11 218 7 98 175 14 127 247 10 204 70 87 91 184 123 165 202 25 49 197 55 51 107 143 105 214 82 191 217 66 153 129 48 163 139 248 57 115 63 174 57 73 50 172 105 225 181 181 76 25 159 184 175 231 142 12 170 239 169 73 244 54 186 7 143 137 7 33 92 92 127 103 76 100 239 228 82 29 117 128 65 106 34 54 209 61 57 52 22 1 90 209 155 47 162 149 152 155 77 51 212 42 206 90 9 218 231 184 203 69 222 5 172 163 197 211 235 169 38 35 164 110 145 50 171 53 166 111 203 203 12 234 186 96 70 22 199 253 166 40 228 90 57 167 202 100 205 220 217 61 7 104 26 65 190 230 46 162 33 163 228 94 245 41 58 62 83 111 41 162 199 132 101 44 12 136 210 240 147 101 74 144 112 175 108 223 227 154 134 107 56 38 72 241 104 191 101 179 84 54 191 111 62 135 153 216 203 173 157 203 202 40 140 219 12 168 230 145 249 165 8 197 97 99 56 194 236 197 228 83 129 143 94 47 114 30 75 189 20 197 118 149 43 117 253 137 173 41 44 173 44 153 169 185 80 207 111 251 183 35 136 195 100 65 95 85 1 216 151 85 17 189 166 209 163 110 26 181 7 51 233 126 9 221 68 245 159 144 201 31 37 84 107 214 53 61 254 24 107 165 98 50 95 150 170 164 134 253 71 112 255 196 216 74 220 48 58 118 156 83 27 69 60 185 67 30 62 125 71 246 25 252 119 52 173 88 83 187 116 49 23 44 28 58 106 146 38 27 83 123 123 97 99 192 96 171 147 69 2 247 67 115 120 135 45 226 20 182 110 86 87 201 23 206 124 168 252 25 238 179 133 129 64 57 142 118 0 97 145 108 9 43 204 136 226 69 236 184 20 142 63 9 6 0 254 161 158 78 214 171 246 214 112 2 110 63 0 105 114 206 204 204 254 151 96 209 25 206 29 72 74 239 155 169 91 241 68 169 207 120 107 211 95 56 213 41 99 234 181 94 186 215 94 218 48 164 177 93 239 229 71 29) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 87 172 218 155 176 160 249 147 135 171 234 228 235 67 56 171 127 23 113 211 86 230 174 166 128 25 212 212 116 105 65 190 121 228 95 140 150 70 188 47 130 96 205 18 172 223 189 252 147 21 70 24 113 240 23 37 190 250 62 54 65 81 182 45 74 179 255 241 23 104 123 170 136 25 110 87 160 191 167 215 208 18 172 170 146 118 168 46 18 141 137 95 36 172 46 232 232 130 5 127 124 163 106 229 88 196 29 132 141 207 238 14 203 193 160 119 100 93 52 155 129 246 152 228 32 22 109 115 52 118 38 76 118 199 222 221 109 76 11 218 7 98 175 14 127 247 10 204 70 87 91 184 123 165 202 25 49 197 55 51 107 143 105 214 82 191 217 66 153 129 48 163 139 248 57 115 63 174 57 73 50 172 105 225 181 181 76 25 159 184 175 231 142 12 170 239 169 73 244 54) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 172 218 155 176 160 249 147 135 171 234 228 235 67 56 171 127 23 113 211 86 230 174 166 128 25 212 212 116 105 65 190 121 228 95 140 150 70 188 47 130 96 205 18 172 223 189 252 147 21 70 24 113 240 23 37 190 250 62 54 65 81 182 45 74 179 255 241 23 104 123 170 136 25 110 87 160 191 167 215 208 18 172 170 146 118 168 46 18 141 137 95 36 172 46 232 232 130 5 127 124 163 106 229 88 196 29 132 141 207 238 14 203 193 160 119 100 93 52 155 129 246 152 228 32 22 109 115 52 118 38 76 118 199 222 221 109 76 11 218 7 98 175 14 127 247 10 204 70 87 91 184 123 165 202 25 49 197 55 51 107 143 105 214 82 191 217 66 153 129 48 163 139 248 57 115 63 174 57 73 50 172 105 225 181 181 76 25 159 184 175 231 142 12 170 239 169 73 244 54)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 186 7 143 137 7 33 92 92 127 103 76 100 239 228 82 29 117 128 65 106 34 54 209 61 57 52 22 1 90 209 155 47 162 149 152 155 77 51 212 42 206 90 9 218 231 184 203 69 222 5 172 163 197 211 235 169 38 35 164 110 145 50 171 53 166 111 203 203 12 234 186 96 70 22 199 253 166 40 228 90 57 167 202 100 205 220 217 61 7 104 26 65 190 230 46 162 33 163 228 94 245 41 58 62 83 111 41 162 199 132 101 44 12 136 210 240 147 101 74 144 112 175 108 223 227 154 134 107 56 38 72 241 104 191 101 179 84 54 191 111 62 135 153 216 203 173 157 203 202 40 140 219 12 168 230 145 249 165 8 197 97 99 56 194 236 197 228 83 129 143 94 47 114 30 75 189 20 197 118 149 43 117 253 137 173 41 44 173 44 153 169 185 80 207 111 251 183 35 136 195) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 186 7 143 137 7 33 92 92 127 103 76 100 239 228 82 29 117 128 65 106 34 54 209 61 57 52 22 1 90 209 155 47 162 149 152 155 77 51 212 42 206 90 9 218 231 184 203 69 222 5 172 163 197 211 235 169 38 35 164 110 145 50 171 53 166 111 203 203 12 234 186 96 70 22 199 253 166 40 228 90 57 167 202 100 205 220 217 61 7 104 26 65 190 230 46 162 33 163 228 94 245 41 58 62 83 111 41 162 199 132 101 44 12 136 210 240 147 101 74 144 112 175 108 223 227 154 134 107 56 38 72 241 104 191 101 179 84 54 191 111 62 135 153 216 203 173 157 203 202 40 140 219 12 168 230 145 249 165 8 197 97 99 56 194 236 197 228 83 129 143 94 47 114 30 75 189 20 197 118 149 43 117 253 137 173 41 44 173 44 153 169 185 80 207 111 251 183 35 136 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 100 65 95 85 1 216 151 85 17 189 166 209 163 110 26 181 7 51 233 126 9 221 68 245 159 144 201 31 37 84 107 214 53 61 254 24 107 165 98 50 95 150 170 164 134 253 71 112 255 196 216 74 220 48 58 118 156 83 27 69 60 185 67 30 62 125 71 246 25 252 119 52 173 88 83 187 116 49 23 44 28 58 106 146 38 27 83 123 123 97 99 192 96 171 147 69 2 247 67 115 120 135 45 226 20 182 110 86 87 201 23 206 124 168 252 25 238 179 133 129 64 57 142 118 0 97 145 108 9 43 204 136 226 69 236 184 20 142 63 9 6 0 254 161 158 78 214 171 246 214 112 2 110 63 0 105 114 206 204 204 254 151 96 209 25 206 29 72 74 239 155 169 91 241 68 169 207 120 107 211 95 56 213 41 99 234 181 94 186 215 94 218 48 164 177 93 239 229 71 29) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 100 65 95 85 1 216 151 85 17 189 166 209 163 110 26 181 7 51 233 126 9 221 68 245 159 144 201 31 37 84 107 214 53 61 254 24 107 165 98 50 95 150 170 164 134 253 71 112 255 196 216 74 220 48 58 118 156 83 27 69 60 185 67 30 62 125 71 246 25 252 119 52 173 88 83 187 116 49 23 44 28 58 106 146 38 27 83 123 123 97 99 192 96 171 147 69 2 247 67 115 120 135 45 226 20 182 110 86 87 201 23 206 124 168 252 25 238 179 133 129 64 57 142 118 0 97 145 108 9 43 204 136 226 69 236 184 20 142 63 9 6 0 254 161 158 78 214 171 246 214 112 2 110 63 0 105 114 206 204 204 254 151 96 209 25 206 29 72 74 239 155 169 91 241 68 169 207 120 107 211 95 56 213 41 99 234 181 94 186 215 94 218 48 164 177 93 239 229 71 29)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 172 218 155 176 160 249 147 135 171 234 228 235 67 56 171 127 23 113 211 86 230 174 166 128 25 212 212 116 105 65 190 121 228 95 140 150 70 188 47 130 96 205 18 172 223 189 252 147 21 70 24 113 240 23 37 190 250 62 54 65 81 182 45 74 179 255 241 23 104 123 170 136 25 110 87 160 191 167 215 208 18 172 170 146 118 168 46 18 141 137 95 36 172 46 232 232 130 5 127 124 163 106 229 88 196 29 132 141 207 238 14 203 193 160 119 100 93 52 155 129 246 152 228 32 22 109 115 52 118 38 76 118 199 222 221 109 76 11 218 7 98 175 14 127 247 10 204 70 87 91 184 123 165 202 25 49 197 55 51 107 143 105 214 82 191 217 66 153 129 48 163 139 248 57 115 63 174 57 73 50 172 105 225 181 181 76 25 159 184 175 231 142 12 170 239 169 73 244 54 186 7 143 137 7 33 92 92 127 103 76 100 239 228 82 29 117 128 65 106 34 54 209 61 57 52 22 1 90 209 155 47 162 149 152 155 77 51 212 42 206 90 9 218 231 184 203 69 222 5 172 163 197 211 235 169 38 35 164 110 145 50 171 53 166 111 203 203 12 234 186 96 70 22 199 253 166 40 228 90 57 167 202 100 205 220 217 61 7 104 26 65 190 230 46 162 33 163 228 94 245 41 58 62 83 111 41 162 199 132 101 44 12 136 210 240 147 101 74 144 112 175 108 223 227 154 134 107 56 38 72 241 104 191 101 179 84 54 191 111 62 135 153 216 203 173 157 203 202 40 140 219 12 168 230 145 249 165 8 197 97 99 56 194 236 197 228 83 129 143 94 47 114 30 75 189 20 197 118 149 43 117 253 137 173 41 44 173 44 153 169 185 80 207 111 251 183 35 136 195 100 65 95 85 1 216 151 85 17 189 166 209 163 110 26 181 7 51 233 126 9 221 68 245 159 144 201 31 37 84 107 214 53 61 254 24 107 165 98 50 95 150 170 164 134 253 71 112 255 196 216 74 220 48 58 118 156 83 27 69 60 185 67 30 62 125 71 246 25 252 119 52 173 88 83 187 116 49 23 44 28 58 106 146 38 27 83 123 123 97 99 192 96 171 147 69 2 247 67 115 120 135 45 226 20 182 110 86 87 201 23 206 124 168 252 25 238 179 133 129 64 57 142 118 0 97 145 108 9 43 204 136 226 69 236 184 20 142 63 9 6 0 254 161 158 78 214 171 246 214 112 2 110 63 0 105 114 206 204 204 254 151 96 209 25 206 29 72 74 239 155 169 91 241 68 169 207 120 107 211 95 56 213 41 99 234 181 94 186 215 94 218 48 164 177 93 239 229 71 29)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 18 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 19 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 156 15 102 133 158 42 156 77 2 205 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 156 15 102 133 158 42 156 77 2 205 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 20 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 42 156 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 101 133 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 42 156 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 101 133 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 21 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 156 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 156 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 22 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 23 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 36 71 100 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 27 246 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 57 190 20 54 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 36 71 100 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 27 246 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 57 190 20 54 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 24 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 180 40 202 65 187 66 1 20 242 188 179 154 83 237 180 249 212 141 34 153 76 185 55 167 182 195 35 116 159 198 212 177 131 0 157 254 68 146 228 73 110 158 60 160 77 111 205 35 163 122 35 239 146 248 103 171 202 222 187 136 147) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 180 40 202 65 187 66 1 20 242 188 179 154 83 237 180 249 212 141 34 153 76 185 55 167 182 195 35 116 159 198 212 177 131 0 157 254 68 146 228 73 110 158 60 160 77 111 205 35 163 122 35 239 146 248 103 171 202 222 187 136 147)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 25 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 45 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 101 133 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 101 133 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 26 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 36 71 100 239 132 33 93 172 145 153 155 122 4 255 49 141 148 254 148 38 145 28 19 4 2 105 75 179 107 191 170 2 29 99 82 183 169 112 163 145 219 136 115 168 7 48 95 83 40 114 251 181 181 62 38 100 199 67 59 204 207 81 36 118 35 239 172 6 99 236 231 40 8 33 72 209 83 44 104 50 144 240 55 144 251 40 147 134 67 97 179 211 145 122 3 144 150 240 216 131 139 187 90 2 235 236 69 59 78 247 79 134 158 127 164 228 160 121 179 135 156 224 232 119 164 130 10 14 52 22 142 124 97 131 24 142 184 52 223 200 14 59 204 255 147 187 10 30 135 154 166 36 240 19 7 28 221 26 123 164 123 28 24 7 140 84 157 20 97 238 190 176 233 45 5 168 153 4 220 120 251 66 239 124 164 20 89 227 113 126 32 84 243 128 148 9 47 133 46 2 65 225 28 87 11 149 50 196 237 7 99 25 129 8 0 76 178 29 113 149 238 30 176 174 98 206 64 58 154 218 93 241 229 221 22 195) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 42 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 143 89 5 134 118 128 156 187 120 137 223 182 246 79 116 213 97 61 126 30 29 52 243 125 245 102 243 115 95 78 172 188 208 206 88 79 180 206 54 9 5 93 159 215 232 83 179 198 216 160 117 127 62 197 231 40 144 98 65 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 36 71 100 239 132 33 93 172 145 153 155 122 4 255 49 141 148 254 148 38 145 28 19 4 2 105 75 179 107 191 170 2 29 99 82 183 169 112 163 145 219 136 115 168 7 48 95 83 40 114 251 181 181 62 38 100 199 67 59 204 207 81 36 118 35 239 172 6 99 236 231 40 8 33 72 209 83 44 104 50 144 240 55 144 251 40 147 134 67 97 179 211 145 122 3 144 150 240 216 131 139 187 90 2 235 236 69 59 78 247 79 134 158 127 164 228 160 121 179 135 156 224 232 119 164 130 10 14 52 22 142 124 97 131 24 142 184 52 223 200 14 59 204 255 147 187 10 30 135 154 166 36 240 19 7 28 221 26 123 164 123 28 24 7 140 84 157 20 97 238 190 176 233 45 5 168 153 4 220 120 251 66 239 124 164 20 89 227 113 126 32 84 243 128 148 9 47 133 46 2 65 225 28 87 11 149 50 196 237 7 99 25 129 8 0 76 178 29 113 149 238 30 176 174 98 206 64 58 154 218 93 241 229 221 22 195)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 27 (let ((om-darwin::spec (if (find-class (quote om-darwin::multi-cell) nil) (make-instance (quote om-darwin::multi-cell) :operons nil :pheno nil :raw-genotype (list 249 223 160 15 102 133 158 45 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67) :decoder nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1)) (list 1 (list 1 2 1)) (list 1 (list 1 1 2 1)) (list 1 (list 2 1 1 1 1)) (list 1 (list 2)) (list 1 (list 2 1 1)))))) :raw-genotype (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 154 79 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 227 113 77 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 67 181 106 114 199 109 140 235 73 51 118 152 98 84 215 90 21 43 38 149 172 223 251 27 252 192 238 227 187 170 97 227 4 253 163 105 177 118 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 1 (list 1 1 1 2 1)) (list 1 (list 1 1 1 1)) (list 1 (list 1 1 2 2)) (list 2 (list 1 2 1 1)))))) :raw-genotype (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 253 126 219 93 132 127 114 154 58 135 213 11 75 14 162 40 185 103 23 50 32 2 32 72 179 81 247 232 211 73 246 79 178 253 162 247 237 159 67 183 41 5 21 219 172 129 43 185 78 154 83 134 191 41 78 50 216 255 125 110 17 221 241 178 220 34 38 188 35 83 116 183 177 133 166 195 73 150 229 43 246 103 67 90 213 66 102 219 196 31 169 194 150 43 226 184 156 129 113 202 193 158 121 146 186 201 25 254 146 152 179 195 156 23 211 117 30 150 148 190 167 45 239 20 18 50 69 63 111 220 73 40 125 222 187 3 92 45 74 98 252 111 130 200 214 177 170 63 22 253 219 242 77 21 233 29 89 79 189 37 72 72 244 148 7 114 9 155 196 117 165 148 139 61 8 44 114 100 91 210 193 4 56 10 20 30 3 22 210 186 44 3 5 194 81 193 160 117 43 148)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-simple-tree) nil) (make-instance (quote om-darwin::ga-simple-tree) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list 1 (list (list (list 4 4) (list (list 4 (list 1 4)) (list 1 (list 2 1 1 1 1)))))) :raw-genotype (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98) :decoder (list (list 2 6) (list 0 31)) :num-operons 100 :div-range (list 2 6) :time-sig (list 4 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 225 109 218 91 39 133 253 43 152 219 15 220 24 133 5 74 219 202 18 126 198 88 16 134 1 101 152 49 177 113 145 243 173 208 226 80 143 27 104 224 226 230 58 244 93 23 72 84 40 56 166 220 5 44 212 26 170 61 121 22 24 149 120 189 247 22 12 226 30 148 49 244 76 38 164 95 60 92 29 17 215 172 199 139 38 107 108 199 248 92 115 57 252 17 214 52 96 152 188 85 166 115 57 15 82 165 144 82 65 136 115 55 215 137 83 145 137 149 43 120 164 160 115 58 164 45 93 122 75 241 144 157 165 132 14 131 82 222 185 188 1 242 114 2 19 172 54 183 5 147 220 229 173 229 67 26 191 31 215 249 112 13 57 137 103 169 219 158 1 201 66 154 190 84 139 77 88 127 190 238 126 81 68 97 157 216 48 235 185 94 242 225 132 58 155 178 200 141 98)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 249 223 160 15 102 133 158 45 156 77 205 2 7 83 188 108 144 161 136 75 137 113 101 153 176 92 111 211 163 157 131 30 94 70 197 180 122 173 84 199 203 123 236 4 230 64 10 184 75 20 20 226 140 122 23 63 230 212 28 255 75 129 99 26 72 240 13 57 252 120 72 238 156 95 107 253 223 178 239 68 69 239 162 232 4 131 122 144 181 195 181 169 204 15 187 23 77 113 227 31 188 169 230 89 5 134 186 255 11 181 162 77 60 43 189 167 197 214 20 40 144 88 1 75 188 216 229 195 126 230 163 169 130 126 243 110 246 12 47 223 79 35 0 123 154 21 115 240 189 51 182 7 20 151 154 87 63 169 206 240 198 46 236 4 197 79 183 197 212 28 181 149 71 224 151 108 154 229 21 25 144 145 112 174 209 149 136 69 66 39 187 224 77 150 228 106 226 18 6 175 88 5 214 195 73 119 194 104 47 223 134 237 245 173 168 123 130 234 49 49 203 205 133 118 186 109 12 43 14 48 4 20 246 159 125 136 31 88 78 23 114 118 117 242 138 103 195 82 83 120 13 34 54 179 110 251 119 66 211 150 28 184 72 83 252 98 233 55 17 64 212 61 169 62 237 5 58 230 183 228 78 254 166 76 188 94 73 157 225 115 86 105 144 237 177 33 181 225 143 161 171 9 55 198 11 200 132 113 206 70 20 35 72 238 135 72 55 6 31 25 204 200 178 235 223 118 113 75 181 137 171 180 255 248 113 70 148 213 6 149 81 188 250 63 30 29 125 204 41 146 2 152 26 78 95 8 49 57 83 92 89 121 101 151 208 29 135 14 166 197 3 47 177 27 100 226 2 76 231 169 170 160 19 228 38 25 150 202 144 207 162 123 205 154 130 109 21 165 2 33 201 181 210 62 162 173 254 116 122 160 253 203 34 0 212 70 255 25 63 52 46 16 199 144 186 3 239 189 17 224 120 200 137 166 117 194 21 184 108 26 177 9 198 253 180 66 95 86 133 94 212 184 226 153 147 64 120 179 102 194 182 226 150 83 6 145 33 182 22 167 87 160 157 8 230 244 96 37 252 125 164 35 213 152 90 94 220 172 8 229 205 208 19 113 81 168 208 227 168 164 132 82 2 2 247 143 124 245 243 28 38 189 75 143 136 247 7 164 174 97 6 96 186 43 169 162 161 1 117 112 85 24 24 165 97 110 102 32 83 103 130 92 107 235 45 140 64 28 245 73 211 90 26 249 158 108 167 101 103 245 158 72 92 160 132 40 54 190 20 57 37 155 249 54 96 122 181 203 21 75 6 106 108 14 159 116 186 41 137 166 38 54 140 140 29 87 161 75 169 67)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 19) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((4 ((1 (1 1)) (1 (1 2 1)) (1 (1 1 2 1)) (1 (2 1 1 1 1)) (1 (1)) (1 (2 1 1)))))) ((4 4) ((4 ((1 (1 1 1 2 1)) (1 (1 1 1 1)) (1 (1 1 2 2)) (2 (1 2 1 1)))))) ((4 4) ((4 ((4 (1 4)) (1 (2 1 1 1 1))))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (222)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (111)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (320)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (640)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (320)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (320)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (640)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2560)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (267)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 642 93) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 111 48) (om-make-point 48 30) (list 2 6) "(2 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 38) (om-make-point 48 30) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 61 45) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 0 1 nil 0) (9 0 0 2 nil 0) (7 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (5 0 6 1 nil 0) (4 0 7 1 nil 0) (6 0 7 2 nil 0))) nil 6.090014))
