; OM File Header - Saved 2020/11/25 11:06:20
; (6.16 :patc (om-make-point 10 60) (om-make-point 152 214) (om-make-point 1023 794) "" 183 0 "2015/02/25 14:25:58" "2020/11/25 11:06:20")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "melody" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 331 110) (om-make-point 76 30) (list 200 500) "(200 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 346 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 531 158) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 665 590) (om-make-point 283 139) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "range and rising 2" (om-load-lisp-abspatch "range and rising" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range)$  (let ((len (length spec)))$    (loop for sub on (mapcar 'd::region-pitch spec)$        for pitch = (car sub)$        for melod = (when (cdr sub)$                      (- (cadr sub) $                         (car sub)))$        for index from 0$$        sum (+ (d::within-M pitch range)$               (if (and melod (<= melod 0)) $                   (* 1 ;; (1+ (- melod))$                      (- len index)) $                 0)$               ))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil))) (om-make-point 694 237) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 121 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PHENOTYPE" (quote phenotype) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 34 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "POLY" (let ((copy (make-instance (quote ominstance) :name "POLY" :icon 224))) (setf (instance copy) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2))) (setf (create-info copy) (quote ("2015/03/09 20:45:49" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 874 468) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 237 696) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 453 55) (om-make-point 90 30) (list 3600 8400) "(3600 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVOLUTE" (quote evolute) (quote ((om-load-inputfun (quote input-funbox) "" "MODEL" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil) (om-load-inputfun (quote input-funbox) "" "GENERATIONS" 100))) (om-make-point 800 304) (om-make-point 138 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "range and rising 2" (om-load-lisp-abspatch "range and rising" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec range mi)$  (let ((len (length spec))$         (melodic-range (list (- (* mi 100) 100) (+ (* mi 100) 100))))$    (loop for sub on (mapcar 'd::region-pitch spec)$        for pitch = (car sub)$        for melod = (when (cdr sub)$                      (- (cadr sub) $                         (car sub)))$        for index from 0$$        sum (+ (d::within-M pitch range)$                (if melod (d::within-M (abs melod) melodic-range) 0)$                ;(if (and melod (= melod 0)) 10000 0)$               ))))$  ") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "RANGE" nil) (om-load-inputfun (quote input-funbox) "" "MI" nil))) (om-make-point 463 235) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 177 394) (om-make-point 488 152) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 107 143 102 216 226 159 214 55 159 187 71 0 108 167 192 149 141 246 59 248 9 209 204 103 214 244 190 222 65 167 173 123) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 107 143 102 216 226 159 214 55 159 187 71 0 108 167 192 149 141 246 59 248 9 209 204 103 214 244 190 222 65 167 173 123)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 162 18 119 114 67 64 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6200) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 162 18 119 114 67 64 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 657) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 114 18 119 162 67 64 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6200) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5200) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5100) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 114 18 119 162 67 64 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 24 225 26 78 230 175 72 68 162 18 119 114 67 64 20 172 226 231 88 191 136) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 7000) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7400)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 24 225 26 78 230 175 72 68 162 18 119 114 67 64 20 172 226 231 88 191 136)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 65 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6000) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5200) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 65 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 24 225 26 78 230 175 72 68 162 18 119 114 67 63 20 172 226 231 88 191 136) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 6200) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 7000) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5000) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7400)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 24 225 26 78 230 175 72 68 162 18 119 114 67 63 20 172 226 231 88 191 136)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 101 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 65 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 3900) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6000) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5200) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 101 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 65 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1861.231 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 88 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 162 18 119 114 69 64 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7500) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6200) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5600) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 88 31 26 217 66 110 155 103 107 112 215 24 225 230 78 26 175 72 68 162 18 119 114 69 64 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 111 155 102 107 112 215 24 225 230 28 26 175 72 67 162 20 119 68 167 64 20 172 226 231 88 191 136) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4900) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4000) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6400) (list 15/16 1/16 1 6200) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5400) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5600) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5500) (list 23/16 1/16 1 5600) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7400)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 111 155 102 107 112 215 24 225 230 28 26 175 72 67 162 20 119 68 167 64 20 172 226 231 88 191 136)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 82 26 175 72 68 114 18 119 162 67 64 20 172 226 231 88 191 140) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6000) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6900) (list 15/16 1/16 1 6200) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5200) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5100) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 8000) (list 31/16 1/16 1 7800)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 24 225 230 82 26 175 72 68 114 18 119 162 67 64 20 172 226 231 88 191 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 2336.1072 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 85 31 26 217 66 110 155 103 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 64 20 172 226 231 88 86 191) :decoder (list (list 3600 8400 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 7200) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6200) (list 3/16 1/16 1 5700) (list 1/4 1/16 1 5300) (list 5/16 1/16 1 4800) (list 3/8 1/16 1 4400) (list 7/16 1/16 1 4100) (list 1/2 1/16 1 4500) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 5500) (list 11/16 1/16 1 6200) (list 3/4 1/16 1 6500) (list 13/16 1/16 1 7000) (list 7/8 1/16 1 6500) (list 15/16 1/16 1 6000) (list 1 1/16 1 6400) (list 17/16 1/16 1 5900) (list 9/8 1/16 1 5500) (list 19/16 1/16 1 5100) (list 5/4 1/16 1 5400) (list 21/16 1/16 1 5700) (list 11/8 1/16 1 5200) (list 23/16 1/16 1 5400) (list 3/2 1/16 1 5100) (list 25/16 1/16 1 5600) (list 13/8 1/16 1 6100) (list 27/16 1/16 1 6600) (list 7/4 1/16 1 7100) (list 29/16 1/16 1 7500) (list 15/8 1/16 1 7300) (list 31/16 1/16 1 8000)) :range (list 3600 8400) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 31 26 217 66 110 155 103 107 112 215 26 225 230 78 24 175 72 68 162 18 119 114 67 64 20 172 226 231 88 86 191)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11))) (setf (om-darwin::generation om-darwin::ga) 1394) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1043 154) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 758 43) (om-make-point 60 30) (list 1/2 1) "(1/2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-TRILLS" (quote make-trills) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 3) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 1) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 747 156) (om-make-point 109 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 589 35) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/16) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 598 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 40) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 194 43) (om-make-point 90 30) (list 3600 8400) "(3600 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (17 0 5 0 nil 0) (18 0 5 1 nil 0) (5 0 6 0 nil 0) (12 0 8 0 nil 0) (9 0 11 1 nil 0) (2 0 11 2 nil 0) (5 0 12 1 nil 0) (1 0 12 2 nil 0) (13 0 14 4 nil 0) (15 0 16 0 nil 0))) nil 6.16))
