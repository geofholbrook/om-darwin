; OM File Header - Saved 2015/06/03 23:06:42
; (6.0901 :patc (om-make-point 24 24) (om-make-point 863 305) (om-make-point 1004 869) "" 183 0 nil "2015/06/03 23:06:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "cantus" (quote ((let ((box (om-load-boxcall (quote genfun) "C-LIST 2" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 373 345) (om-make-point 153 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 144 289) (om-make-point 90 30) (list 4800 5900) "(4800 5900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/2) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 144 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 312 98) (om-make-point 74 30) (list 600 nil) "(600 NIL)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 355 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 86 541) (om-make-point 776 160) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 9 201 205 103 174 61 54 171 168 25 217 242 215 88 138 67) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 201 205 103 174 61 54 171 168 25 217 242 215 88 138 67)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 137 236 90 169 81 70 109 28 177 239 76 101 238) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 3/2 1 5600) (list 3 1 1 4900) (list 4 1 1 5800) (list 5 1 1 5200) (list 6 1/2 1 5900) (list 13/2 3/2 1 5300)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 137 236 90 169 81 70 109 28 177 239 76 101 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 407261) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 137 237 89 169 81 70 109 28 177 239 235 198 238) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 1 1 5700) (list 5/2 1 1 4900) (list 7/2 1 1 5800) (list 9/2 1 1 5200) (list 11/2 2 1 5900) (list 15/2 3/2 1 5400)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 137 237 89 169 81 70 109 28 177 239 235 198 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 137 236 90 169 81 177 109 28 70 239 235 198 238) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 3/2 1 5600) (list 3 1 1 4900) (list 4 1 1 5700) (list 5 3/2 1 5200) (list 13/2 2 1 5900) (list 17/2 3/2 1 5400)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 137 236 90 169 81 177 109 28 70 239 235 198 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1089.8325 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 137 237 89 169 81 70 109 28 177 240 235 198 238) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 1 1 5700) (list 5/2 1 1 4900) (list 7/2 1 1 5800) (list 9/2 1 1 5200) (list 11/2 2 1 4800) (list 15/2 3/2 1 5400)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 137 237 89 169 81 70 109 28 177 240 235 198 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 1461.617 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 137 70 91 232 168 81 109 28 72 238 178 101 251) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 2 1 5800) (list 7/2 1/2 1 5200) (list 4 1 1 5700) (list 5 1/2 1 5200) (list 11/2 3/2 1 5800) (list 7 2 1 5300)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 137 70 91 232 168 81 109 28 72 238 178 101 251)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1621.7672 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 212 216 226 35 250 169 137 68 52 28 130 153 177 111 235) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 3/2 1 4800) (list 2 3/2 1 5900) (list 7/2 1 1 4900) (list 9/2 1/2 1 5600) (list 5 3/2 1 5200) (list 13/2 1 1 5700) (list 15/2 2 1 5100)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 212 216 226 35 250 169 137 68 52 28 130 153 177 111 235)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 1861.231 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 216 252 81 236 225 169 90 70 48 28 190 239 76 152 176) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 1 1 4800) (list 3/2 1 1 5600) (list 5/2 3/2 1 4900) (list 4 1/2 1 5800) (list 9/2 3/2 1 5200) (list 6 1/2 1 5900) (list 13/2 1/2 1 5600)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 216 252 81 236 225 169 90 70 48 28 190 239 76 152 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 2005.7009 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 140 217 215 70 91 232 168 81 109 28 77 238 178 101 251) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5400) (list 1/2 2 1 4900) (list 5/2 2 1 5800) (list 9/2 1/2 1 5200) (list 5 1 1 5700) (list 6 1 1 5200) (list 7 3/2 1 5800) (list 17/2 2 1 5300)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 140 217 215 70 91 232 168 81 109 28 77 238 178 101 251)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 2170.332 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 6 169 97 137 236 81 216 90 70 23 114 169 143 101 76 238) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1 1 5400) (list 1 1 1 4900) (list 2 1 1 5600) (list 3 3/2 1 4800) (list 9/2 2 1 5800) (list 13/2 1 1 5400) (list 15/2 1 1 5900) (list 17/2 3/2 1 5200)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 6 169 97 137 236 81 216 90 70 23 114 169 143 101 76 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 2336.1072 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 216 252 6 227 34 250 169 137 68 141 28 45 130 153 111 235) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 4800) (list 1/2 2 1 5400) (list 5/2 3/2 1 5800) (list 4 1 1 4900) (list 5 1 1 5600) (list 6 1 1 5200) (list 7 1 1 5800) (list 8 2 1 5100)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 216 252 6 227 34 250 169 137 68 141 28 45 130 153 111 235)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10))) (setf (om-darwin::generation om-darwin::ga) 407264) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (8 (((4 4) (2 2)) ((4 4) (2.0 2)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (2 2)) ((4 4) (4.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1177 1026) (om-make-point 567 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ff)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 169 773) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 2 1 nil 0) (3 0 4 0 nil 0) (2 0 5 1 nil 0) (0 0 5 2 nil 0) (5 0 6 0 nil 0))) nil 6.0901))
