; OM File Header - Saved 2015/06/03 23:06:42
; (6.0901 :patc (om-make-point 24 24) (om-make-point 578 187) (om-make-point 1219 869) "" 183 0 "2015/06/03 20:20:43" "2015/06/03 23:06:42")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "filigree" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 913 318) (om-make-point 76 30) (list 100 200) "(100 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC 3" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 100 200)))) (om-make-point 910 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 1322 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1307 38) (om-make-point 108 30) (list 6000 8400 50) "(6000 8400 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1429 70) (om-make-point 46 30) 1/28 "1/28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1288 77) (om-make-point 34 30) 70 "70" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1000 259) (om-make-point 76 30) (list 600 700) "(600 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC 2" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" (list 600 700)))) (om-make-point 1002 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PRINT" (quote c-print) (quote nil) (om-make-point 1146 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC 2" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 1518 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 1194 228) nil (list (list (list 0 1/28 1 7000) (list 1/28 1/28 1 8250) (list 1/14 1/28 1 7800) (list 3/28 1/28 1 7200) (list 1/7 1/28 1 7150) (list 5/28 1/28 1 6000) (list 3/14 1/28 1 8150) (list 1/4 1/28 1 8200) (list 2/7 1/28 1 6300) (list 9/28 1/28 1 7600) (list 5/14 1/28 1 7500) (list 11/28 1/28 1 7800) (list 3/7 1/28 1 6700) (list 13/28 1/28 1 7350) (list 1/2 1/28 1 8100) (list 15/28 1/28 1 6200) (list 4/7 1/28 1 6500) (list 17/28 1/28 1 7550) (list 9/14 1/28 1 8000) (list 19/28 1/28 1 7650) (list 5/7 1/28 1 8200) (list 3/4 1/28 1 7250) (list 11/14 1/28 1 8350) (list 23/28 1/28 1 7800) (list 6/7 1/28 1 6150) (list 25/28 1/28 1 6350) (list 13/14 1/28 1 7950) (list 27/28 1/28 1 7000) (list 1 1/28 1 6800) (list 29/28 1/28 1 7850) (list 15/14 1/28 1 6050) (list 31/28 1/28 1 8250) (list 8/7 1/28 1 8200) (list 33/28 1/28 1 6600) (list 17/14 1/28 1 7800) (list 5/4 1/28 1 8150) (list 9/7 1/28 1 7400) (list 37/28 1/28 1 8300) (list 19/14 1/28 1 6350) (list 39/28 1/28 1 7950) (list 10/7 1/28 1 6050) (list 41/28 1/28 1 7100) (list 3/2 1/28 1 7850) (list 43/28 1/28 1 7900) (list 11/7 1/28 1 6450) (list 45/28 1/28 1 8400) (list 23/14 1/28 1 6400) (list 47/28 1/28 1 6800) (list 12/7 1/28 1 7250) (list 7/4 1/28 1 6800) (list 25/14 1/28 1 8000) (list 51/28 1/28 1 7850) (list 13/7 1/28 1 6100) (list 53/28 1/28 1 6300) (list 27/14 1/28 1 7500) (list 55/28 1/28 1 6400) (list 2 1/28 1 6900) (list 57/28 1/28 1 7100) (list 29/14 1/28 1 8350) (list 59/28 1/28 1 6050) (list 15/7 1/28 1 7200) (list 61/28 1/28 1 7150) (list 31/14 1/28 1 6400) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 6850) (list 65/28 1/28 1 7900) (list 33/14 1/28 1 6550) (list 67/28 1/28 1 8000) (list 17/7 1/28 1 7050) (list 69/28 1/28 1 6250))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "combine" (om-load-patch-abs1 "combine" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 360 641) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 297 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 199) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 330 515) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 309 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-SET-CHANNEL" (quote om-darwin::arr-set-channel) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 410 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 470 321) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (1 0 4 0 nil 0) (4 0 5 0 nil 0) (6 0 5 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 595 766)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1282 323) nil (list nil) "l" "combine"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1207 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EVALUATE" (quote evaluate) (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil) (om-load-inputfun (quote input-funbox) "" "CRITERION" nil))) (om-make-point 1359 549) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 1126 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1111 28) (om-make-point 108 30) (list 6000 8400 50) "(6000 8400 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1233 60) (om-make-point 46 30) 1/28 "1/28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1092 67) (om-make-point 34 30) 70 "70" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 584 112) (om-make-point 83 30) (list 600 1200) "(600 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-HARMONIC" (quote c-harmonic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 602 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "combine-with-others" (om-load-patch-abs1 "combine-with-others" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 517 290) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-SET-CHANNEL" (quote om-darwin::arr-set-channel) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" nil))) (om-make-point 457 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 303 535) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 358 99) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 341 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-MAQ-OVERLAPS" (quote get-maq-overlaps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 158 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 317 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (3 0 5 0 nil 0) (4 0 6 0 nil 0) (6 0 7 0 nil 0) (1 0 7 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 715 715)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 713 166) nil nil "l" "combine-with-others"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 696 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 711 41) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 80 169) (om-make-point 34 30) 70 "70" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 221 162) (om-make-point 46 30) 1/28 "1/28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 130) (om-make-point 108 30) (list 6000 8400 50) "(6000 8400 50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 101 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST 2" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 541 382) (om-make-point 153 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 360 88) (om-make-point 69 30) (list 50 600) "(50 600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 355 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 28 503) (om-make-point 976 161) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 114 133 52 240 230 187 79 50 199 30 251 197 46 195 104 156 118 230 11 39 44 137 170 85 148 242 39 108 129 9 91 178 20 161 49 7 88 22 97 183 116 69 44 152 37 185 40 66 160 128 135 156 50 183 38 153 215 33 239 19 101 147 128 146 64 241 198 232 35 196) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 114 133 52 240 230 187 79 50 199 30 251 197 46 195 104 156 118 230 11 39 44 137 170 85 148 242 39 108 129 9 91 178 20 161 49 7 88 22 97 183 116 69 44 152 37 185 40 66 160 128 135 156 50 183 38 153 215 33 239 19 101 147 128 146 64 241 198 232 35 196)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 32 118 163 23 179 84 24 177 23 11 160 17 255 12 49 6 116 74 164 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 162 154 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7600) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7500) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6550) (list 19/28 1/28 1 6650) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6500) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6300) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 6850) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6750) (list 67/28 1/28 1 6350) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 32 118 163 23 179 84 24 177 23 11 160 17 255 12 49 6 116 74 164 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 162 154 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 174.83989 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 116 222 37 35 141 179 216 111 205 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6450) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6900) (list 15/7 1/28 1 7300) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6650) (list 67/28 1/28 1 6450) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 116 222 37 35 141 179 216 111 205 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 374.77753 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 9 17 215 61 49 255 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6450) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6500) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6350) (list 67/28 1/28 1 6750) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 9 17 215 61 49 255 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 436.51602 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 233 121 177 67 28 128 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 81 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 111 205 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7850) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7500) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6450) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7600) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6650) (list 67/28 1/28 1 6450) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 121 177 67 28 128 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 81 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 111 205 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 585.4286 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 68 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6450) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 6950) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6350) (list 67/28 1/28 1 6750) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 68 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 649.5744 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 233 121 177 67 28 128 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 163 74 85 121 208 116 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 111 205 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7850) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7500) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6450) (list 25/28 1/28 1 6800) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6900) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6650) (list 67/28 1/28 1 6450) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 121 177 67 28 128 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 163 74 85 121 208 116 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 111 205 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 745.488 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 32 118 163 23 179 84 24 177 23 8 160 17 255 12 49 6 116 74 164 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 162 154 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7600) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7500) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6400) (list 19/28 1/28 1 6650) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6500) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6300) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 6850) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6750) (list 67/28 1/28 1 6350) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 32 118 163 23 179 84 24 177 23 8 160 17 255 12 49 6 116 74 164 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 162 154 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 803.3532 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 32 118 163 23 183 84 24 177 23 255 160 17 8 12 49 6 116 74 85 121 208 163 10 118 168 74 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 9 3 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7600) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7800) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7500) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6500) (list 19/28 1/28 1 6650) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6400) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6300) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7250) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6350) (list 67/28 1/28 1 6450) (list 17/7 1/28 1 6150) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 32 118 163 23 183 84 24 177 23 255 160 17 8 12 49 6 116 74 85 121 208 163 10 118 168 74 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 9 3 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 869.29377 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 83 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6450) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7250) (list 27/28 1/28 1 7800) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6800) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7700) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6350) (list 67/28 1/28 1 6750) (list 17/7 1/28 1 6400) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 9 116 74 85 121 208 163 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 83 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 154 162 106 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 935.69257 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 6 116 75 84 121 208 51 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 153 106 162 50) :decoder (list (list 6000 8400 50)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/28 1 7500) (list 1/28 1/28 1 7150) (list 1/14 1/28 1 7500) (list 3/28 1/28 1 6900) (list 1/7 1/28 1 7400) (list 5/28 1/28 1 7850) (list 3/14 1/28 1 7900) (list 1/4 1/28 1 7400) (list 2/7 1/28 1 7900) (list 9/28 1/28 1 7350) (list 5/14 1/28 1 7000) (list 11/28 1/28 1 6800) (list 3/7 1/28 1 7150) (list 13/28 1/28 1 7600) (list 1/2 1/28 1 7750) (list 15/28 1/28 1 7200) (list 4/7 1/28 1 7750) (list 17/28 1/28 1 7150) (list 9/14 1/28 1 6650) (list 19/28 1/28 1 6500) (list 5/7 1/28 1 6850) (list 3/4 1/28 1 6950) (list 11/14 1/28 1 6600) (list 23/28 1/28 1 6000) (list 6/7 1/28 1 6300) (list 25/28 1/28 1 6900) (list 13/14 1/28 1 7300) (list 27/28 1/28 1 7750) (list 1 1/28 1 7150) (list 29/28 1/28 1 6600) (list 15/14 1/28 1 6100) (list 31/28 1/28 1 6500) (list 8/7 1/28 1 7000) (list 33/28 1/28 1 7050) (list 17/14 1/28 1 7200) (list 5/4 1/28 1 7500) (list 9/7 1/28 1 7200) (list 37/28 1/28 1 7400) (list 19/14 1/28 1 6950) (list 39/28 1/28 1 6500) (list 10/7 1/28 1 6650) (list 41/28 1/28 1 7050) (list 3/2 1/28 1 7650) (list 43/28 1/28 1 8250) (list 11/7 1/28 1 8150) (list 45/28 1/28 1 7950) (list 23/14 1/28 1 7700) (list 47/28 1/28 1 7150) (list 12/7 1/28 1 7000) (list 7/4 1/28 1 7600) (list 25/14 1/28 1 8100) (list 51/28 1/28 1 7900) (list 13/7 1/28 1 8300) (list 53/28 1/28 1 7800) (list 27/14 1/28 1 7250) (list 55/28 1/28 1 6650) (list 2 1/28 1 6400) (list 57/28 1/28 1 6250) (list 29/14 1/28 1 6350) (list 59/28 1/28 1 6850) (list 15/7 1/28 1 7350) (list 61/28 1/28 1 7850) (list 31/14 1/28 1 7750) (list 9/4 1/28 1 8150) (list 16/7 1/28 1 7600) (list 65/28 1/28 1 7000) (list 33/14 1/28 1 6300) (list 67/28 1/28 1 6400) (list 17/7 1/28 1 6750) (list 69/28 1/28 1 6050)) :range (list 6000 8400 50) :num-notes 70 :note-value 1/28 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 121 177 67 28 233 136 28 38 27 118 163 23 179 84 24 182 23 160 255 17 215 61 49 6 116 75 84 121 208 51 10 118 168 73 128 122 224 68 59 209 21 131 45 43 186 230 219 69 81 91 185 95 134 25 13 106 5 56 115 223 37 35 141 179 216 153 106 162 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9))) (setf (om-darwin::generation om-darwin::ga) 56) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7850)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7850)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (143)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gg)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 567 352) (om-make-point 1177 1026) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 169 773) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 2 2 nil 0) (6 0 7 0 nil 0) (14 0 10 0 nil 0) (10 0 11 0 nil 0) (7 0 12 0 nil 0) (11 0 12 1 nil 0) (2 0 13 0 nil 0) (12 0 13 1 nil 0) (17 0 14 0 nil 0) (15 0 14 1 nil 0) (16 0 14 2 nil 0) (18 0 19 0 nil 0) (22 0 20 0 nil 0) (19 0 21 0 nil 0) (20 0 21 1 nil 0) (23 0 26 0 nil 0) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (29 0 27 0 nil 0) (21 0 27 1 nil 0) (28 0 29 0 nil 0) (26 0 30 1 nil 0) (27 0 30 2 nil 0) (30 0 31 0 nil 0))) nil 6.0901))
