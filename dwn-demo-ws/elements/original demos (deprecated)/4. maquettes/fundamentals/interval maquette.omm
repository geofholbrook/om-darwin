; OM File Header - Saved 2015/06/03 23:06:42
; (6.0901 :maqt (om-make-point 293 204) (om-make-point 1281 264) (om-make-point 1005 394) "" 182 0 "2015/06/03 14:15:33" "2015/06/03 23:06:42")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-maq2 "interval maquette" (quote ((let ((box (om-load-tempobj1 "filigree" (quote nil) (list (quote patchb) (quote ("elements" "4. maquettes" "fundamentals" "filigree"))) 0 13438 2000 (om-make-color 0.5 0.5 0.6) (list) t 20 57 1 0 (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "cantus" (quote nil) (list (quote patchb) (quote ("elements" "4. maquettes" "fundamentals" "cantus"))) 0 4291 14078 (om-make-color 0.5 0.5 0.6) (list (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 198 34 144 53 128 62 243 99 38 244 4 71 98 196 225 9) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 34 144 53 128 62 243 99 38 244 4 71 98 196 225 9)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 7292.53 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 103 144 150 236 249 83 241 80 81 94 229 237 53 194 119 68) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5500) (list 1/2 1/2 1 5400) (list 1 2 1 5700) (list 3 1/2 1 4900) (list 7/2 3/2 1 5700) (list 5 1 1 4900) (list 6 3/2 1 5300) (list 15/2 1/2 1 5900)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 103 144 150 236 249 83 241 80 81 94 229 237 53 194 119 68)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11831.031 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 202 134 9 157 141 141 86 53 106 99 40 231 128 99 28 207) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 3/2 1 5800) (list 3/2 1 1 5700) (list 5/2 1 1 5700) (list 7/2 1 1 5000) (list 9/2 2 1 5800) (list 13/2 2 1 5200) (list 17/2 2 1 5600) (list 21/2 2 1 5200)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 202 134 9 157 141 141 86 53 106 99 40 231 128 99 28 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 19904.887 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 107 253 139 44 76 236 166 22 250 49 164 177 167 145 119 22) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1 1 5900) (list 1 1/2 1 5500) (list 3/2 1/2 1 5200) (list 2 3/2 1 5800) (list 7/2 1 1 5800) (list 9/2 1 1 5600) (list 11/2 1 1 5900) (list 13/2 3/2 1 5900)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 107 253 139 44 76 236 166 22 250 49 164 177 167 145 119 22)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15793.787 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 208 114 123 57 41 221 218 113 42 234 125 47 156 20 165 224) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 3/2 1 5200) (list 3/2 1 1 5100) (list 5/2 1 1 5300) (list 7/2 1 1 5000) (list 9/2 3/2 1 5400) (list 6 2 1 5300) (list 8 1/2 1 4800) (list 17/2 1/2 1 5700)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 208 114 123 57 41 221 218 113 42 234 125 47 156 20 165 224)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 19270.774 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 240 77 51 144 74 102 89 119 194 222 39 119 169 123 138 188) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1 1 4800) (list 1 1/2 1 5100) (list 3/2 3/2 1 5000) (list 3 2 1 5300) (list 5 3/2 1 5000) (list 13/2 2 1 5100) (list 17/2 2 1 4900) (list 21/2 1/2 1 5400)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 240 77 51 144 74 102 89 119 194 222 39 119 169 123 138 188)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 3732.1824 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 110 132 221 98 205 169 249 235 38 182 179 153 149 75 204 233) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/2 1 5000) (list 1/2 3/2 1 5300) (list 2 1 1 4900) (list 3 2 1 5700) (list 5 3/2 1 5000) (list 13/2 1 1 5900) (list 15/2 2 1 5300) (list 19/2 1 1 4800)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 110 132 221 98 205 169 249 235 38 182 179 153 149 75 204 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 15458.731 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 194 119 191 248 44 123 112 30 14 18 89 43 243 98 101 58) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 2 1 5000) (list 2 1/2 1 5900) (list 5/2 2 1 5600) (list 9/2 3/2 1 5200) (list 6 3/2 1 5000) (list 15/2 2 1 5300) (list 19/2 3/2 1 5100) (list 11 3/2 1 5300)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 194 119 191 248 44 123 112 30 14 18 89 43 243 98 101 58)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9362.014 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 80 29 40 93 180 34 222 162 235 116 38 214 238 77 139 242) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 1 1 5600) (list 1 1 1 5200) (list 2 3/2 1 4800) (list 7/2 3/2 1 5400) (list 5 1/2 1 5500) (list 11/2 3/2 1 5000) (list 7 1 1 5800) (list 8 3/2 1 5500)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 80 29 40 93 180 34 222 162 235 116 38 214 238 77 139 242)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 4903.1416 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 169 178 175 235 229 206 28 202 251 16 145 232 183 184 119 23) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 3/2 1 4900) (list 3/2 2 1 5500) (list 7/2 3/2 1 4900) (list 5 3/2 1 5200) (list 13/2 1/2 1 5900) (list 7 1/2 1 4900) (list 15/2 1/2 1 5100) (list 8 2 1 5900)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 178 175 235 229 206 28 202 251 16 145 232 183 184 119 23)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11181.999 (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 255 255 10 15 45 208 238 219 180 126 92 223 142 101 100 247) :decoder (list (list 4800 5900 100) (list 1 4)) :operons (list nil nil nil nil nil nil nil nil) :pheno (list (list 0 2 1 5100) (list 2 2 1 5800) (list 4 1/2 1 5700) (list 9/2 2 1 5800) (list 13/2 3/2 1 4800) (list 8 2 1 5600) (list 10 1 1 5800) (list 11 2 1 5200)) :range (list 4800 5900) :note-value 1/2 :num-notes 8 :len-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 255 255 10 15 45 208 238 219 180 126 92 223 142 101 100 247)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (8 (((4 4) (2 2)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (2 2)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (2.0 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga)) t 22 38 1 nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil t nil nil t "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 38395 0 63)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4) (3 4) (3 8)) 8 t)) (quote nil) nil t :on 6.0901 nil (quote (1)) (quote (1)) nil))