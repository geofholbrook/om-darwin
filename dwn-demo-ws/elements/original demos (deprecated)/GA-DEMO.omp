; OM File Header - Saved 2020/11/26 22:05:20
; (6.16 :patc (om-make-point 412 349) (om-make-point 129 23) (om-make-point 1499 1050) "" 183 0 "2015/06/04 16:54:58" "2020/11/26 22:05:20")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "GA-DEMO" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 334 271) (quote "A genetic algorithm (GA) simulates natural selection inside a computer, in order to find solutions to problems -- in this case, compositional ones.$$In OM-Darwin, you define two things to run the GA: the model (what type of solution we are looking for) -- in this case, a two voice sequence on a sextuplet sixteenth grid -- and the fitness function, which is the method by which the GA decides what is a better (more fit) solution than another.$$In this patch the fitness function measures how well a solution adheres to pitch class constraints, melodic interval constraints, rhythmic simultanaeity and over length of the sequence") "" (om-make-point 32 96) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 33) (quote "FITNESS FUNCTION") "" (om-make-point 926 672) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 466 212) (quote "1. Select the GA-ENGINE box below$$2. Unblock (b) (such that the (X) in the upper left disappears)$$3. eValuate (v) to get a random sequence$$4. Block (b)$$5. Start algorithm (g).$$Then you can change the parameters of the fitness function and$ observe the reaction of the algorithm") "" (om-make-point 27 439) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 489 104) (quote "OM-DARWIN: $GENETIC ALGORITHMS with OPENMUSIC") "" (om-make-point 63 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 48) (quote "RANGE OF MELODIC INTERVALS IN SEMTIONES") "" (om-make-point 580 124) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PC RATE OF OCCURENCE") "" (om-make-point 526 242) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "RATE OF SIMULTANEOUS ATTACKS") "" (om-make-point 853 30) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1064 141) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0.01))) (om-make-point 989 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 943 226) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 30) "0.7" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 100)) (om-load-inputfun (quote input-funbox) "step" "increment" 5) (om-load-inputfun (quote input-funbox) "slider value" "value" 0) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 820 71) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 24) "untitled" :direction :horizontal :range (quote (0 100)) :increment 1 :value 45))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1363 239) (om-make-point 39 30) 1/4 "1/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1/4))) (om-make-point 1288 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1297 127) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 30) "4" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 4 16)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "slider value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 1172 56) (om-make-point 288 51) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 272 24) "untitled" :direction :horizontal :range (quote (4 16)) :increment 1 :value 4))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 35) (quote "LENGTH IN QUARTER NOTES") "" (om-make-point 1214 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 719 294) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 682 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 128 41) (quote "PITCH CLASSES$(precede with set)") "" (om-make-point 388 226) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "DEFINITION OF MODEL" (om-load-patch-abs1 "DEFINITION OF MODEL" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 170 305) (om-make-point 116 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 51 135) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 206 108) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 130 119) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 49 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 41 60) (om-make-point 100 30) (list (list 6000 7600)) "((6000 7600))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/24) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 6)))) (om-make-point 290 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 371 112) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 447 101) (om-make-point 48 30) (list 1 6) "(1 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 292 128) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 166 521) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 168 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 294 40) (om-make-point 100 30) (list (list 7000 8600)) "((7000 8600))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (6 0 0 1 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (9 0 6 0 nil 0) (12 0 6 1 nil 0) (7 0 6 2 nil 0) (8 0 6 3 nil 0) (11 0 10 0 nil 0) (0 0 11 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 697 790)) (quote nil) (om-make-point 393 668) nil (list (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 215 194 134 204 110 33 182 60 124 10 71 30 155 130 183 83 8 154 242 18 168 91 112 230 220 58 171 194 50 23 221 125 235 96 218 11 136 15 85 3 48 137 157 187 71 162 65 111 247 0 229 201 250 19 84 173 232 166 121 169 199 147 127 60 210 187 86 201 91 148 119 145 242 249 113 85 133 60 139 34 81 59 219 222 114 252 39 50 151 99 83 106 235 122 195 125) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 150 46 156 41 125 250 25 83 34 166 218 135 80 214 28 63 222 254 51 128 251 255 79 83 132 103 134 19 115 172 69 29 25 47 14 140 97 62 146 25 219 19 244 247 38 131 234 233) :decoder (list (list (list 6000 7600)) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 5/24 1 (list 6150)) (list 5/24 1/4 1 (list 6156)) (list 11/24 5/24 1 (list 6125)) (list 2/3 1/4 1 (list 6025)) (list 11/12 5/24 1 (list 6034)) (list 9/8 1/6 1 (list 6218)) (list 31/24 5/24 1 (list 6080)) (list 3/2 1/6 1 (list 6028)) (list 5/3 1/8 1 (list 6222)) (list 43/24 1/8 1 (list 6051)) (list 23/12 1/6 1 (list 6251)) (list 25/12 1/4 1 (list 6079)) (list 7/3 1/12 1 (list 6132)) (list 29/12 1/12 1 (list 6134)) (list 5/2 5/24 1 (list 6115)) (list 65/24 1/4 1 (list 6069)) (list 71/24 1/4 1 (list 6025)) (list 77/24 1/8 1 (list 6014)) (list 10/3 1/8 1 (list 6097)) (list 83/24 1/12 1 (list 6146)) (list 85/24 1/12 1 (list 6219)) (list 29/8 1/12 1 (list 6244)) (list 89/24 1/4 1 (list 6038)) (list 95/24 1/4 1 (list 6234))) :range (list (list 6000 7600)) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 150 46 156 41 125 250 25 83 34 166 218 135 80 214 28 63 222 254 51 128 251 255 79 83 132 103 134 19 115 172 69 29 25 47 14 140 97 62 146 25 219 19 244 247 38 131 234 233)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 186 242 254 237 113 194 179 71 203 57 11 91 89 229 61 129 237 125 73 252 159 43 199 186 37 128 232 112 19 8 205 52 191 30 206 7 42 90 154 28 139 215 95 221 189 226 149 56) :decoder (list (list (list 7000 8600)) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/8 1 (list 7186)) (list 1/8 1/6 1 (list 7254)) (list 7/24 1/8 1 (list 7113)) (list 5/12 1/4 1 (list 7179)) (list 2/3 1/6 1 (list 7203)) (list 5/6 1/12 1 (list 7011)) (list 11/12 1/12 1 (list 7089)) (list 1 1/6 1 (list 7061)) (list 7/6 1/4 1 (list 7237)) (list 17/12 1/24 1 (list 7073)) (list 35/24 1/12 1 (list 7159)) (list 37/24 1/24 1 (list 7199)) (list 19/12 1/8 1 (list 7037)) (list 41/24 5/24 1 (list 7232)) (list 23/12 1/8 1 (list 7019)) (list 49/24 5/24 1 (list 7205)) (list 9/4 1/24 1 (list 7191)) (list 55/24 1/12 1 (list 7206)) (list 19/8 1/24 1 (list 7042)) (list 29/12 5/24 1 (list 7154)) (list 21/8 1/4 1 (list 7139)) (list 23/8 1/4 1 (list 7095)) (list 25/8 5/24 1 (list 7189)) (list 10/3 1/8 1 (list 7149))) :range (list (list 7000 8600)) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 186 242 254 237 113 194 179 71 203 57 11 91 89 229 61 129 237 125 73 252 159 43 199 186 37 128 232 112 19 8 205 52 191 30 206 7 42 90 154 28 139 215 95 221 189 226 149 56)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 215 194 134 204 110 33 182 60 124 10 71 30 155 130 183 83 8 154 242 18 168 91 112 230 220 58 171 194 50 23 221 125 235 96 218 11 136 15 85 3 48 137 157 187 71 162 65 111 247 0 229 201 250 19 84 173 232 166 121 169 199 147 127 60 210 187 86 201 91 148 119 145 242 249 113 85 133 60 139 34 81 59 219 222 114 252 39 50 151 99 83 106 235 122 195 125)) (om-darwin::update om-darwin::spec) om-darwin::spec)) nil "DEFINITION OF MODEL"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 1200 280) (om-make-point 51 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1263 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rate of simultaneities" (om-load-patch-abs1 "rate of simultaneities" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 541) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 460 150) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 381 189) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 135) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 373 50) (om-make-point 66 30) (quote :attacks) ":attacks" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" 2) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 276 275) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 585 666)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 970 373) nil (list nil) nil "rate of simultaneities"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "favour sextuplets, quarter notes" (om-load-patch-abs1 "favour sextuplets, quarter notes" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 63 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 73 306) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 406 103) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 335 50) (om-make-point 86 30) (list 1/12 1/6) "(2/24 4/24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 268 94) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 281 169) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 175 115) (om-make-point 38 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 111 56) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-LEN" (quote om-darwin::region-len) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 50 114) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :regions) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.8))) (om-make-point 63 189) (om-make-point 139 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (9 0 1 0 nil 0) (5 0 1 1 nil 0) (4 0 5 0 nil 0) (3 0 5 2 nil 0) (2 0 5 3 nil 0) (8 0 9 0 nil 0) (7 0 9 2 nil 0) (6 0 9 3 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 531 628)) (quote nil) (om-make-point 767 372) nil (list nil) nil "favour sextuplets, quarter notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1348 475) (om-make-point 46 30) 1/8 "3/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "max difference in length of voices" (om-load-patch-abs1 "max difference in length of voices" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 448 456) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 493 553) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OFFBY" (quote om-darwin::offby) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "VALUE" "VALUE" nil))) (om-make-point 310 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max length diff" 1 (om-make-point 519 395) "" "max length diff" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 282 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 358 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ARR-END" (quote om-darwin::arr-end) (quote ((om-load-inputfun (quote input-funbox) "ARR" "ARR" nil))) (om-make-point 195 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 240 330) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-CHAN" (quote om-darwin::region-chan) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 311 121) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DEMIX" (quote demix) (quote ((om-load-inputfun (quote input-funbox) "LIS" "LIS" nil) (om-load-inputfun (quote input-funbox) "TEST" "TEST" nil))) (om-make-point 252 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 139 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "spec" 0 (om-make-point 208 18) "" "spec" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 304 721) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (7 1 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (2 0 12 0 nil 0))) 6.16 nil "" (om-make-point 200 113) (om-make-point 730 960)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1221 527) nil (list nil) "l" "max difference in length of voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 536 283) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION 2" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 490 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 657 174) (om-make-point 48 30) (list 3 4) "(3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 699 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 756 587) (om-make-point 205 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 813 1056) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 401 272) (om-make-point 113 30) (list (quote :set) 0 4 6 7 10) "(:set 0 4 6 7 10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 151 760) (om-make-point 1052 197) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 77 40 217 118 199 222 104 17 183 84 169 211 79 210 10 149 69 114 81 91 235 225 15 44 241 235 84 148 168 13 29 244 87 200 55 240 233 139 220 134 194 81 131 116 76 254 236 162 80 87 45 225 92 124 67 127 163 175 185 201 243 239 63 24 250 88 195 32 8 131 233 196 170 136 206 63 141 113 112 142 3 77 115 2 12 53 111 196 143 181 11 149 97 111 134 251) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 77 40 217 118 199 222 104 17 183 84 169 211 79 210 10 149 69 114 81 91 235 225 15 44 241 235 84 148 168 13 29 244 87 200 55 240 233 139 220 134 194 81 131 116 76 254 236 162) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 77 40 217 118 199 222 104 17 183 84 169 211 79 210 10 149 69 114 81 91 235 225 15 44 241 235 84 148 168 13 29 244 87 200 55 240 233 139 220 134 194 81 131 116 76 254 236 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 80 87 45 225 92 124 67 127 163 175 185 201 243 239 63 24 250 88 195 32 8 131 233 196 170 136 206 63 141 113 112 142 3 77 115 2 12 53 111 196 143 181 11 149 97 111 134 251) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 80 87 45 225 92 124 67 127 163 175 185 201 243 239 63 24 250 88 195 32 8 131 233 196 170 136 206 63 141 113 112 142 3 77 115 2 12 53 111 196 143 181 11 149 97 111 134 251)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 77 40 217 118 199 222 104 17 183 84 169 211 79 210 10 149 69 114 81 91 235 225 15 44 241 235 84 148 168 13 29 244 87 200 55 240 233 139 220 134 194 81 131 116 76 254 236 162 80 87 45 225 92 124 67 127 163 175 185 201 243 239 63 24 250 88 195 32 8 131 233 196 170 136 206 63 141 113 112 142 3 77 115 2 12 53 111 196 143 181 11 149 97 111 134 251)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.25202906 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 54 72 246 102 144 122 139 102 102 3 186 17 210 71 186 75 210 190 67 255 42 190 168 210 151 155 24 5 60 87 60 197 90 183 60 254 132 149 30 214 193 177 0 197 0 115 13 44 168 24 204 62 108 194 139 173 222 24 66 225 234 69 228 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 54 72 246 102 144 122 139 102 102 3 186 17 210 71 186 75 210 190 67 255 42 190 168 210 151 155 24 5 60 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 54 72 246 102 144 122 139 102 102 3 186 17 210 71 186 75 210 190 67 255 42 190 168 210 151 155 24 5 60 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 90 183 60 254 132 149 30 214 193 177 0 197 0 115 13 44 168 24 204 62 108 194 139 173 222 24 66 225 234 69 228 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 90 183 60 254 132 149 30 214 193 177 0 197 0 115 13 44 168 24 204 62 108 194 139 173 222 24 66 225 234 69 228 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 54 72 246 102 144 122 139 102 102 3 186 17 210 71 186 75 210 190 67 255 42 190 168 210 151 155 24 5 60 87 60 197 90 183 60 254 132 149 30 214 193 177 0 197 0 115 13 44 168 24 204 62 108 194 139 173 222 24 66 225 234 69 228 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.26269603 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 42 190 216 255 66 190 168 210 151 155 24 5 60 87 60 197 217 183 192 254 132 149 120 214 90 251 0 197 0 177 109 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 42 190 216 255 66 190 168 210 151 155 24 5 60 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 42 190 216 255 66 190 168 210 151 155 24 5 60 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 217 183 192 254 132 149 120 214 90 251 0 197 0 177 109 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 217 183 192 254 132 149 120 214 90 251 0 197 0 177 109 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 42 190 216 255 66 190 168 210 151 155 24 5 60 87 60 197 217 183 192 254 132 149 120 214 90 251 0 197 0 177 109 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.2691345 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 139 210 102 3 48 75 102 71 186 17 66 190 253 255 42 190 67 125 151 155 24 5 60 87 60 197 90 183 60 254 132 149 30 214 193 177 109 197 0 251 90 44 168 24 139 44 168 24 222 173 204 194 228 21 199 69 67 225 168 69 222 141 246 213 240 98 138 44 96 81 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 139 210 102 3 48 75 102 71 186 17 66 190 253 255 42 190 67 125 151 155 24 5 60 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 139 210 102 3 48 75 102 71 186 17 66 190 253 255 42 190 67 125 151 155 24 5 60 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 90 183 60 254 132 149 30 214 193 177 109 197 0 251 90 44 168 24 139 44 168 24 222 173 204 194 228 21 199 69 67 225 168 69 222 141 246 213 240 98 138 44 96 81 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 90 183 60 254 132 149 30 214 193 177 109 197 0 251 90 44 168 24 139 44 168 24 222 173 204 194 228 21 199 69 67 225 168 69 222 141 246 213 240 98 138 44 96 81 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 139 210 102 3 48 75 102 71 186 17 66 190 253 255 42 190 67 125 151 155 24 5 60 87 60 197 90 183 60 254 132 149 30 214 193 177 109 197 0 251 90 44 168 24 139 44 168 24 222 173 204 194 228 21 199 69 67 225 168 69 222 141 246 213 240 98 138 44 96 81 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.26943627 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162 254 60 183 133 254 192 149 120 214 0 251 109 197 168 177 90 44 0 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 254 60 183 133 254 192 149 120 214 0 251 109 197 168 177 90 44 0 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 60 183 133 254 192 149 120 214 0 251 109 197 168 177 90 44 0 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162 254 60 183 133 254 192 149 120 214 0 251 109 197 168 177 90 44 0 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.27458417 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 216 190 66 255 42 190 168 210 151 155 24 5 132 87 60 254 60 183 217 197 192 149 120 214 90 251 0 197 0 177 90 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 216 190 66 255 42 190 168 210 151 155 24 5 132 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 216 190 66 255 42 190 168 210 151 155 24 5 132 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 254 60 183 217 197 192 149 120 214 90 251 0 197 0 177 90 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 60 183 217 197 192 149 120 214 90 251 0 197 0 177 90 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 144 122 140 102 102 3 186 75 210 71 48 17 216 190 66 255 42 190 168 210 151 155 24 5 132 87 60 254 60 183 217 197 192 149 120 214 90 251 0 197 0 177 90 44 168 24 139 44 204 24 168 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.27517065 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 122 102 17 139 3 48 153 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133 197 132 183 60 254 132 149 30 214 193 251 109 197 0 177 90 44 168 24 139 44 168 24 222 173 204 194 228 225 66 69 222 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 122 102 17 139 3 48 153 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 122 102 17 139 3 48 153 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 132 183 60 254 132 149 30 214 193 251 109 197 0 177 90 44 168 24 139 44 168 24 222 173 204 194 228 225 66 69 222 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 132 183 60 254 132 149 30 214 193 251 109 197 0 177 90 44 168 24 139 44 168 24 222 173 204 194 228 225 66 69 222 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 122 102 17 139 3 48 153 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133 197 132 183 60 254 132 149 30 214 193 251 109 197 0 177 90 44 168 24 139 44 168 24 222 173 204 194 228 225 66 69 222 21 246 69 246 141 222 213 97 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 6) (list 0.27711114 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 228 154 24 72 246 102 144 122 139 102 102 3 186 75 210 71 48 17 66 190 216 255 42 190 168 210 151 155 24 5 60 87 60 197 132 183 217 254 192 149 0 214 90 251 120 197 0 177 109 44 168 24 139 44 168 228 204 44 204 24 24 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 240 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 228 154 24 72 246 102 144 122 139 102 102 3 186 75 210 71 48 17 66 190 216 255 42 190 168 210 151 155 24 5 60 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 228 154 24 72 246 102 144 122 139 102 102 3 186 75 210 71 48 17 66 190 216 255 42 190 168 210 151 155 24 5 60 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 132 183 217 254 192 149 0 214 90 251 120 197 0 177 109 44 168 24 139 44 168 228 204 44 204 24 24 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 240 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 132 183 217 254 192 149 0 214 90 251 120 197 0 177 109 44 168 24 139 44 168 228 204 44 204 24 24 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 240 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 228 154 24 72 246 102 144 122 139 102 102 3 186 75 210 71 48 17 66 190 216 255 42 190 168 210 151 155 24 5 60 87 60 197 132 183 217 254 192 149 0 214 90 251 120 197 0 177 109 44 168 24 139 44 168 228 204 44 204 24 24 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 240 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.2801032 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162 254 60 183 133 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 96 98 96 129 240) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 254 60 183 133 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 96 98 96 129 240) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 60 183 133 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 223 7 193 240 173 54 245 54 55 55 154 114 72 246 102 102 122 139 17 144 3 186 75 210 72 48 102 216 190 66 255 168 190 246 210 66 155 60 5 60 87 162 254 60 183 133 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 222 69 66 21 246 69 246 141 222 213 96 81 138 44 96 98 96 129 240)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.2808736 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 3 102 17 139 122 48 210 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133 197 132 183 217 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 19 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 50 96) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 3 102 17 139 122 48 210 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 3 102 17 139 122 48 210 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 132 183 217 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 19 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 50 96) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 132 183 217 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 19 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 50 96)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 246 102 246 3 102 17 139 122 48 210 102 71 162 75 186 190 66 0 169 71 42 210 24 155 25 175 60 87 133 197 132 183 217 254 192 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 168 24 204 44 204 24 228 225 19 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 50 96)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.28420478 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 139 102 144 122 246 210 120 3 186 75 102 71 48 17 66 190 67 255 42 190 253 125 151 155 24 5 60 87 60 197 90 183 60 254 132 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 204 24 204 44 168 24 228 225 222 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 129 96) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 139 102 144 122 246 210 120 3 186 75 102 71 48 17 66 190 67 255 42 190 253 125 151 155 24 5 60 87 60) :decoder (list (list 6000 7600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 6000 7600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 139 102 144 122 246 210 120 3 186 75 102 71 48 17 66 190 67 255 42 190 253 125 151 155 24 5 60 87 60)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::grid-melody) nil) (make-instance (quote om-darwin::grid-melody) :raw-genotype (list 197 90 183 60 254 132 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 204 24 204 44 168 24 228 225 222 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 129 96) :decoder (list (list 7000 8600 100) (list 1 6)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 7000 8600) :note-value 1/24 :num-notes 24 :len-range (list 1 6) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 197 90 183 60 254 132 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 204 24 204 44 168 24 228 225 222 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 129 96)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 84 128 216 226 49 179 114 193 144 190 42 245 240 55 54 154 24 72 139 102 144 122 246 210 120 3 186 75 102 71 48 17 66 190 67 255 42 190 253 125 151 155 24 5 60 87 60 197 90 183 60 254 132 149 120 214 0 251 109 197 0 177 90 44 168 24 139 44 204 24 204 44 168 24 228 225 222 69 66 21 246 69 246 141 222 213 240 81 138 44 97 98 240 129 96)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7))) (setf (om-darwin::generation om-darwin::ga) 15682) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1 2)) (1 (1 1 2 1 1)) (1 (1 2 1 1 1)) (1 (1 1 1 1 2)))) ((4 4) ((1 (1 1 1 1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 2 1 1)) (1 (1 1 1 1 1 1)) (1 (2 1 1 1 1)) (1 (1 2 1 1 1)))) ((4 4) ((1 (1.0 1 1 1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 487 326) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf)) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 3 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 0 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (14 3 13 0 nil 0) (28 0 17 0 nil 0) (16 0 17 1 nil 0) (20 0 21 0 nil 0) (12 0 21 2 nil 0) (9 0 22 0 nil 0) (24 0 25 1 nil 0) (32 0 27 2 nil 0) (26 0 27 3 nil 0) (17 0 29 0 nil 0) (27 0 30 0 nil 0) (29 0 30 1 nil 0) (23 0 30 2 nil 0) (22 0 30 3 nil 0) (25 0 30 4 nil 0) (21 0 30 5 nil 0) (33 0 31 0 nil 0) (30 0 31 1 nil 0) (19 0 33 1 nil 0) (30 0 33 2 nil 0))) nil 6.16))
