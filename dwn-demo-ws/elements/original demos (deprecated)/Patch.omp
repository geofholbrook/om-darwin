; OM File Header - Saved 2020/11/25 11:06:20
; (6.16 :patc (om-make-point 236 174) (om-make-point 198 37) (om-make-point 1101 1042) "" 183 0 "2015/06/03 15:46:10" "2020/11/13 14:48:48")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 940 425) (om-make-point 46 30) 1/20 "1/20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 854 365) (om-make-point 90 30) (list 3600 9600) "(3600 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 762 601) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 615 568) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 769 391) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 95 788) (om-make-point 749 138) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 23 108 49 182 224 199 126 136 202 50 69 95 31 97 74 130 149 92 98 171 254 42 127 244 35 233 25 85 79 35) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 23 108 49 182 224 199 126 136 202 50 69 95 31 97 74) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 108 49 182 224 199 126 136 202 50 69 95 31 97 74)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 130 149 92 98 171 254 42 127 244 35 233 25 85 79 35) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 130 149 92 98 171 254 42 127 244 35 233 25 85 79 35)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 23 108 49 182 224 199 126 136 202 50 69 95 31 97 74 130 149 92 98 171 254 42 127 244 35 233 25 85 79 35)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 87 125 63 222 88 173 221 222 149 50 112 63 247 185 87 50 222 26 221 27 160 246 247 161 39 99 137 160 149 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 87 125 63 222 88 173 221 222 149 50 112 63 247 185 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 125 63 222 88 173 221 222 149 50 112 63 247 185 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 221 27 160 246 247 161 39 99 137 160 149 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 221 27 160 246 247 161 39 99 137 160 149 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 125 63 222 88 173 221 222 149 50 112 63 247 185 87 50 222 26 221 27 160 246 247 161 39 99 137 160 149 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.023722835 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 125 63 222 88 87 221 222 149 50 112 63 247 185 87 50 222 30 221 27 160 246 247 161 39 99 137 160 149 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 125 63 222 88 87 221 222 149 50 112 63 247 185 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 222 149 50 112 63 247 185 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 30 221 27 160 246 247 161 39 99 137 160 149 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 30 221 27 160 246 247 161 39 99 137 160 149 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 222 149 50 112 63 247 185 87 50 222 30 221 27 160 246 247 161 39 99 137 160 149 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.051583264 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 125 63 221 88 149 222 222 87 50 112 63 247 185 87 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 125 63 221 88 149 222 222 87 50 112 63 247 185 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 221 88 149 222 222 87 50 112 63 247 185 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 221 88 149 222 222 87 50 112 63 247 185 87 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 23) (list 0.07943282 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 125 63 222 88 87 221 222 149 46 112 63 245 187 87 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 125 63 222 88 87 221 222 149 46 112 63 245 187 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 222 149 46 112 63 245 187 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 222 149 46 112 63 245 187 87 50 222 26 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.10900153 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 125 63 222 88 87 221 241 130 50 112 63 247 185 87 50 217 31 221 27 160 246 247 161 39 99 137 149 160 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 125 63 222 88 87 221 241 130 50 112 63 247 185 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 241 130 50 112 63 247 185 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 217 31 221 27 160 246 247 161 39 99 137 149 160 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 217 31 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 222 88 87 221 241 130 50 112 63 247 185 87 50 217 31 221 27 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.13932647 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 125 63 221 88 87 222 222 149 50 117 63 247 180 92 50 222 26 218 30 160 246 247 161 39 99 137 149 160 124) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 125 63 221 88 87 222 222 149 50 117 63 247 180 92) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 221 88 87 222 222 149 50 117 63 247 180 92)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 218 30 160 246 247 161 39 99 137 149 160 124) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 218 30 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 125 63 221 88 87 222 222 149 50 117 63 247 180 92 50 222 26 218 30 160 246 247 161 39 99 137 149 160 124)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.17026799 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 171 88 63 125 221 149 52 214 192 68 112 48 247 209 87 50 222 26 247 27 160 246 221 161 124 99 137 149 160 39) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 171 88 63 125 221 149 52 214 192 68 112 48 247 209 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 88 63 125 221 149 52 214 192 68 112 48 247 209 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 247 27 160 246 221 161 124 99 137 149 160 39) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 247 27 160 246 221 161 124 99 137 149 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 88 63 125 221 149 52 214 192 68 112 48 247 209 87 50 222 26 247 27 160 246 221 161 124 99 137 149 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.20173185 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 171 88 63 125 221 149 52 214 192 63 112 48 247 209 87 50 222 26 247 27 160 207 4 161 124 99 137 149 160 39) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 171 88 63 125 221 149 52 214 192 63 112 48 247 209 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 88 63 125 221 149 52 214 192 63 112 48 247 209 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 247 27 160 207 4 161 124 99 137 149 160 39) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 247 27 160 207 4 161 124 99 137 149 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 88 63 125 221 149 52 214 192 63 112 48 247 209 87 50 222 26 247 27 160 207 4 161 124 99 137 149 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.2336499 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 173 88 63 125 221 50 149 222 186 63 112 222 247 209 123 50 222 26 247 168 160 246 108 18 171 52 0 30 160 39) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 173 88 63 125 221 50 149 222 186 63 112 222 247 209 123) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 88 63 125 221 50 149 222 186 63 112 222 247 209 123)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 222 26 247 168 160 246 108 18 171 52 0 30 160 39) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 222 26 247 168 160 246 108 18 171 52 0 30 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 88 63 125 221 50 149 222 186 63 112 222 247 209 123 50 222 26 247 168 160 246 108 18 171 52 0 30 160 39)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.26597044 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 169 92 63 125 221 149 50 220 188 63 112 48 247 222 87 50 209 26 247 27 160 246 225 157 124 99 137 149 156 43) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 169 92 63 125 221 149 50 220 188 63 112 48 247 222 87) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 92 63 125 221 149 50 220 188 63 112 48 247 222 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 50 209 26 247 27 160 246 225 157 124 99 137 149 156 43) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 50 209 26 247 27 160 246 225 157 124 99 137 149 156 43)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 169 92 63 125 221 149 50 220 188 63 112 48 247 222 87 50 209 26 247 27 160 246 225 157 124 99 137 149 156 43)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 296) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote ggff) (quote ggff)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 702 55) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 611 198) (om-make-point 85 30) (quote :pitch-class) ":pitch-class" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 530 664) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 724 489) (om-make-point 274 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 778 178) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 706 97) (om-make-point 74 30) (list (quote :set) 2 3) "(:set 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 672 284) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "keynum evenp" (om-load-patch-abs1 "keynum evenp" (quote ((let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 100))) (om-make-point 112 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 226 295) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVENP" (quote evenp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 178 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 699 507)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 321 102) nil (list nil) "l" "keynum evenp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 415 45) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 371 267) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 88 465) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "num notes multiple of 4" (om-load-lisp-abspatch "num notes multiple of 4" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (evenp (/ (length arr) 2)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 141 23) nil (list nil) "l" "num notes multiple of 4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 201 132) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-predictable-test-subject" (om-load-patch-abs1 "make-predictable-test-subject" (quote ((let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 383 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 436 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 41) (om-make-point 34 30) 61 "61" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 502 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 635) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 573 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 613 50) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 12))) (om-make-point 637 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 731 176) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 658 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 549 175) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 375 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 61) (om-load-inputfun (quote input-funbox) "end " "END" 72) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 308 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 477 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (5 0 4 0 nil 0) (13 0 5 0 nil 0) (9 0 5 1 nil 0) (6 0 7 0 nil 0) (3 0 7 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 11 0 nil 0) (2 0 12 0 nil 0) (0 0 12 1 nil 0) (11 0 13 0 nil 0) (10 0 13 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 856 760)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 32 543) nil (list (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7100) (list 11/16 1/16 1 7200) (list 0 1/16 1 6000) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 6000) (list 1/4 1/16 1 6000) (list 5/16 1/16 1 6000) (list 3/8 1/16 1 6000) (list 7/16 1/16 1 6000) (list 1/2 1/16 1 6000) (list 9/16 1/16 1 6000) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 6000))) nil "make-predictable-test-subject"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 38 724) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "even midi notes" (om-load-lisp-abspatch "even midi notes" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (loop for region in arr$        sum (if (evenp (/ (d::region-pitch region) 100)) 1 0)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 14 58) nil (list nil) "l" "even midi notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 47 164) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 5 1 nil 0) (11 0 5 2 nil 0) (3 0 7 0 nil 0) (4 0 8 0 nil 0) (1 0 8 1 nil 0) (0 0 8 2 nil 0) (6 0 11 1 nil 0) (10 0 11 2 nil 0) (9 0 11 3 nil 0) (12 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 17 0 nil 0) (15 0 18 0 nil 0) (18 0 19 0 nil 0) (20 0 21 0 nil 0))) nil 6.16))
