; OM File Header - Saved 2020/11/26 22:05:20
; (6.16 :patc (om-make-point 317 458) (om-make-point 301 41) (om-make-point 1101 1042) "" 183 0 "2015/06/03 15:46:10" "2020/11/26 22:05:20")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 940 425) (om-make-point 46 30) 1/20 "1/20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 854 365) (om-make-point 90 30) (list 3600 9600) "(3600 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 762 601) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 455 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 769 391) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 95 788) (om-make-point 749 138) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 56 43 170 129 148 188 93 115 158 174 16 31 159 150 112 137 71 231 89 128 183 247 168 102 121 53 249 220 94 249) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 56 43 170 129 148 188 93 115 158 174 16 31 159 150 112 137 71 231 89 128 183 247 168 102 121 53 249 220 94 249)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 222) (list 0.011225348 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 185 233 99 39 76 197 234 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.028025894 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 185 233 99 39 76 197 237 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 237 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.047863 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 107 233 99 39 76 197 234 111 210 234 186 234 75 198 14 222 178 94 197 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 107 233 99 39 76 197 234 111 210 234 186 234 75 198 14 222 178 94 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.06997116 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 185 5 71 39 76 197 237 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 5 71 39 76 197 237 123 210 234 186 234 75 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.093937785 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 72 233 99 39 252 21 234 111 210 234 186 234 75 198 14 222 173 104 192 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 72 233 99 39 252 21 234 111 210 234 186 234 75 198 14 222 173 104 192 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.119497694 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 185 233 99 39 76 200 231 111 210 234 186 234 75 198 14 222 173 99 199 36 26 221 100 210 249 12 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 200 231 111 210 234 186 234 75 198 14 222 173 99 199 36 26 221 100 210 249 12 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.14646347 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 72 233 99 39 252 21 234 111 210 169 251 234 75 198 14 222 173 104 192 38 26 221 100 210 246 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 72 233 99 39 252 21 234 111 210 169 251 234 75 198 14 222 173 104 192 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 0.17469429 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 126 62 233 99 39 76 23 234 111 210 43 186 234 75 198 14 222 173 99 201 38 26 226 95 210 250 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 126 62 233 99 39 76 23 234 111 210 43 186 234 75 198 14 222 173 99 201 38 26 226 95 210 250 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.20407979 (let ((om-darwin::spec (if (find-class (quote om-darwin::stack) nil) (make-instance (quote om-darwin::stack) :raw-genotype (list 137 3 72 233 99 39 252 21 234 111 210 169 251 234 75 198 14 222 173 104 192 38 26 221 100 206 250 15 27 100) :decoder nil :operons nil :pheno nil :cells (list (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 3900) (list 1/10 1/20 1 3800) (list 3/20 1/20 1 8600) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 7500) (list 3/10 1/20 1 5100) (list 7/20 1/20 1 5000) (list 2/5 1/20 1 8700) (list 9/20 1/20 1 8600) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 8700) (list 3/5 1/20 1 3900) (list 13/20 1/20 1 8700) (list 7/10 1/20 1 5000)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 185 233 99 39 76 197 234 111 210 234 186 234 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100) :decoder (list (list 3600 9600 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/20 1 5100) (list 1/20 1/20 1 5000) (list 1/10 1/20 1 7500) (list 3/20 1/20 1 8700) (list 1/5 1/20 1 7400) (list 1/4 1/20 1 5000) (list 3/10 1/20 1 7400) (list 7/20 1/20 1 6200) (list 2/5 1/20 1 7400) (list 9/20 1/20 1 7500) (list 1/2 1/20 1 6300) (list 11/20 1/20 1 3800) (list 3/5 1/20 1 5100) (list 13/20 1/20 1 6300) (list 7/10 1/20 1 7500)) :range (list 3600 9600) :num-notes 15 :note-value 1/20 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 14 222 173 99 197 38 26 221 100 210 246 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec)) :concatenator nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 137 3 72 233 99 39 252 21 234 111 210 169 251 234 75 198 14 222 173 104 192 38 26 221 100 206 250 15 27 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5))) (setf (om-darwin::generation om-darwin::ga) 336) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1 1)) (1 (1 1 1 1 1)) (1 (1 1 1 1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (133)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 90) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 745 493) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote ggff) (quote ggff)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 521 170) (om-make-point 85 30) (quote :pitch-class) ":pitch-class" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 398 661) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 724 489) (om-make-point 274 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 778 178) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 706 97) (om-make-point 74 30) (list (quote :set) 2 3) "(:set 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 578 314) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "keynum evenp" (om-load-patch-abs1 "keynum evenp" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 180 77) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 100))) (om-make-point 112 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 226 295) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVENP" (quote evenp) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 178 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (1 0 4 0 nil 0))) 6.16 nil "" (om-make-point 343 197) (om-make-point 699 507)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 295 83) nil (list nil) "l" "keynum evenp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 415 45) (om-make-point 69 30) (quote :melodic) ":melodic" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :melodic) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 371 267) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 88 465) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "num notes multiple of 4" (om-load-lisp-abspatch "num notes multiple of 4" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (evenp (/ (length arr) 2)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 133 90) nil (list nil) "l" "num notes multiple of 4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 221 258) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "make-predictable-test-subject" (om-load-patch-abs1 "make-predictable-test-subject" (quote ((let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 383 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 436 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 41) (om-make-point 34 30) 61 "61" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 502 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 635) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 573 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 613 50) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 12))) (om-make-point 637 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 731 176) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 658 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 549 175) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" nil) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 375 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 61) (om-load-inputfun (quote input-funbox) "end " "END" 72) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 308 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 477 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (5 0 4 0 nil 0) (13 0 5 0 nil 0) (9 0 5 1 nil 0) (6 0 7 0 nil 0) (3 0 7 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 11 0 nil 0) (2 0 12 0 nil 0) (0 0 12 1 nil 0) (11 0 13 0 nil 0) (10 0 13 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 856 760)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 32 543) nil (list (list (list 0 1/16 1 6100) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6400) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7100) (list 11/16 1/16 1 7200) (list 0 1/16 1 6000) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 6000) (list 1/4 1/16 1 6000) (list 5/16 1/16 1 6000) (list 3/8 1/16 1 6000) (list 7/16 1/16 1 6000) (list 1/2 1/16 1 6000) (list 9/16 1/16 1 6000) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 6000))) nil "make-predictable-test-subject"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->POLY" (quote om-darwin::arrange->poly) (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 135 638) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "even midi notes" (om-load-lisp-abspatch "even midi notes" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arr)$  (loop for region in arr$        sum (if (evenp (/ (d::region-pitch region) 100)) 1 0)))") (quote ((om-load-inputfun (quote input-funbox) "" "ARR" nil))) (om-make-point 14 58) nil (list nil) "l" "even midi notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 47 164) (om-make-point 88 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 5 1 nil 0) (11 0 5 2 nil 0) (3 0 7 0 nil 0) (4 0 8 0 nil 0) (1 0 8 1 nil 0) (0 0 8 2 nil 0) (6 0 11 1 nil 0) (10 0 11 2 nil 0) (9 0 11 3 nil 0) (12 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 17 0 nil 0) (15 0 18 0 nil 0) (18 0 19 0 nil 0) (20 0 21 0 nil 0))) nil 6.16))
