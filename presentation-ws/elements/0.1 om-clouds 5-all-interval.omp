; OM File Header - Saved 2015/03/16 0:52:13
; (6.0901 :patc (om-make-point 160 107) (om-make-point 121 91) (om-make-point 709 572) "No documentation " 183 0 nil "2015/03/16 0:52:13")
; End File Header
(in-package :om)(load-lib-for (quote ("OMClouds")))(setf *om-current-persistent* (om-load-patch1 "0.1 om-clouds 5-all-interval" (quote ((let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 120 54) (om-make-point 21 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 54) (om-make-point 13 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 332 193) (quote "This is a classical permutation CSP called \"all-interval series\".$$$The goal is to find a musical serie, ie a permutation of the twelve tones, where the intervals between the notes are all different.$A solution is shown in the chord below.$$It may be a little long to solve, and the intermediate (or approximate) solutions are edited in the chord during the resolution process. Open the chord before evaluating the resolution box to see them.$$") "" (om-make-point 343 109) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 211 347) (om-make-point 223 104) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6700 6500 7100 6100 7200 6300 6600 7000 6200 6900 6400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote t) 0 0 (om-make-point 781 279) (om-make-point 500 280) 3 1000 nil 39/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 243 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 60))) (om-make-point 248 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RESOLUTION" (quote resolution) (quote ((om-load-inputfun (quote input-funbox) "if" "VAR" nil) (om-load-inputfun (quote input-funbox) "then" "OBJ" nil))) (om-make-point 104 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "CREE-VARPERM" (quote cree-varperm) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INIT" nil))) (om-make-point 123 161) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "ALLDIFFC" (quote alldiffc) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 234 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 143 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 149 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-var-i+ "i+" 1 (om-make-point 199 21) "no documentation" nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-var-i "i" t (om-make-point 87 40) "no documentation" nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-varstate "state" t (om-make-point 279 433) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-varliste "liste" t (om-make-point 5 100) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 5 0 nil 0))) 2 "cree-varperm" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 12) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 96 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 1 nil 0) (5 0 4 0 nil 0) (7 1 5 0 nil 0) (7 0 6 0 nil 0) (3 0 6 1 nil 0) (8 0 7 0 nil 0) (1 0 8 0 nil 0) (0 0 8 1 nil 0))) nil 6.0901))
