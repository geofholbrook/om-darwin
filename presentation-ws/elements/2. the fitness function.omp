; OM File Header - Saved 2015/03/15 23:41:59
; (6.0901 :patc (om-make-point 334 10) (om-make-point 50 22) (om-make-point 1238 756) "" 183 0 "2015/03/15 19:57:14" "2015/03/15 23:40:48")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "2. the fitness function" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 654 44) (quote "a fitness function can (optionally) be composed of several \"criteria\"") "" (om-make-point 89 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 39) (quote "or simply:") "" (om-make-point 1003 539) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "function" (om-load-patch-abs1 "function" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 100 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 100 293) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.0901 nil "" (om-make-point 385 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1097 525) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 992 141) (om-make-point 81 30) (list 700 -800) "(700 -800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervallic motives" (om-load-patch-abs1 "intervallic motives" (quote ((let ((box (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 341 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 201 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 262 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval motive" 1 (om-make-point 333 0) "" "interval motive" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COUNT-IF-NOT" (quote count-if-not) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 146 532) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 68 384) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 19 442) (om-make-point 80 43) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 124 414) (om-make-point 69 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 77 281) (om-make-point 133 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 395 145) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 402 387) (om-make-point 94 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 102 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REGION-PITCH" (quote om-darwin::region-pitch) (quote ((om-load-inputfun (quote input-funbox) "REGION" "REGION" nil))) (om-make-point 33 131) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 3))) (om-make-point 136 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 31) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 418 531) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (13 0 0 1 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 2) (6 0 4 0 nil 0) (7 0 4 1 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (3 0 7 1 nil 2) (11 0 8 0 nil 0) (0 0 10 0 nil 0) (4 0 10 1 nil 0) (9 0 10 2 nil 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (14 0 13 0 nil 0) (1 0 13 1 nil 0) (10 0 15 0 nil 0))) 6.0901 nil "" (om-make-point 438 81) (om-make-point 540 652)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 955 210) nil (list nil) "l" "intervallic motives"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1085 197) (om-make-point 61 30) (quote :nthcdr) ":nthcdr" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 54) (quote "set fitness function \"on the fly\"") "" (om-make-point 705 625) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" nil (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 1054 383) (om-make-point 96 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 123 36) (quote "modify criteria") "" (om-make-point 772 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 43) (quote "combine criteria") "" (om-make-point 575 435) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 944 358) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-WEIGHT" (quote c-weight) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "WEIGHT" nil))) (om-make-point 879 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 851 247) (om-make-point 53 30) 5/6 "40/48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-RATE" (quote c-rate) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 842 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-LIST" (quote c-list) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil) (om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 488 422) (om-make-point 82 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 276 209) (om-make-point 76 30) (list 100 500) "(100 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 329 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 206 44) (quote "custom criteria") "" (om-make-point 990 91) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 543 106) (om-make-point 90 30) (list 6000 7200) "(6000 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PITCH" (quote c-pitch) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 572 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 206 44) (quote "built-in criteria") "" (om-make-point 481 63) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 858 631) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 133 75) (om-make-point 90 30) (list 3600 7200) "(3600 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 118 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 248 77) (om-make-point 46 30) 1/24 "1/24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-MELODIC" (quote c-melodic) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "SIGNED?" (quote t)))) (om-make-point 447 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 374 143) (om-make-point 162 30) (list (quote :set) 200 500 -400 -300) "(:set 200 500 -400 -300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 70 74) (om-make-point 34 30) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 696 121) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-PC" (quote c-pc) (quote ((om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil))) (om-make-point 697 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 21 562) (om-make-point 553 142) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :raw-genotype (list 231 187 252 220 61 155 66 94 46 114 229 139 136 103 179 145 230 125 142 207 108 108 202 191 177 249 194 174 139 140 99 137 151 28 22 100 146 18 22 186 74 50 5 217 92 97 51 251) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 187 252 220 61 155 66 94 46 114 229 139 136 103 179 145 230 125 142 207 108 108 202 191 177 249 194 174 139 140 99 137 151 28 22 100 146 18 22 186 74 50 5 217 92 97 51 251)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 152.56932 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6900) (list 1/24 1/24 1 6800) (list 1/12 1/24 1 4100) (list 1/8 1/24 1 5400) (list 1/6 1/24 1 4600) (list 5/24 1/24 1 4200) (list 1/4 1/24 1 3900) (list 7/24 1/24 1 4400) (list 1/3 1/24 1 6200) (list 3/8 1/24 1 5800) (list 5/12 1/24 1 4900) (list 11/24 1/24 1 4600) (list 1/2 1/24 1 4800) (list 13/24 1/24 1 4100) (list 7/12 1/24 1 4800) (list 5/8 1/24 1 3900) (list 2/3 1/24 1 5900) (list 17/24 1/24 1 6900) (list 3/4 1/24 1 5900) (list 19/24 1/24 1 4800) (list 5/6 1/24 1 5800) (list 7/8 1/24 1 4900) (list 11/12 1/24 1 4100) (list 23/24 1/24 1 5100) (list 1 1/24 1 6700) (list 25/24 1/24 1 6800) (list 13/12 1/24 1 5300) (list 9/8 1/24 1 4500) (list 7/6 1/24 1 6400) (list 29/24 1/24 1 5000) (list 5/4 1/24 1 3900) (list 31/24 1/24 1 5500) (list 4/3 1/24 1 7200) (list 11/8 1/24 1 4100) (list 17/12 1/24 1 3700) (list 35/24 1/24 1 4000) (list 3/2 1/24 1 6800) (list 37/24 1/24 1 4000) (list 19/12 1/24 1 4700) (list 13/8 1/24 1 5200) (list 5/3 1/24 1 5600) (list 41/24 1/24 1 4800) (list 7/4 1/24 1 4900) (list 43/24 1/24 1 3900) (list 11/6 1/24 1 7100) (list 15/8 1/24 1 4700) (list 23/12 1/24 1 5100) (list 47/24 1/24 1 4300)) :raw-genotype (list 218 180 79 92 121 191 114 82 26 244 161 47 86 116 234 188 23 144 97 197 22 198 227 89 68 32 202 231 139 51 3 19 184 79 186 226 217 115 85 53 168 197 87 40 220 159 163 118) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 180 79 92 121 191 114 82 26 244 161 47 86 116 234 188 23 144 97 197 22 198 227 89 68 32 202 231 139 51 3 19 184 79 186 226 217 115 85 53 168 197 87 40 220 159 163 118)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 168.41979 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 3600) (list 1/24 1/24 1 5100) (list 1/12 1/24 1 6800) (list 1/8 1/24 1 5000) (list 1/6 1/24 1 6600) (list 5/24 1/24 1 3600) (list 1/4 1/24 1 5300) (list 7/24 1/24 1 7000) (list 1/3 1/24 1 4800) (list 3/8 1/24 1 6000) (list 5/12 1/24 1 5500) (list 11/24 1/24 1 4000) (list 1/2 1/24 1 4500) (list 13/24 1/24 1 5500) (list 7/12 1/24 1 4300) (list 5/8 1/24 1 4400) (list 2/3 1/24 1 6600) (list 17/24 1/24 1 6100) (list 3/4 1/24 1 5100) (list 19/24 1/24 1 4200) (list 5/6 1/24 1 6200) (list 7/8 1/24 1 5900) (list 11/12 1/24 1 6800) (list 23/24 1/24 1 7100) (list 1 1/24 1 4200) (list 25/24 1/24 1 4600) (list 13/12 1/24 1 4000) (list 9/8 1/24 1 4500) (list 7/6 1/24 1 4300) (list 29/24 1/24 1 7100) (list 5/4 1/24 1 6600) (list 31/24 1/24 1 4500) (list 4/3 1/24 1 4200) (list 11/8 1/24 1 6900) (list 17/12 1/24 1 7100) (list 35/24 1/24 1 6200) (list 3/2 1/24 1 6000) (list 37/24 1/24 1 6400) (list 19/12 1/24 1 4600) (list 13/8 1/24 1 7100) (list 5/3 1/24 1 6500) (list 41/24 1/24 1 6000) (list 7/4 1/24 1 4000) (list 43/24 1/24 1 6800) (list 11/6 1/24 1 7000) (list 15/8 1/24 1 4900) (list 23/12 1/24 1 5900) (list 47/24 1/24 1 5600)) :raw-genotype (list 37 163 69 236 104 0 239 108 160 24 93 152 231 167 81 156 104 136 126 80 137 97 143 183 6 10 4 46 229 72 178 194 228 70 35 26 172 102 84 183 66 98 41 254 182 198 97 205) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 37 163 69 236 104 0 239 108 160 24 93 152 231 167 81 156 104 136 126 80 137 97 143 183 6 10 4 46 229 72 178 194 228 70 35 26 172 102 84 183 66 98 41 254 182 198 97 205)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 161.60933 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6100) (list 1/24 1/24 1 4300) (list 1/12 1/24 1 4600) (list 1/8 1/24 1 5700) (list 1/6 1/24 1 5100) (list 5/24 1/24 1 4100) (list 1/4 1/24 1 4700) (list 7/24 1/24 1 6200) (list 1/3 1/24 1 6400) (list 3/8 1/24 1 5300) (list 5/12 1/24 1 5500) (list 11/24 1/24 1 6200) (list 1/2 1/24 1 4700) (list 13/24 1/24 1 4500) (list 7/12 1/24 1 5100) (list 5/8 1/24 1 5400) (list 2/3 1/24 1 4400) (list 17/24 1/24 1 4600) (list 3/4 1/24 1 4300) (list 19/24 1/24 1 5500) (list 5/6 1/24 1 5900) (list 7/8 1/24 1 6700) (list 11/12 1/24 1 5200) (list 23/24 1/24 1 4900) (list 1 1/24 1 6000) (list 25/24 1/24 1 5400) (list 13/12 1/24 1 4900) (list 9/8 1/24 1 4000) (list 7/6 1/24 1 3600) (list 29/24 1/24 1 4800) (list 5/4 1/24 1 6800) (list 31/24 1/24 1 3900) (list 4/3 1/24 1 5700) (list 11/8 1/24 1 6400) (list 17/12 1/24 1 7200) (list 35/24 1/24 1 4700) (list 3/2 1/24 1 4100) (list 37/24 1/24 1 6300) (list 19/12 1/24 1 6300) (list 13/8 1/24 1 4300) (list 5/3 1/24 1 4600) (list 41/24 1/24 1 6900) (list 7/4 1/24 1 4700) (list 43/24 1/24 1 5200) (list 11/6 1/24 1 4500) (list 15/8 1/24 1 5200) (list 23/12 1/24 1 4600) (list 47/24 1/24 1 5000)) :raw-genotype (list 99 44 10 132 237 42 233 137 139 17 130 174 85 194 89 92 193 195 229 93 23 253 53 235 172 92 13 78 185 160 143 151 21 176 147 159 116 27 64 7 232 255 11 127 83 238 47 14) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 44 10 132 237 42 233 137 139 17 130 174 85 194 89 92 193 195 229 93 23 253 53 235 172 92 13 78 185 160 143 151 21 176 147 159 116 27 64 7 232 255 11 127 83 238 47 14)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 161.60933 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6000) (list 1/24 1/24 1 4900) (list 1/12 1/24 1 4000) (list 1/8 1/24 1 5400) (list 1/6 1/24 1 3900) (list 5/24 1/24 1 5600) (list 1/4 1/24 1 6600) (list 7/24 1/24 1 6600) (list 1/3 1/24 1 3900) (list 3/8 1/24 1 5900) (list 5/12 1/24 1 6700) (list 11/24 1/24 1 4600) (list 1/2 1/24 1 4000) (list 13/24 1/24 1 5200) (list 7/12 1/24 1 3600) (list 5/8 1/24 1 6500) (list 2/3 1/24 1 5400) (list 17/24 1/24 1 3600) (list 3/4 1/24 1 6300) (list 19/24 1/24 1 5700) (list 5/6 1/24 1 7200) (list 7/8 1/24 1 6400) (list 11/12 1/24 1 6000) (list 23/24 1/24 1 3600) (list 1 1/24 1 5600) (list 25/24 1/24 1 6100) (list 13/12 1/24 1 4200) (list 9/8 1/24 1 3600) (list 7/6 1/24 1 3700) (list 29/24 1/24 1 4500) (list 5/4 1/24 1 5300) (list 31/24 1/24 1 6000) (list 4/3 1/24 1 3700) (list 11/8 1/24 1 7100) (list 17/12 1/24 1 5100) (list 35/24 1/24 1 5400) (list 3/2 1/24 1 5200) (list 37/24 1/24 1 4200) (list 19/12 1/24 1 5400) (list 13/8 1/24 1 5000) (list 5/3 1/24 1 3800) (list 41/24 1/24 1 4200) (list 7/4 1/24 1 6400) (list 43/24 1/24 1 6400) (list 11/6 1/24 1 5600) (list 15/8 1/24 1 6700) (list 23/12 1/24 1 4900) (list 47/24 1/24 1 5500)) :raw-genotype (list 135 13 4 129 3 94 252 67 188 23 142 158 4 201 148 251 129 185 212 21 73 139 209 74 242 99 154 0 149 231 239 24 38 220 89 166 90 43 18 51 76 117 139 102 205 216 50 241) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 135 13 4 129 3 94 252 67 188 23 142 158 4 201 148 251 129 185 212 21 73 139 209 74 242 99 154 0 149 231 239 24 38 220 89 166 90 43 18 51 76 117 139 102 205 216 50 241)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 166.1468 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 7200) (list 1/24 1/24 1 6100) (list 1/12 1/24 1 4500) (list 1/8 1/24 1 5600) (list 1/6 1/24 1 6000) (list 5/24 1/24 1 6900) (list 1/4 1/24 1 4700) (list 7/24 1/24 1 5000) (list 1/3 1/24 1 4000) (list 3/8 1/24 1 6900) (list 5/12 1/24 1 5900) (list 11/24 1/24 1 3700) (list 1/2 1/24 1 4000) (list 13/24 1/24 1 4700) (list 7/12 1/24 1 5300) (list 5/8 1/24 1 6300) (list 2/3 1/24 1 3900) (list 17/24 1/24 1 4000) (list 3/4 1/24 1 7000) (list 19/24 1/24 1 3800) (list 5/6 1/24 1 7200) (list 7/8 1/24 1 4600) (list 11/12 1/24 1 4100) (list 23/24 1/24 1 4000) (list 1 1/24 1 5300) (list 25/24 1/24 1 6800) (list 13/12 1/24 1 5700) (list 9/8 1/24 1 5300) (list 7/6 1/24 1 5900) (list 29/24 1/24 1 4900) (list 5/4 1/24 1 3600) (list 31/24 1/24 1 6800) (list 4/3 1/24 1 4300) (list 11/8 1/24 1 5900) (list 17/12 1/24 1 4100) (list 35/24 1/24 1 5200) (list 3/2 1/24 1 6900) (list 37/24 1/24 1 4500) (list 19/12 1/24 1 6600) (list 13/8 1/24 1 3900) (list 5/3 1/24 1 5700) (list 41/24 1/24 1 5600) (list 7/4 1/24 1 5600) (list 43/24 1/24 1 4100) (list 11/6 1/24 1 6400) (list 15/8 1/24 1 5700) (list 23/12 1/24 1 4400) (list 47/24 1/24 1 6200)) :raw-genotype (list 110 25 83 131 24 255 159 51 226 218 171 186 41 85 239 101 3 41 108 150 110 47 116 41 239 106 206 165 208 235 37 69 118 171 79 16 70 9 141 225 132 20 242 153 65 169 119 100) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 110 25 83 131 24 255 159 51 226 218 171 186 41 85 239 101 3 41 108 150 110 47 116 41 239 106 206 165 208 235 37 69 118 171 79 16 70 9 141 225 132 20 242 153 65 169 119 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 168.41979 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 5900) (list 1/24 1/24 1 5100) (list 1/12 1/24 1 3900) (list 1/8 1/24 1 5800) (list 1/6 1/24 1 6700) (list 5/24 1/24 1 6000) (list 1/4 1/24 1 6900) (list 7/24 1/24 1 6800) (list 1/3 1/24 1 3600) (list 3/8 1/24 1 6300) (list 5/12 1/24 1 4100) (list 11/24 1/24 1 6800) (list 1/2 1/24 1 5600) (list 13/24 1/24 1 4300) (list 7/12 1/24 1 4600) (list 5/8 1/24 1 5800) (list 2/3 1/24 1 4200) (list 17/24 1/24 1 6000) (list 3/4 1/24 1 4500) (list 19/24 1/24 1 3800) (list 5/6 1/24 1 4200) (list 7/8 1/24 1 7100) (list 11/12 1/24 1 6700) (list 23/24 1/24 1 6800) (list 1 1/24 1 5000) (list 25/24 1/24 1 4600) (list 13/12 1/24 1 6000) (list 9/8 1/24 1 4000) (list 7/6 1/24 1 6700) (list 29/24 1/24 1 3600) (list 5/4 1/24 1 5100) (list 31/24 1/24 1 7000) (list 4/3 1/24 1 5000) (list 11/8 1/24 1 5800) (list 17/12 1/24 1 5900) (list 35/24 1/24 1 7200) (list 3/2 1/24 1 4500) (list 37/24 1/24 1 4600) (list 19/12 1/24 1 6500) (list 13/8 1/24 1 7000) (list 5/3 1/24 1 6700) (list 41/24 1/24 1 6300) (list 7/4 1/24 1 3600) (list 43/24 1/24 1 5100) (list 11/6 1/24 1 6900) (list 15/8 1/24 1 3600) (list 23/12 1/24 1 5400) (list 47/24 1/24 1 7000)) :raw-genotype (list 245 52 114 170 31 24 181 143 0 212 42 69 168 192 195 96 191 172 194 150 154 220 105 32 162 10 24 78 142 222 126 108 162 207 23 147 231 10 214 108 253 212 222 163 107 74 166 182) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 245 52 114 170 31 24 181 143 0 212 42 69 168 192 195 96 191 172 194 150 154 220 105 32 162 10 24 78 142 222 126 108 162 207 23 147 231 10 214 108 253 212 222 163 107 74 166 182)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 166.1468 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 6600) (list 1/24 1/24 1 6700) (list 1/12 1/24 1 6800) (list 1/8 1/24 1 5600) (list 1/6 1/24 1 4900) (list 5/24 1/24 1 4200) (list 1/4 1/24 1 5900) (list 7/24 1/24 1 6700) (list 1/3 1/24 1 6600) (list 3/8 1/24 1 4400) (list 5/12 1/24 1 6600) (list 11/24 1/24 1 3700) (list 1/2 1/24 1 4200) (list 13/24 1/24 1 6500) (list 7/12 1/24 1 7000) (list 5/8 1/24 1 6000) (list 2/3 1/24 1 3600) (list 17/24 1/24 1 7100) (list 3/4 1/24 1 3900) (list 19/24 1/24 1 4200) (list 5/6 1/24 1 4900) (list 7/8 1/24 1 4200) (list 11/12 1/24 1 4200) (list 23/24 1/24 1 5800) (list 1 1/24 1 4400) (list 25/24 1/24 1 3800) (list 13/12 1/24 1 6200) (list 9/8 1/24 1 5200) (list 7/6 1/24 1 3900) (list 29/24 1/24 1 5600) (list 5/4 1/24 1 4900) (list 31/24 1/24 1 3900) (list 4/3 1/24 1 7000) (list 11/8 1/24 1 3800) (list 17/12 1/24 1 7000) (list 35/24 1/24 1 4700) (list 3/2 1/24 1 4300) (list 37/24 1/24 1 6900) (list 19/12 1/24 1 4200) (list 13/8 1/24 1 6000) (list 5/3 1/24 1 5900) (list 41/24 1/24 1 4000) (list 7/4 1/24 1 5600) (list 43/24 1/24 1 5900) (list 11/6 1/24 1 7100) (list 15/8 1/24 1 3900) (list 23/12 1/24 1 5500) (list 47/24 1/24 1 3900)) :raw-genotype (list 252 179 143 57 87 228 97 216 67 193 178 1 191 103 108 209 0 35 77 43 13 6 117 170 119 39 211 53 77 131 124 77 219 2 145 159 229 218 117 209 60 226 20 23 220 225 167 77) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 252 179 143 57 87 228 97 216 67 193 178 1 191 103 108 209 0 35 77 43 13 6 117 170 119 39 211 53 77 131 124 77 219 2 145 159 229 218 117 209 60 226 20 23 220 225 167 77)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 159.34491 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 4100) (list 1/24 1/24 1 4500) (list 1/12 1/24 1 4800) (list 1/8 1/24 1 3900) (list 1/6 1/24 1 4000) (list 5/24 1/24 1 4900) (list 1/4 1/24 1 3700) (list 7/24 1/24 1 6700) (list 1/3 1/24 1 7000) (list 3/8 1/24 1 5300) (list 5/12 1/24 1 6000) (list 11/24 1/24 1 5400) (list 1/2 1/24 1 6000) (list 13/24 1/24 1 4100) (list 7/12 1/24 1 5600) (list 5/8 1/24 1 6900) (list 2/3 1/24 1 3600) (list 17/24 1/24 1 5700) (list 3/4 1/24 1 6700) (list 19/24 1/24 1 6800) (list 5/6 1/24 1 4100) (list 7/8 1/24 1 4700) (list 11/12 1/24 1 3900) (list 23/24 1/24 1 4100) (list 1 1/24 1 4800) (list 25/24 1/24 1 5400) (list 13/12 1/24 1 5400) (list 9/8 1/24 1 4800) (list 7/6 1/24 1 5700) (list 29/24 1/24 1 6100) (list 5/4 1/24 1 4100) (list 31/24 1/24 1 7200) (list 4/3 1/24 1 4700) (list 11/8 1/24 1 4200) (list 17/12 1/24 1 6000) (list 35/24 1/24 1 4300) (list 3/2 1/24 1 5400) (list 37/24 1/24 1 6100) (list 19/12 1/24 1 6900) (list 13/8 1/24 1 3800) (list 5/3 1/24 1 5400) (list 41/24 1/24 1 4400) (list 7/4 1/24 1 4100) (list 43/24 1/24 1 4000) (list 11/6 1/24 1 5500) (list 15/8 1/24 1 6600) (list 23/12 1/24 1 6400) (list 47/24 1/24 1 5500)) :raw-genotype (list 5 120 160 151 41 50 75 142 145 202 246 203 61 79 20 255 148 21 216 69 79 122 77 42 197 203 166 49 169 247 5 184 159 43 24 192 203 99 218 150 166 119 42 41 241 30 102 167) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 5 120 160 151 41 50 75 142 145 202 246 203 61 79 20 255 148 21 216 69 79 122 77 42 197 203 166 49 169 247 5 184 159 43 24 192 203 99 218 150 166 119 42 41 241 30 102 167)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 161.60933 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 3900) (list 1/24 1/24 1 4200) (list 1/12 1/24 1 5100) (list 1/8 1/24 1 6500) (list 1/6 1/24 1 4800) (list 5/24 1/24 1 4600) (list 1/4 1/24 1 4000) (list 7/24 1/24 1 5900) (list 1/3 1/24 1 5400) (list 3/8 1/24 1 6500) (list 5/12 1/24 1 4900) (list 11/24 1/24 1 6700) (list 1/2 1/24 1 6200) (list 13/24 1/24 1 6800) (list 7/12 1/24 1 4000) (list 5/8 1/24 1 3900) (list 2/3 1/24 1 3600) (list 17/24 1/24 1 6100) (list 3/4 1/24 1 6600) (list 19/24 1/24 1 6300) (list 5/6 1/24 1 5100) (list 7/8 1/24 1 6300) (list 11/12 1/24 1 6000) (list 23/24 1/24 1 6000) (list 1 1/24 1 3900) (list 25/24 1/24 1 4600) (list 13/12 1/24 1 7200) (list 9/8 1/24 1 6200) (list 7/6 1/24 1 4900) (list 29/24 1/24 1 4700) (list 5/4 1/24 1 3600) (list 31/24 1/24 1 4000) (list 4/3 1/24 1 4900) (list 11/8 1/24 1 6400) (list 17/12 1/24 1 5600) (list 35/24 1/24 1 5500) (list 3/2 1/24 1 3800) (list 37/24 1/24 1 4100) (list 19/12 1/24 1 5300) (list 13/8 1/24 1 4200) (list 5/3 1/24 1 5100) (list 41/24 1/24 1 3900) (list 7/4 1/24 1 4700) (list 43/24 1/24 1 3900) (list 11/6 1/24 1 6400) (list 15/8 1/24 1 6400) (list 23/12 1/24 1 4600) (list 47/24 1/24 1 5200)) :raw-genotype (list 225 191 15 140 160 84 189 23 203 177 235 253 174 106 41 114 111 247 104 64 52 101 61 246 151 84 221 26 161 233 222 152 87 28 168 167 113 227 17 154 15 40 11 151 65 213 158 16) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 225 191 15 140 160 84 189 23 203 177 235 253 174 106 41 114 111 247 104 64 52 101 61 246 151 84 221 26 161 233 222 152 87 28 168 167 113 227 17 154 15 40 11 151 65 213 158 16)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 166.1468 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/24 1 5100) (list 1/24 1/24 1 4400) (list 1/12 1/24 1 4900) (list 1/8 1/24 1 4400) (list 1/6 1/24 1 4100) (list 5/24 1/24 1 5800) (list 1/4 1/24 1 4600) (list 7/24 1/24 1 5800) (list 1/3 1/24 1 4200) (list 3/8 1/24 1 5100) (list 5/12 1/24 1 7000) (list 11/24 1/24 1 4800) (list 1/2 1/24 1 5000) (list 13/24 1/24 1 3900) (list 7/12 1/24 1 6500) (list 5/8 1/24 1 4300) (list 2/3 1/24 1 5700) (list 17/24 1/24 1 4600) (list 3/4 1/24 1 7000) (list 19/24 1/24 1 5900) (list 5/6 1/24 1 6800) (list 7/8 1/24 1 5200) (list 11/12 1/24 1 5400) (list 23/24 1/24 1 4400) (list 1 1/24 1 3700) (list 25/24 1/24 1 3900) (list 13/12 1/24 1 5900) (list 9/8 1/24 1 7000) (list 7/6 1/24 1 4700) (list 29/24 1/24 1 3800) (list 5/4 1/24 1 6300) (list 31/24 1/24 1 5200) (list 4/3 1/24 1 5500) (list 11/8 1/24 1 6100) (list 17/12 1/24 1 6400) (list 35/24 1/24 1 6400) (list 3/2 1/24 1 4200) (list 37/24 1/24 1 3700) (list 19/12 1/24 1 6100) (list 13/8 1/24 1 5000) (list 5/3 1/24 1 6600) (list 41/24 1/24 1 5200) (list 7/4 1/24 1 6400) (list 43/24 1/24 1 3900) (list 11/6 1/24 1 7100) (list 15/8 1/24 1 6300) (list 23/12 1/24 1 5900) (list 47/24 1/24 1 4000)) :raw-genotype (list 126 8 13 193 79 133 121 22 43 52 71 197 162 40 103 192 21 10 71 171 254 16 129 119 112 77 245 182 196 113 175 127 19 99 102 139 6 1 25 51 178 238 28 225 35 27 134 152) :decoder (list (list 3600 7200 100)) :num-operons 8 :range (list 3600 7200) :num-notes 48 :note-value 1/24 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 126 8 13 193 79 133 121 22 43 52 71 197 162 40 103 192 21 10 71 171 254 16 129 119 112 77 245 182 196 113 175 127 19 99 102 139 6 1 25 51 178 238 28 225 35 27 134 152)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 1 nil 0) (4 0 7 0 nil 0) (5 0 7 1 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (12 0 13 1 nil 0) (15 0 16 0 nil 0) (18 0 19 0 nil 0) (30 0 21 0 nil 0) (27 0 23 0 nil 0) (22 0 23 1 nil 0) (24 0 23 2 nil 0) (26 0 25 0 nil 0) (28 0 29 0 nil 0) (23 0 30 1 nil 0) (7 0 30 2 nil 0))) nil 6.0901))
