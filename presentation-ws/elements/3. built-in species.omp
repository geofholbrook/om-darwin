; OM File Header - Saved 2015/03/16 2:28:32
; (6.0901 :patc (om-make-point 172 10) (om-make-point 79 33) (om-make-point 1202 719) "" 183 0 "2015/03/15 18:08:18" "2015/03/16 2:28:32")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "3. built-in species" (quote ((let ((box (om-load-editor-box1 "GA-ENGINE 2" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 96 410) (om-make-point 643 220) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 127 183 199 118 26 61 230 160 152 74 87 12 93 154 45 203 158 230 18 96 86 183 174 10 188 183 162 75 225 81 54 104) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 127 183 199 118 26 61 230 160 152 74 87 12 93 154 45 203 158 230 18 96 86 183 174 10 188 183 162 75 225 81 54 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 20 27 195 162 197 54 144 18 232 105 234 133 164 144 114 139 176 95 72 249 140 6 233 203 228 59 188 4 30 50 170 50) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6700) (list 1/16 1/16 1 6100) (list 1/8 1/16 1 6000) (list 3/16 1/16 1 6600) (list 1/4 1/16 1 6200) (list 5/16 1/16 1 6200) (list 3/8 1/16 1 6100) (list 7/16 1/16 1 6500) (list 1/2 1/16 1 7100) (list 9/16 1/16 1 6100) (list 5/8 1/16 1 6000) (list 11/16 1/16 1 6300) (list 3/4 1/16 1 6800) (list 13/16 1/16 1 6100) (list 7/8 1/16 1 7000) (list 15/16 1/16 1 6900) (list 1 1/16 1 6700) (list 17/16 1/16 1 6400) (list 9/8 1/16 1 6700) (list 19/16 1/16 1 6200) (list 5/4 1/16 1 7000) (list 21/16 1/16 1 6600) (list 11/8 1/16 1 7200) (list 23/16 1/16 1 6800) (list 3/2 1/16 1 6700) (list 25/16 1/16 1 6700) (list 13/8 1/16 1 6600) (list 27/16 1/16 1 6400) (list 7/4 1/16 1 6400) (list 29/16 1/16 1 7100) (list 15/8 1/16 1 6100) (list 31/16 1/16 1 7100)) :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 20 27 195 162 197 54 144 18 232 105 234 133 164 144 114 139 176 95 72 249 140 6 233 203 228 59 188 4 30 50 170 50)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 192 248 226 64 191 63 41 150 113 168 81 69 182 245 137 155 221 7 229 111 104 20 70 219 187 134 5 245 207 59 126 218) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 192 248 226 64 191 63 41 150 113 168 81 69 182 245 137 155 221 7 229 111 104 20 70 219 187 134 5 245 207 59 126 218)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 148 214 235 72 105 20 75 60 81 224 253 112 253 19 191 246 66 9 21 3 231 176 154 142 186 43 7 168 63 227 173 249) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 214 235 72 105 20 75 60 81 224 253 112 253 19 191 246 66 9 21 3 231 176 154 142 186 43 7 168 63 227 173 249)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 49 66 38 242 156 90 213 75 240 132 109 251 248 119 73 64 50 254 121 122 99 135 143 9 47 112 91 178 167 17 156 208) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 49 66 38 242 156 90 213 75 240 132 109 251 248 119 73 64 50 254 121 122 99 135 143 9 47 112 91 178 167 17 156 208)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 131 221 248 11 54 65 132 61 19 124 97 19 35 29 195 92 119 5 241 138 190 151 3 197 5 236 167 146 22 209 45 153) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 131 221 248 11 54 65 132 61 19 124 97 19 35 29 195 92 119 5 241 138 190 151 3 197 5 236 167 146 22 209 45 153)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 233 92 13 154 104 3 142 117 126 107 237 71 40 12 246 117 73 89 57 41 109 255 28 200 86 24 210 171 137 203 138 250) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 233 92 13 154 104 3 142 117 126 107 237 71 40 12 246 117 73 89 57 41 109 255 28 200 86 24 210 171 137 203 138 250)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 206 2 106 69 207 82 238 78 74 197 231 6 4 227 207 66 193 100 195 90 250 35 229 42 17 4 175 212 224 101 204 183) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 206 2 106 69 207 82 238 78 74 197 231 6 4 227 207 66 193 100 195 90 250 35 229 42 17 4 175 212 224 101 204 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 180 48 46 16 217 70 141 28 159 236 201 251 63 175 130 41 216 92 95 173 239 200 133 184 156 117 225 43 52 219 104 100) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 180 48 46 16 217 70 141 28 159 236 201 251 63 175 130 41 216 92 95 173 239 200 133 184 156 117 225 43 52 219 104 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 213 209 255 34 126 198 236 60 31 185 169 20 175 177 201 162 38 183 13 153 169 31 26 5 255 15 253 196 83 10 219 11) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 209 255 34 126 198 236 60 31 185 169 20 175 177 201 162 38 183 13 153 169 31 26 5 255 15 253 196 83 10 219 11)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::even-melody) nil) (make-instance (quote om-darwin::even-melody) :raw-genotype (list 130 164 83 94 51 244 122 130 22 188 138 115 166 210 161 118 242 40 250 48 114 65 226 83 165 119 222 249 224 182 161 207) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :num-notes 32 :note-value 1/16 :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 130 164 83 94 51 244 122 130 22 188 138 115 166 210 161 118 242 40 250 48 114 65 226 83 165 119 222 249 224 182 161 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 571 239) (om-make-point 101 68) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 62 17 137 162 59 168 67 126 201 110 36 68 26 184 77 9 76 181 103 101 234 70 125 188) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 62 17 137 162 59 168 67 126 201 110 36 68 26 184 77 9 76 181 103 101 234 70 125 188)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 179 250 9 222 121 149 88 99 2 166 150 19 72 140 235 85 101 22 226 183 148 1 34 224) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno (list (list 4/3 1/3 2 7000) (list 2/3 5/3 1 7200) (list 2/3 2/3 3 6700) (list 2/3 1/3 4 5800) (list 1 1 3 5600) (list 1/3 2/3 3 7200)) :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 179 250 9 222 121 149 88 99 2 166 150 19 72 140 235 85 101 22 226 183 148 1 34 224)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 83 48 10 88 235 127 161 19 49 58 80 242 209 105 32 211 58 40 211 76 78 43 46 10) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 83 48 10 88 235 127 161 19 49 58 80 242 209 105 32 211 58 40 211 76 78 43 46 10)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 151 111 68 51 254 95 200 45 69 48 107 102 195 131 213 226 190 232 150 220 24 133 111 173) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 151 111 68 51 254 95 200 45 69 48 107 102 195 131 213 226 190 232 150 220 24 133 111 173)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 83 253 201 1 129 168 128 117 58 197 83 66 36 232 19 250 56 136 173 129 165 66 233 123) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 83 253 201 1 129 168 128 117 58 197 83 66 36 232 19 250 56 136 173 129 165 66 233 123)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 210 21 79 174 216 140 14 169 11 134 66 131 176 64 63 104 243 19 70 40 23 203 59 186) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 210 21 79 174 216 140 14 169 11 134 66 131 176 64 63 104 243 19 70 40 23 203 59 186)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 171 45 198 93 251 189 254 8 81 69 6 90 194 182 162 186 104 136 78 1 222 55 244 53) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 171 45 198 93 251 189 254 8 81 69 6 90 194 182 162 186 104 136 78 1 222 55 244 53)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 218 73 2 63 166 123 220 104 148 180 50 78 196 77 199 240 204 211 179 32 118 92 42 239) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 218 73 2 63 166 123 220 104 148 180 50 78 196 77 199 240 204 211 179 32 118 92 42 239)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 143 44 86 113 182 150 19 193 122 145 75 131 77 207 65 17 217 15 228 46 0 228 87 25) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 143 44 86 113 182 150 19 193 122 145 75 131 77 207 65 17 217 15 228 46 0 228 87 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 124 87 81 239 138 74 157 197 147 138 41 200 173 169 167 143 65 52 244 79 171 73 229 79) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 124 87 81 239 138 74 157 197 147 138 41 200 173 169 167 143 65 52 244 79 171 73 229 79)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :raw-genotype (list 12 115 103 232 116 140 84 193 226 156 128 67 190 106 11 210 127 119 156 124 138 248 42 27) :decoder (list (list 0 2 1/3) (list 1/3 5/3 1/3) (list 1 4) (list 4800 7200 100)) :operons (list nil nil nil nil nil nil) :pheno nil :num-operons 6 :range (list 4800 7200) :resolution 1/3 :extent 2 :length-range (list 1/3 5/3) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 12 115 103 232 116 140 84 193 226 156 128 67 190 106 11 210 127 119 156 124 138 248 42 27)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (-2 (1 (-2 1)) 1.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 -2)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-4)) ((4 4) (-1 (1 (-1 2)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-1 (1 (-1 2)) (1 (2.0 1)) 1.0)) ((4 4) (4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (667)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (-2 (1 (-2 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g)) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 969 100) (om-make-point 39 30) 1/3 "1/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1015 70) (om-make-point 72 30) (list 1/3 5/3) "(1/3 5/3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 868 78) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 915 46) (om-make-point 90 30) (list 4800 7200) "(4800 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 402 137) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 3) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 393 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "time-signatures" nil))) (om-make-point 703 82) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 293 372) (om-make-point 143 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 221 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 174 197) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 308 165) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "ALLOW-RESTS" (quote t)) (om-load-inputfun (quote input-funbox) "" "ALLOW-TIES" (quote t)))) (om-make-point 234 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "time-signatures" 0 (om-make-point 178 39) "" "time-signatures" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 373 484) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 237 489) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (5 0 1 0 nil 0) (2 0 4 0 nil 0) (1 0 4 2 nil 0) (3 0 4 3 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 538 87) (om-make-point 48 30) (list 6 4) "(6 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 611 88) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 684 27) (om-make-point 154 30) (list (list 2 4) (list 3 4) (list 4 4) (list 5 4)) "((2 4) (3 4) (4 4) (5 4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-STACK" (quote make-stack) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 460 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MULTI" (quote make-multi) (quote ((om-load-inputfun (quote input-funbox) "" "CELLS" nil))) (om-make-point 728 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 345 15) (om-make-point 48 30) (list 1 4) "(1 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 286 18) (om-make-point 46 30) 1/32 "1/32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 191 11) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 70 19) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-ARRANGEMENT" (quote make-arrangement) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 60 72)) (om-load-inputfun (quote input-funbox) "" "RESOLUTION" 1/3) (om-load-inputfun (quote input-funbox) "" "EXTENT" 2) (om-load-inputfun (quote input-funbox) "" "LENGTH-RANGE" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "CHANNEL-RANGE" (list 1 4)))) (om-make-point 922 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 100) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "ALLOW-RESTS" (quote t)) (om-load-inputfun (quote input-funbox) "" "ALLOW-TIES" (quote t)))) (om-make-point 543 158) (om-make-point 124 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRID-MELODY" (quote make-grid-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 4800 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16) (om-load-inputfun (quote input-funbox) "" "LEN-RANGE" (list 1 4)))) (om-make-point 243 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-EVEN-MELODY" (quote make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "NOTE-VALUE" 1/16))) (om-make-point 71 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((21 0 0 1 nil 0) (19 0 1 1 nil 0) (20 0 7 0 nil 0) (6 0 7 1 nil 0) (11 0 8 0 nil 0) (7 0 12 0 nil 0) (8 0 13 0 nil 0) (4 0 18 0 nil 0) (5 0 18 1 nil 0) (2 0 18 2 nil 0) (3 0 18 4 nil 0) (9 0 19 2 nil 0) (10 0 19 3 nil 0) (16 0 20 0 nil 0) (15 0 20 2 nil 0) (14 0 20 3 nil 0) (17 0 21 0 nil 0))) nil 6.0901))
