; OM File Header - Saved 2015/03/16 2:28:32
; (6.0901 :patc (om-make-point 172 60) (om-make-point 68 95) (om-make-point 1066 658) "" 183 0 "2015/03/15 20:40:48" "2015/03/16 2:28:32")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "4. species slots" (quote ((let ((box (om-load-editor-box1 "ARRANGEMENT" (quote arrangement) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "no doc" "operons" nil) (om-load-inputfun (quote input-funbox) "no doc" "pheno" nil) (om-load-inputfun (quote input-funbox) "no doc" "raw-genotype" nil) (om-load-inputfun (quote input-funbox) "no doc" "decoder" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" 8) (om-load-inputfun (quote input-funbox) "" "range" (list 6000 7200)) (om-load-inputfun (quote input-funbox) "" "resolution" 1/16) (om-load-inputfun (quote input-funbox) "" "extent" 2) (om-load-inputfun (quote input-funbox) "" "length-range" (list 1 16)) (om-load-inputfun (quote input-funbox) "" "channel-range" (list 1 4)))) (om-make-point 633 75) (om-make-point 399 219) (let ((om-darwin::spec (if (find-class (quote arrangement) nil) (make-instance (quote arrangement) :raw-genotype (list 86 235 182 64 13 248 63 82 96 102 224 235 248 116 241 75 1 236 249 97 161 227 79 46 233 112 131 52 95 56 8 130) :decoder (list (list 0 2 1/16) (list 1 16 1/16) (list 1 4) (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil) :pheno nil :num-operons 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1 16) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 86 235 182 64 13 248 63 82 96 102 224 235 248 116 241 75 1 236 249 97 161 227 79 46 233 112 131 52 95 56 8 130)) (om-darwin::update om-darwin::spec) om-darwin::spec) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-INSPECT" (quote om-inspect) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 792 411) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 340 338) (om-make-point 64 30) (quote om-darwin::pitch) "d::pitch" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 403 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OPERONS" (quote om-darwin::operons) (quote ((om-load-inputfun (quote input-funbox) "SPECIMEN" "SPECIMEN" nil))) (om-make-point 423 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 42 483) (om-make-point 315 118) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRANGE->VOICE" (quote om-darwin::arrange->voice) (quote ((om-load-inputfun (quote input-funbox) "" "ARR-1" nil))) (om-make-point 78 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 53 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 462 26) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MELODY" (quote melody) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "no doc" "operons" nil) (om-load-inputfun (quote input-funbox) "no doc" "pheno" nil) (om-load-inputfun (quote input-funbox) "no doc" "raw-genotype" nil) (om-load-inputfun (quote input-funbox) "no doc" "decoder" nil) (om-load-inputfun (quote input-funbox) "" "num-operons" 8) (om-load-inputfun (quote input-funbox) "" "num-notes" 8) (om-load-inputfun (quote input-funbox) "" "range" (list 6000 7200)))) (om-make-point 26 82) (om-make-point 565 182) (let ((om-darwin::spec (if (find-class (quote melody) nil) (make-instance (quote melody) :raw-genotype (list 173 63 51 248 77 255 219 145 253 107 237 174 195 19 254 227) :decoder (list (list 6000 7200 100)) :operons (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) :pheno (list (list 0 1/16 1 6400) (list 1/16 1/16 1 7100) (list 1/8 1/16 1 7200) (list 3/16 1/16 1 6100) (list 1/4 1/16 1 7200) (list 5/16 1/16 1 6800) (list 3/8 1/16 1 7100) (list 7/16 1/16 1 6200) (list 1/2 1/16 1 6600) (list 9/16 1/16 1 6300) (list 5/8 1/16 1 6300) (list 11/16 1/16 1 6500) (list 3/4 1/16 1 6000) (list 13/16 1/16 1 6600) (list 7/8 1/16 1 6700) (list 15/16 1/16 1 6600)) :num-operons 8 :num-notes 16 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 173 63 51 248 77 255 219 145 253 107 237 174 195 19 254 227)) (om-darwin::update om-darwin::spec) om-darwin::spec) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (8 0 9 6 nil 0))) nil 6.0901))
