; OM File Header - Saved 2015/03/16 2:28:31
; (6.0901 :patc (om-make-point 10 60) (om-make-point 125 83) (om-make-point 631 398) "" 183 0 "2015/03/16 1:36:51" "2015/03/16 2:28:31")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "5.1 om-gene" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 214 68) (quote "in isolation, om-gene and nth-gene behave like random functions") nil (om-make-point 396 146) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 251 200) (om-make-point 88 30) (list 2 3 5 7 11) "(2 3 5 7 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 88 209) (om-make-point 88 30) (list 2 3 5 7 11) "(2 3 5 7 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 290 51) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 243 47) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 147 31) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 27) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-GENE" (quote nth-gene) (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 272 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 136 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 105 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 246 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 7 0 nil 0) (2 0 8 0 nil 0) (6 0 9 0 nil 0) (5 0 9 1 nil 0) (4 0 10 0 nil 0) (3 0 10 1 nil 0))) nil 6.0901))
