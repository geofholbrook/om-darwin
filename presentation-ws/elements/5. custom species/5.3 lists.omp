; OM File Header - Saved 2015/03/16 2:28:31
; (6.0901 :patc (om-make-point 172 60) (om-make-point 367 92) (om-make-point 590 461) "" 183 0 nil "2015/03/16 2:28:31")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "5.3 lists" (quote ((let ((box (om-load-boxcall (quote abstraction) "queens1 2" (om-load-patch-abs1 "queens1" (quote ((let ((box (om-load-boxcall (quote abstraction) "n-queens ff" (om-load-patch-abs1 "n-queens ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 121 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "count attacks" (om-load-lisp-abspatch "count attacks" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (columns)$  (let ((size (length columns)))$    (loop for c1 from 1 to (1- size)$          sum$          (loop for c2 from (1+ c1) to size$                sum$              ;count attacks$                (+ (if (= (nth (1- c1) columns)$                          (nth (1- c2) columns)) 1 0)$                   (if (= (+ c1 (nth (1- c1) columns))$                          (+ c2 (nth (1- c2) columns))) 1 0)$                   (if (= (- c1 (nth (1- c1) columns))$                          (- c2 (nth (1- c2) columns))) 1 0))))))") (quote ((om-load-inputfun (quote input-funbox) "" "COLUMNS" nil))) (om-make-point 162 231) nil nil nil "count attacks"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 149 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 95 396) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 249 126) nil (list nil) "l" "n-queens ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 72 259) (om-make-point 242 110) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model nil :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 144 151 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 144 151 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3541) (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 144 151 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 144 151 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 144 151 17 92 183) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 144 151 17 92 183)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 151 222 144 83 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 151 222 144 83 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 2.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 144 151 92 17 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 144 151 92 17 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 2.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 211 151 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 211 151 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 3.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 83 222 144 151 17 94 181) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 83 222 144 151 17 94 181)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 3.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 9 83 222 144 17 151 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 9 83 222 144 17 151 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 4.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 221 81 224 144 151 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 221 81 224 144 151 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 4.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 83 221 222 144 151 17 92 146) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 83 221 222 144 151 17 92 146)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 3574) (setf (om-darwin::result om-darwin::ga) (list 6 4 7 1 8 2 5 3)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 121 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "queens" (om-load-patch-abs1 "queens" (quote ((let ((box (om-load-boxout "output0" 0 (om-make-point 157 335) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 191 40) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "N" 8))) (om-make-point 83 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 1) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 8))) (om-make-point 51 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (1 0 3 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 123 36) nil (list nil) "l" "queens"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (0 0 1 2 nil 0) (3 0 2 0 nil 0))) 6.0901 nil "" (om-make-point 200 103) (om-make-point 813 675)) (quote nil) (om-make-point 460 124) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "gatc 2" (om-load-patch-abs1 "GATC" (quote ((let ((box (om-load-boxcall (quote abstraction) "last-note-in-range" (om-load-patch-abs1 "last-note-in-range" (quote ((let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 136 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 313 377) (om-make-point 48 30) 6600 "6600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 307 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 218 535) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 136 596) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 223 337) (om-make-point 48 30) 7600 "7600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" nil) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 7600))) (om-make-point 86 441) (om-make-point 140 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 47 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 48 160) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 64 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 160 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (0 0 6 0 nil 0) (5 0 6 1 nil 0) (8 1 7 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 258 82) nil (list nil) "l" "last-note-in-range"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 59 250) (om-make-point 289 164) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 213 128 88 31 115 99 37 40 54 224) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 213 128 88 31 115 99 37 40 54 224)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 161 245 115 173 230 170 121 27 109 99) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 161 245 115 173 230 170 121 27 109 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 18 79 147 239 216 190 198 52 180 100) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 79 147 239 216 190 198 52 180 100)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 82 162 176 109 89 125 239 76 69 21) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 162 176 109 89 125 239 76 69 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 157 78 242 65 113 197 223 86 179 234) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 157 78 242 65 113 197 223 86 179 234)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 4 148 228 185 121 50 197 122 242 84) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 4 148 228 185 121 50 197 122 242 84)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 115 109 77 127 239 233 182 30 171 137) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 115 109 77 127 239 233 182 30 171 137)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 209 208 87 105 168 51 78 106 10 133) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 209 208 87 105 168 51 78 106 10 133)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 64 38 10 215 193 241 49 94 66 51) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 64 38 10 215 193 241 49 94 66 51)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 13 249 206 232 111 167 93 233 164 19) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 13 249 206 232 111 167 93 233 164 19)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 73 98 58 44 44 158 187 124 106 99) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 73 98 58 44 44 158 187 124 106 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (list "C-" "C-" "T" "C-" "A+" "A+" "T" "A-" "T" "A-")) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 594 43) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 108 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "GATTACA" (om-load-patch-abs1 "GATTACA" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 161 41) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 174 480) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 197 372) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 147 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 44 536) (om-make-point 249 162) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5000) (4800) (4600) (4400) (5100) (5000) (5700) (5600) (5500) (6000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 3500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 48) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 54))) (om-make-point 42 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "nucle->interval" (om-load-patch-abs1 "nucle->interval" (quote ((let ((box (om-load-boxout "output0" 0 (om-make-point 241 675) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 50 53) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONDITIONAL" (quote conditional) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "add-test" "ADDTEST" (quote t)))) (om-make-point 280 571) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 605 429) (om-make-point 32 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 502 394) (om-make-point 36 30) 1 "+1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 458 384) (om-make-point 32 30) -2 "-2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 406 375) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 584 363) (om-make-point 43 30) "C-" "\"C-\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 483 306) (om-make-point 47 30) "C+" "\"C+\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 429 321) (om-make-point 43 30) "A-" "\"A-\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 360 323) (om-make-point 47 30) "A+" "\"A+\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OMCASE 2" (quote omcase) (quote ((om-load-inputfun (quote input-funbox) "" "VALUE" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil))) (om-make-point 391 498) (om-make-point 201 57) nil nil nil 1))) (setf (frame-position newbox) (om-make-point 391 498)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 398 121) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 298 121) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OMCASE" (quote omcase) (quote ((om-load-inputfun (quote input-funbox) "" "VALUE" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil) (om-load-inputfun (quote input-funbox) "" "ARGS" nil))) (om-make-point 216 238) (om-make-point 176 57) nil nil nil 1))) (setf (frame-position newbox) (om-make-point 216 238)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 349 50) (om-make-point 37 30) "T" "\"T\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 246 78) (om-make-point 39 30) "G" "\"G\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (14 0 2 0 nil 0) (11 0 2 1 nil 0) (1 0 11 0 nil 0) (10 0 11 1 nil 0) (6 0 11 2 nil 0) (9 0 11 3 nil 0) (5 0 11 4 nil 0) (8 0 11 5 nil 0) (4 0 11 6 nil 0) (7 0 11 7 nil 0) (3 0 11 8 nil 0) (1 0 14 0 nil 0) (16 0 14 1 nil 0) (13 0 14 2 nil 0) (15 0 14 3 nil 0) (12 0 14 4 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 308 94) nil (list nil) "l" "nucle->interval"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 155 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "nucleotides" (om-load-patch-abs1 "nucleotides" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 338 113) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output0" 0 (om-make-point 101 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 241 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 155 36) (om-make-point 186 30) (list "G" "T" "A+" "A-" "C+" "C-") "(\"G\" \"T\" \"A+\" \"A-\" \"C+\" \"C-\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 267 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-GENE" (quote nth-gene) (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 151 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 175 97) nil (list (list "A+" "A-" "A-" "A-" "G" "C-" "G" "C-" "C-" "T")) nil "nucleotides"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 511 457) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 1 nil 0) (1 0 4 2 nil 0) (6 0 5 0 nil 0) (8 0 5 1 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (0 0 9 0 nil 0) (9 0 10 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 650 523)) (quote nil) (om-make-point 106 18) nil (list nil) "l" "GATTACA"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (3 0 2 0 nil 0))) 6.0901 nil "" (om-make-point 239 145) (om-make-point 476 482)) (quote nil) (om-make-point 476 51) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bits-ff" (om-load-patch-abs1 "bits-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 193 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "alternate" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 151 220) nil nil nil (list (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 348 446) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 207 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" 0) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" 1) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 0))) (om-make-point 117 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 165 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 130 281) (om-make-point 66 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 90 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 107 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 159 506) (om-make-point 109 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 0 1 1 0 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 138 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 244 624) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 92 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (6 0 2 0 nil 0) (9 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (9 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (8 0 9 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "alternate" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 311 171) nil (list nil) "l" "bits-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 78 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 45 312) (om-make-point 389 113) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 125 170 247 3 208 135 118 13 110 191 132 50 210 150 239 183 91 147 106 107 171 249 223 251 146 191 178 100 49 118 181 31) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 125 170 247 3 208 135 118 13 110 191 132 50 210 150 239 183 91 147 106 107 171 249 223 251 146 191 178 100 49 118 181 31)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 648) (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 34 177 164 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 34 177 164 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 186 243 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 186 243 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 7) (list 1.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 250 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 250 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 2.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 164 177 34 63 129 40 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 164 177 34 63 129 40 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 10) (list 2.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 94 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 94 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 3.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 164 177 34 63 134 35 72 19 110 165 248 118 219 47 176 89 96 199 46 113 162 171 122 107 249) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 164 177 34 63 134 35 72 19 110 165 248 118 219 47 176 89 96 199 46 113 162 171 122 107 249)) (om-darwin::update om-darwin::spec) om-darwin::spec) 9) (list 3.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 186 243 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 119 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 186 243 63 10 63 80 23 164 177 34 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 119 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 4.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 34 80 23 164 177 61 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 34 80 23 164 177 61 63 134 35 248 19 110 165 72 119 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 4.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 27 146 63 10 63 80 23 164 177 34 63 129 40 248 19 110 165 72 50 218 47 176 89 96 199 46 113 162 171 122 107 236) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 146 63 10 63 80 23 164 177 34 63 129 40 248 19 110 165 72 50 218 47 176 89 96 199 46 113 162 171 122 107 236)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 748) (setf (om-darwin::result om-darwin::ga) (list 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 503 105) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 119 45) (om-make-point 34 30) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "n-bits" (om-load-patch-abs1 "n-bits" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 43 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 176 30) "" nil 10 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 98 173) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 164 284) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.0901 nil "" (om-make-point 341 98) (om-make-point 375 389)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 115 105) nil (list nil) "l" "n-bits"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 3 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (5 0 6 0 nil 0))) nil 6.0901))
