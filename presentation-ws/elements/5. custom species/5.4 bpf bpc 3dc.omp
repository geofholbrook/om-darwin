; OM File Header - Saved 2015/03/16 2:28:31
; (6.0901 :patc (om-make-point 172 60) (om-make-point 191 86) (om-make-point 1030 599) "" 183 0 "2015/03/16 0:20:14" "2015/03/16 2:28:31")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "5.4 bpf bpc 3dc" (quote ((let ((box (om-load-boxcall (quote abstraction) "close points" (om-load-patch-abs1 "close points" (quote ((let ((box (om-load-boxcall (quote lispfun) "Z-POINTS" (quote z-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 382 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 256 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 455 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 468 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 518 253) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 34 509) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 79 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 412) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 88 489) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 523 431) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 285 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 182 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 313 260) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 263 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 258) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 152 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 250 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 73 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 127 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 244 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 656) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((21 0 0 0 nil 0) (12 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (9 0 7 0 nil 0) (11 0 7 1 nil 0) (8 0 9 1 nil 0) (1 0 11 0 nil 0) (10 0 11 1 nil 0) (16 0 12 0 nil 0) (14 0 12 1 nil 0) (17 0 14 0 nil 0) (13 0 14 1 nil 0) (18 0 16 0 nil 0) (15 0 16 1 nil 0) (20 0 17 0 nil 0) (19 0 18 0 nil 0) (21 0 19 0 nil 0) (21 0 20 0 nil 0) (22 0 21 0 nil 0) (6 0 23 0 nil 0))) 6.0901 nil "" (om-make-point 112 22) (om-make-point 695 672)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 865 160) nil (list nil) "l" "close points"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE 2" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 788 300) (om-make-point 146 144) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 64 238 60 159 193 63 98 88 4 114 126 86 226 170 17 238 126 158 115 251 233 222 126 77 221 179 27 227 249 144 83 32 13 112 2 212 126 3 125 172 58 194 181 138 27 242 220 32 83 230 63 140 88 174 98 253 174 161 149 191 103 213 176 174 66 13 110 197 3 204 160 243 89 58 119) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 64 238 60 159 193 63 98 88 4 114 126 86 226 170 17 238 126 158 115 251 233 222 126 77 221 179 27 227 249 144 83 32 13 112 2 212 126 3 125 172 58 194 181 138 27 242 220 32 83 230 63 140 88 174 98 253 174 161 149 191 103 213 176 174 66 13 110 197 3 204 160 243 89 58 119)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 1592.6041 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 56 46 175 218 99 190 122 184 247 40 210 187 180 15 68 69 8 75 76 47 29 241 3 83 34 141 252 184 164 185 70 81 216 52 186 98 178 217 4 111 32 254 221 97 254 113 26 37 89 156 173 255 245 189 139 6 227 148 197 112 83 190 104 74 208 154 21 13 181 97 47 164 234 220 30) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 56 46 175 218 99 190 122 184 247 40 210 187 180 15 68 69 8 75 76 47 29 241 3 83 34 141 252 184 164 185 70 81 216 52 186 98 178 217 4 111 32 254 221 97 254 113 26 37 89 156 173 255 245 189 139 6 227 148 197 112 83 190 104 74 208 154 21 13 181 97 47 164 234 220 30)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1609.0154 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 230 192 222 40 112 144 125 22 14 4 187 34 4 84 119 191 144 101 160 198 234 185 127 228 51 250 79 203 46 42 21 3 195 70 42 233 234 62 49 229 35 8 16 186 85 148 243 234 91 128 111 24 8 51 233 133 36 84 89 122 189 71 243 41 195 50 192 171 13 180 124 194 32 55 2) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 230 192 222 40 112 144 125 22 14 4 187 34 4 84 119 191 144 101 160 198 234 185 127 228 51 250 79 203 46 42 21 3 195 70 42 233 234 62 49 229 35 8 16 186 85 148 243 234 91 128 111 24 8 51 233 133 36 84 89 122 189 71 243 41 195 50 192 171 13 180 124 194 32 55 2)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1509.5214 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 195 180 207 184 32 165 36 168 233 94 248 236 9 94 171 149 75 229 97 231 42 71 190 24 72 194 164 125 37 149 194 241 147 225 113 47 178 4 15 10 44 86 16 239 123 128 195 87 120 32 63 71 204 198 180 71 178 43 81 87 42 185 243 138 78 254 250 217 43 88 164 93 131 38 115) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 195 180 207 184 32 165 36 168 233 94 248 236 9 94 171 149 75 229 97 231 42 71 190 24 72 194 164 125 37 149 194 241 147 225 113 47 178 4 15 10 44 86 16 239 123 128 195 87 120 32 63 71 204 198 180 71 178 43 81 87 42 185 243 138 78 254 250 217 43 88 164 93 131 38 115)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1505.3967 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 21 132 206 145 118 207 206 126 191 125 228 31 49 113 43 141 49 105 174 139 219 56 98 146 6 147 232 238 241 13 199 141 67 154 102 229 156 124 230 91 36 161 23 41 54 94 107 49 237 142 75 118 53 58 164 201 104 249 91 109 74 100 28 161 135 54 92 169 137 250 100 88 60 216 81) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 132 206 145 118 207 206 126 191 125 228 31 49 113 43 141 49 105 174 139 219 56 98 146 6 147 232 238 241 13 199 141 67 154 102 229 156 124 230 91 36 161 23 41 54 94 107 49 237 142 75 118 53 58 164 201 104 249 91 109 74 100 28 161 135 54 92 169 137 250 100 88 60 216 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1311.1798 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 111 158 54 207 253 225 73 94 89 45 169 228 35 156 65 69 5 224 191 124 223 239 124 167 252 163 2 234 111 150 214 142 105 79 175 141 149 156 178 79 70 221 31 104 37 216 80 135 157 102 66 173 110 39 253 9 133 126 138 120 231 18 168 115 136 5 139 195 25 149 140 125 39 190 140) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 111 158 54 207 253 225 73 94 89 45 169 228 35 156 65 69 5 224 191 124 223 239 124 167 252 163 2 234 111 150 214 142 105 79 175 141 149 156 178 79 70 221 31 104 37 216 80 135 157 102 66 173 110 39 253 9 133 126 138 120 231 18 168 115 136 5 139 195 25 149 140 125 39 190 140)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1456.6575 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 93 163 164 5 40 128 116 233 127 232 56 220 215 180 24 90 183 73 221 195 4 223 244 132 123 246 142 199 232 184 152 237 17 55 229 92 50 162 212 160 93 135 56 140 228 129 73 150 139 26 68 15 120 36 76 180 221 236 134 180 24 191 31 71 193 22 99 152 153 163 79 214 249 9 21) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 93 163 164 5 40 128 116 233 127 232 56 220 215 180 24 90 183 73 221 195 4 223 244 132 123 246 142 199 232 184 152 237 17 55 229 92 50 162 212 160 93 135 56 140 228 129 73 150 139 26 68 15 120 36 76 180 221 236 134 180 24 191 31 71 193 22 99 152 153 163 79 214 249 9 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1470.9032 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 87 26 210 49 211 122 77 156 208 87 14 88 248 253 193 204 61 119 239 51 128 67 161 61 157 27 201 96 150 147 173 74 125 90 14 213 235 71 128 87 56 16 122 65 89 6 213 54 190 24 54 143 158 194 161 151 44 63 170 103 150 30 41 143 30 212 57 88 199 163 117 55 9 107 15) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 87 26 210 49 211 122 77 156 208 87 14 88 248 253 193 204 61 119 239 51 128 67 161 61 157 27 201 96 150 147 173 74 125 90 14 213 235 71 128 87 56 16 122 65 89 6 213 54 190 24 54 143 158 194 161 151 44 63 170 103 150 30 41 143 30 212 57 88 199 163 117 55 9 107 15)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1235.8826 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 225 99 222 52 71 8 10 253 41 203 115 12 122 226 16 67 16 37 204 111 25 229 82 60 105 181 108 7 34 66 142 199 141 20 165 168 33 186 170 166 67 245 254 57 187 141 148 50 88 225 64 45 173 159 170 242 244 219 239 43 198 169 209 14 104 12 179 157 157 217 66 125 175 175 72) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 225 99 222 52 71 8 10 253 41 203 115 12 122 226 16 67 16 37 204 111 25 229 82 60 105 181 108 7 34 66 142 199 141 20 165 168 33 186 170 166 67 245 254 57 187 141 148 50 88 225 64 45 173 159 170 242 244 219 239 43 198 169 209 14 104 12 179 157 157 217 66 125 175 175 72)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1419.1749 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 148 241 230 93 169 73 248 79 8 55 154 157 126 177 91 192 89 131 234 194 164 175 129 79 126 124 143 3 44 56 124 181 214 68 143 114 142 76 235 33 44 189 208 14 189 54 236 29 85 211 130 219 233 198 75 199 44 236 29 215 70 60 41 99 87 109 142 110 147 172 120 218 191 68 129) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 148 241 230 93 169 73 248 79 8 55 154 157 126 177 91 192 89 131 234 194 164 175 129 79 126 124 143 3 44 56 124 181 214 68 143 114 142 76 235 33 44 189 208 14 189 54 236 29 85 211 130 219 233 198 75 199 44 236 29 215 70 60 41 99 87 109 142 110 147 172 120 218 191 68 129)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1436.1394 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 154 71 154 71 170 125 34 3 128 186 224 59 157 254 2 252 225 153 155 6 124 22 145 87 127 136 102 1 80 164 222 105 128 43 4 203 234 31 213 39 215 196 107 213 133 31 199 18 52 222 219 15 234 95 5 201 199 75 119 103 65 216 167 145 166 168 114 131 33 197 243 207 121 225 139) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 154 71 154 71 170 125 34 3 128 186 224 59 157 254 2 252 225 153 155 6 124 22 145 87 127 136 102 1 80 164 222 105 128 43 4 203 234 31 213 39 215 196 107 213 133 31 199 18 52 222 219 15 234 95 5 201 199 75 119 103 65 216 167 145 166 168 114 131 33 197 243 207 121 225 139)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (6 -4 24 -34 49 39 -29 33 -5 -10 -42 36 29 -35 18 19 -42 25 26 -3 -21 -11 -47 33 -16)) (quote (-10 0 33 13 34 20 31 -36 2 35 48 27 -35 -46 -40 -18 2 -31 47 2 -38 -24 -13 39 5)) (quote (22 3 -7 38 -12 -44 -25 -3 46 -39 33 39 -47 24 -44 3 -29 -37 30 47 -3 13 -18 -32 -20)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 22 3 -7 38 -12 -44 -25 -3 46 -39 33 39 -47 24 -44 3 -29 -37 30 47 -3 13 -18 -32 -20))) newobj)) om-darwin::ga) nil nil (pairlis (quote (bg-color approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list (om-make-color 0.0 0.0 0.0) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 894 157) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES 2" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 770 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "3dc" (om-load-patch-abs1 "3dc" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 489 27) (om-make-point 39 30) -50 "-50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 271 6) (om-make-point 39 30) -50 "-50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 58 33) (om-make-point 39 30) -50 "-50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 232 340) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj) nil nil (pairlis (quote (picture line-width room-size show-room show-axes mode winpos winsize)) (list nil 1.0 2 1 1 0 (om-make-point 600 200) (om-make-point 800 800))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 543 33) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 510 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 504 181) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 217 570) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 3 1 nil 0) (7 0 3 2 nil 0) (6 0 3 3 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (10 0 6 1 nil 0) (8 0 7 0 nil 0) (10 0 7 1 nil 0) (1 0 8 0 nil 0) (9 0 8 1 nil 0) (2 0 12 0 nil 0) (11 0 12 1 nil 0) (12 0 13 0 nil 0) (10 0 13 1 nil 0) (3 0 14 0 nil 0))) 6.0901 nil "" (om-make-point 202 69) (om-make-point 818 669)) (quote nil) (om-make-point 802 54) nil (list nil) "l" "3dc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REINIT" (quote om-darwin::reinit) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 565 465) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc-lib" (om-load-patch-abs1 "bpc-lib" (quote ((let ((box (om-load-editor-box1 "BPC-LIB" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 346 475) (om-make-point 90 94) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (25 42 45 100 4 35 9 11 80 10)) (quote (20 26 20 14 15 29 70 31 15 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (90 31 3 42 31 0 18 59 39 34)) (quote (17 58 25 17 100 76 18 35 59 93)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 450 365) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 416 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 419 62) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 157 284) (om-make-point 165 150) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (90 31 3 42 31 0 18 59 39 34)) (quote (17 58 25 17 100 76 18 35 59 93)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 44 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 217 570) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (8 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 5 1 nil 0) (11 0 8 1 nil 0) (4 0 8 2 nil 0) (9 0 10 1 nil 0) (10 0 11 0 nil 0) (7 0 11 1 nil 0) (0 0 12 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 585 44) nil (list nil) "l" "bpc-lib"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE 2" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 550 280) (om-make-point 146 144) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 54 121 122 144 111 63 80 198 205 157 195 84 24 3 154 187 247 174 18 148 251 223 109 26 143 143 230 135 82 166 127 177 240 70 191 119 165 87 199 12) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 54 121 122 144 111 63 80 198 205 157 195 84 24 3 154 187 247 174 18 148 251 223 109 26 143 143 230 135 82 166 127 177 240 70 191 119 165 87 199 12)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 833.5027 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 187 214 35 96 168 251 229 95 200 246 129 160 165 152 231 107 192 81 232 228 169 143 219 88 153 121 120 173 151 162 88 118 8 23 157 134 5 3 250 81) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 187 214 35 96 168 251 229 95 200 246 129 160 165 152 231 107 192 81 232 228 169 143 219 88 153 121 120 173 151 162 88 118 8 23 157 134 5 3 250 81)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 850.7793 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 55 111 56 79 14 140 72 225 58 241 82 240 107 100 51 224 58 255 46 2 234 91 25 47 242 216 246 168 115 179 163 139 217 54 153 250 65 139 123 181) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 55 111 56 79 14 140 72 225 58 241 82 240 107 100 51 224 58 255 46 2 234 91 25 47 242 216 246 168 115 179 163 139 217 54 153 250 65 139 123 181)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 848.5575 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 119 219 155 140 179 145 55 9 119 124 175 120 175 244 196 74 110 234 10 205 213 92 239 106 45 139 247 25 196 23 69 118 170 177 98 10 13 243 62 72) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 119 219 155 140 179 145 55 9 119 124 175 120 175 244 196 74 110 234 10 205 213 92 239 106 45 139 247 25 196 23 69 118 170 177 98 10 13 243 62 72)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 606.4298 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 226 178 66 138 1 122 69 101 38 243 90 81 146 252 239 135 76 238 189 160 44 73 191 94 99 186 57 245 64 145 213 18 255 39 38 240 235 89 182 217) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 226 178 66 138 1 122 69 101 38 243 90 81 146 252 239 135 76 238 189 160 44 73 191 94 99 186 57 245 64 145 213 18 255 39 38 240 235 89 182 217)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 937.3063 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 231 214 100 69 144 53 8 20 30 69 4 51 207 31 244 179 107 178 241 103 158 27 255 220 50 183 217 140 38 145 98 14 4 164 97 26 222 82 22 39) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 214 100 69 144 53 8 20 30 69 4 51 207 31 244 179 107 178 241 103 158 27 255 220 50 183 217 140 38 145 98 14 4 164 97 26 222 82 22 39)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 783.42676 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 235 232 167 49 242 19 219 89 221 201 121 127 71 61 245 220 10 166 172 21 92 42 69 50 236 220 2 17 7 142 198 145 188 224 31 98 62 209 14 193) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 235 232 167 49 242 19 219 89 221 201 121 127 71 61 245 220 10 166 172 21 92 42 69 50 236 220 2 17 7 142 198 145 188 224 31 98 62 209 14 193)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 934.38556 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 127 56 59 237 142 83 54 146 61 28 241 91 164 237 124 164 135 80 86 81 174 105 160 74 179 188 52 203 74 18 158 227 200 6 185 208 52 176 146 99) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 127 56 59 237 142 83 54 146 61 28 241 91 164 237 124 164 135 80 86 81 174 105 160 74 179 188 52 203 74 18 158 227 200 6 185 208 52 176 146 99)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 1026.2726 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 82 103 90 60 47 49 6 147 221 152 9 29 32 97 100 2 67 168 96 137 230 38 162 112 88 181 226 30 175 172 26 47 240 92 203 137 3 176 181 1) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 82 103 90 60 47 49 6 147 221 152 9 29 32 97 100 2 67 168 96 137 230 38 162 112 88 181 226 30 175 172 26 47 240 92 203 137 3 176 181 1)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 865.69837 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 222 45 211 248 198 135 58 96 112 178 82 95 64 127 131 87 182 7 186 52 184 72 222 120 54 240 26 39 235 62 165 24 18 221 71 102 33 243 177 109) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 222 45 211 248 198 135 58 96 112 178 82 95 64 127 131 87 182 7 186 52 184 72 222 120 54 240 26 39 235 62 165 24 18 221 71 102 33 243 177 109)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 563.51 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 235 216 229 100 100 15 104 148 189 165 42 157 245 168 248 63 176 63 44 168 47 19 221 157 44 70 166 229 146 193 74 198 95 96 85 63 136 112 119 162) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 235 216 229 100 100 15 104 148 189 165 42 157 245 168 248 63 176 63 44 168 47 19 221 157 44 70 166 229 146 193 74 198 95 96 85 63 136 112 119 162)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (86 12 35 96 67 49 27 95 99 44)) (quote (28 59 64 51 29 6 91 81 30 26)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (68 42 17 88 52 20 19 72 50 61)) (quote (88 17 8 23 56 33 5 3 48 81)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t))) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 582 27) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES 2" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 553 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc-ff" (om-load-patch-abs1 "bpc-ff" (quote ((let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 179 510) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 137 167) (om-make-point 40 60) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output0" 0 (om-make-point 447 622) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 130 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 260 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 143 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 89 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 266 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 168 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 159 228) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 279 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 329 230) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 198 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 228 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 340 316) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 100 453) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 99 382) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 165 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 95 580) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 50 479) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (1 0 2 0 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0) (2 0 5 0 nil 0) (4 0 6 0 nil 0) (7 0 6 1 nil 0) (5 0 8 0 nil 0) (9 0 8 1 nil 0) (6 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (14 0 13 1 nil 0) (13 0 15 0 nil 0) (11 0 15 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 115 264) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 203 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 431 652) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 1 nil 0) (4 0 1 0 nil 0) (2 0 3 0 nil 0) (1 1 3 1 nil 0) (5 0 4 0 nil 0) (0 0 6 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 657 144) nil (list nil) "l" "bpc-ff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "right angles" (om-load-lisp-abspatch "right angles" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"right angles\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (spec)$  (let ((bpc (d::phenotype spec)))$    (flet ((vector (p1 p2) (list (- (car p2) (car p1))$                                 (- (cadr p2) (cadr p1))))$         $           (dot (v1 v2) (+ (* (car v1) (car v2))$                           (* (cadr v1) (cadr v2)))))$$      (let ((pts (mat-trans (list (x-points bpc)$                                  (y-points bpc)))))$        (loop for sub on pts$              if (cddr sub)$              sum (expt (let ((origin (second sub))$                              (point1 (first sub))$                              (point2 (third sub)))$$                          (let ((vector1 (vector point1 origin))$                                (vector2 (vector point2 origin)))$$                            (dot vector1 vector2)))$                        2))))))") (quote ((om-load-inputfun (quote input-funbox) "" "SPEC" nil))) (om-make-point 462 121) nil (list nil) "l" "right angles"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "close points" (om-load-patch-abs1 "close points" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 34 509) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 79 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 105 412) (om-make-point 48 30) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WITHIN-M" (quote om-darwin::within-m) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIN" "MIN" nil))) (om-make-point 88 489) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 324 346) (om-make-point 39 30) 1/2 "1/2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^ 2" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 212 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 182 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 313 260) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 263 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 258) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 152 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 250 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 73 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "X-POINTS" (quote x-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 127 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 244 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 114 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 231 15) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 656) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (6 0 2 1 nil 0) (3 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (11 0 7 0 nil 0) (9 0 7 1 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (15 0 12 0 nil 0) (14 0 13 0 nil 0) (16 0 14 0 nil 0) (16 0 15 0 nil 0) (17 0 16 0 nil 0) (1 0 18 0 nil 0))) 6.0901 nil "" (om-make-point 405 22) (om-make-point 499 702)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 389 104) nil (list nil) "l" "close points"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "minimize" (om-load-patch-abs1 "minimize" (quote ((let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 166 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PHENOTYPE" (quote om-darwin::phenotype) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 152 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 204 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 110) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 110 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 138 104) nil (list nil) "l" "minimize"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 289 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 297 261) (om-make-point 163 150) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 21 254 249 30 244 4 244 42 245 255 185 165 156 154 22 32 119 132 23 71 57 62 226 140 43 29 249 8 199 186 196 66 219 186 8 37 26 47 195 197 112 223 86 254 220 57 248 56 1 35 15 196 171 68 89 217 181 40 27 30) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 254 249 30 244 4 244 42 245 255 185 165 156 154 22 32 119 132 23 71 57 62 226 140 43 29 249 8 199 186 196 66 219 186 8 37 26 47 195 197 112 223 86 254 220 57 248 56 1 35 15 196 171 68 89 217 181 40 27 30)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 195100446 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 37 239 186 113 154 253 156 120 81 24 175 135 58 88 253 235 38 231 6 212 35 37 231 225 179 254 78 86 7 195 146 130 221 116 249 27 176 253 199 97 225 62 215 70 54 171 140 249 89 39 13 47 222 176 167 206 48 106 181 173) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 37 239 186 113 154 253 156 120 81 24 175 135 58 88 253 235 38 231 6 212 35 37 231 225 179 254 78 86 7 195 146 130 221 116 249 27 176 253 199 97 225 62 215 70 54 171 140 249 89 39 13 47 222 176 167 206 48 106 181 173)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 209179459 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 153 63 180 251 239 94 128 142 168 119 31 64 47 225 82 5 153 136 129 46 184 13 180 94 211 54 216 99 89 155 62 165 64 130 33 111 186 154 61 68 22 122 135 225 26 229 60 133 221 166 147 197 82 237 64 129 56 28 94 26) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 63 180 251 239 94 128 142 168 119 31 64 47 225 82 5 153 136 129 46 184 13 180 94 211 54 216 99 89 155 62 165 64 130 33 111 186 154 61 68 22 122 135 225 26 229 60 133 221 166 147 197 82 237 64 129 56 28 94 26)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 254097217 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 26 203 236 143 155 201 18 253 57 67 30 103 41 195 127 95 161 158 84 110 246 193 115 183 11 147 207 31 234 129 183 211 128 98 125 165 74 96 123 136 220 217 77 158 86 56 9 250 211 80 87 6 225 211 239 77 80 12 64 21) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 26 203 236 143 155 201 18 253 57 67 30 103 41 195 127 95 161 158 84 110 246 193 115 183 11 147 207 31 234 129 183 211 128 98 125 165 74 96 123 136 220 217 77 158 86 56 9 250 211 80 87 6 225 211 239 77 80 12 64 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 155657685 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 116 120 193 31 247 180 199 25 183 106 155 113 164 197 254 164 70 166 90 227 221 97 255 247 49 148 161 89 51 110 101 25 229 35 77 127 20 156 250 126 177 84 182 45 184 7 216 4 131 238 171 65 174 122 141 95 230 110 118 202) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 116 120 193 31 247 180 199 25 183 106 155 113 164 197 254 164 70 166 90 227 221 97 255 247 49 148 161 89 51 110 101 25 229 35 77 127 20 156 250 126 177 84 182 45 184 7 216 4 131 238 171 65 174 122 141 95 230 110 118 202)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 207200221 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 101 19 55 29 241 41 211 127 5 124 76 43 72 142 30 17 123 132 146 122 15 209 253 211 122 80 4 20 120 82 149 163 120 202 222 156 70 77 201 132 94 152 255 255 124 64 131 244 223 99 252 232 202 95 8 141 1 253 141 111) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 101 19 55 29 241 41 211 127 5 124 76 43 72 142 30 17 123 132 146 122 15 209 253 211 122 80 4 20 120 82 149 163 120 202 222 156 70 77 201 132 94 152 255 255 124 64 131 244 223 99 252 232 202 95 8 141 1 253 141 111)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 389450104 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 34 74 137 220 228 44 71 12 96 148 113 99 247 120 247 157 94 219 7 83 1 163 233 118 223 46 84 174 12 229 82 175 93 245 195 143 119 246 27 158 94 253 50 102 159 209 64 62 54 225 177 9 116 193 209 169 128 159 115 165) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 34 74 137 220 228 44 71 12 96 148 113 99 247 120 247 157 94 219 7 83 1 163 233 118 223 46 84 174 12 229 82 175 93 245 195 143 119 246 27 158 94 253 50 102 159 209 64 62 54 225 177 9 116 193 209 169 128 159 115 165)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 347783754 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 63 39 254 242 110 151 93 25 200 223 156 19 232 4 10 25 172 71 138 174 243 35 179 36 121 173 81 99 90 236 146 192 250 60 113 231 56 114 186 125 137 200 230 212 214 188 154 60 128 252 229 249 97 55 1 33 58 101 85 207) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 63 39 254 242 110 151 93 25 200 223 156 19 232 4 10 25 172 71 138 174 243 35 179 36 121 173 81 99 90 236 146 192 250 60 113 231 56 114 186 125 137 200 230 212 214 188 154 60 128 252 229 249 97 55 1 33 58 101 85 207)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 221088917 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 207 211 71 104 102 249 190 220 200 179 232 201 134 147 236 132 236 39 154 233 184 186 41 189 101 7 100 164 108 165 20 58 109 101 82 80 121 194 90 168 193 214 105 180 159 36 30 158 10 133 222 209 250 227 11 64 174 188 184 116) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 207 211 71 104 102 249 190 220 200 179 232 201 134 147 236 132 236 39 154 233 184 186 41 189 101 7 100 164 108 165 20 58 109 101 82 80 121 194 90 168 193 214 105 180 159 36 30 158 10 133 222 209 250 227 11 64 174 188 184 116)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 224391334 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 128 54 114 116 192 50 58 52 18 164 138 49 31 201 139 182 14 200 167 183 32 92 224 39 76 174 227 39 134 140 175 212 0 52 242 247 52 63 85 50 232 69 193 165 60 179 35 47 187 37 213 68 68 35 86 56 166 104 185 104) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 128 54 114 116 192 50 58 52 18 164 138 49 31 201 139 182 14 200 167 183 32 92 224 39 76 174 227 39 134 140 175 212 0 52 242 247 52 63 85 50 232 69 193 165 60 179 35 47 187 37 213 68 68 35 86 56 166 104 185 104)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 247111484 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 123 137 68 142 207 242 198 5 62 217 63 131 204 140 100 160 5 127 132 86 77 224 240 9 58 26 142 3 228 191 57 127 48 113 109 19 77 11 220 184 162 181 17 114 183 52 77 93 114 198 171 78 122 163 252 187 183 251 228 65) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 123 137 68 142 207 242 198 5 62 217 63 131 204 140 100 160 5 127 132 86 77 224 240 9 58 26 142 3 228 191 57 127 48 113 109 19 77 11 220 184 162 181 17 114 183 52 77 93 114 198 171 78 122 163 252 187 183 251 228 65)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (37 37 85 12 53 51 55 19 81 24 74 34 58 88 51 33 38 29 6 10 35 37 29 23 78 52 78 86 7 94)) (quote (45 29 19 15 47 27 75 51 98 97 23 62 13 70 54 70 39 47 89 39 13 47 20 75 66 4 48 5 80 72)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 596 130) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpc" (om-load-patch-abs1 "bpc" (quote ((let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 272 159) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 278 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 11) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 211 78) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 162 279) (om-make-point 91 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (12 22 42 44 67 32 9 94 4 35)) (quote (80 64 1 93 79 22 21 23 56 14)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 64 175) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 163 487) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 1 1 nil 0) (7 0 4 1 nil 0) (0 0 4 2 nil 0) (5 0 6 1 nil 0) (6 0 7 0 nil 0) (3 0 7 1 nil 0) (4 0 8 0 nil 0))) 6.0901 nil "" (om-make-point 576 108) (om-make-point 704 631)) (quote nil) (om-make-point 321 15) nil (list nil) "l" "bpc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf" (om-load-patch-abs1 "bpf" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 219 299) (om-make-point 169 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (41 20 79 21 27 37 50 70 29 38)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 27) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 0) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 1))) (om-make-point 70 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 10) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 85 186) (om-make-point 123 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 112 384) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 2 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 556 529)) (quote nil) (om-make-point 51 36) nil (list nil) "l" "bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 33 266) (om-make-point 183 126) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 32 147 2 41 128 177 223 191 132 194) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 32 147 2 41 128 177 223 191 132 194)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 283 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 232 225 155 89 112 213 128 17 105 118) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 232 225 155 89 112 213 128 17 105 118)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 340 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 127 81 127 138 233 124 136 119 60 3) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 127 81 127 138 233 124 136 119 60 3)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 461 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 185 148 146 117 162 251 8 22 193 138) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 185 148 146 117 162 251 8 22 193 138)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 407 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 33 59 71 35 0 160 9 8 74 59) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 33 59 71 35 0 160 9 8 74 59)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 483 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 179 28 189 42 182 37 121 203 125 185) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 179 28 189 42 182 37 121 203 125 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 406 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 247 128 16 227 37 40 190 89 16 224) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 247 128 16 227 37 40 190 89 16 224)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 499 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 138 91 166 43 157 14 171 64 16 245) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 138 91 166 43 157 14 171 64 16 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 501 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 85 244 247 250 59 166 119 154 204 185) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 244 247 250 59 166 119 154 204 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 464 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 99 40 161 22 126 227 114 192 14 75) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 99 40 161 22 126 227 114 192 14 75)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 529 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 75 24 65 146 167 21 185 101 92 158) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 75 24 65 146 167 21 185 101 92 158)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900)) (quote (30 23 54 89 11 11 27 17 4 17)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 503 105) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 31 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (0 0 1 2 nil 0) (3 0 2 0 nil 0) (6 0 4 0 nil 0) (7 0 6 1 nil 0) (8 0 6 2 nil 0) (5 0 7 0 nil 0) (14 0 12 0 nil 0) (12 0 13 1 nil 0) (9 0 13 2 nil 0) (17 0 16 1 nil 0) (11 0 16 2 nil 0) (15 0 17 0 nil 0))) nil 6.0901))
