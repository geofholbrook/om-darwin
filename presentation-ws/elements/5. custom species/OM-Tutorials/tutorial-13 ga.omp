; OM File Header - Saved 2015/03/16 2:28:31
; (6.0901 :patc (om-make-point 118 10) (om-make-point 285 43) (om-make-point 607 497) "" 183 0 "2015/03/15 21:22:32" "2015/03/16 2:28:31")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"tutorial-13 species.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "tutorial-13 ga" (quote ((let ((box (om-load-boxcall (quote patch-box) "tutorial-13 species" (quote ("elements" "5. custom species" "OM-Tutorials" "tutorial-13 species")) (quote nil) (om-make-point 77 46) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "dx to velocity" (om-load-patch-abs1 "dx to velocity" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 142 62) (quote "lower numbers mean better fitness") "" (om-make-point 491 410) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "fitness is a sum of all measurements") "" (om-make-point 490 493) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 229 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 313 481) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote (quote +))) (om-load-inputfun (quote input-funbox) "ARG" "ARG" nil))) (om-make-point 337 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 217 557) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 214 497) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 257 383) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 281 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 329 332) (om-make-point 41 30) 127 "127" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 500))) (om-make-point 293 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 200 331) (om-make-point 41 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 500))) (om-make-point 153 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 287 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 129 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 73 136) (om-make-point 323 67) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 54 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 427 568) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 4 2 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (12 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 8 0 nil 0) (10 0 8 1 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (14 0 12 0 nil 0) (11 0 12 1 nil 0) (2 0 13 0 nil 0) (15 2 14 0 nil 0) (16 0 15 0 nil 0) (4 0 17 0 nil 0))) 6.0901 nil "" (om-make-point 57 22) (om-make-point 745 720)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 366 121) nil (list nil) "l" "dx to velocity"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 52 309) (om-make-point 464 124) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 46 131 233 31 194 89 177 116 115 92 78 189 109 5 164 229 73 155 28 59 65 5 8 98 139 202 199 96 147 66 5 86 124 7 206 225 13 64 11 62 82 219 3 145 110 242 148 13 232 110 179 133 228 79 132 1 240 239 165 102 243 127 177 176 41 192 254 117 150 123 86 131 140 238 198 233 89 230 140 188 184 7 249 53 134 7 46 50 142 225) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 46 131 233 31 194 89 177 116 115 92 78 189 109 5 164 229 73 155 28 59 65 5 8 98 139 202 199 96 147 66 5 86 124 7 206 225 13 64 11 62 82 219 3 145 110 242 148 13 232 110 179 133 228 79 132 1 240 239 165 102 243 127 177 176 41 192 254 117 150 123 86 131 140 238 198 233 89 230 140 188 184 7 249 53 134 7 46 50 142 225)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0.24188976 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 10 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 10 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.24251969 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 154 198 202 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 142 147 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 154 198 202 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 142 147 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.24346458 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.24346458 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 117 179 220 196 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 117 179 220 196 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.24692914 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 34 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 55 46 35 186 184 29 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 34 39 78 93 198 237 201 225 63 204 157 12 234 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.25133857 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.25133857 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 152 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 88 196 179 220 117 152 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.25259843 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 97 224 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5) (list 0.25259843 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 224 97 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 97 255 202 196 179 215 122 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 249 72 224 97 55 214 236 185 166 25 168 153 29 170 40 232 42 37 39 78 93 198 237 201 225 63 204 157 12 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.25322834 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 202 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 227 61 204 157 12 235 25 182 252 37 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 30 89 178 150 95 61 147 135 184 237 61 145 144 46 164 125 30 1 76 94 82 18 114 196 26 131 147 186 183 127 95 166 186 202 196 179 220 117 150 119 217 202 172 38 140 167 46 2 63 179 29 46 35 186 184 55 72 97 224 249 214 236 185 166 25 171 153 29 170 40 232 42 37 39 78 93 198 237 201 227 61 204 157 12 235 25 182 252 37 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3))) (setf (om-darwin::generation om-darwin::ga) 83) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (5700) (5100) (8000) (7400) (5700) (5200) (8200) (6900) (7900) (5400) (8000) (5000) (8000) (5900) (4500) (4700) (4400) (6400) (5700) (7100) (4700) (7700) (6400) (6200) (4500) (7300) (5700) (6100) (5600))) :lonset (quote (0 400 570 810 1180 1410 1710 2050 2270 2570 2990 3290 3610 3920 4070 4170 4290 4690 4800 5250 5470 5570 5850 6270 6690 7050 7230 7570 7890 8180 8320)) :ldur (quote ((400) (170) (240) (370) (230) (300) (340) (220) (300) (420) (300) (320) (310) (150) (100) (120) (400) (110) (450) (220) (100) (280) (420) (420) (360) (180) (340) (320) (290) (140))) :lvel (quote ((113) (24) (84) (65) (35) (67) (52) (39) (69) (50) (20) (52) (47) (49) (88) (103) (97) (25) (100) (13) (73) (103) (56) (20) (23) (35) (81) (40) (47) (55))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 728 106) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 120 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (1 0 2 2 nil 0) (0 0 3 0 nil 0))) nil 6.0901))
