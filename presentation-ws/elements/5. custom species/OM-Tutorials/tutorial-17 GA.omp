; OM File Header - Saved 2015/03/16 2:28:31
; (6.0901 :patc (om-make-point 118 10) (om-make-point 166 68) (om-make-point 637 525) "" 183 0 "2015/03/15 21:06:27" "2015/03/16 2:06:25")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"tutorial-17 species.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "tutorial-17 GA" (quote ((let ((box (om-load-boxcall (quote abstraction) "chords not equal" (om-load-patch-abs1 "chords not equal" (quote ((let ((box (om-load-boxcall (quote lispfun) "EQUALP" (quote equalp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 135 399) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 183 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 226 285) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 61 275) (om-make-point 100 70) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 146 144) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 157 22) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 220 565) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 0 0 nil 0) (2 1 0 1 nil 0) (0 0 1 0 nil 0) (4 1 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 0 6 0 nil 0))) 6.0901 nil "" (om-make-point 198 30) (om-make-point 449 650)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 240 34) nil (list nil) "l" "chords not equal"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 383 75) (om-make-point 74 30) (quote :adjacent) ":adjacent" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :adjacent) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 379 169) (om-make-point 111 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 43 332) (om-make-point 380 111) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 45 144 242 233 89 173 28 11 243 70 242 49 70 193 124 82 10 60 171 36 171 36 215 191 107 216 173 162 84 8 136 55) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 45 144 242 233 89 173 28 11 243 70 242 49 70 193 124 82 10 60 171 36 171 36 215 191 107 216 173 162 84 8 136 55)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 9.849155 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 108 57 24 243 80 21 164 25 195 24 45 93 125 162 156 134 71 216 9 181 254 112 102 252 45 3 78 253 51 175 12 11) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 108 57 24 243 80 21 164 25 195 24 45 93 125 162 156 134 71 216 9 181 254 112 102 252 45 3 78 253 51 175 12 11)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 13.980799 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 10 96 163 64 32 240 144 131 131 47 96 36 73 39 105 5 178 242 83 59 57 69 119 67 122 152 146 55 150 171 72 157) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 10 96 163 64 32 240 144 131 131 47 96 36 73 39 105 5 178 242 83 59 57 69 119 67 122 152 146 55 150 171 72 157)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11.211579 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 94 189 163 237 195 239 76 138 251 8 59 171 173 117 112 125 230 145 106 69 183 83 167 190 98 229 13 181 129 209 15 42) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 94 189 163 237 195 239 76 138 251 8 59 171 173 117 112 125 230 145 106 69 183 83 167 190 98 229 13 181 129 209 15 42)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11.211579 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 106 97 244 212 222 119 47 218 228 167 128 254 204 236 58 252 119 68 75 44 25 174 136 39 4 227 153 205 195 187 213 238) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 106 97 244 212 222 119 47 218 228 167 128 254 204 236 58 252 119 68 75 44 25 174 136 39 4 227 153 205 195 187 213 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 12.589254 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 228 43 173 67 94 183 226 10 176 146 229 110 85 72 139 233 240 78 78 150 204 1 88 69 33 129 33 213 232 188 238 87) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 228 43 173 67 94 183 226 10 176 146 229 110 85 72 139 233 240 78 78 150 204 1 88 69 33 129 33 213 232 188 238 87)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 7.1773877 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 18 227 60 67 130 135 98 54 155 122 177 122 137 129 73 4 28 240 154 165 147 222 61 61 146 127 161 59 107 108 232 45) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 18 227 60 67 130 135 98 54 155 122 177 122 137 129 73 4 28 240 154 165 147 222 61 61 146 127 161 59 107 108 232 45)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9.849155 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 95 33 209 211 12 52 246 108 62 50 113 148 54 130 94 21 162 120 35 41 92 65 63 68 93 20 85 149 152 44 7 186) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 95 33 209 211 12 52 246 108 62 50 113 148 54 130 94 21 162 120 35 41 92 65 63 68 93 20 85 149 152 44 7 186)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 11.211579 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 227 237 31 183 205 98 49 146 20 202 188 60 126 124 214 222 183 144 0 6 22 52 27 4 190 242 197 3 88 157 210 70) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 227 237 31 183 205 98 49 146 20 202 188 60 126 124 214 222 183 144 0 6 22 52 27 4 190 242 197 3 88 157 210 70)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 9.849155 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 59 82 114 2 220 237 128 49 181 43 100 87 117 97 97 212 71 90 157 134 164 142 41 40 113 43 207 64 30 18 71 127) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 59 82 114 2 220 237 128 49 181 43 100 87 117 97 97 212 71 90 157 134 164 142 41 40 113 43 207 64 30 18 71 127)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 8.503698 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :raw-genotype (list 231 160 215 243 57 63 139 217 92 163 156 218 169 47 232 99 240 212 152 187 230 141 188 57 20 217 207 38 193 190 144 135) :decoder nil :operons nil :pheno nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 160 215 243 57 63 139 217 92 163 156 218 169 47 232 99 240 212 152 187 230 141 188 57 20 217 207 38 193 190 144 135)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6700) (7200) (6000) (6000) (6500) (6000) (6500) (6500) (5900) (7400) (7400) (7200) (6000) (6000) (6000) (6000) (7200) (6700) (6700) (6900) (6000) (6900) (6000) (7400) (6500) (6700) (7400) (7200) (7200) (6000) (7200))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) om-darwin::ga) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 145 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "tutorial-17 species" (quote ("elements" "5. define-species" "OM-Tutorials" "tutorial-17 species")) (quote nil) (om-make-point 112 44) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 1 nil 0) (2 0 3 2 nil 0) (5 0 4 0 nil 0))) nil 6.0901))
