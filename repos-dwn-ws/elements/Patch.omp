; OM File Header - Saved 2015/05/04 18:51:41
; (6.0901 :patc (om-make-point 10 10) (om-make-point 1487 251) (om-make-point 648 917) "" 183 0 "2015/05/04 17:52:00" "2015/05/04 18:51:37")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-editor-box1 "MELODY" (quote om-darwin::melody) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "num-notes" 8) (om-load-inputfun (quote input-funbox) "" "range" (list 6000 7200)))) (om-make-point 187 696) (om-make-point 70 50) (let ((om-darwin::spec (if (find-class (quote om-darwin::melody) nil) (make-instance (quote om-darwin::melody) :num-notes 8 :range (list 6000 7200) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 254 118 126 21 243 176 116 131)) (om-darwin::update om-darwin::spec) om-darwin::spec) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-TREE" (quote om-darwin::ga-tree) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "div-range" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "time-sig" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "num-operons" 8) (om-load-inputfun (quote input-funbox) "" "allow-rests" (quote t)) (om-load-inputfun (quote input-funbox) "" "allow-ties" (quote t)))) (om-make-point 260 473) (om-make-point 236 146) (let ((om-darwin::spec (if (find-class (quote om-darwin::ga-tree) nil) (make-instance (quote om-darwin::ga-tree) :div-range (list 1 5) :time-sig (list 4 4) :num-operons 8 :allow-rests (quote t) :allow-ties (quote t) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 25 8 211 211 242 106 127 63 17 156 66 216 104 86 9 102 225 124 139 11 109 21 3 119 94 126 38 38 65 56 10 127)) (om-darwin::update om-darwin::spec) om-darwin::spec) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-MELODY" (quote make-melody) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 8) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 428 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-TREE" (quote make-ga-tree) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-OPERONS" 8) (om-load-inputfun (quote input-funbox) "" "DIV-RANGE" (list 1 5)) (om-load-inputfun (quote input-funbox) "" "TIME-SIG" (list 4 4)) (om-load-inputfun (quote input-funbox) "" "ALLOW-RESTS" (quote t)) (om-load-inputfun (quote input-funbox) "" "ALLOW-TIES" (quote t)))) (om-make-point 292 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 155 35) (om-make-point 90 30) (list 4800 7200) "(4800 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 66 233) (om-make-point 325 169) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 115 151 105 231 17 186 116 164 127 42 165 127 38 169 115 80 23 253 244 225 5 202 127 194 222 32 198 245 252 197 116 176)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 177 103 82 181 54 163 154 248 137 51 129 216 149 249 56 3 11 158 38 243 1 142 37 72 208 59 198 240 23 62 121 179)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 140 210 98 8 33 43 253 159 229 225 223 66 80 174 19 143 125 104 40 98 141 72 163 142 210 164 120 171 71 9 53 238)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 231 90 10 92 249 115 6 132 179 51 236 230 159 10 127 180 211 7 74 13 102 15 18 149 173 69 50 254 5 66 218 185)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 149 145 5 151 62 91 221 170 131 15 160 114 37 55 82 245 36 126 104 82 48 204 86 59 37 140 135 70 45 59 130 44)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 68 41 106 167 81 228 59 140 84 170 181 24 229 254 114 155 33 106 104 116 198 12 75 74 42 80 133 173 124 150 12 248)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 160 220 60 205 12 242 229 222 40 94 134 130 234 134 178 182 182 226 77 94 65 91 203 154 100 32 186 151 155 244 160 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 147 88 204 31 7 184 73 57 216 187 19 180 219 81 98 55 218 39 112 83 168 181 74 110 171 80 0 127 226 193 5 229)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 85 96 147 191 170 190 167 9 69 51 148 26 123 234 150 17 110 184 239 3 204 38 212 74 173 195 20 161 76 14 143 135)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 113 128 122 140 85 28 139 182 16 230 227 117 168 40 238 164 91 16 127 22 141 19 172 189 8 63 255 184 15 208 80 237)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec (if (find-class (quote om-darwin::arrangement) nil) (make-instance (quote om-darwin::arrangement) :num-notes 8 :range (list 6000 7200) :resolution 1/16 :extent 2 :length-range (list 1/4 1) :channel-range (list 1 4) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 121 218 9 25 219 66 172 192 177 216 154 111 201 29 216 155 164 118 98 102 166 125 41 91 243 116 78 232 228 42 181 71)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-4)) ((4 4) ((1 (-1 3)) (1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (-1 3)) (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (1.0 -2 1)) 2.0)) ((4 4) (1.0 (1 (1.0 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-2 (1 (-2 1 1)) 1)) ((4 4) (1.0 (1 (1.0 3)) 2.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 80 43) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GA-CHORD" (quote make-ga-chord) (quote ((om-load-inputfun (quote input-funbox) "" "NUM-NOTES" 4) (om-load-inputfun (quote input-funbox) "" "RANGE" (list 6000 7200)))) (om-make-point 105 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 5 1 nil 0) (6 0 7 0 nil 0) (4 0 7 1 nil 0))) nil 6.0901))
