; OM File Header - Saved 2015/05/06 19:03:18
; (6.0901 :patc (om-make-point 118 10) (om-make-point 1282 220) (om-make-point 1055 1003) "" 183 0 "2015/05/06 14:54:49" "2015/05/06 19:03:09")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "complex om-gene example" (quote ((let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" nil))) (om-make-point 673 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "musical units" (om-load-patch-abs1 "musical units" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 170 414) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "append-arrangements" (om-load-patch-abs1 "append-arrangements" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 221 30) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 162 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 105 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 224 269) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 65 34) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil) (om-load-inputkeyword (quote input-keyword) "" "overlap" (quote :overlap) nil nil) (om-load-inputkeyword (quote input-keyword) "" "ceiling" (quote :ceiling) nil nil))) (om-make-point 50 127) (om-make-point 232 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 5 2 nil 0) (0 0 5 3 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 349 394)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 36 458) nil nil "l" "append-arrangements"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 371 782) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 92) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 50 50) (om-make-point 78 101) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 4200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 300 22) (om-make-point 590 297) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 247 67) (om-make-point 55 30) (list 4 12) "(4 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 348 73) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 409 138) (om-make-point 48 30) (list 3 7) "(3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "create unit" (om-load-patch-abs1 "create unit" (quote ((let ((box (om-load-boxin "harmonic interval range" 4 (om-make-point 711 12) "" "harmonic interval range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 635 351) (om-make-point 53 30) (list 1 -1) "(1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-GENE" (quote nth-gene) (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 622 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 352 197) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-range" 3 (om-make-point 584 45) "" "interval-range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 170 762) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length-range" 2 (om-make-point 443 22) "" "length-range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "cardinality" 1 (om-make-point 132 35) "" "cardinality" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "bottom note" 0 (om-make-point 24 42) "" "bottom note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 334 462) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 282 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 72056/363 586868/1331) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 273 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 4) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 12))) (om-make-point 497 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "makechord" (om-load-lisp-abspatch "makechord" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"makechord\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (bottom-note card ai-range)  ;adjacent interval$  (cdr (dx->x bottom-note$              (loop repeat card $                    collect (* 100 (apply #'om-gene ai-range))))))") (quote ((om-load-inputfun (quote input-funbox) "" "BOTTOM-NOTE" nil) (om-load-inputfun (quote input-funbox) "" "CARD" nil) (om-load-inputfun (quote input-funbox) "" "AI-RANGE" nil))) (om-make-point 53 240) nil (list (list 4200 4600 5500 6200)) "&" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-CHORD" (quote om-darwin::make-chord) (quote ((om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "channel" (quote :channel) nil nil) (om-load-inputkeyword (quote input-keyword) "" "len" (quote :len) nil nil))) (om-make-point 79 524) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 118 1745545/3993) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "makemelody" (om-load-lisp-abspatch "makemelody" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"makechord\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (start-note len interval-range flip?)$  (dx->x start-note$         (loop repeat (1- len) $               collect (om* (* 100 (apply #'om-gene interval-range))$                            flip?))))") (quote ((om-load-inputfun (quote input-funbox) "" "START-NOTE" nil) (om-load-inputfun (quote input-funbox) "" "LEN" nil) (om-load-inputfun (quote input-funbox) "" "INTERVAL-RANGE" nil) (om-load-inputfun (quote input-funbox) "" "FLIP?" nil))) (om-make-point 305 368) nil (list (list 6200 6200 6800 7300 7500 7700 8200 8900 9000 9200 9300 10000)) nil "makemelody"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 174 702) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (6 0 3 0 nil 0) (18 0 5 0 nil 0) (17 0 9 0 nil 0) (13 0 9 1 nil 0) (9 0 10 0 nil 0) (11 0 10 1 nil 0) (14 0 12 0 nil 0) (3 0 13 0 nil 0) (3 1 13 1 nil 0) (8 0 14 0 nil 0) (7 0 14 1 nil 0) (0 0 14 2 nil 1) (14 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 17 0 nil 0) (3 1 17 1 nil 0) (4 0 17 2 nil 0) (2 0 17 3 nil 0) (15 0 18 0 nil 0) (10 0 18 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "bottom note" nil) (om-load-inputfun (quote input-funbox) "" "cardinality" nil) (om-load-inputfun (quote input-funbox) "" "length-range" nil) (om-load-inputfun (quote input-funbox) "" "interval-range" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 116 217) nil (list (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 1 5700) (list 1/16 1/16 1 5900) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7100) (list 11/16 1/16 1 7200))) nil "create unit"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alternating process" (om-load-lisp-abspatch "alternating process" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"alternating process\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arrs)$  (loop for sub on arrs$        for k from 0$        for this = (car sub)$        for next = (cadr sub)$$        collect (let ((appended $                       (if next$                           (append this$                                   (list$                                    (let ((double (find-if #'(lambda (reg)$                                                              (= (d::region-chan reg) 1))$                                                          next)))$                                     (cons (+ (car double) (d::arr-end this))$                                           (cdr double)))))$                         this)))$                  (print appended)$                  $                      (if (oddp k)$                      ;change all channel 1 to channel 2$                          (loop for reg in appended$                                collect$                                (if (= (d::region-chan reg) 1)$                                    (d::set-channel reg 2)$                                  reg))$                        appended))))$") (quote ((om-load-inputfun (quote input-funbox) "" "ARRS" nil))) (om-make-point 286 411) nil (list (list (list (list 0 1/16 3 4700) (list 0 1/16 3 5200) (list 0 1/16 3 5800) (list 0 1/16 3 6200) (list 0 1/16 1 6200) (list 1/16 1/16 1 6300) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6500) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 7100) (list 7/16 1/16 1 7200) (list 1/2 1/16 1 7400) (list 9/16 1/16 1 7500) (list 5/8 1/16 1 7600) (list 11/16 1/16 1 5700)) (list (list 0 1/16 3 4500) (list 0 1/16 3 5000) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 2 5700) (list 1/16 1/16 2 5500) (list 1/8 1/16 2 5400) (list 3/16 1/16 2 5300) (list 1/4 1/16 2 5100) (list 5/16 1/16 2 5000) (list 3/8 1/16 2 6000)) (list (list 0 1/16 3 4800) (list 0 1/16 3 5200) (list 0 1/16 3 5700) (list 0 1/16 3 6000) (list 0 1/16 1 6000) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6500) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6800) (list 3/8 1/16 1 7000) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7500) (list 11/16 1/16 1 6000)) (list (list 0 1/16 3 4600) (list 0 1/16 3 4900) (list 0 1/16 3 5500) (list 0 1/16 3 6000) (list 0 1/16 2 6000) (list 1/16 1/16 2 6100) (list 1/8 1/16 2 6200) (list 3/16 1/16 2 6400) (list 1/4 1/16 2 6500) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6800) (list 1/2 1/16 2 7000) (list 9/16 1/16 2 7100) (list 5/8 1/16 2 7300) (list 11/16 1/16 2 7500) (list 3/4 1/16 2 6100)) (list (list 0 1/16 3 4500) (list 0 1/16 3 5000) (list 0 1/16 3 5500) (list 0 1/16 3 6100) (list 0 1/16 1 6100) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5800) (list 1/4 1/16 1 5700) (list 5/16 1/16 1 5500) (list 3/8 1/16 1 5400) (list 7/16 1/16 1 5200) (list 1/2 1/16 1 5100) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 4800) (list 11/16 1/16 1 4600) (list 3/4 1/16 1 5800)) (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5400) (list 0 1/16 3 5800) (list 0 1/16 2 5800) (list 1/16 1/16 2 6000) (list 1/8 1/16 2 6100) (list 3/16 1/16 2 6200) (list 1/4 1/16 2 6400) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6500)) (list (list 0 1/16 3 4800) (list 0 1/16 3 5500) (list 0 1/16 3 6200) (list 0 1/16 3 6500) (list 0 1/16 1 6500) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6900) (list 3/16 1/16 1 7100) (list 1/4 1/16 1 7300) (list 5/16 1/16 1 7400) (list 3/8 1/16 1 7600) (list 7/16 1/16 1 7800) (list 1/2 1/16 1 7900) (list 9/16 1/16 1 8000) (list 5/8 1/16 1 8200) (list 11/16 1/16 1 5900)) (list (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5600) (list 0 1/16 3 5900) (list 0 1/16 2 5900) (list 1/16 1/16 2 5700) (list 1/8 1/16 2 5600) (list 3/16 1/16 2 5400) (list 1/4 1/16 2 5300) (list 5/16 1/16 2 5100) (list 3/8 1/16 2 5000) (list 7/16 1/16 2 4800) (list 1/2 1/16 2 4700) (list 9/16 1/16 2 4500) (list 5/8 1/16 2 4400) (list 11/16 1/16 2 4300) (list 3/4 1/16 2 5800)) (list (list 0 1/16 3 4600) (list 0 1/16 3 5000) (list 0 1/16 3 5400) (list 0 1/16 3 5800) (list 0 1/16 1 5800) (list 1/16 1/16 1 5600) (list 1/8 1/16 1 5500) (list 3/16 1/16 1 5300) (list 1/4 1/16 1 5100) (list 5/16 1/16 1 5000) (list 3/8 1/16 1 5700)) (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 2 5700) (list 1/16 1/16 2 5900) (list 1/8 1/16 2 6100) (list 3/16 1/16 2 6300) (list 1/4 1/16 2 6500) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6800) (list 1/2 1/16 2 6900) (list 9/16 1/16 2 7000) (list 5/8 1/16 2 7100) (list 11/16 1/16 2 7200)))) nil "alternating process"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 218 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 273 237) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 171 628) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 106 399) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 1 2 nil 0) (0 0 1 3 nil 0) (12 0 2 0 nil 0) (4 1 8 0 nil 0) (3 0 8 1 nil 0) (5 0 8 2 nil 0) (6 0 8 3 nil 0) (7 0 8 4 nil 0) (10 0 9 0 nil 0) (8 0 10 0 nil 0) (11 0 10 1 nil 0) (1 0 12 0 nil 0) (9 0 12 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 518 876)) (quote nil) (om-make-point 170 43) nil (list nil) "l" "musical units"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 65 375) (om-make-point 874 340) (let ((om-darwin::ga (if (find-class (quote om-darwin::ga-engine) nil) (make-instance (quote om-darwin::ga-engine) :model (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 107 33 27 85 61 11 255 135 227 52 120 145 151 60 0 196 52 132 123 49 38 112 187 22 205 52 60 154 253 3 3 142 51 217 250 244 49 80 251 9 153 168 190 41 29 174 206 125 204 185 193 15 205 102 249 84 246 81 49 60 81 130 236 207 34 79 194 91 174 148 179 80 54 242 53 61 35 15 33 44 141 203 57 86 133 124 2 251 73 182 140 0 143 190 233 224 176 96 90 211 221 160 248 72 140 74 35 237 117 86 243 154 233 200 81 19 172 186 2 1 34 181 131 115 83 72 128 128 129 98 18 132 121 31 41 182 1 167 154 40 188 255 74 218 67 131 2 17 51 96 48 225 190 229 99 25 25 115 66 75 204 137 157 20 242 230 195 11 212 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) :fitness-function nil :from-file t)))) (setf (om-darwin::population om-darwin::ga) (list (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 189 239 98 49 5 117 104 216 110 99 243 196 204 48 155 35 141 19 17 123 14 125 175 229 171 97 125 225 184 237 218 127 152 83 244 175 238 130 134 168 44 134 189 89 75 56 130 193 85 101 166 195 195 241 62 135 183 39 182 99 236 94 24 145 121 129 39 123 213 167 80 104 120 33 209 66 162 37 52 24 166 151 29 217 58 153 41 206 119 216 105 89 47 248 150 254 224 44 141 220 169 245 109 11 63 224 156 43 215 176 135 160 142 206 69 143 18 39 121 99 85 10 177 80 69 215 131 96 179 222 207 252 228 159 70 39 235 32 201 171 80 73 220 45 115 10 127 63 109 131 64 225 109 171 165 217 14 83 102 205 188 246 130 0 208 124 189 67 81 14)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 81 148 252 165 56 119 94 247 32 231 216 200 130 156 197 128 230 113 196 228 46 113 217 252 230 69 129 101 236 106 118 95 84 91 10 101 11 114 39 193 129 25 76 253 47 207 128 232 21 255 36 47 187 134 178 234 87 175 157 130 208 30 225 104 243 20 129 205 150 0 206 136 195 10 95 44 95 176 210 158 48 4 112 58 148 66 190 78 30 230 216 8 39 143 9 222 86 94 93 48 48 186 181 47 40 159 247 26 244 170 167 205 131 92 218 69 114 113 209 108 223 42 200 48 138 61 244 50 0 37 123 164 124 69 255 135 204 20 219 180 49 31 140 197 4 208 89 27 70 210 138 94 130 171 214 56 250 46 175 109 11 247 170 219 200 91 72 96 172 160)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 141 183 163 248 61 174 115 8 196 55 34 227 109 48 114 80 89 15 90 207 46 194 123 67 234 196 132 2 178 69 97 223 127 246 109 205 180 29 38 147 9 138 128 157 207 114 237 197 142 225 76 20 243 1 110 56 155 101 10 98 146 46 87 66 172 99 10 1 230 61 32 157 59 29 66 181 126 177 34 97 235 14 20 217 145 56 193 164 210 217 181 5 101 179 168 197 157 223 132 242 160 231 239 204 92 42 204 148 166 249 63 55 229 23 151 149 10 234 115 2 235 133 216 223 7 140 7 121 110 129 20 89 27 160 34 243 45 114 40 66 173 25 212 196 58 221 68 186 52 206 24 79 5 6 249 4 145 238 79 89 62 188 234 168 88 13 169 83 118 219)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 198 32 67 26 60 140 222 218 13 29 247 202 199 193 210 67 197 250 49 158 130 232 3 8 207 92 240 0 198 189 30 199 83 199 226 22 200 216 60 201 139 31 239 219 40 193 242 119 182 253 171 27 51 251 143 117 10 254 82 84 184 22 214 170 24 187 164 233 147 55 60 176 46 75 157 27 0 153 68 104 240 84 26 117 54 159 253 223 157 186 177 109 117 7 59 79 60 122 67 193 141 189 30 239 1 55 168 51 48 114 235 157 14 5 37 141 223 229 105 247 30 44 86 196 251 206 31 78 212 197 51 201 184 83 143 100 33 156 195 126 228 72 150 218 223 195 57 2 11 112 138 78 8 246 86 117 113 126 103 88 68 248 174 88 51 51 234 230 234 198)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 225 242 217 129 110 54 76 28 112 65 159 181 46 9 43 121 16 136 196 78 7 134 139 97 214 35 23 72 23 17 85 116 78 15 63 126 19 33 209 135 251 68 181 97 204 131 17 48 86 76 50 253 253 29 87 64 232 192 236 73 111 237 249 62 227 106 145 215 176 138 66 224 18 130 6 133 170 184 24 13 217 54 96 128 68 111 140 242 171 15 234 209 91 201 219 86 55 105 81 45 203 74 101 39 106 95 127 97 198 206 220 107 253 53 64 74 196 25 57 163 250 42 223 85 140 69 57 236 101 4 13 126 232 233 70 53 151 194 142 51 167 45 78 11 20 176 178 87 32 143 37 206 87 60 73 50 78 109 159 246 65 241 251 117 11 187 8 75 242 252)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 59 200 202 200 129 27 160 190 149 168 141 91 71 254 121 93 244 3 61 226 182 138 80 226 247 24 211 151 205 84 21 181 55 178 43 158 58 196 145 68 114 222 218 249 123 75 89 2 213 221 226 193 80 50 242 1 126 245 33 85 102 79 217 26 107 55 66 123 198 182 248 216 28 198 119 220 130 212 250 150 202 186 36 186 100 144 83 31 98 226 181 140 71 62 74 250 160 114 89 207 45 252 109 167 158 229 12 152 132 86 157 89 3 12 242 152 25 102 101 215 180 212 149 229 246 71 195 100 94 232 26 90 80 53 35 191 48 174 254 169 185 132 59 150 139 35 46 52 145 191 6 208 65 235 137 76 162 204 93 23 186 150 47 15 35 148 155 153 21)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 200 77 249 36 221 134 23 130 110 66 233 145 193 117 162 178 137 95 88 183 90 203 197 198 248 178 170 24 28 164 165 158 118 124 80 199 69 229 157 18 173 252 131 183 226 127 92 39 195 207 172 185 61 188 102 197 119 118 166 203 252 31 130 241 231 20 122 87 33 16 178 36 39 101 21 8 129 46 189 43 32 192 233 160 198 34 105 101 102 67 158 8 173 196 209 37 232 204 236 0 140 230 238 239 108 164 223 130 138 46 220 220 233 107 4 206 72 196 12 254 72 69 35 156 152 20 24 209 185 231 3 184 237 7 254 169 86 166 148 108 45 113 100 139 227 45 75 94 229 61 187 135 213 5 68 211 247 237 23 250 133 22 246 91 79 64 118 80 49 25)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 168 169 75 187 207 26 42 224 107 11 7 234 179 110 27 174 72 86 62 33 166 217 175 20 216 190 31 92 255 87 43 203 242 70 167 58 67 34 242 29 77 45 58 162 94 199 10 53 13 97 212 79 138 70 115 155 145 98 11 95 78 212 138 90 54 36 85 204 228 184 127 101 161 245 247 101 245 135 117 79 129 103 94 167 1 85 76 124 203 145 17 6 172 156 180 206 49 153 195 188 145 170 92 228 59 175 51 71 200 233 13 47 156 112 86 128 38 14 4 85 240 145 160 75 41 195 133 50 168 152 62 81 94 94 176 3 208 253 131 125 90 130 34 129 162 168 247 197 119 83 99 65 91 252 228 8 188 148 64 129 50 202 71 67 143 81 29 18 254 121)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 237 133 89 186 51 236 156 47 49 127 27 114 41 202 8 152 163 239 3 34 228 253 252 108 225 219 222 180 144 70 40 248 246 110 213 108 39 4 124 171 171 153 98 101 49 200 179 38 108 49 209 164 70 163 231 125 201 145 159 21 162 173 222 42 180 212 142 251 210 77 201 91 52 245 136 69 159 83 94 166 111 85 165 234 213 216 34 36 171 252 36 214 203 118 8 207 87 237 118 105 6 132 20 160 40 73 48 120 191 161 239 60 157 57 122 120 84 50 131 43 125 113 59 85 79 113 214 29 211 117 25 18 1 151 173 242 224 100 79 46 86 169 216 123 151 19 32 197 121 165 116 192 237 132 26 135 171 77 26 43 150 201 237 247 152 20 24 210 141 154)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0) (list 0 (let ((om-darwin::spec nil)) (setf (om-darwin::raw-genotype om-darwin::spec) (list 27 173 42 159 63 94 191 111 214 28 37 55 254 13 228 1 248 47 193 10 178 243 233 73 3 211 119 186 247 210 145 155 151 204 171 192 250 104 29 127 220 16 38 223 139 178 56 252 109 141 212 201 97 43 182 68 246 76 1 90 39 142 87 250 55 95 223 152 152 57 246 158 80 224 123 84 22 1 73 203 197 189 81 251 31 242 145 3 10 159 146 0 88 119 122 98 6 92 223 202 57 71 58 84 145 26 92 76 170 215 251 88 162 236 39 230 206 116 153 101 59 121 98 114 61 216 164 115 151 178 98 171 34 200 31 95 63 34 7 194 7 158 113 220 11 98 204 182 82 8 123 243 147 46 228 105 2 115 242 91 128 83 110 222 155 203 126 249 139 178)) (om-darwin::update om-darwin::spec) om-darwin::spec) 0))) (setf (om-darwin::generation om-darwin::ga) 0) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 -1)) -1)) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 -3)) -1)) ((4 4) ((1 (-2 1 1)) (1 (1 1 1 1)) (1 (1 1 1 -1)) -1)) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 -3)) (1 (-3 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) (-2 (1 (-2 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 -3)) -1 (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 -1)) -1 (1 (-2 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 -3)) -1 (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) (-1 (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 -3))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1 -3)) -1 (1 (-2 1 -1)) -1)) ((4 4) ((1 (1 -3)) -1 (1 (1 -3)) -1)) ((4 4) ((1 (-2 1 -1)) -1 (1 (-2 1 -1)) -1)) ((4 4) ((1 (1 -3)) -1 (1 (1 -3)) (1 (-3 1)))) ((4 4) (-1 (1 (1 -3)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5600 6200 6900)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5400 6000 6700)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5200 5800 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4800 5200 5700)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5300 5600 6300)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5200 5600 6300)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5300 5900 6600)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5200 5500 6000)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5000 5400 5800)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4900 5400 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 198 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (1 0 3 0 nil 0))) nil 6.0901))
