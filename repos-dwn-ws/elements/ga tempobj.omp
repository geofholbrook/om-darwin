; OM File Header - Saved 2015/05/11 21:49:29
; (6.0901 :patc (om-make-point 10 60) (om-make-point 1101 74) (om-make-point 1090 852) "" 183 0 "2015/05/07 12:21:41" "2015/05/11 21:49:29")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"musical units.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "ga tempobj" (quote ((let ((box (om-load-boxcall (quote lispfun) "RESULT" (quote om-darwin::result) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 91 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 287 34) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP" (quote om-darwin::stop) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 233 760) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START" (quote om-darwin::start) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 154 717) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 456 94) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 898 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempboxout "tempout" (om-make-point 385 742) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxselfin "self" (om-make-point 839 63) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 524 637) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 727 109) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 656 59) (om-make-point 96 30) (list (quote :set) 0 2 5 6) "(:set 0 2 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.5))) (om-make-point 579 176) (om-make-point 163 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 39 315) (om-make-point 985 229) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 47 171 251 245 17 237 223 171 16 42 145 188 137 44 95 224 176 176 57 157 25 164 33 157 121 165 149 91 240 217 40 255 67 2 16 187 138 161 99 136 9 150 84 11 97 186 68 251 184 96 180 206 216 55 48 240 253 7 204 119 128 16 152 51 41 16 150 143 25 38 171 106 153 83 231 124 90 207 105 162 156 41 105 91 58)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.5061394 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 153 118 43 34 81 25 188 137 51 115 49 167 244 223 22 21 100 18 125 146 242 62 170 6 1 180 188 205 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 112 21 174 184 27 216 174 161 150 141 164 154 129 210 127 220 123 19 166 178 48 107 184 174 191 176 191 209 150 125 182 203 38)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.5254885 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 107 223 56 12 161 58 81 152 239 230 193 133 151 3 182 51 18 125 146 32 12 170 6 1 180 188 205 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 112 21 170 188 27 216 174 161 150 141 164 154 129 210 127 220 123 19 166 178 48 107 184 142 149 77 229 11 21 63 248 194 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.52774984 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 225 36 148 160 2 20 236 72 238 90 89 84 127 21 186 106 123 203 68 72 148 54 119 3 173 111 125 141 63 55 114 9 135 91 239 58 219 211 191 86 198 68 119 146 53 95 193 36 134 136 57 1 46 67 150 211 132 191 114 252 67 79 96 86 221 27 101 92 129 217 151 30 125 12 5 206 85 112 236 245 10 179 59 122)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.53537786 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 225 36 148 160 2 20 236 72 238 90 89 84 127 21 203 89 123 203 68 72 148 54 119 3 173 111 125 141 63 55 114 9 135 91 239 58 219 211 191 86 198 68 119 146 53 95 193 36 134 136 57 1 46 67 150 211 132 191 114 252 67 79 96 86 221 27 101 92 129 217 151 30 125 12 5 206 85 112 236 245 10 179 59 122)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.5403288 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 107 223 56 12 161 55 84 152 239 230 193 133 151 3 182 51 18 125 146 32 12 170 6 1 180 188 205 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 112 21 170 188 27 216 174 161 150 141 164 154 129 210 127 220 123 19 166 178 48 107 184 142 149 77 229 11 21 63 248 194 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.5425144 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 225 159 148 160 2 20 236 72 238 90 89 84 127 21 203 89 123 177 153 203 78 236 12 150 64 205 198 237 166 46 241 138 85 103 131 207 109 187 233 37 94 74 254 67 144 209 49 102 127 204 193 62 167 63 79 199 72 119 9 28 203 224 255 247 192 75 103 178 179 167 227 48 79 164 142 149 77 229 11 21 63 248 194 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.5527242 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 15 225 159 148 160 2 20 236 72 238 90 89 84 127 21 203 89 123 203 68 26 194 54 119 3 173 111 125 141 63 55 114 9 135 91 239 58 219 211 191 86 198 68 119 146 53 95 193 36 134 136 57 1 46 67 150 211 132 191 114 252 67 79 96 86 221 27 101 92 129 217 151 30 125 12 5 206 85 112 236 245 10 179 59 122)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.5552063 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 107 223 56 12 161 55 84 152 239 230 193 133 151 3 182 51 18 125 146 32 12 170 6 1 180 189 204 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 112 21 170 188 27 216 174 161 150 141 164 154 129 210 127 220 123 19 166 178 48 107 184 142 149 77 229 11 21 63 248 194 245)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.55619944 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 107 223 56 12 161 55 84 152 239 230 193 133 151 3 182 51 18 125 146 32 12 170 6 1 180 188 205 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 112 21 170 188 27 216 174 161 150 141 164 154 129 210 127 220 123 19 166 178 48 107 184 142 149 77 229 11 21 63 248 194 241)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.5578355 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 193 107 223 56 12 161 55 84 152 239 230 193 133 151 3 182 51 18 125 146 32 12 6 170 1 180 188 205 21 51 153 231 81 60 160 162 254 95 55 12 169 155 15 250 67 120 91 115 160 177 215 200 182 115 188 209 202 236 208 177 245 32 250 176 186 239 52 171 75 217 115 170 171 175 49 245 164 195 155 38 178 238 236 152 121)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1))) (setf (om-darwin::generation om-darwin::ga) 2) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1 1)) (1 (1 1 -2)) -1 (1 (-3 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) -1)) ((4 4) ((1 (-3 1)) (1 (1 1 1 1)) (1 (1 -3)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (-1 (1 (-1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) (-2 (1 (-3 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -3)) (1 (-1 1 -2)) -1 (1 (-3 1)))) ((4 4) (-2 (1 (-3 1)) -1)) ((4 4) ((1 (-3 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5400 6000 6700)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5100 5500 6000)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5000 5700 6000)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5000 5400 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5500 5900 6500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 369 323) (om-make-point 716 584) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil) (om-load-inputkeyword (quote input-keyword) "" "tempo" (quote :tempo) nil nil))) (om-make-point 387 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "musical units" (quote ("elements" "musical units")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 250 64) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (12 0 2 0 nil 0) (12 0 3 0 nil 0) (7 6 5 0 nil 0) (12 0 6 0 nil 0) (12 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 11 2 nil 0) (9 0 11 3 nil 0) (13 0 12 1 nil 0) (11 0 12 2 nil 0) (14 0 13 0 nil 0) (4 0 13 1 nil 0) (1 0 14 0 nil 0))) nil 6.0901))
