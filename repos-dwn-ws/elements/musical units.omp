; OM File Header - Saved 2015/05/07 12:18:29
; (6.0901 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2015/05/07 12:18:29")
; End File Header
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "musical units" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 170 414) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "append-arrangements" (om-load-patch-abs1 "append-arrangements" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 221 30) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 162 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 105 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 224 269) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 65 34) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND-ARRANGEMENTS" (quote om-darwin::append-arrangements) (quote ((om-load-inputfun (quote input-funbox) "ARR1" "ARR1" nil) (om-load-inputfun (quote input-funbox) "ARR2" "ARR2" nil) (om-load-inputkeyword (quote input-keyword) "" "overlap" (quote :overlap) nil nil) (om-load-inputkeyword (quote input-keyword) "" "ceiling" (quote :ceiling) nil nil))) (om-make-point 50 127) (om-make-point 232 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 5 2 nil 0) (0 0 5 3 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 36 458) nil nil "l" "append-arrangements"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 371 782) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 92) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 50 50) (om-make-point 78 101) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 4200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0901 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 590 297) (om-make-point 300 22) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 247 67) (om-make-point 55 30) (list 4 12) "(4 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 348 73) (om-make-point 48 30) (list 1 2) "(1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 409 138) (om-make-point 48 30) (list 3 7) "(3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "create unit" (om-load-patch-abs1 "create unit" (quote ((let ((box (om-load-boxin "harmonic interval range" 4 (om-make-point 711 12) "" "harmonic interval range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 635 351) (om-make-point 53 30) (list 1 -1) "(1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-GENE" (quote nth-gene) (quote ((om-load-inputfun (quote input-funbox) "" "LIS" nil))) (om-make-point 622 450) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 352 197) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-range" 3 (om-make-point 584 45) "" "interval-range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 170 762) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "length-range" 2 (om-make-point 443 22) "" "length-range" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "cardinality" 1 (om-make-point 132 35) "" "cardinality" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "bottom note" 0 (om-make-point 24 42) "" "bottom note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 334 462) (om-make-point 93 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-EVEN-MELODY" (quote om-darwin::make-even-melody) (quote ((om-load-inputfun (quote input-funbox) "PROPS" "PROPS" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil))) (om-make-point 282 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 72056/363 586868/1331) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 273 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-GENE" (quote om-gene) (quote ((om-load-inputfun (quote input-funbox) "minimum value" "MIN" 4) (om-load-inputfun (quote input-funbox) "maximum value" "MAX" 12))) (om-make-point 497 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "makechord" (om-load-lisp-abspatch "makechord" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"makechord\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (bottom-note card ai-range)  ;adjacent interval$  (cdr (dx->x bottom-note$              (loop repeat card $                    collect (* 100 (apply #'om-gene ai-range))))))") (quote ((om-load-inputfun (quote input-funbox) "" "BOTTOM-NOTE" nil) (om-load-inputfun (quote input-funbox) "" "CARD" nil) (om-load-inputfun (quote input-funbox) "" "AI-RANGE" nil))) (om-make-point 53 240) nil (list (list 4200 4600 5500 6200)) "&" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-CHORD" (quote om-darwin::make-chord) (quote ((om-load-inputfun (quote input-funbox) "PITCHES" "PITCHES" nil) (om-load-inputkeyword (quote input-keyword) "" "channel" (quote :channel) nil nil) (om-load-inputkeyword (quote input-keyword) "" "len" (quote :len) nil nil))) (om-make-point 79 524) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 118 1745545/3993) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "makemelody" (om-load-lisp-abspatch "makemelody" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"makechord\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (start-note len interval-range flip?)$  (dx->x start-note$         (loop repeat (1- len) $               collect (om* (* 100 (apply #'om-gene interval-range))$                            flip?))))") (quote ((om-load-inputfun (quote input-funbox) "" "START-NOTE" nil) (om-load-inputfun (quote input-funbox) "" "LEN" nil) (om-load-inputfun (quote input-funbox) "" "INTERVAL-RANGE" nil) (om-load-inputfun (quote input-funbox) "" "FLIP?" nil))) (om-make-point 305 368) nil (list (list 6200 6200 6800 7300 7500 7700 8200 8900 9000 9200 9300 10000)) nil "makemelody"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 174 702) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (6 0 3 0 nil 0) (18 0 5 0 nil 0) (17 0 9 0 nil 0) (13 0 9 1 nil 0) (9 0 10 0 nil 0) (11 0 10 1 nil 0) (14 0 12 0 nil 0) (3 0 13 0 nil 0) (3 1 13 1 nil 0) (8 0 14 0 nil 0) (7 0 14 1 nil 0) (0 0 14 2 nil 1) (14 0 15 0 nil 0) (16 0 15 1 nil 0) (11 0 15 2 nil 0) (12 0 17 0 nil 0) (3 1 17 1 nil 0) (4 0 17 2 nil 0) (2 0 17 3 nil 0) (15 0 18 0 nil 0) (10 0 18 1 nil 0))) 6.0901 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "bottom note" nil) (om-load-inputfun (quote input-funbox) "" "cardinality" nil) (om-load-inputfun (quote input-funbox) "" "length-range" nil) (om-load-inputfun (quote input-funbox) "" "interval-range" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 116 217) nil (list (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 1 5700) (list 1/16 1/16 1 5900) (list 1/8 1/16 1 6100) (list 3/16 1/16 1 6300) (list 1/4 1/16 1 6500) (list 5/16 1/16 1 6600) (list 3/8 1/16 1 6700) (list 7/16 1/16 1 6800) (list 1/2 1/16 1 6900) (list 9/16 1/16 1 7000) (list 5/8 1/16 1 7100) (list 11/16 1/16 1 7200))) nil "create unit"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alternating process" (om-load-lisp-abspatch "alternating process" 6.0901 ";;; Edit a valid LAMBDA EXPRESSION for \"alternating process\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arrs)$  (loop for sub on arrs$        for k from 0$        for this = (car sub)$        for next = (cadr sub)$$        collect (let ((appended $                       (if next$                           (append this$                                   (list$                                    (let ((double (find-if #'(lambda (reg)$                                                              (= (d::region-chan reg) 1))$                                                          next)))$                                     (cons (+ (car double) (d::arr-end this))$                                           (cdr double)))))$                         this)))$                  (print appended)$                  $                      (if (oddp k)$                      ;change all channel 1 to channel 2$                          (loop for reg in appended$                                collect$                                (if (= (d::region-chan reg) 1)$                                    (d::set-channel reg 2)$                                  reg))$                        appended))))$") (quote ((om-load-inputfun (quote input-funbox) "" "ARRS" nil))) (om-make-point 286 411) nil (list (list (list (list 0 1/16 3 4700) (list 0 1/16 3 5200) (list 0 1/16 3 5800) (list 0 1/16 3 6200) (list 0 1/16 1 6200) (list 1/16 1/16 1 6300) (list 1/8 1/16 1 6400) (list 3/16 1/16 1 6500) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6900) (list 3/8 1/16 1 7100) (list 7/16 1/16 1 7200) (list 1/2 1/16 1 7400) (list 9/16 1/16 1 7500) (list 5/8 1/16 1 7600) (list 11/16 1/16 1 5700)) (list (list 0 1/16 3 4500) (list 0 1/16 3 5000) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 2 5700) (list 1/16 1/16 2 5500) (list 1/8 1/16 2 5400) (list 3/16 1/16 2 5300) (list 1/4 1/16 2 5100) (list 5/16 1/16 2 5000) (list 3/8 1/16 2 6000)) (list (list 0 1/16 3 4800) (list 0 1/16 3 5200) (list 0 1/16 3 5700) (list 0 1/16 3 6000) (list 0 1/16 1 6000) (list 1/16 1/16 1 6200) (list 1/8 1/16 1 6300) (list 3/16 1/16 1 6500) (list 1/4 1/16 1 6700) (list 5/16 1/16 1 6800) (list 3/8 1/16 1 7000) (list 7/16 1/16 1 7100) (list 1/2 1/16 1 7200) (list 9/16 1/16 1 7400) (list 5/8 1/16 1 7500) (list 11/16 1/16 1 6000)) (list (list 0 1/16 3 4600) (list 0 1/16 3 4900) (list 0 1/16 3 5500) (list 0 1/16 3 6000) (list 0 1/16 2 6000) (list 1/16 1/16 2 6100) (list 1/8 1/16 2 6200) (list 3/16 1/16 2 6400) (list 1/4 1/16 2 6500) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6800) (list 1/2 1/16 2 7000) (list 9/16 1/16 2 7100) (list 5/8 1/16 2 7300) (list 11/16 1/16 2 7500) (list 3/4 1/16 2 6100)) (list (list 0 1/16 3 4500) (list 0 1/16 3 5000) (list 0 1/16 3 5500) (list 0 1/16 3 6100) (list 0 1/16 1 6100) (list 1/16 1/16 1 6000) (list 1/8 1/16 1 5900) (list 3/16 1/16 1 5800) (list 1/4 1/16 1 5700) (list 5/16 1/16 1 5500) (list 3/8 1/16 1 5400) (list 7/16 1/16 1 5200) (list 1/2 1/16 1 5100) (list 9/16 1/16 1 5000) (list 5/8 1/16 1 4800) (list 11/16 1/16 1 4600) (list 3/4 1/16 1 5800)) (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5400) (list 0 1/16 3 5800) (list 0 1/16 2 5800) (list 1/16 1/16 2 6000) (list 1/8 1/16 2 6100) (list 3/16 1/16 2 6200) (list 1/4 1/16 2 6400) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6500)) (list (list 0 1/16 3 4800) (list 0 1/16 3 5500) (list 0 1/16 3 6200) (list 0 1/16 3 6500) (list 0 1/16 1 6500) (list 1/16 1/16 1 6700) (list 1/8 1/16 1 6900) (list 3/16 1/16 1 7100) (list 1/4 1/16 1 7300) (list 5/16 1/16 1 7400) (list 3/8 1/16 1 7600) (list 7/16 1/16 1 7800) (list 1/2 1/16 1 7900) (list 9/16 1/16 1 8000) (list 5/8 1/16 1 8200) (list 11/16 1/16 1 5900)) (list (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5600) (list 0 1/16 3 5900) (list 0 1/16 2 5900) (list 1/16 1/16 2 5700) (list 1/8 1/16 2 5600) (list 3/16 1/16 2 5400) (list 1/4 1/16 2 5300) (list 5/16 1/16 2 5100) (list 3/8 1/16 2 5000) (list 7/16 1/16 2 4800) (list 1/2 1/16 2 4700) (list 9/16 1/16 2 4500) (list 5/8 1/16 2 4400) (list 11/16 1/16 2 4300) (list 3/4 1/16 2 5800)) (list (list 0 1/16 3 4600) (list 0 1/16 3 5000) (list 0 1/16 3 5400) (list 0 1/16 3 5800) (list 0 1/16 1 5800) (list 1/16 1/16 1 5600) (list 1/8 1/16 1 5500) (list 3/16 1/16 1 5300) (list 1/4 1/16 1 5100) (list 5/16 1/16 1 5000) (list 3/8 1/16 1 5700)) (list (list 0 1/16 3 4500) (list 0 1/16 3 4900) (list 0 1/16 3 5300) (list 0 1/16 3 5700) (list 0 1/16 2 5700) (list 1/16 1/16 2 5900) (list 1/8 1/16 2 6100) (list 3/16 1/16 2 6300) (list 1/4 1/16 2 6500) (list 5/16 1/16 2 6600) (list 3/8 1/16 2 6700) (list 7/16 1/16 2 6800) (list 1/2 1/16 2 6900) (list 9/16 1/16 2 7000) (list 5/8 1/16 2 7100) (list 11/16 1/16 2 7200)))) nil "alternating process"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 218 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 273 237) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 171 628) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 106 399) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 1 2 nil 0) (0 0 1 3 nil 0) (12 0 2 0 nil 0) (4 1 8 0 nil 0) (3 0 8 1 nil 0) (5 0 8 2 nil 0) (6 0 8 3 nil 0) (7 0 8 4 nil 0) (10 0 9 0 nil 0) (8 0 10 0 nil 0) (11 0 10 1 nil 0) (1 0 12 0 nil 0) (9 0 12 1 nil 0))) nil 6.0901))