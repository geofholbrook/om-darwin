; OM File Header - Saved 2015/05/07 15:55:43
; (6.0901 :patc (om-make-point 10 60) (om-make-point 468 212) (om-make-point 1555 1082) "" 183 0 "2015/05/07 12:21:41" "2015/05/07 15:55:43")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"musical units.omp\""))
(in-package :om)(load-lib-for (quote ("om-darwin")))(setf *om-current-persistent* (om-load-patch1 "saving problem" (quote ((let ((box (om-load-boxcall (quote lispfun) "SET-FITNESS-FUNCTION" (quote om-darwin::set-fitness-function) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil) (om-load-inputfun (quote input-funbox) "FITNESS-FUNCTION" "FITNESS-FUNCTION" nil))) (om-make-point 581 675) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 767 129) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 696 79) (om-make-point 96 30) (list (quote :set) 0 2 5 6) "(:set 0 2 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CRITERION" (quote criterion) (quote ((om-load-inputfun (quote input-funbox) "" "EVALUATOR" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "SUBJECT" (quote :pitch-class) (list (list "regions" (quote :regions)) (list "adjacent" (quote :adjacent)) (list "nthcdr" (quote :nthcdr)) (list "pitch" (quote :pitch)) (list "pitch-class" (quote :pitch-class)) (list "melodic" (quote :melodic)) (list "signed-melodic" (quote :signed-melodic)))) (om-load-inputfun (quote input-funbox) "" "TEST-VALUE" nil) (om-load-inputfun (quote input-funbox) "" "RATE" 0.5))) (om-make-point 619 196) (om-make-point 163 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "GA-ENGINE" (quote om-darwin::ga-engine) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "model" nil) (om-load-inputfun (quote input-funbox) "" "fitness-function" nil))) (om-make-point 95 353) (om-make-point 985 229) (let ((om-darwin::ga (mki (quote om-darwin::ga-engine)))) (setf (om-darwin::model om-darwin::ga) (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 226 175 100 246 245 163 160 111 141 192 118 82 40 39 117 110 144 37 177 151 241 172 77 130 48 11 113 114 105 130 30 19 98 184 4 133 95 202 12 123 53 119 191 245 223 144 203 143 252 191 65 146 221 141 247 19 30 250 122 4 108 123 8 247 239 19 29 8 5 57 33 35 114 216 131 137 218 123 69 43 107 238 109 240 155 29 89 167 23 162 103 209 69 156 90 233 151 120 106 106 70 212 41 44 47 255 205 40 20 110 199 19 28 107 61 192 166 81 216 172 149 114 113 129 247 76 158 7 130 88 2 143 179 242 128 12 218 45 91 195 172 129 197 55 219 66 198 149 168 135 160 252 194 110 215 137 27 172 59 217 252 133 215 26 72 216 85 70 129 136)) (om-darwin::update om-darwin::spec) om-darwin::spec)) (setf (om-darwin::population om-darwin::ga) (list (list 0.0 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 9 170 175 88 106 69 160 175 243 216 80 95 105 104 128 179 102 113 143 28 195 25 201 180 235 11 194 105 188 137 137 153 193 255 224 207 50 181 9 207 10 126 171 50 228 131 91 89 210 212 209 200 78 141 142 85 173 189 62 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 206 64 148 28 189 141 133 81 200 128 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 45 86 90 30 64 170 181 77 226 30 169 128 211 150 118 233 175 67 247 154 106 124 86 122 129 211 147 158 180 112 81 202 232 5 219 38 150 61 161 31 221 221 216 187 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 30) (list 0.0058570346 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 90 88 175 88 106 69 90 8 11 216 80 110 240 104 132 179 102 113 143 28 195 22 200 178 237 111 97 101 194 137 128 162 188 255 24 151 50 181 9 207 10 126 176 50 228 131 91 89 210 78 209 200 212 141 62 85 173 189 142 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 207 64 148 28 189 141 133 81 200 155 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 130 9 118 85 133 45 84 90 30 64 165 186 77 227 30 169 128 211 150 118 233 175 67 255 146 106 124 86 117 129 211 147 158 180 112 81 202 232 5 219 34 152 63 4 188 192 221 255 185 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 2) (list 0.005917844 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 90 88 175 88 106 69 90 8 11 216 80 240 110 104 132 179 102 113 143 28 195 22 200 178 237 111 97 101 194 137 128 162 188 255 224 207 50 181 9 207 10 24 22 50 228 131 91 89 210 78 209 200 212 141 62 85 173 189 142 243 0 49 37 36 39 125 153 204 220 39 63 89 63 234 143 215 100 106 142 187 249 231 117 231 207 64 148 28 189 141 133 81 200 155 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 130 9 85 118 133 45 84 90 30 64 170 181 77 227 30 169 128 211 150 118 233 175 67 255 146 106 124 86 117 129 211 147 158 180 112 81 202 232 5 219 34 152 63 4 188 192 221 255 182 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.0059798695 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 132 9 170 173 90 106 69 90 175 243 216 80 95 105 104 128 179 102 113 143 48 195 25 201 180 235 111 97 102 193 137 128 162 188 255 224 203 50 181 9 207 10 126 176 50 228 131 91 89 210 78 209 200 212 141 62 85 173 189 142 243 0 49 99 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 206 64 148 28 189 141 133 81 200 155 189 184 87 10 17 44 197 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 45 86 90 30 64 170 181 77 224 32 250 128 211 150 118 233 175 67 247 154 106 124 86 117 147 211 131 158 180 112 81 202 17 5 219 42 146 61 161 31 187 221 216 221 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 4) (list 0.0060431487 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 90 88 175 88 106 69 90 8 216 11 80 240 110 104 132 179 102 113 143 22 195 28 200 178 237 111 97 101 194 137 128 162 188 255 224 207 50 181 9 211 10 24 22 50 228 131 91 89 210 78 209 200 212 141 62 85 173 189 142 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 207 64 148 28 189 141 133 81 200 155 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 130 9 118 85 133 45 84 90 30 64 170 181 77 227 30 169 128 211 150 118 233 175 67 255 146 106 124 86 117 129 211 147 158 180 112 81 202 232 5 219 34 152 63 4 188 192 221 255 181 251 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.006107718 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 9 170 175 88 106 69 160 180 238 216 80 95 105 104 128 179 102 113 143 28 195 25 201 180 235 11 194 105 188 137 137 153 193 255 224 207 50 181 9 207 10 126 171 50 228 131 91 89 210 212 209 200 78 141 142 85 173 189 62 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 141 64 148 28 189 206 133 81 200 128 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 45 86 90 30 64 170 181 77 226 30 169 128 211 150 118 233 175 67 247 154 106 124 86 122 129 147 211 158 180 112 81 202 232 5 219 38 150 61 161 31 221 221 216 187 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 1) (list 0.006173618 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 147 74 128 9 170 175 88 106 69 182 175 243 216 80 95 105 192 40 179 102 113 138 33 195 25 201 11 235 180 197 102 193 137 162 132 188 255 224 207 50 181 9 207 10 126 176 50 228 131 91 89 210 78 209 200 212 141 62 85 173 22 51 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 206 64 148 28 189 141 133 81 200 155 184 189 87 10 195 44 17 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 47 84 90 30 64 170 181 77 226 34 169 128 211 150 118 233 175 67 247 154 106 124 86 115 131 211 147 158 180 112 81 202 232 5 219 38 150 61 161 31 187 221 216 221 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.006240889 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 9 170 175 88 106 69 160 180 238 216 80 95 105 104 128 179 102 113 143 28 195 25 201 180 235 90 194 105 188 137 137 153 193 255 224 207 50 181 9 207 10 126 171 50 228 131 91 89 210 212 209 200 78 141 142 85 173 189 62 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 206 64 148 28 189 141 133 81 200 128 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 45 86 90 30 64 170 181 77 226 30 169 128 150 211 118 233 175 67 247 154 106 124 86 122 129 211 147 158 180 112 81 202 232 5 219 38 150 61 161 31 221 221 216 187 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 11) (list 0.0063095726 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 9 170 175 88 90 69 110 171 100 216 80 240 110 104 206 179 102 113 143 28 195 22 200 174 220 126 97 102 193 137 128 162 94 93 224 207 54 177 9 207 14 84 175 50 228 131 91 89 210 74 212 209 218 204 62 113 172 190 142 243 0 49 117 36 39 153 36 206 220 125 125 87 63 89 143 215 19 187 142 106 249 231 117 235 202 160 177 159 155 141 200 81 214 189 189 10 87 184 197 216 101 107 181 92 189 30 229 126 79 66 20 130 9 118 85 133 45 86 88 32 242 137 226 77 214 172 27 128 211 150 118 238 175 247 208 10 109 124 86 117 129 211 147 158 180 112 81 202 72 139 85 244 148 64 160 31 187 221 255 182 250 190)) (om-darwin::update om-darwin::spec) om-darwin::spec) 3) (list 0.0063797143 (let ((om-darwin::spec (if (find-class (quote om-darwin::om-specimen) nil) (make-instance (quote om-darwin::om-specimen) :om-finalizer nil :from-file t)))) (setf (om-darwin::raw-genotype om-darwin::spec) (list 21 167 68 141 81 127 94 128 9 170 175 88 106 69 160 175 243 216 80 95 105 104 128 179 102 113 143 28 195 25 201 180 235 11 194 105 188 137 137 153 193 255 224 207 50 181 9 207 10 126 171 50 228 131 91 89 210 212 209 200 78 141 142 85 173 189 62 243 0 49 37 36 39 125 153 204 220 39 125 172 63 89 143 215 100 106 142 187 249 231 117 231 206 64 148 28 189 141 133 81 200 128 189 184 87 10 197 44 17 189 180 93 107 70 189 127 66 79 20 126 13 118 85 133 45 86 90 30 64 170 181 77 226 30 169 128 211 150 118 233 175 67 247 154 106 124 86 122 129 211 147 158 180 112 81 202 232 5 219 35 150 61 161 31 221 221 216 187 250 253)) (om-darwin::update om-darwin::spec) om-darwin::spec) 5))) (setf (om-darwin::generation om-darwin::ga) 819) (setf (om-darwin::result om-darwin::ga) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 1 1 1)) (1 (1 -3)) (1 (-2 1 1)) (1 (1 1 1 -1)))) ((4 4) ((1 (-2 1 1)) (1 (1 1 1 1)) -1 (1 (-1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) -1 (1 (-1 1 1 1)) (1 (1 1 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) (-1 (1 (1 1 1 1)) (1 (1 1 1 -1)) (1 (-2 1 1)))) ((4 4) ((1 (1 1 1 -1)) (1 (-3 1)) (1 (1 1 1 1)) (1 (1 1 -2)))) ((4 4) ((1 (-3 1)) (1 (1 1 1 1)) (1 (1 1 -2)) (1 (-1 1 1 1)))) ((4 4) ((1 (1 1 -2)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1 -3)) (1 (1 -3)) (1 (-2 1 -1)) (1 (-2 1 -1)))) ((4 4) ((1 (-2 1 -1)) (1 (-3 1)) -1 (1 (-1 1 -2)))) ((4 4) ((1 (-3 1)) -1 (1 (-1 1 -2)) (1 (-1 1 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5100 5700 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4900 5200 5500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5200 5800 6300)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5100 5500 5900)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5200 5700 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5100 5600 6300)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 5600 6100 6400)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5200 5800 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4900 5500 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5100 5600 6100)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) om-darwin::ga) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MODEL" (quote om-darwin::model) (quote ((om-load-inputfun (quote input-funbox) "GA-ENGINE" "GA-ENGINE" nil))) (om-make-point 263 719) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OMNG-SAVE" (quote omng-save) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 214 811) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DEFINE-SPECIES" (quote define-species) (quote ((om-load-inputfun (quote input-funbox) "" "FUN" nil))) (om-make-point 257 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "musical units" (quote ("elements" "musical units")) (quote nil) (om-make-point 148 96) nil (list nil) "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0) (7 0 4 1 nil 0) (3 0 4 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0))) nil 6.0901))