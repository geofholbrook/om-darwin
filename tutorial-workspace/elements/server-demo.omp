; OM File Header - Saved 2024/06/08 17:44:35
; (7.03 :patc (om-make-point 550 60) (om-make-point 612 130) (om-make-point 1039 621) "" 183 0 "2024/02/17 12:57:38" "2024/06/08 17:44:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "server-demo" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 112 274) (om-make-point 803 30) "() => { const result = [1,1]; while (result.length < 10) { result.push(result[result.length - 2] + result[result.length - 1]) }; return result }" "\"() => { const result = [1,1]; while (result.length < 10) { result.push(result[result.length - 2] + result[result.length - 1]) }; return result }\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TEST-JS-FN" (quote om-darwin::test-js-fn) (quote ((om-load-inputfun (quote input-funbox) "JS-FUNCTION-STRING" "JS-FUNCTION-STRING" nil))) (om-make-point 507 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TEST-SERVER" (quote om-darwin::test-server) (quote nil) (om-make-point 332 149) (om-make-point 69 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STOP-SERVER" (quote om-darwin::stop-server) (quote nil) (om-make-point 255 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "START-SERVER" (quote om-darwin::start-server) (quote nil) (om-make-point 89 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 33 424) (om-make-point 420 30) "/Users/geof/Data/programming/om-libraries/om-darwin/src/index.lisp" "\"/Users/geof/Data/programming/om-libraries/om-darwin/src/index.lisp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LOAD" (quote load) (quote ((om-load-inputfun (quote input-funbox) "FILENAME" "FILENAME" nil))) (om-make-point 210 476) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 6 0 nil 0))) nil 7.03))
